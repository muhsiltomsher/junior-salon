var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __publicField = (obj, key2, value) => __defNormalProp(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value);
import { F as Fuse } from "../../../../../chunks/fuse-Gm-adH5Q.min.js";
import { g as getDefaultExportFromCjs, d as requirePostcss, p as postcss, f as requirePicocolors_browser, h as requireSafeBuffer$1, j as commonjsGlobal, k as requireStreamBrowserify, m as requireInherits_browser, n as requireDist$2, o as requireString_decoder, q as requireEvents, s as requireUtil$1, t as requireBrowser$b, __tla as __tla_0 } from "../../../../cssesc-DgwoVnGT.js";
import { b as __2$$2, x as xs, c as __2$$3, d as __1$$4, e as __0$$5, P as Pu, F as F$8, n as ne$5, _ as _$c, a as x$h, V as V$9, w as w$6, f as requireDist$1, p as postcssNested, g as requireUnesc, N as N$a, r as resolveConfig } from "../../../../resolve-config-D3CNF9bs.js";
import { B as Buffer, p as process$1 } from "../../../../../chunks/index-Dfa4cJMK.min.js";
import { d as decodeVFSContainer } from "../../../../vfs-D01OmQx9.js";
import { r as requireDist } from "../../../../../chunks/index-DmkUm1CH.min.js";
import { __tla as __tla_1 } from "../../../../../chunks/index-DLCNveCc.min.js";
import { b as bigSign, a as addPixelEquivalentsToValue } from "../../../../intellisense-CjMxI9UR.js";
import "../../../../../chunks/index-CMNY8QH5.min.js";
import { s as set } from "../../../../../chunks/set-CQpYICWN.min.js";
import "../../../../../chunks/preload-helper-BazNuh42.min.js";
import "../../../../../chunks/index-B8YHA8Ix.min.js";
import "../../../../../chunks/index-CvyxREt8.min.js";
import "../../../../../chunks/_toKey-C72hUfwS.min.js";
import "../../../../../chunks/isObject-8EXUDN8T.min.js";
Promise.all([
  (() => {
    try {
      return __tla_0;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_1;
    } catch {
    }
  })()
]).then(async () => {
  var D$9 = Object.create;
  var T$9 = Object.defineProperty;
  var H$7 = Object.getOwnPropertyDescriptor;
  var J$7 = Object.getOwnPropertyNames;
  var K$6 = Object.getPrototypeOf, L$9 = Object.prototype.hasOwnProperty;
  var N$9 = (t3, l3) => () => (l3 || t3((l3 = {
    exports: {}
  }).exports, l3), l3.exports);
  var Q$4 = (t3, l3, a3, b3) => {
    if (l3 && typeof l3 == "object" || typeof l3 == "function") for (let c3 of J$7(l3)) !L$9.call(t3, c3) && c3 !== a3 && T$9(t3, c3, {
      get: () => l3[c3],
      enumerable: !(b3 = H$7(l3, c3)) || b3.enumerable
    });
    return t3;
  };
  var V$8 = (t3, l3, a3) => (a3 = t3 != null ? D$9(K$6(t3)) : {}, Q$4(!t3 || !t3.__esModule ? T$9(a3, "default", {
    value: t3,
    enumerable: true
  }) : a3, t3));
  var U$7 = N$9((Z3, $3) => {
    Symbol = typeof Symbol > "u" ? [] : Symbol;
    function u3(t3, l3) {
      var a3 = false;
      if (t3 instanceof RegExp && (t3 = t3.source, a3 = true), t3) {
        this.regexGroupStructure = W3(t3), a3 ? this.source = t3 : this.source = this.regexGroupStructure[2][0];
        try {
          this.regex = new RegExp(this.regexGroupStructure[0][2], l3);
        } catch {
        }
      } else this.regex = new RegExp(t3, l3), this.source = this.regex.source;
      this.flags = this.regex.flags, this.global = this.regex.global, this.ignoreCase = this.regex.ignoreCase, this.multiline = this.regex.multiline, this.sticky = this.regex.sticky, this.unicode = this.regex.unicode, this.lastIndex = this.regex.lastIndex;
    }
    u3.prototype = Object.create(RegExp.prototype, {
      flags: {
        value: null,
        enumerable: true,
        configurable: true,
        writable: true
      },
      global: {
        value: null,
        enumerable: true,
        configurable: true,
        writable: true
      },
      ignoreCase: {
        value: null,
        enumerable: true,
        configurable: true,
        writable: true
      },
      multiline: {
        value: null,
        enumerable: true,
        configurable: true,
        writable: true
      },
      source: {
        value: null,
        enumerable: true,
        configurable: true,
        writable: true
      },
      sticky: {
        value: null,
        enumerable: true,
        configurable: true,
        writable: true
      },
      unicode: {
        value: null,
        enumerable: true,
        configurable: true,
        writable: true
      }
    });
    u3.prototype.constructor = u3;
    u3.prototype.toString = function() {
      return "/" + this.source + "/" + this.flags;
    };
    u3.prototype.test = function(t3) {
      return this.regex.test(t3);
    };
    u3.prototype[Symbol.search] = function(t3) {
      return this.regex[Symbol.search](t3);
    };
    u3.prototype[Symbol.split] = function(t3, l3) {
      return this.regex[Symbol.split](t3);
    };
    u3.prototype.exec = function(t3) {
      var l3 = [];
      l3.index = [];
      var a3 = this.regex.exec(t3);
      if (this.lastIndex = this.regex.lastIndex, !a3) return a3;
      l3[0] = a3[0], l3.index[0] = a3.index, l3.input = t3;
      var b3 = function(c3, m3) {
        for (var s3 = c3, e3 = 0; e3 < m3.length; e3++) {
          var h3 = m3[e3][0], f3 = m3[e3][1];
          f3 && (l3[f3] = a3[h3], typeof l3[f3] > "u" ? l3.index[f3] = void 0 : l3.index[f3] = s3), m3[e3][3] && b3(s3, m3[e3][3]), typeof a3[h3] < "u" && (s3 += a3[h3].length);
        }
      };
      return this.regexGroupStructure && this.regexGroupStructure[0][3] && b3(a3.index, this.regexGroupStructure[0][3]), l3;
    };
    u3.prototype[Symbol.match] = function(t3) {
      this.lastIndex = 0, this.regex.lastIndex = 0;
      var l3 = this.exec(t3);
      if (!l3) return null;
      for (var a3 = []; l3 && (a3.push(l3), l3[0].length === 0 && this.regex.lastIndex++, !!this.global); ) l3 = this.exec(t3);
      return this.lastIndex = 0, this.regex.lastIndex = 0, a3;
    };
    u3.prototype[Symbol.replace] = function(t3, l3) {
      if (this.lastIndex = 0, this.regex.lastIndex = 0, !t3) return t3;
      var a3 = this.exec(t3);
      if (!a3) return t3;
      l3 instanceof Array || (l3 = [
        l3
      ]);
      for (var b3 = "", c3 = 0, m3 = function(e3) {
        var h3 = "", f3 = "", v3 = l3[e3];
        if (typeof v3 == "string") for (var y3 = 0; y3 < v3.length; y3++) if (f3 = v3.charAt(y3), f3 === "$") if (y3++, f3 = v3.charAt(y3), f3 === "$") h3 += "$";
        else if (f3 === "&") h3 += a3[e3];
        else if (f3 === "`") h3 += t3.substring(0, a3.index[e3]);
        else if (f3 === "'") h3 += t3.substring(a3.index[e3] + a3[e3].length);
        else if (f3 >= "0" && f3 <= "9") {
          var R3 = f3;
          for (y3++, f3 = v3.charAt(y3); f3 >= "0" && f3 <= "9"; ) R3 += f3, y3++, f3 = v3.charAt(y3);
          y3--, a3[R3] ? h3 += a3[R3] : h3 += "$" + R3;
        } else h3 += "$" + f3;
        else h3 += f3;
        else if (v3 instanceof Function) {
          for (var i3 = [
            a3[e3]
          ], A3 = 0; A3 < a3.length; A3++) i3.push(a3[A3]);
          for (var P3 = 0; A3 < a3.index.length; P3++) i3.push(a3.index[P3]);
          i3.push(t3), h3 += v3.apply(this, i3);
        }
        return h3;
      }, s3 = function(e3) {
        for (var h3 = 0; h3 < e3.length; h3++) {
          var f3 = e3[h3][1];
          f3 ? l3[f3] || l3[f3] === "" ? (a3[f3] || a3[f3] === "") && (b3 += t3.substring(c3, a3.index[f3]) + m3(f3), c3 = a3.index[f3] + a3[f3].length) : e3[h3][3] && s3(e3[h3][3]) : s3(e3[h3][3]);
        }
      }; a3 && (l3[0] || l3[0] === "" ? (b3 += t3.substring(c3, a3.index[0]) + m3(0), c3 = a3.index[0] + a3[0].length) : this.regexGroupStructure && this.regexGroupStructure[0][3] && s3(this.regexGroupStructure[0][3]), a3[0].length === 0 && this.regex.lastIndex++, !!this.global); ) a3 = this.exec(t3);
      return this.lastIndex = 0, this.regex.lastIndex = 0, b3 + t3.substring(c3, t3.length);
    };
    function W3(t3) {
      if (!t3) return console.error('The "regex" is empty! Returning empty array!'), [];
      var l3 = [], a3 = [
        ""
      ], b3 = [];
      b3[0] = false;
      var c3 = w3(t3, [
        0,
        0,
        0
      ], true, l3, a3, b3);
      if (b3[0]) {
        var m3 = function(s3) {
          for (var e3 = "", h3, f3 = 0; f3 < s3[2].length; f3++) {
            if (h3 = s3[2].charAt(f3), e3 += h3, h3 === "\\") {
              if (f3 + 1 === s3[2].length) continue;
              f3++, h3 = s3[2].charAt(f3);
              for (var v3 = ""; h3 >= "0" && h3 <= "9"; ) v3 += h3, f3++, h3 = s3[2].charAt(f3);
              v3 ? (e3 += l3[v3], f3--) : e3 += h3;
              continue;
            }
            if (h3 === "[") {
              if (f3 + 1 === s3[2].length) continue;
              for (f3++, h3 = s3[2].charAt(f3); (h3 !== "]" || s3[2].charAt(f3 - 1) === "\\" && s3[2].charAt(f3 - 2) !== "\\") && f3 < s3[2].length; ) e3 += h3, f3++, h3 = s3[2].charAt(f3);
              e3 += h3;
              continue;
            }
          }
          s3[2] = e3;
          for (var y3 = 0; y3 < s3[3].length; y3++) m3(s3[3][y3]);
        };
        m3(c3);
      }
      return [
        c3,
        l3,
        a3
      ];
    }
    function w3(t3, l3, a3, b3, c3, m3) {
      var s3;
      a3 ? (s3 = [
        l3[1],
        l3[2],
        "",
        []
      ], b3[l3[2]] = l3[1]) : s3 = [
        void 0,
        void 0,
        "",
        []
      ];
      var e3 = "", h3;
      for (l3[0]; l3[0] < t3.length; l3[0]++) {
        if (h3 = t3.charAt(l3[0]), h3 === "\\") {
          if (l3[0] + 1 === t3.length) {
            e3 += "\\", c3[0] += "\\";
            continue;
          }
          l3[0]++, h3 = t3.charAt(l3[0]);
          for (var f3 = ""; h3 >= "0" && h3 <= "9"; ) f3 += h3, l3[0]++, h3 = t3.charAt(l3[0]);
          f3 ? (b3[f3] ? (e3 += "\\" + f3, m3[0] = true) : f3.indexOf("8") >= 0 || f3.indexOf("9") >= 0 ? e3 += f3 : e3 += "\\x" + ("0" + parseInt(f3, 8).toString(16)).slice(-2).toUpperCase(), c3[0] += "\\" + f3, l3[0]--) : (e3 += "\\" + h3, c3[0] += "\\" + h3);
          continue;
        }
        if (h3 === "[") {
          if (e3 += "[", c3[0] += "[", l3[0] + 1 === t3.length) continue;
          for (l3[0]++, h3 = t3.charAt(l3[0]); (h3 !== "]" || t3.charAt(l3[0] - 1) === "\\" && t3.charAt(l3[0] - 2) !== "\\") && l3[0] < t3.length; ) e3 += h3, c3[0] += h3, l3[0]++, h3 = t3.charAt(l3[0]);
          e3 += h3, c3[0] += h3;
          continue;
        }
        if (h3 === "|") {
          s3[2] += e3 + "|", e3 = "", c3[0] += "|";
          continue;
        }
        if (h3 === ")") return s3[2] += e3 + ")", c3[0] += ")", s3;
        if (h3 === "(") {
          e3 && (l3[1]++, e3 = "(" + e3 + ")", s3[3].push([
            l3[1],
            void 0,
            e3,
            []
          ])), l3[0]++;
          var v3, y3 = l3[1] + 1;
          if (a3 = true, t3.charAt(l3[0]) === "?" && l3[0] + 1 < t3.length && (t3.charAt(l3[0] + 1) === "=" || t3.charAt(l3[0] + 1) === "!" || t3.charAt(l3[0] + 1) === ":")) {
            l3[0]++;
            var R3 = t3.charAt(l3[0]);
            l3[0]++, R3 === ":" && (a3 = false), c3[0] += "(?" + R3, v3 = w3(t3, l3, false, b3, c3, m3), v3[2] = "(?" + R3 + v3[2];
          } else l3[1]++, l3[2]++, c3[0] += "(", v3 = w3(t3, l3, true, b3, c3, m3), v3[2] = "(" + v3[2];
          var i3 = l3[0], A3 = "";
          if (l3[0] + 1 < t3.length) {
            if (h3 = t3.charAt(l3[0] + 1), h3 === "*") l3[0]++, A3 = "*";
            else if (h3 === "+") l3[0]++, A3 = "+";
            else if (h3 === "?") l3[0]++, A3 = "?";
            else if (h3 === "{") {
              for (l3[0]++, A3 = "{", l3[0]++, h3 = t3.charAt(l3[0]); h3 >= "0" && h3 <= "9" && l3[0] < t3.length; ) A3 += h3, l3[0]++, h3 = t3.charAt(l3[0]);
              if (h3 === "}") A3 += "}";
              else if (h3 === ",") {
                for (A3 += ",", l3[0]++, h3 = t3.charAt(l3[0]); h3 >= "0" && h3 <= "9" && l3[0] < t3.length; ) A3 += h3, l3[0]++, h3 = t3.charAt(l3[0]);
                h3 === "}" ? A3 += "}" : A3 = "";
              } else A3 = "";
            }
            A3.length > 0 ? (v3[2] += A3, c3[0] += A3, t3.charAt(l3[0] + 1) === "?" && (l3[0]++, v3[2] += "?", c3[0] += "?")) : l3[0] = i3;
          }
          (A3.length > 0 || !a3) && (z3(v3, b3), v3 = [
            y3,
            void 0,
            "(" + v3[2] + ")",
            [
              v3
            ]
          ], l3[1]++), s3[2] += e3 + v3[2], s3[3].push(v3), e3 = "";
        } else h3 = t3.charAt(l3[0]), e3 += h3, h3 === "/" ? c3[0] += "\\" + h3 : c3[0] += h3;
      }
      return s3[2] += e3, s3;
    }
    function z3(t3, l3) {
      t3[0] && (t3[0]++, t3[1] && (l3[t3[1]] = t3[0]));
      for (var a3 = 0; a3 < t3[3].length; a3++) z3(t3[3][a3], l3);
    }
    function X3() {
      typeof $3 > "u" || ($3.exports = u3);
    }
    X3();
  });
  var k$8 = V$8(U$7()), _$b = k$8.default ?? k$8;
  const __5$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: _$b
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var g$a = Object.create;
  var n$6 = Object.defineProperty;
  var u$8 = Object.getOwnPropertyDescriptor;
  var s$6 = Object.getOwnPropertyNames;
  var m$f = Object.getPrototypeOf, h$b = Object.prototype.hasOwnProperty;
  var b$d = (r3, e3) => () => (e3 || r3((e3 = {
    exports: {}
  }).exports, e3), e3.exports);
  var k$7 = (r3, e3, l3, o3) => {
    if (e3 && typeof e3 == "object" || typeof e3 == "function") for (let a3 of s$6(e3)) !h$b.call(r3, a3) && a3 !== l3 && n$6(r3, a3, {
      get: () => e3[a3],
      enumerable: !(o3 = u$8(e3, a3)) || o3.enumerable
    });
    return r3;
  };
  var y$a = (r3, e3, l3) => (l3 = r3 != null ? g$a(m$f(r3)) : {}, k$7(!r3 || !r3.__esModule ? n$6(l3, "default", {
    value: r3,
    enumerable: true
  }) : l3, r3));
  var t$2 = b$d((p3, d3) => {
    d3.exports = {
      aliceblue: [
        240,
        248,
        255
      ],
      antiquewhite: [
        250,
        235,
        215
      ],
      aqua: [
        0,
        255,
        255
      ],
      aquamarine: [
        127,
        255,
        212
      ],
      azure: [
        240,
        255,
        255
      ],
      beige: [
        245,
        245,
        220
      ],
      bisque: [
        255,
        228,
        196
      ],
      black: [
        0,
        0,
        0
      ],
      blanchedalmond: [
        255,
        235,
        205
      ],
      blue: [
        0,
        0,
        255
      ],
      blueviolet: [
        138,
        43,
        226
      ],
      brown: [
        165,
        42,
        42
      ],
      burlywood: [
        222,
        184,
        135
      ],
      cadetblue: [
        95,
        158,
        160
      ],
      chartreuse: [
        127,
        255,
        0
      ],
      chocolate: [
        210,
        105,
        30
      ],
      coral: [
        255,
        127,
        80
      ],
      cornflowerblue: [
        100,
        149,
        237
      ],
      cornsilk: [
        255,
        248,
        220
      ],
      crimson: [
        220,
        20,
        60
      ],
      cyan: [
        0,
        255,
        255
      ],
      darkblue: [
        0,
        0,
        139
      ],
      darkcyan: [
        0,
        139,
        139
      ],
      darkgoldenrod: [
        184,
        134,
        11
      ],
      darkgray: [
        169,
        169,
        169
      ],
      darkgreen: [
        0,
        100,
        0
      ],
      darkgrey: [
        169,
        169,
        169
      ],
      darkkhaki: [
        189,
        183,
        107
      ],
      darkmagenta: [
        139,
        0,
        139
      ],
      darkolivegreen: [
        85,
        107,
        47
      ],
      darkorange: [
        255,
        140,
        0
      ],
      darkorchid: [
        153,
        50,
        204
      ],
      darkred: [
        139,
        0,
        0
      ],
      darksalmon: [
        233,
        150,
        122
      ],
      darkseagreen: [
        143,
        188,
        143
      ],
      darkslateblue: [
        72,
        61,
        139
      ],
      darkslategray: [
        47,
        79,
        79
      ],
      darkslategrey: [
        47,
        79,
        79
      ],
      darkturquoise: [
        0,
        206,
        209
      ],
      darkviolet: [
        148,
        0,
        211
      ],
      deeppink: [
        255,
        20,
        147
      ],
      deepskyblue: [
        0,
        191,
        255
      ],
      dimgray: [
        105,
        105,
        105
      ],
      dimgrey: [
        105,
        105,
        105
      ],
      dodgerblue: [
        30,
        144,
        255
      ],
      firebrick: [
        178,
        34,
        34
      ],
      floralwhite: [
        255,
        250,
        240
      ],
      forestgreen: [
        34,
        139,
        34
      ],
      fuchsia: [
        255,
        0,
        255
      ],
      gainsboro: [
        220,
        220,
        220
      ],
      ghostwhite: [
        248,
        248,
        255
      ],
      gold: [
        255,
        215,
        0
      ],
      goldenrod: [
        218,
        165,
        32
      ],
      gray: [
        128,
        128,
        128
      ],
      green: [
        0,
        128,
        0
      ],
      greenyellow: [
        173,
        255,
        47
      ],
      grey: [
        128,
        128,
        128
      ],
      honeydew: [
        240,
        255,
        240
      ],
      hotpink: [
        255,
        105,
        180
      ],
      indianred: [
        205,
        92,
        92
      ],
      indigo: [
        75,
        0,
        130
      ],
      ivory: [
        255,
        255,
        240
      ],
      khaki: [
        240,
        230,
        140
      ],
      lavender: [
        230,
        230,
        250
      ],
      lavenderblush: [
        255,
        240,
        245
      ],
      lawngreen: [
        124,
        252,
        0
      ],
      lemonchiffon: [
        255,
        250,
        205
      ],
      lightblue: [
        173,
        216,
        230
      ],
      lightcoral: [
        240,
        128,
        128
      ],
      lightcyan: [
        224,
        255,
        255
      ],
      lightgoldenrodyellow: [
        250,
        250,
        210
      ],
      lightgray: [
        211,
        211,
        211
      ],
      lightgreen: [
        144,
        238,
        144
      ],
      lightgrey: [
        211,
        211,
        211
      ],
      lightpink: [
        255,
        182,
        193
      ],
      lightsalmon: [
        255,
        160,
        122
      ],
      lightseagreen: [
        32,
        178,
        170
      ],
      lightskyblue: [
        135,
        206,
        250
      ],
      lightslategray: [
        119,
        136,
        153
      ],
      lightslategrey: [
        119,
        136,
        153
      ],
      lightsteelblue: [
        176,
        196,
        222
      ],
      lightyellow: [
        255,
        255,
        224
      ],
      lime: [
        0,
        255,
        0
      ],
      limegreen: [
        50,
        205,
        50
      ],
      linen: [
        250,
        240,
        230
      ],
      magenta: [
        255,
        0,
        255
      ],
      maroon: [
        128,
        0,
        0
      ],
      mediumaquamarine: [
        102,
        205,
        170
      ],
      mediumblue: [
        0,
        0,
        205
      ],
      mediumorchid: [
        186,
        85,
        211
      ],
      mediumpurple: [
        147,
        112,
        219
      ],
      mediumseagreen: [
        60,
        179,
        113
      ],
      mediumslateblue: [
        123,
        104,
        238
      ],
      mediumspringgreen: [
        0,
        250,
        154
      ],
      mediumturquoise: [
        72,
        209,
        204
      ],
      mediumvioletred: [
        199,
        21,
        133
      ],
      midnightblue: [
        25,
        25,
        112
      ],
      mintcream: [
        245,
        255,
        250
      ],
      mistyrose: [
        255,
        228,
        225
      ],
      moccasin: [
        255,
        228,
        181
      ],
      navajowhite: [
        255,
        222,
        173
      ],
      navy: [
        0,
        0,
        128
      ],
      oldlace: [
        253,
        245,
        230
      ],
      olive: [
        128,
        128,
        0
      ],
      olivedrab: [
        107,
        142,
        35
      ],
      orange: [
        255,
        165,
        0
      ],
      orangered: [
        255,
        69,
        0
      ],
      orchid: [
        218,
        112,
        214
      ],
      palegoldenrod: [
        238,
        232,
        170
      ],
      palegreen: [
        152,
        251,
        152
      ],
      paleturquoise: [
        175,
        238,
        238
      ],
      palevioletred: [
        219,
        112,
        147
      ],
      papayawhip: [
        255,
        239,
        213
      ],
      peachpuff: [
        255,
        218,
        185
      ],
      peru: [
        205,
        133,
        63
      ],
      pink: [
        255,
        192,
        203
      ],
      plum: [
        221,
        160,
        221
      ],
      powderblue: [
        176,
        224,
        230
      ],
      purple: [
        128,
        0,
        128
      ],
      rebeccapurple: [
        102,
        51,
        153
      ],
      red: [
        255,
        0,
        0
      ],
      rosybrown: [
        188,
        143,
        143
      ],
      royalblue: [
        65,
        105,
        225
      ],
      saddlebrown: [
        139,
        69,
        19
      ],
      salmon: [
        250,
        128,
        114
      ],
      sandybrown: [
        244,
        164,
        96
      ],
      seagreen: [
        46,
        139,
        87
      ],
      seashell: [
        255,
        245,
        238
      ],
      sienna: [
        160,
        82,
        45
      ],
      silver: [
        192,
        192,
        192
      ],
      skyblue: [
        135,
        206,
        235
      ],
      slateblue: [
        106,
        90,
        205
      ],
      slategray: [
        112,
        128,
        144
      ],
      slategrey: [
        112,
        128,
        144
      ],
      snow: [
        255,
        250,
        250
      ],
      springgreen: [
        0,
        255,
        127
      ],
      steelblue: [
        70,
        130,
        180
      ],
      tan: [
        210,
        180,
        140
      ],
      teal: [
        0,
        128,
        128
      ],
      thistle: [
        216,
        191,
        216
      ],
      tomato: [
        255,
        99,
        71
      ],
      turquoise: [
        64,
        224,
        208
      ],
      violet: [
        238,
        130,
        238
      ],
      wheat: [
        245,
        222,
        179
      ],
      white: [
        255,
        255,
        255
      ],
      whitesmoke: [
        245,
        245,
        245
      ],
      yellow: [
        255,
        255,
        0
      ],
      yellowgreen: [
        154,
        205,
        50
      ]
    };
  });
  var i$6 = y$a(t$2()), { aliceblue: w$5, antiquewhite: v$9, aqua: f$a, aquamarine: q$8, azure: j$g, beige: x$g, bisque: z$5, black: A$c, blanchedalmond: B$9, blue: C$7, blueviolet: D$8, brown: E$5, burlywood: F$7, cadetblue: G$6, chartreuse: H$6, chocolate: I$8, coral: J$6, cornflowerblue: K$5, cornsilk: L$8, crimson: M$7, cyan: N$8, darkblue: O$a, darkcyan: P$5, darkgoldenrod: Q$3, darkgray: R$5, darkgreen: S$5, darkgrey: T$8, darkkhaki: U$6, darkmagenta: V$7, darkolivegreen: W$6, darkorange: X$4, darkorchid: Y$5, darkred: Z$6, darksalmon: _$a, darkseagreen: $$6, darkslateblue: ee$5, darkslategray: re$4, darkslategrey: le$4, darkturquoise: ae$4, darkviolet: ie$4, deeppink: oe$3, deepskyblue: ne$4, dimgray: de$3, dimgrey: te$4, dodgerblue: ge$2, firebrick: ue$2, floralwhite: se$4, forestgreen: me$2, fuchsia: he$2, gainsboro: be$4, ghostwhite: ke$1, gold: ye$3, goldenrod: ce$1, gray: pe$3, green: we$2, greenyellow: ve$1, grey: fe$2, honeydew: qe$3, hotpink: je$2, indianred: xe$1, indigo: ze$3, ivory: Ae$2, khaki: Be$3, lavender: Ce$4, lavenderblush: De$3, lawngreen: Ee$3, lemonchiffon: Fe$3, lightblue: Ge$4, lightcoral: He$5, lightcyan: Ie$2, lightgoldenrodyellow: Je$4, lightgray: Ke$4, lightgreen: Le$4, lightgrey: Me$3, lightpink: Ne$4, lightsalmon: Oe$3, lightseagreen: Pe$3, lightskyblue: Qe$3, lightslategray: Re$4, lightslategrey: Se$3, lightsteelblue: Te$1, lightyellow: Ue$4, lime: Ve$3, limegreen: We$3, linen: Xe$3, magenta: Ye$4, maroon: Ze$2, mediumaquamarine: _e$1, mediumblue: $e$2, mediumorchid: e2, mediumpurple: r2, mediumseagreen: l2, mediumslateblue: a2, mediumspringgreen: i2, mediumturquoise: o2, mediumvioletred: n2, midnightblue: d2, mintcream: t2, mistyrose: g2, moccasin: u2, navajowhite: s2, navy: m2, oldlace: h2, olive: b2, olivedrab: k2, orange: y2, orangered: c2, orchid: p2, palegoldenrod: w2, palegreen: v2, paleturquoise: f2, palevioletred: q2, papayawhip: j2, peachpuff: x2, peru: z2, pink: A2, plum: B2, powderblue: C2, purple: D2, rebeccapurple: E2, red: F2, rosybrown: G2, royalblue: H2, saddlebrown: I2, salmon: J2, sandybrown: K2, seagreen: L2, seashell: M2, sienna: N2, silver: O2, skyblue: P2, slateblue: Q2, slategray: R2, slategrey: S2, snow: T2, springgreen: U2, steelblue: V2, tan: W2, teal: X2, thistle: Y2, tomato: Z2, turquoise: _2, violet: $2, wheat: er$1, white: rr$1, whitesmoke: lr, yellow: ar$1, yellowgreen: ir$2 } = i$6, or$1 = i$6.default ?? i$6;
  const __2$$1 = Object.freeze(Object.defineProperty({
    __proto__: null,
    aliceblue: w$5,
    antiquewhite: v$9,
    aqua: f$a,
    aquamarine: q$8,
    azure: j$g,
    beige: x$g,
    bisque: z$5,
    black: A$c,
    blanchedalmond: B$9,
    blue: C$7,
    blueviolet: D$8,
    brown: E$5,
    burlywood: F$7,
    cadetblue: G$6,
    chartreuse: H$6,
    chocolate: I$8,
    coral: J$6,
    cornflowerblue: K$5,
    cornsilk: L$8,
    crimson: M$7,
    cyan: N$8,
    darkblue: O$a,
    darkcyan: P$5,
    darkgoldenrod: Q$3,
    darkgray: R$5,
    darkgreen: S$5,
    darkgrey: T$8,
    darkkhaki: U$6,
    darkmagenta: V$7,
    darkolivegreen: W$6,
    darkorange: X$4,
    darkorchid: Y$5,
    darkred: Z$6,
    darksalmon: _$a,
    darkseagreen: $$6,
    darkslateblue: ee$5,
    darkslategray: re$4,
    darkslategrey: le$4,
    darkturquoise: ae$4,
    darkviolet: ie$4,
    deeppink: oe$3,
    deepskyblue: ne$4,
    default: or$1,
    dimgray: de$3,
    dimgrey: te$4,
    dodgerblue: ge$2,
    firebrick: ue$2,
    floralwhite: se$4,
    forestgreen: me$2,
    fuchsia: he$2,
    gainsboro: be$4,
    ghostwhite: ke$1,
    gold: ye$3,
    goldenrod: ce$1,
    gray: pe$3,
    green: we$2,
    greenyellow: ve$1,
    grey: fe$2,
    honeydew: qe$3,
    hotpink: je$2,
    indianred: xe$1,
    indigo: ze$3,
    ivory: Ae$2,
    khaki: Be$3,
    lavender: Ce$4,
    lavenderblush: De$3,
    lawngreen: Ee$3,
    lemonchiffon: Fe$3,
    lightblue: Ge$4,
    lightcoral: He$5,
    lightcyan: Ie$2,
    lightgoldenrodyellow: Je$4,
    lightgray: Ke$4,
    lightgreen: Le$4,
    lightgrey: Me$3,
    lightpink: Ne$4,
    lightsalmon: Oe$3,
    lightseagreen: Pe$3,
    lightskyblue: Qe$3,
    lightslategray: Re$4,
    lightslategrey: Se$3,
    lightsteelblue: Te$1,
    lightyellow: Ue$4,
    lime: Ve$3,
    limegreen: We$3,
    linen: Xe$3,
    magenta: Ye$4,
    maroon: Ze$2,
    mediumaquamarine: _e$1,
    mediumblue: $e$2,
    mediumorchid: e2,
    mediumpurple: r2,
    mediumseagreen: l2,
    mediumslateblue: a2,
    mediumspringgreen: i2,
    mediumturquoise: o2,
    mediumvioletred: n2,
    midnightblue: d2,
    mintcream: t2,
    mistyrose: g2,
    moccasin: u2,
    navajowhite: s2,
    navy: m2,
    oldlace: h2,
    olive: b2,
    olivedrab: k2,
    orange: y2,
    orangered: c2,
    orchid: p2,
    palegoldenrod: w2,
    palegreen: v2,
    paleturquoise: f2,
    palevioletred: q2,
    papayawhip: j2,
    peachpuff: x2,
    peru: z2,
    pink: A2,
    plum: B2,
    powderblue: C2,
    purple: D2,
    rebeccapurple: E2,
    red: F2,
    rosybrown: G2,
    royalblue: H2,
    saddlebrown: I2,
    salmon: J2,
    sandybrown: K2,
    seagreen: L2,
    seashell: M2,
    sienna: N2,
    silver: O2,
    skyblue: P2,
    slateblue: Q2,
    slategray: R2,
    slategrey: S2,
    snow: T2,
    springgreen: U2,
    steelblue: V2,
    tan: W2,
    teal: X2,
    thistle: Y2,
    tomato: Z2,
    turquoise: _2,
    violet: $2,
    wheat: er$1,
    white: rr$1,
    whitesmoke: lr,
    yellow: ar$1,
    yellowgreen: ir$2
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var h$a = Object.create;
  var s$5 = Object.defineProperty;
  var p$c = Object.getOwnPropertyDescriptor;
  var g$9 = Object.getOwnPropertyNames;
  var C$6 = Object.getPrototypeOf, m$e = Object.prototype.hasOwnProperty;
  var v$8 = (e3, n3) => () => (n3 || e3((n3 = {
    exports: {}
  }).exports, n3), n3.exports);
  var A$b = (e3, n3, f3, t3) => {
    if (n3 && typeof n3 == "object" || typeof n3 == "function") for (let a3 of g$9(n3)) !m$e.call(e3, a3) && a3 !== f3 && s$5(e3, a3, {
      get: () => n3[a3],
      enumerable: !(t3 = p$c(n3, a3)) || t3.enumerable
    });
    return e3;
  };
  var o$7 = (e3, n3, f3) => (f3 = e3 != null ? h$a(C$6(e3)) : {}, A$b(!e3 || !e3.__esModule ? s$5(f3, "default", {
    value: e3,
    enumerable: true
  }) : f3, e3));
  var d$c = v$8((x3, S3) => {
    (function(e3, n3) {
      typeof x3 == "object" ? S3.exports = n3(e3) : typeof define == "function" && define.amd ? define([], n3.bind(e3, e3)) : n3(e3);
    })(typeof globalThis < "u" ? globalThis : x3, function(e3) {
      if (e3.CSS && e3.CSS.escape) return e3.CSS.escape;
      var n3 = function(f3) {
        if (arguments.length == 0) throw new TypeError("`CSS.escape` requires an argument.");
        for (var t3 = String(f3), a3 = t3.length, r3 = -1, i3, c3 = "", l3 = t3.charCodeAt(0); ++r3 < a3; ) {
          if (i3 = t3.charCodeAt(r3), i3 == 0) {
            c3 += "\uFFFD";
            continue;
          }
          if (i3 >= 1 && i3 <= 31 || i3 == 127 || r3 == 0 && i3 >= 48 && i3 <= 57 || r3 == 1 && i3 >= 48 && i3 <= 57 && l3 == 45) {
            c3 += "\\" + i3.toString(16) + " ";
            continue;
          }
          if (r3 == 0 && a3 == 1 && i3 == 45) {
            c3 += "\\" + t3.charAt(r3);
            continue;
          }
          if (i3 >= 128 || i3 == 45 || i3 == 95 || i3 >= 48 && i3 <= 57 || i3 >= 65 && i3 <= 90 || i3 >= 97 && i3 <= 122) {
            c3 += t3.charAt(r3);
            continue;
          }
          c3 += "\\" + t3.charAt(r3);
        }
        return c3;
      };
      return e3.CSS || (e3.CSS = {}), e3.CSS.escape = n3, n3;
    });
  });
  var u$7 = o$7(d$c()), b$c = u$7.default ?? u$7;
  const __7$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: b$c
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var M0 = Object.create;
  var Lt$1 = Object.defineProperty;
  var m0 = Object.getOwnPropertyDescriptor;
  var y0 = Object.getOwnPropertyNames;
  var x0 = Object.getPrototypeOf, w0 = Object.prototype.hasOwnProperty;
  var z0 = (l3, x3) => () => (x3 || l3((x3 = {
    exports: {}
  }).exports, x3), x3.exports);
  var k0 = (l3, x3, B3, w3) => {
    if (x3 && typeof x3 == "object" || typeof x3 == "function") for (let k3 of y0(x3)) !w0.call(l3, k3) && k3 !== B3 && Lt$1(l3, k3, {
      get: () => x3[k3],
      enumerable: !(w3 = m0(x3, k3)) || w3.enumerable
    });
    return l3;
  };
  var P0 = (l3, x3, B3) => (B3 = l3 != null ? M0(x0(l3)) : {}, k0(!l3 || !l3.__esModule ? Lt$1(B3, "default", {
    value: l3,
    enumerable: true
  }) : B3, l3));
  var Bt$1 = z0((In2, Tt2) => {
    (function(l3, x3) {
      typeof In2 == "object" && typeof Tt2 < "u" ? x3(In2) : typeof define == "function" && define.amd ? define([
        "exports"
      ], x3) : x3((l3 = typeof globalThis < "u" ? globalThis : l3 || self).culori = {});
    })(In2, function(l3) {
      var x3 = function(n3, e3) {
        if (typeof n3 == "number") return e3 === 3 ? {
          mode: "rgb",
          r: (n3 >> 8 & 15 | n3 >> 4 & 240) / 255,
          g: (n3 >> 4 & 15 | 240 & n3) / 255,
          b: (15 & n3 | n3 << 4 & 240) / 255
        } : e3 === 4 ? {
          mode: "rgb",
          r: (n3 >> 12 & 15 | n3 >> 8 & 240) / 255,
          g: (n3 >> 8 & 15 | n3 >> 4 & 240) / 255,
          b: (n3 >> 4 & 15 | 240 & n3) / 255,
          alpha: (15 & n3 | n3 << 4 & 240) / 255
        } : e3 === 6 ? {
          mode: "rgb",
          r: (n3 >> 16 & 255) / 255,
          g: (n3 >> 8 & 255) / 255,
          b: (255 & n3) / 255
        } : e3 === 8 ? {
          mode: "rgb",
          r: (n3 >> 24 & 255) / 255,
          g: (n3 >> 16 & 255) / 255,
          b: (n3 >> 8 & 255) / 255,
          alpha: (255 & n3) / 255
        } : void 0;
      }, B3 = {
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
      }, w3 = "/([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)/".replace(/^\/|\/$/g, ""), k3 = w3 + "%", C3 = "(?:" + w3 + "%|" + w3 + ")", sn2 = "(?:" + w3 + "(deg|grad|rad|turn)|" + w3 + ")", K3 = "\\s*,\\s*", Gt2 = "\\s*", S3 = "\\s+", Wt2 = new RegExp("^rgba?\\(\\s*" + w3 + K3 + w3 + K3 + w3 + "\\s*(?:,\\s*" + C3 + "\\s*)?\\)$"), _t2 = new RegExp("^rgba?\\(\\s*" + k3 + K3 + k3 + K3 + k3 + "\\s*(?:,\\s*" + C3 + "\\s*)?\\)$"), Ft2 = new RegExp("^rgba?\\(\\s*" + w3 + S3 + w3 + S3 + w3 + "\\s*(?:\\/\\s*" + C3 + "\\s*)?\\)$"), Kt2 = new RegExp("^rgba?\\(\\s*" + k3 + S3 + k3 + S3 + k3 + "\\s*(?:\\/\\s*" + C3 + "\\s*)?\\)$"), Jt2 = new RegExp("^hsla?\\(\\s*" + sn2 + K3 + k3 + K3 + k3 + "\\s*(?:,\\s*" + C3 + "\\s*)?\\)$"), Qt = new RegExp("^hsla?\\(\\s*" + sn2 + S3 + k3 + S3 + k3 + "\\s*(?:\\/\\s*" + C3 + "\\s*)?\\)$"), Ut2 = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i, Vt2 = new RegExp("^hwb\\(\\s*" + sn2 + S3 + k3 + S3 + k3 + "\\s*(?:\\/\\s*" + C3 + "\\s*)?\\)$"), Xt2 = new RegExp("^lab\\(\\s*" + w3 + "%?" + S3 + w3 + S3 + w3 + "\\s*(?:\\/\\s*" + C3 + "\\s*)?\\)$"), Yt2 = new RegExp("^lch\\(\\s*" + w3 + "%?" + S3 + w3 + S3 + sn2 + "\\s*(?:\\/\\s*" + C3 + "\\s*)?\\)$"), Zt2 = new RegExp("^color\\(\\s*([a-z0-9\\-]+)" + S3 + C3 + S3 + C3 + S3 + C3 + "\\s*(?:\\/" + Gt2 + C3 + "\\s*)?\\)$"), dn2 = function(n3, e3, t3) {
        return n3 + t3 * (e3 - n3);
      }, W3 = function(n3) {
        return n3 === void 0 && (n3 = 1), n3 === 1 ? function(e3) {
          return e3;
        } : function(e3) {
          return Math.pow(e3, n3);
        };
      }, Sn2 = function(n3) {
        return function(e3) {
          var t3 = function(a3) {
            for (var o3 = [], i3 = 0; i3 < a3.length - 1; i3++) {
              var r3 = a3[i3], u3 = a3[i3 + 1];
              r3 === void 0 && u3 === void 0 ? o3.push(void 0) : r3 !== void 0 && u3 !== void 0 ? o3.push([
                r3,
                u3
              ]) : o3.push(r3 !== void 0 ? [
                r3,
                r3
              ] : [
                u3,
                u3
              ]);
            }
            return o3;
          }(e3);
          return function(a3) {
            var o3 = a3 * t3.length, i3 = a3 >= 1 ? t3.length - 1 : Math.max(Math.floor(o3), 0), r3 = t3[i3];
            return r3 === void 0 ? void 0 : n3(r3[0], r3[1], o3 - i3);
          };
        };
      }, c3 = Sn2(dn2), z3 = function(n3) {
        var e3 = false, t3 = n3.map(function(a3) {
          return a3 !== void 0 ? (e3 = true, a3) : 1;
        });
        return e3 ? t3 : n3;
      }, J3 = {
        mode: "rgb",
        channels: [
          "r",
          "g",
          "b",
          "alpha"
        ],
        parsers: [
          function(n3) {
            var e3;
            return (e3 = n3.match(Ut2)) ? x3(parseInt(e3[1], 16), e3[1].length) : void 0;
          },
          function(n3) {
            var e3, t3;
            if (e3 = n3.match(Wt2) || n3.match(Ft2)) t3 = {
              mode: "rgb",
              r: e3[1] / 255,
              g: e3[2] / 255,
              b: e3[3] / 255
            };
            else {
              if (!(e3 = n3.match(_t2) || n3.match(Kt2))) return;
              t3 = {
                mode: "rgb",
                r: e3[1] / 100,
                g: e3[2] / 100,
                b: e3[3] / 100
              };
            }
            return e3[4] !== void 0 ? t3.alpha = e3[4] / 100 : e3[5] !== void 0 && (t3.alpha = +e3[5]), t3;
          },
          function(n3) {
            return x3(B3[n3.toLowerCase()], 6);
          },
          function(n3) {
            return n3 === "transparent" ? x3(0, 8) : void 0;
          },
          "srgb"
        ],
        serialize: "color(srgb ",
        interpolate: {
          r: c3,
          g: c3,
          b: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        }
      }, Cn = function(n3) {
        var e3 = Math.abs(n3);
        return e3 < 0.04045 ? n3 / 12.92 : (Math.sign(n3) || 1) * Math.pow((e3 + 0.055) / 1.055, 2.4);
      }, Q3 = function(n3) {
        var e3 = n3.r, t3 = n3.g, a3 = n3.b, o3 = n3.alpha, i3 = {
          mode: "lrgb",
          r: Cn(e3),
          g: Cn(t3),
          b: Cn(a3)
        };
        return o3 !== void 0 && (i3.alpha = o3), i3;
      }, Hn = function(n3) {
        var e3 = Math.abs(n3);
        return e3 > 31308e-7 ? (Math.sign(n3) || 1) * (1.055 * Math.pow(e3, 1 / 2.4) - 0.055) : 12.92 * n3;
      }, U3 = function(n3, e3) {
        var t3 = n3.r, a3 = n3.g, o3 = n3.b, i3 = n3.alpha;
        e3 === void 0 && (e3 = "rgb");
        var r3 = {
          mode: e3,
          r: Hn(t3),
          g: Hn(a3),
          b: Hn(o3)
        };
        return i3 !== void 0 && (r3.alpha = i3), r3;
      }, na = Object.assign({}, J3, {
        mode: "lrgb",
        output: {
          rgb: U3
        },
        input: {
          rgb: Q3
        },
        parsers: [
          "--srgb-linear"
        ],
        serialize: "color(--srgb-linear "
      }), En2 = function(n3) {
        return Math.pow(Math.abs(n3), 563 / 256) * Math.sign(n3);
      }, de2 = function(n3) {
        var e3 = En2(n3.r), t3 = En2(n3.g), a3 = En2(n3.b), o3 = {
          mode: "xyz65",
          x: 0.5766690429101305 * e3 + 0.1855582379065463 * t3 + 0.1882286462349947 * a3,
          y: 0.29734497525053605 * e3 + 0.6273635662554661 * t3 + 0.07529145849399788 * a3,
          z: 0.02703136138641234 * e3 + 0.07068885253582723 * t3 + 0.9913375368376388 * a3
        };
        return n3.alpha !== void 0 && (o3.alpha = n3.alpha), o3;
      }, An = function(n3) {
        return Math.pow(Math.abs(n3), 256 / 563) * Math.sign(n3);
      }, ve2 = function(n3) {
        var e3 = n3.x, t3 = n3.y, a3 = n3.z, o3 = n3.alpha, i3 = {
          mode: "a98",
          r: An(2.0415879038107465 * e3 - 0.5650069742788596 * t3 - 0.34473135077832956 * a3),
          g: An(-0.9692436362808795 * e3 + 1.8759675015077202 * t3 + 0.04155505740717557 * a3),
          b: An(0.013444280632031142 * e3 - 0.11836239223101838 * t3 + 1.0151749943912054 * a3)
        };
        return o3 !== void 0 && (i3.alpha = o3), i3;
      }, V3 = function(n3) {
        var e3 = Q3(n3), t3 = e3.r, a3 = e3.g, o3 = e3.b, i3 = e3.alpha, r3 = {
          mode: "xyz65",
          x: 0.4124564 * t3 + 0.3575761 * a3 + 0.1804375 * o3,
          y: 0.2126729 * t3 + 0.7151522 * a3 + 0.072175 * o3,
          z: 0.0193339 * t3 + 0.119192 * a3 + 0.9503041 * o3
        };
        return i3 !== void 0 && (r3.alpha = i3), r3;
      }, X3 = function(n3) {
        var e3 = n3.x, t3 = n3.y, a3 = n3.z, o3 = n3.alpha, i3 = U3({
          r: 3.2404542 * e3 - 1.5371385 * t3 - 0.4985314 * a3,
          g: -0.969266 * e3 + 1.8760108 * t3 + 0.041556 * a3,
          b: 0.0556434 * e3 - 0.2040259 * t3 + 1.0572252 * a3
        });
        return o3 !== void 0 && (i3.alpha = o3), i3;
      }, ea = Object.assign({}, J3, {
        mode: "a98",
        parsers: [
          "a98-rgb"
        ],
        serialize: "color(a98-rgb ",
        input: {
          rgb: function(n3) {
            return ve2(V3(n3));
          },
          xyz65: ve2
        },
        output: {
          rgb: function(n3) {
            return X3(de2(n3));
          },
          xyz65: de2
        }
      }), be2 = function(n3) {
        var e3 = Q3(n3), t3 = e3.r, a3 = e3.g, o3 = e3.b, i3 = e3.alpha, r3 = {
          mode: "xyz65",
          x: 0.4865709 * t3 + 0.2656676 * a3 + 0.1982172 * o3,
          y: 0.2289745 * t3 + 0.6917385 * a3 + 0.0792869 * o3,
          z: 0 * t3 + 0.0451133 * a3 + 1.0439443 * o3
        };
        return i3 !== void 0 && (r3.alpha = i3), r3;
      }, ge2 = function(n3) {
        var e3 = n3.x, t3 = n3.y, a3 = n3.z, o3 = n3.alpha, i3 = U3({
          r: 2.4934969 * e3 - 0.9313836 * t3 - 0.4027107 * a3,
          g: -0.8294889 * e3 + 1.762664 * t3 + 0.0236246 * a3,
          b: 0.0358458 * e3 - 0.0761723 * t3 + 0.9568845 * a3
        }, "p3");
        return o3 !== void 0 && (i3.alpha = o3), i3;
      }, ta = Object.assign({}, J3, {
        mode: "p3",
        parsers: [
          "display-p3"
        ],
        serialize: "color(display-p3 ",
        input: {
          rgb: function(n3) {
            return ge2(V3(n3));
          },
          xyz65: ge2
        },
        output: {
          rgb: function(n3) {
            return X3(be2(n3));
          },
          xyz65: be2
        }
      }), Nn2 = function(n3) {
        var e3 = Math.abs(n3);
        return e3 >= 1 / 512 ? Math.sign(n3) * Math.pow(e3, 1 / 1.8) : 16 * n3;
      }, Me2 = function(n3) {
        var e3 = n3.x, t3 = n3.y, a3 = n3.z, o3 = n3.alpha, i3 = {
          mode: "prophoto",
          r: Nn2(1.3457989731028281 * e3 - 0.25558010007997534 * t3 - 0.05110628506753401 * a3),
          g: Nn2(-0.5446224939028347 * e3 + 1.5082327413132781 * t3 + 0.02053603239147973 * a3),
          b: Nn2(0 * e3 + 0 * t3 + 1.2119675456389454 * a3)
        };
        return o3 !== void 0 && (i3.alpha = o3), i3;
      }, On2 = function(n3) {
        var e3 = Math.abs(n3);
        return e3 >= 16 / 512 ? Math.sign(n3) * Math.pow(e3, 1.8) : n3 / 16;
      }, me2 = function(n3) {
        var e3 = On2(n3.r), t3 = On2(n3.g), a3 = On2(n3.b), o3 = {
          mode: "xyz65",
          x: 0.7977604896723027 * e3 + 0.13518583717574031 * t3 + 0.0313493495815248 * a3,
          y: 0.2880711282292934 * e3 + 0.7118432178101014 * t3 + 8565396060525902e-20 * a3,
          z: 0 * e3 + 0 * t3 + 0.8251046025104601 * a3
        };
        return n3.alpha !== void 0 && (o3.alpha = n3.alpha), o3;
      }, vn2 = function(n3) {
        var e3 = n3.x, t3 = n3.y, a3 = n3.z, o3 = n3.alpha, i3 = U3({
          r: 3.1338561 * e3 - 1.6168667 * t3 - 0.4906146 * a3,
          g: -0.9787684 * e3 + 1.9161415 * t3 + 0.033454 * a3,
          b: 0.0719453 * e3 - 0.2289914 * t3 + 1.4052427 * a3
        });
        return o3 !== void 0 && (i3.alpha = o3), i3;
      }, bn2 = function(n3) {
        var e3 = Q3(n3), t3 = e3.r, a3 = e3.g, o3 = e3.b, i3 = e3.alpha, r3 = {
          mode: "xyz",
          x: 0.4360747 * t3 + 0.3850649 * a3 + 0.1430804 * o3,
          y: 0.2225045 * t3 + 0.7168786 * a3 + 0.0606169 * o3,
          z: 0.0139322 * t3 + 0.0971045 * a3 + 0.7141733 * o3
        };
        return i3 !== void 0 && (r3.alpha = i3), r3;
      }, aa = Object.assign({}, J3, {
        mode: "prophoto",
        parsers: [
          "prophoto-rgb"
        ],
        serialize: "color(prophoto-rgb ",
        input: {
          xyz: Me2,
          rgb: function(n3) {
            return Me2(bn2(n3));
          }
        },
        output: {
          xyz: me2,
          rgb: function(n3) {
            return vn2(me2(n3));
          }
        }
      }), ye2 = 1.09929682680944, Rn2 = function(n3) {
        var e3 = Math.abs(n3);
        return e3 > 0.018053968510807 ? (Math.sign(n3) || 1) * (ye2 * Math.pow(e3, 0.45) - (ye2 - 1)) : 4.5 * n3;
      }, xe2 = function(n3) {
        var e3 = n3.x, t3 = n3.y, a3 = n3.z, o3 = n3.alpha, i3 = {
          mode: "rec2020",
          r: Rn2(1.7166511879712674 * e3 - 0.35567078377639233 * t3 - 0.25336628137365974 * a3),
          g: Rn2(-0.6666843518324892 * e3 + 1.6164812366349395 * t3 + 0.01576854581391113 * a3),
          b: Rn2(0.017639857445310783 * e3 - 0.042770613257808524 * t3 + 0.9421031212354738 * a3)
        };
        return o3 !== void 0 && (i3.alpha = o3), i3;
      }, we2 = 1.09929682680944, Dn2 = function(n3) {
        var e3 = Math.abs(n3);
        return e3 < 0.08124285829863151 ? n3 / 4.5 : (Math.sign(n3) || 1) * Math.pow((e3 + we2 - 1) / we2, 1 / 0.45);
      }, ze2 = function(n3) {
        var e3 = Dn2(n3.r), t3 = Dn2(n3.g), a3 = Dn2(n3.b), o3 = {
          mode: "xyz65",
          x: 0.6369580483012914 * e3 + 0.14461690358620832 * t3 + 0.1688809751641721 * a3,
          y: 0.2627002120112671 * e3 + 0.6779980715188708 * t3 + 0.05930171646986196 * a3,
          z: 0 * e3 + 0.028072693049087428 * t3 + 1.060985057710791 * a3
        };
        return n3.alpha !== void 0 && (o3.alpha = n3.alpha), o3;
      }, ia = Object.assign({}, J3, {
        mode: "rec2020",
        input: {
          xyz: xe2,
          rgb: function(n3) {
            return xe2(V3(n3));
          }
        },
        output: {
          xyz: ze2,
          rgb: function(n3) {
            return X3(ze2(n3));
          }
        },
        parsers: [
          "rec2020"
        ],
        serialize: "color(rec2020 "
      }), I3 = function(n3) {
        return (n3 %= 360) < 0 ? n3 + 360 : n3;
      }, $n2 = function(n3, e3) {
        switch (e3) {
          case "deg":
            return +n3;
          case "rad":
            return n3 / Math.PI * 180;
          case "grad":
            return n3 / 10 * 9;
          case "turn":
            return 360 * n3;
        }
      }, gn2 = function(n3, e3) {
        return n3.map(function(t3, a3, o3) {
          if (t3 === void 0) return t3;
          var i3 = I3(t3);
          return a3 === 0 || n3[a3 - 1] === void 0 ? i3 : e3(i3 - I3(o3[a3 - 1]));
        }).reduce(function(t3, a3) {
          return t3.length && a3 !== void 0 && t3[t3.length - 1] !== void 0 ? (t3.push(a3 + t3[t3.length - 1]), t3) : (t3.push(a3), t3);
        }, []);
      }, N3 = function(n3) {
        return gn2(n3, function(e3) {
          return Math.abs(e3) <= 180 ? e3 : e3 - 360 * Math.sign(e3);
        });
      }, R3 = {}, ke2 = {}, Ln2 = [], Pe2 = {}, oa = function(n3) {
        return n3;
      }, m3 = function(n3) {
        R3[n3.mode] = Object.assign(R3[n3.mode] || {}, n3.output), Object.keys(n3.input || {}).forEach(function(e3) {
          R3[e3] || (R3[e3] = {}), R3[e3][n3.mode] = n3.input[e3];
        }), n3.ranges || (n3.ranges = {}), n3.difference || (n3.difference = {}), n3.channels.forEach(function(e3) {
          if (n3.ranges[e3] === void 0 && (n3.ranges[e3] = [
            0,
            1
          ]), !n3.interpolate[e3]) throw new Error("Missing interpolator for: " + e3);
          typeof n3.interpolate[e3] == "function" && (n3.interpolate[e3] = {
            use: n3.interpolate[e3]
          }), n3.interpolate[e3].fixup || (n3.interpolate[e3].fixup = oa);
        }), ke2[n3.mode] = n3, (n3.parsers || []).forEach(function(e3) {
          typeof e3 == "function" ? Ln2.push(e3) : typeof e3 == "string" && (Pe2[e3] = n3.mode);
        });
      }, E3 = function(n3) {
        return ke2[n3];
      }, je2 = function(n3) {
        if (typeof n3 == "string") {
          for (var e3 = void 0, t3 = 0, a3 = Ln2.length; t3 < a3 && (e3 = Ln2[t3++](n3)) === void 0; ) ;
          return e3 || function(o3) {
            var i3 = o3.match(Zt2);
            if (i3) {
              var r3 = Pe2[i3[1]];
              if (r3) {
                var u3 = {
                  mode: r3
                }, h3 = 2;
                return E3(r3).channels.forEach(function(s3) {
                  i3[h3] === void 0 && i3[h3 + 1] === void 0 || (u3[s3] = i3[h3] !== void 0 ? i3[h3] / 100 : +i3[h3 + 1]), h3 += 2;
                }), u3;
              }
            }
          }(n3);
        }
      }, G3 = function(n3, e3) {
        return n3 === void 0 ? void 0 : typeof n3 != "object" ? je2(n3) : n3.mode !== void 0 ? n3 : e3 ? Object.assign({}, n3, {
          mode: e3
        }) : void 0;
      }, d3 = function(n3) {
        return n3 === void 0 && (n3 = "rgb"), function(e3) {
          return (e3 = G3(e3, n3)) !== void 0 ? e3.mode === n3 ? e3 : R3[e3.mode][n3] ? R3[e3.mode][n3](e3) : n3 === "rgb" ? R3[e3.mode].rgb(e3) : R3.rgb[n3](R3[e3.mode].rgb(e3)) : void 0;
        };
      }, on2 = function(n3, e3) {
        if (n3.h === void 0 || e3.h === void 0 || !n3.s || !e3.s) return 0;
        var t3 = I3(n3.h), a3 = I3(e3.h), o3 = Math.sin((a3 - t3 + 360) / 2 * Math.PI / 180);
        return 2 * Math.sqrt(n3.s * e3.s) * o3;
      }, Ie2 = function(n3, e3) {
        if (n3.h === void 0 || e3.h === void 0) return 0;
        var t3 = I3(n3.h), a3 = I3(e3.h);
        return Math.abs(a3 - t3) > 180 ? t3 - (a3 - 360 * Math.sign(a3 - t3)) : a3 - t3;
      }, rn = function(n3, e3) {
        if (n3.h === void 0 || e3.h === void 0 || !n3.c || !e3.c) return 0;
        var t3 = I3(n3.h), a3 = I3(e3.h), o3 = Math.sin((a3 - t3 + 360) / 2 * Math.PI / 180);
        return 2 * Math.sqrt(n3.c * e3.c) * o3;
      }, un2 = function(n3, e3) {
        n3 === void 0 && (n3 = "rgb"), e3 === void 0 && (e3 = [
          1,
          1,
          1,
          0
        ]);
        var t3 = E3(n3), a3 = t3.channels, o3 = t3.difference, i3 = d3(n3);
        return function(r3, u3) {
          var h3 = i3(r3), s3 = i3(u3);
          return Math.sqrt(a3.reduce(function(v3, b3, q3) {
            var p3 = o3[b3] ? o3[b3](h3, s3) : h3[b3] - s3[b3];
            return v3 + (e3[q3] || 0) * Math.pow(isNaN(p3) ? 0 : p3, 2);
          }, 0));
        };
      }, D3 = function(n3) {
        var e3 = n3.reduce(function(t3, a3) {
          if (a3 !== void 0) {
            var o3 = a3 * Math.PI / 180;
            t3.sin += Math.sin(o3), t3.cos += Math.cos(o3);
          }
          return t3;
        }, {
          sin: 0,
          cos: 0
        });
        return 180 * Math.atan2(e3.sin, e3.cos) / Math.PI;
      }, qe2 = function(n3) {
        var e3 = n3.filter(function(t3) {
          return t3 !== void 0;
        });
        return e3.length ? e3.reduce(function(t3, a3) {
          return t3 + a3;
        }, 0) / e3.length : void 0;
      }, Tn2 = function(n3) {
        return typeof n3 == "function";
      }, ra = {
        mode: "hsl",
        output: {
          rgb: function(n3) {
            var e3 = n3.h, t3 = n3.s, a3 = n3.l, o3 = n3.alpha;
            e3 = I3(e3);
            var i3, r3 = a3 + t3 * (a3 < 0.5 ? a3 : 1 - a3), u3 = r3 - 2 * (r3 - a3) * Math.abs(e3 / 60 % 2 - 1);
            switch (Math.floor(e3 / 60)) {
              case 0:
                i3 = {
                  r: r3,
                  g: u3,
                  b: 2 * a3 - r3
                };
                break;
              case 1:
                i3 = {
                  r: u3,
                  g: r3,
                  b: 2 * a3 - r3
                };
                break;
              case 2:
                i3 = {
                  r: 2 * a3 - r3,
                  g: r3,
                  b: u3
                };
                break;
              case 3:
                i3 = {
                  r: 2 * a3 - r3,
                  g: u3,
                  b: r3
                };
                break;
              case 4:
                i3 = {
                  r: u3,
                  g: 2 * a3 - r3,
                  b: r3
                };
                break;
              case 5:
                i3 = {
                  r: r3,
                  g: 2 * a3 - r3,
                  b: u3
                };
                break;
              default:
                i3 = {
                  r: 2 * a3 - r3,
                  g: 2 * a3 - r3,
                  b: 2 * a3 - r3
                };
            }
            return i3.mode = "rgb", o3 !== void 0 && (i3.alpha = o3), i3;
          }
        },
        input: {
          rgb: function(n3) {
            var e3 = n3.r, t3 = n3.g, a3 = n3.b, o3 = n3.alpha, i3 = Math.max(e3, t3, a3), r3 = Math.min(e3, t3, a3), u3 = {
              mode: "hsl",
              s: i3 === r3 ? 0 : (i3 - r3) / (1 - Math.abs(i3 + r3 - 1)),
              l: 0.5 * (i3 + r3)
            };
            return i3 - r3 != 0 && (u3.h = 60 * (i3 === e3 ? (t3 - a3) / (i3 - r3) + 6 * (t3 < a3) : i3 === t3 ? (a3 - e3) / (i3 - r3) + 2 : (e3 - t3) / (i3 - r3) + 4)), o3 !== void 0 && (u3.alpha = o3), u3;
          }
        },
        channels: [
          "h",
          "s",
          "l",
          "alpha"
        ],
        ranges: {
          h: [
            0,
            360
          ]
        },
        parsers: [
          function(n3) {
            var e3 = n3.match(Jt2) || n3.match(Qt);
            if (e3) {
              var t3 = {
                mode: "hsl",
                h: e3[3] === void 0 ? $n2(e3[1], e3[2]) : +e3[3],
                s: Math.min(Math.max(0, e3[4] / 100), 1),
                l: Math.min(Math.max(0, e3[5] / 100), 1)
              };
              return e3[6] !== void 0 ? t3.alpha = e3[6] / 100 : e3[7] !== void 0 && (t3.alpha = +e3[7]), t3;
            }
          }
        ],
        serialize: function(n3) {
          return "hsl(" + (n3.h || 0) + " " + 100 * n3.s + "% " + 100 * n3.l + "%" + (n3.alpha < 1 ? " / " + n3.alpha : "") + ")";
        },
        interpolate: {
          h: {
            use: c3,
            fixup: N3
          },
          s: c3,
          l: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        },
        difference: {
          h: on2
        },
        average: {
          h: D3
        }
      };
      function Se2(n3) {
        var e3 = n3.h, t3 = n3.s, a3 = n3.v, o3 = n3.alpha;
        e3 = I3(e3);
        var i3, r3 = Math.abs(e3 / 60 % 2 - 1);
        switch (Math.floor(e3 / 60)) {
          case 0:
            i3 = {
              r: a3,
              g: a3 * (1 - t3 * r3),
              b: a3 * (1 - t3)
            };
            break;
          case 1:
            i3 = {
              r: a3 * (1 - t3 * r3),
              g: a3,
              b: a3 * (1 - t3)
            };
            break;
          case 2:
            i3 = {
              r: a3 * (1 - t3),
              g: a3,
              b: a3 * (1 - t3 * r3)
            };
            break;
          case 3:
            i3 = {
              r: a3 * (1 - t3),
              g: a3 * (1 - t3 * r3),
              b: a3
            };
            break;
          case 4:
            i3 = {
              r: a3 * (1 - t3 * r3),
              g: a3 * (1 - t3),
              b: a3
            };
            break;
          case 5:
            i3 = {
              r: a3,
              g: a3 * (1 - t3),
              b: a3 * (1 - t3 * r3)
            };
            break;
          default:
            i3 = {
              r: a3 * (1 - t3),
              g: a3 * (1 - t3),
              b: a3 * (1 - t3)
            };
        }
        return i3.mode = "rgb", o3 !== void 0 && (i3.alpha = o3), i3;
      }
      function Ce2(n3) {
        var e3 = n3.r, t3 = n3.g, a3 = n3.b, o3 = n3.alpha, i3 = Math.max(e3, t3, a3), r3 = Math.min(e3, t3, a3), u3 = {
          mode: "hsv",
          s: i3 === 0 ? 0 : 1 - r3 / i3,
          v: i3
        };
        return i3 - r3 != 0 && (u3.h = 60 * (i3 === e3 ? (t3 - a3) / (i3 - r3) + 6 * (t3 < a3) : i3 === t3 ? (a3 - e3) / (i3 - r3) + 2 : (e3 - t3) / (i3 - r3) + 4)), o3 !== void 0 && (u3.alpha = o3), u3;
      }
      var ua = {
        mode: "hsv",
        output: {
          rgb: Se2
        },
        parsers: [
          "--hsv"
        ],
        serialize: "color(--hsv ",
        input: {
          rgb: Ce2
        },
        channels: [
          "h",
          "s",
          "v",
          "alpha"
        ],
        ranges: {
          h: [
            0,
            360
          ]
        },
        interpolate: {
          h: {
            use: c3,
            fixup: N3
          },
          s: c3,
          v: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        },
        difference: {
          h: on2
        },
        average: {
          h: D3
        }
      }, la = {
        mode: "hsi",
        output: {
          rgb: function(n3) {
            var e3 = n3.h, t3 = n3.s, a3 = n3.i, o3 = n3.alpha;
            e3 = I3(e3);
            var i3, r3 = Math.abs(e3 / 60 % 2 - 1);
            switch (Math.floor(e3 / 60)) {
              case 0:
                i3 = {
                  r: a3 * (1 + t3 * (3 / (2 - r3) - 1)),
                  g: a3 * (1 + t3 * (3 * (1 - r3) / (2 - r3) - 1)),
                  b: a3 * (1 - t3)
                };
                break;
              case 1:
                i3 = {
                  r: a3 * (1 + t3 * (3 * (1 - r3) / (2 - r3) - 1)),
                  g: a3 * (1 + t3 * (3 / (2 - r3) - 1)),
                  b: a3 * (1 - t3)
                };
                break;
              case 2:
                i3 = {
                  r: a3 * (1 - t3),
                  g: a3 * (1 + t3 * (3 / (2 - r3) - 1)),
                  b: a3 * (1 + t3 * (3 * (1 - r3) / (2 - r3) - 1))
                };
                break;
              case 3:
                i3 = {
                  r: a3 * (1 - t3),
                  g: a3 * (1 + t3 * (3 * (1 - r3) / (2 - r3) - 1)),
                  b: a3 * (1 + t3 * (3 / (2 - r3) - 1))
                };
                break;
              case 4:
                i3 = {
                  r: a3 * (1 + t3 * (3 * (1 - r3) / (2 - r3) - 1)),
                  g: a3 * (1 - t3),
                  b: a3 * (1 + t3 * (3 / (2 - r3) - 1))
                };
                break;
              case 5:
                i3 = {
                  r: a3 * (1 + t3 * (3 / (2 - r3) - 1)),
                  g: a3 * (1 - t3),
                  b: a3 * (1 + t3 * (3 * (1 - r3) / (2 - r3) - 1))
                };
                break;
              default:
                i3 = {
                  r: a3 * (1 - t3),
                  g: a3 * (1 - t3),
                  b: a3 * (1 - t3)
                };
            }
            return i3.mode = "rgb", o3 !== void 0 && (i3.alpha = o3), i3;
          }
        },
        parsers: [
          "--hsi"
        ],
        serialize: "color(--hsi ",
        input: {
          rgb: function(n3) {
            var e3 = n3.r, t3 = n3.g, a3 = n3.b, o3 = n3.alpha, i3 = Math.max(e3, t3, a3), r3 = Math.min(e3, t3, a3), u3 = {
              mode: "hsi",
              s: e3 + t3 + a3 === 0 ? 0 : 1 - 3 * r3 / (e3 + t3 + a3),
              i: (e3 + t3 + a3) / 3
            };
            return i3 - r3 != 0 && (u3.h = 60 * (i3 === e3 ? (t3 - a3) / (i3 - r3) + 6 * (t3 < a3) : i3 === t3 ? (a3 - e3) / (i3 - r3) + 2 : (e3 - t3) / (i3 - r3) + 4)), o3 !== void 0 && (u3.alpha = o3), u3;
          }
        },
        channels: [
          "h",
          "s",
          "i",
          "alpha"
        ],
        ranges: {
          h: [
            0,
            360
          ]
        },
        interpolate: {
          h: {
            use: c3,
            fixup: N3
          },
          s: c3,
          i: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        },
        difference: {
          h: on2
        },
        average: {
          h: D3
        }
      }, He2, ha = {
        mode: "hwb",
        output: {
          rgb: function(n3) {
            var e3 = n3.h, t3 = n3.w, a3 = n3.b;
            if (t3 + a3 > 1) {
              var o3 = t3 + a3;
              t3 /= o3, a3 /= o3;
            }
            return Se2({
              h: e3,
              s: a3 === 1 ? 1 : 1 - t3 / (1 - a3),
              v: 1 - a3,
              alpha: n3.alpha
            });
          }
        },
        input: {
          rgb: function(n3) {
            var e3 = Ce2(n3);
            if (e3 !== void 0) {
              var t3 = {
                mode: "hwb",
                w: (1 - e3.s) * e3.v,
                b: 1 - e3.v
              };
              return e3.h !== void 0 && (t3.h = e3.h), e3.alpha !== void 0 && (t3.alpha = e3.alpha), t3;
            }
          }
        },
        channels: [
          "h",
          "w",
          "b",
          "alpha"
        ],
        ranges: {
          h: [
            0,
            360
          ]
        },
        parsers: [
          function(n3) {
            var e3 = n3.match(Vt2);
            if (e3) {
              var t3 = {
                mode: "hwb",
                h: e3[3] === void 0 ? $n2(e3[1], e3[2]) : +e3[3],
                w: e3[4] / 100,
                b: e3[5] / 100
              };
              return e3[6] !== void 0 ? t3.alpha = e3[6] / 100 : e3[7] !== void 0 && (t3.alpha = +e3[7]), t3;
            }
          }
        ],
        serialize: function(n3) {
          return "hwb(" + (n3.h || 0) + " " + 100 * n3.w + "% " + 100 * n3.b + "%" + (n3.alpha < 1 ? " / " + n3.alpha : "") + ")";
        },
        interpolate: {
          h: {
            use: c3,
            fixup: N3
          },
          w: c3,
          b: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        },
        difference: {
          h: Ie2
        },
        average: {
          h: D3
        }
      }, Bn2 = function(n3) {
        var e3 = Math.pow(n3 / 1e4, 0.1593017578125);
        return Math.pow((0.8359375 + 18.8515625 * e3) / (1 + 18.6875 * e3), 134.03437499999998) || 0;
      }, Gn = function(n3) {
        return Math.max(203 * n3, 0);
      }, Ee2 = function(n3) {
        var e3 = n3.x, t3 = n3.y, a3 = n3.z, o3 = n3.alpha;
        e3 = Gn(e3), t3 = Gn(t3);
        var i3 = 1.15 * e3 - 0.15 * (a3 = Gn(a3)), r3 = 0.66 * t3 + 0.34 * e3, u3 = Bn2(0.41478972 * i3 + 0.579999 * r3 + 0.014648 * a3), h3 = Bn2(-0.20151 * i3 + 1.120649 * r3 + 0.0531008 * a3), s3 = Bn2(-0.0166008 * i3 + 0.2648 * r3 + 0.6684799 * a3), v3 = (u3 + h3) / 2, b3 = {
          mode: "jab",
          j: 0.44 * v3 / (1 - 0.56 * v3) - 16295499532821565e-27,
          a: 3.524 * u3 - 4.066708 * h3 + 0.542708 * s3,
          b: 0.199076 * u3 + 1.096799 * h3 - 1.295875 * s3
        };
        return o3 !== void 0 && (b3.alpha = o3), b3;
      }, Ae2 = 16295499532821565e-27, Wn2 = function(n3) {
        var e3 = Math.pow(n3, 0.007460772656268216);
        return 1e4 * Math.pow((0.8359375 - e3) / (18.6875 * e3 - 18.8515625), 6.277394636015326) || 0;
      }, _n2 = function(n3) {
        return n3 / 203;
      }, Ne2 = function(n3) {
        var e3 = n3.j, t3 = n3.a, a3 = n3.b, o3 = n3.alpha, i3 = (e3 + Ae2) / (0.44 + 0.56 * (e3 + Ae2)), r3 = Wn2(i3 + 0.13860504 * t3 + 0.058047316 * a3), u3 = Wn2(i3 - 0.13860504 * t3 - 0.058047316 * a3), h3 = Wn2(i3 - 0.096019242 * t3 - 0.8118919 * a3), s3 = {
          mode: "xyz65",
          x: _n2(1.661373024652174 * r3 - 0.914523081304348 * u3 + 0.23136208173913045 * h3),
          y: _n2(-0.3250758611844533 * r3 + 1.571847026732543 * u3 - 0.21825383453227928 * h3),
          z: _n2(-0.090982811 * r3 - 0.31272829 * u3 + 1.5227666 * h3)
        };
        return o3 !== void 0 && (s3.alpha = o3), s3;
      }, Oe2 = function(n3) {
        var e3 = Ee2(V3(n3));
        return n3.r === n3.b && n3.b === n3.g && (e3.a = e3.b = 0), e3;
      }, Re2 = function(n3) {
        return X3(Ne2(n3));
      }, ca = {
        mode: "jab",
        channels: [
          "j",
          "a",
          "b",
          "alpha"
        ],
        parsers: [
          "--jzazbz"
        ],
        serialize: "color(--jzazbz ",
        input: {
          rgb: Oe2,
          xyz65: Ee2
        },
        output: {
          rgb: Re2,
          xyz65: Ne2
        },
        ranges: {
          j: [
            0,
            0.222
          ],
          a: [
            -0.109,
            0.129
          ],
          b: [
            -0.185,
            0.134
          ]
        },
        interpolate: {
          j: c3,
          a: c3,
          b: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        }
      }, De2 = function(n3) {
        var e3 = n3.j, t3 = n3.a, a3 = n3.b, o3 = n3.alpha, i3 = Math.sqrt(t3 * t3 + a3 * a3), r3 = {
          mode: "jch",
          j: e3,
          c: i3
        };
        return i3 && (r3.h = I3(180 * Math.atan2(a3, t3) / Math.PI)), o3 !== void 0 && (r3.alpha = o3), r3;
      }, $e2 = function(n3) {
        var e3 = n3.j, t3 = n3.c, a3 = n3.h, o3 = n3.alpha, i3 = {
          mode: "jab",
          j: e3,
          a: t3 ? t3 * Math.cos(a3 / 180 * Math.PI) : 0,
          b: t3 ? t3 * Math.sin(a3 / 180 * Math.PI) : 0
        };
        return o3 !== void 0 && (i3.alpha = o3), i3;
      }, pa = {
        mode: "jch",
        parsers: [
          "--jzczhz"
        ],
        serialize: "color(--jzczhz ",
        output: {
          jab: $e2,
          rgb: function(n3) {
            return Re2($e2(n3));
          }
        },
        input: {
          rgb: function(n3) {
            return De2(Oe2(n3));
          },
          jab: De2
        },
        channels: [
          "j",
          "c",
          "h",
          "alpha"
        ],
        ranges: {
          j: [
            0,
            0.221
          ],
          c: [
            0,
            0.19
          ],
          h: [
            0,
            360
          ]
        },
        interpolate: {
          h: {
            use: c3,
            fixup: N3
          },
          c: c3,
          j: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        },
        difference: {
          h: rn
        },
        average: {
          h: D3
        }
      }, Y3 = 0.96422, Z3 = 0.82521, Mn2 = Math.pow(29, 3) / Math.pow(3, 3), Fn2 = Math.pow(6, 3) / Math.pow(29, 3), Kn2 = function(n3) {
        return Math.pow(n3, 3) > Fn2 ? Math.pow(n3, 3) : (116 * n3 - 16) / Mn2;
      }, Jn = function(n3) {
        var e3 = n3.l, t3 = n3.a, a3 = n3.b, o3 = n3.alpha, i3 = (e3 + 16) / 116, r3 = i3 - a3 / 200, u3 = {
          mode: "xyz",
          x: Kn2(t3 / 500 + i3) * Y3,
          y: 1 * Kn2(i3),
          z: Kn2(r3) * Z3
        };
        return o3 !== void 0 && (u3.alpha = o3), u3;
      }, Le2 = function(n3) {
        return vn2(Jn(n3));
      }, Qn = function(n3) {
        return n3 > Fn2 ? Math.cbrt(n3) : (Mn2 * n3 + 16) / 116;
      }, Un2 = function(n3) {
        var e3 = n3.x, t3 = n3.y, a3 = n3.z, o3 = n3.alpha, i3 = Qn(e3 / Y3), r3 = Qn(t3 / 1), u3 = {
          mode: "lab",
          l: 116 * r3 - 16,
          a: 500 * (i3 - r3),
          b: 200 * (r3 - Qn(a3 / Z3))
        };
        return o3 !== void 0 && (u3.alpha = o3), u3;
      }, Te2 = function(n3) {
        var e3 = Un2(bn2(n3));
        return n3.r === n3.b && n3.b === n3.g && (e3.a = e3.b = 0), e3;
      }, Vn2 = {
        mode: "lab",
        output: {
          xyz: Jn,
          rgb: Le2
        },
        input: {
          xyz: Un2,
          rgb: Te2
        },
        channels: [
          "l",
          "a",
          "b",
          "alpha"
        ],
        ranges: {
          l: [
            0,
            100
          ],
          a: [
            -79.287,
            93.55
          ],
          b: [
            -112.029,
            93.388
          ]
        },
        parsers: [
          function(n3) {
            var e3 = n3.match(Xt2);
            if (e3) {
              var t3 = {
                mode: "lab",
                l: +e3[1],
                a: +e3[2],
                b: +e3[3]
              };
              return e3[4] !== void 0 ? t3.alpha = e3[4] / 100 : e3[5] !== void 0 && (t3.alpha = +e3[5]), t3;
            }
          }
        ],
        serialize: function(n3) {
          return "lab(" + n3.l + "% " + n3.a + " " + n3.b + (n3.alpha < 1 ? " / " + n3.alpha : "") + ")";
        },
        interpolate: {
          l: c3,
          a: c3,
          b: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        }
      }, Be2 = 0.95047, Ge2 = 1.08883, We2 = Math.pow(29, 3) / Math.pow(3, 3), _e2 = Math.pow(6, 3) / Math.pow(29, 3), Xn = function(n3) {
        return Math.pow(n3, 3) > _e2 ? Math.pow(n3, 3) : (116 * n3 - 16) / We2;
      }, Fe2 = function(n3) {
        var e3 = n3.l, t3 = n3.a, a3 = n3.b, o3 = n3.alpha, i3 = (e3 + 16) / 116, r3 = i3 - a3 / 200, u3 = {
          mode: "xyz65",
          x: Xn(t3 / 500 + i3) * Be2,
          y: 1 * Xn(i3),
          z: Xn(r3) * Ge2
        };
        return o3 !== void 0 && (u3.alpha = o3), u3;
      }, mn2 = function(n3) {
        return X3(Fe2(n3));
      }, Yn = function(n3) {
        return n3 > _e2 ? Math.cbrt(n3) : (We2 * n3 + 16) / 116;
      }, Ke2 = function(n3) {
        var e3 = n3.x, t3 = n3.y, a3 = n3.z, o3 = n3.alpha, i3 = Yn(e3 / Be2), r3 = Yn(t3 / 1), u3 = {
          mode: "lab65",
          l: 116 * r3 - 16,
          a: 500 * (i3 - r3),
          b: 200 * (r3 - Yn(a3 / Ge2))
        };
        return o3 !== void 0 && (u3.alpha = o3), u3;
      }, yn2 = function(n3) {
        var e3 = Ke2(V3(n3));
        return n3.r === n3.b && n3.b === n3.g && (e3.a = e3.b = 0), e3;
      }, fa = Object.assign({}, Vn2, {
        mode: "lab65",
        parsers: [
          "--lab-d65"
        ],
        serialize: "color(--lab-d65 ",
        output: {
          xyz65: Fe2,
          rgb: mn2
        },
        input: {
          xyz65: Ke2,
          rgb: yn2
        },
        ranges: {
          l: [
            0,
            100
          ],
          a: [
            -86.182,
            98.234
          ],
          b: [
            -107.86,
            94.477
          ]
        }
      }), nn2 = function(n3, e3) {
        var t3 = n3.l, a3 = n3.a, o3 = n3.b, i3 = n3.alpha;
        e3 === void 0 && (e3 = "lch");
        var r3 = Math.sqrt(a3 * a3 + o3 * o3), u3 = {
          mode: e3,
          l: t3,
          c: r3
        };
        return r3 && (u3.h = I3(180 * Math.atan2(o3, a3) / Math.PI)), i3 !== void 0 && (u3.alpha = i3), u3;
      }, en2 = function(n3, e3) {
        var t3 = n3.l, a3 = n3.c, o3 = n3.h, i3 = n3.alpha;
        e3 === void 0 && (e3 = "lab");
        var r3 = {
          mode: e3,
          l: t3,
          a: a3 ? a3 * Math.cos(o3 / 180 * Math.PI) : 0,
          b: a3 ? a3 * Math.sin(o3 / 180 * Math.PI) : 0
        };
        return i3 !== void 0 && (r3.alpha = i3), r3;
      }, Zn = {
        mode: "lch",
        output: {
          lab: en2,
          rgb: function(n3) {
            return Le2(en2(n3));
          }
        },
        input: {
          rgb: function(n3) {
            return nn2(Te2(n3));
          },
          lab: nn2
        },
        channels: [
          "l",
          "c",
          "h",
          "alpha"
        ],
        ranges: {
          l: [
            0,
            100
          ],
          c: [
            0,
            131.207
          ],
          h: [
            0,
            360
          ]
        },
        parsers: [
          function(n3) {
            var e3 = n3.match(Yt2);
            if (e3) {
              var t3 = {
                mode: "lch",
                l: +e3[1],
                c: Math.max(0, +e3[2]),
                h: e3[5] === void 0 ? $n2(e3[3], e3[4]) : +e3[5]
              };
              return e3[6] !== void 0 ? t3.alpha = e3[6] / 100 : e3[7] !== void 0 && (t3.alpha = +e3[7]), t3;
            }
          }
        ],
        serialize: function(n3) {
          return "lch(" + n3.l + "% " + n3.c + " " + (n3.h || 0) + (n3.alpha < 1 ? " / " + n3.alpha : "") + ")";
        },
        interpolate: {
          h: {
            use: c3,
            fixup: N3
          },
          c: c3,
          l: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        },
        difference: {
          h: rn
        },
        average: {
          h: D3
        }
      }, sa = Object.assign({}, Zn, {
        mode: "lch65",
        parsers: [
          "--lch-d65"
        ],
        serialize: "color(--lch-d65 ",
        output: {
          lab65: function(n3) {
            return en2(n3, "lab65");
          },
          rgb: function(n3) {
            return mn2(en2(n3, "lab65"));
          }
        },
        input: {
          rgb: function(n3) {
            return nn2(yn2(n3), "lch65");
          },
          lab65: function(n3) {
            return nn2(n3, "lch65");
          }
        },
        ranges: {
          l: [
            0,
            100
          ],
          c: [
            0,
            133.807
          ],
          h: [
            0,
            360
          ]
        }
      }), Je2 = function(n3, e3, t3) {
        return 4 * n3 / (n3 + 15 * e3 + 3 * t3);
      }, Qe2 = function(n3, e3, t3) {
        return 9 * e3 / (n3 + 15 * e3 + 3 * t3);
      }, da = Je2(Y3, 1, Z3), va = Qe2(Y3, 1, Z3), Ue2 = function(n3) {
        var e3, t3 = n3.x, a3 = n3.y, o3 = n3.z, i3 = n3.alpha, r3 = (e3 = a3 / 1) <= Fn2 ? Mn2 * e3 : 116 * Math.cbrt(e3) - 16, u3 = Je2(t3, a3, o3), h3 = Qe2(t3, a3, o3);
        isFinite(u3) && isFinite(h3) ? (u3 = 13 * r3 * (u3 - da), h3 = 13 * r3 * (h3 - va)) : r3 = u3 = h3 = 0;
        var s3 = {
          mode: "luv",
          l: r3,
          u: u3,
          v: h3
        };
        return i3 !== void 0 && (s3.alpha = i3), s3;
      }, Ve2 = function(n3) {
        return Ue2(bn2(n3));
      }, ba2 = 4 * (He2 = Y3) / (He2 + 15 * 1 + 3 * Z3), ga2 = function(n3, e3, t3) {
        return 9 * e3 / (n3 + 15 * e3 + 3 * t3);
      }(Y3, 1, Z3), Xe2 = function(n3) {
        var e3 = n3.l, t3 = n3.u, a3 = n3.v, o3 = n3.alpha, i3 = t3 / (13 * e3) + ba2, r3 = a3 / (13 * e3) + ga2, u3 = 1 * (e3 <= 8 ? e3 / Mn2 : Math.pow((e3 + 16) / 116, 3)), h3 = {
          mode: "xyz",
          x: u3 * (9 * i3) / (4 * r3),
          y: u3,
          z: u3 * (12 - 3 * i3 - 20 * r3) / (4 * r3)
        };
        return o3 !== void 0 && (h3.alpha = o3), h3;
      }, Ye2 = function(n3) {
        return vn2(Xe2(n3));
      }, Ma2 = {
        mode: "luv",
        output: {
          xyz: Xe2,
          rgb: Ye2
        },
        input: {
          xyz: Ue2,
          rgb: Ve2
        },
        channels: [
          "l",
          "u",
          "v",
          "alpha"
        ],
        parsers: [
          "--luv"
        ],
        serialize: "color(--luv ",
        ranges: {
          l: [
            0,
            100
          ],
          u: [
            -84.936,
            175.042
          ],
          v: [
            -125.882,
            87.243
          ]
        },
        interpolate: {
          l: c3,
          u: c3,
          v: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        }
      }, Ze2 = function(n3) {
        var e3 = n3.l, t3 = n3.u, a3 = n3.v, o3 = n3.alpha, i3 = Math.sqrt(t3 * t3 + a3 * a3), r3 = {
          mode: "lchuv",
          l: e3,
          c: i3
        };
        return i3 && (r3.h = I3(180 * Math.atan2(a3, t3) / Math.PI)), o3 !== void 0 && (r3.alpha = o3), r3;
      }, nt2 = function(n3) {
        var e3 = n3.l, t3 = n3.c, a3 = n3.h, o3 = n3.alpha, i3 = {
          mode: "luv",
          l: e3,
          u: t3 ? t3 * Math.cos(a3 / 180 * Math.PI) : 0,
          v: t3 ? t3 * Math.sin(a3 / 180 * Math.PI) : 0
        };
        return o3 !== void 0 && (i3.alpha = o3), i3;
      }, ma2 = {
        mode: "lchuv",
        output: {
          luv: nt2,
          rgb: function(n3) {
            return Ye2(nt2(n3));
          }
        },
        input: {
          rgb: function(n3) {
            return Ze2(Ve2(n3));
          },
          luv: Ze2
        },
        channels: [
          "l",
          "c",
          "h",
          "alpha"
        ],
        parsers: [
          "--lchuv"
        ],
        serialize: "color(--lchuv ",
        ranges: {
          l: [
            0,
            100
          ],
          c: [
            0,
            176.956
          ],
          h: [
            0,
            360
          ]
        },
        interpolate: {
          h: {
            use: c3,
            fixup: N3
          },
          c: c3,
          l: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        },
        difference: {
          h: rn
        },
        average: {
          h: D3
        }
      }, P3 = [
        -0.14861,
        1.78277,
        -0.29227,
        -0.90649,
        1.97294,
        0
      ], ya2 = Math.PI / 180, xa2 = 180 / Math.PI, et = P3[3] * P3[4], tt2 = P3[1] * P3[4], at2 = P3[1] * P3[2] - P3[0] * P3[3], wa2 = {
        mode: "cubehelix",
        channels: [
          "h",
          "s",
          "l",
          "alpha"
        ],
        parsers: [
          "--cubehelix"
        ],
        serialize: "color(--cubehelix ",
        ranges: {
          h: [
            0,
            360
          ],
          s: [
            0,
            4.614
          ],
          l: [
            0,
            1
          ]
        },
        input: {
          rgb: function(n3) {
            var e3 = n3.r, t3 = n3.g, a3 = n3.b, o3 = n3.alpha, i3 = (at2 * a3 + e3 * et - t3 * tt2) / (at2 + et - tt2), r3 = a3 - i3, u3 = (P3[4] * (t3 - i3) - P3[2] * r3) / P3[3], h3 = {
              mode: "cubehelix",
              l: i3,
              s: i3 === 0 || i3 === 1 ? void 0 : Math.sqrt(r3 * r3 + u3 * u3) / (P3[4] * i3 * (1 - i3))
            };
            return h3.s && (h3.h = Math.atan2(u3, r3) * xa2 - 120), o3 !== void 0 && (h3.alpha = o3), h3;
          }
        },
        output: {
          rgb: function(n3) {
            var e3 = n3.h, t3 = n3.s, a3 = n3.l, o3 = n3.alpha, i3 = {
              mode: "rgb"
            };
            e3 = (e3 === void 0 ? 0 : e3 + 120) * ya2;
            var r3 = t3 === void 0 ? 0 : t3 * a3 * (1 - a3), u3 = Math.cos(e3), h3 = Math.sin(e3);
            return i3.r = a3 + r3 * (P3[0] * u3 + P3[1] * h3), i3.g = a3 + r3 * (P3[2] * u3 + P3[3] * h3), i3.b = a3 + r3 * (P3[4] * u3 + P3[5] * h3), o3 !== void 0 && (i3.alpha = o3), i3;
          }
        },
        interpolate: {
          h: {
            use: c3,
            fixup: N3
          },
          s: c3,
          l: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        },
        difference: {
          h: on2
        },
        average: {
          h: D3
        }
      }, it2 = function(n3) {
        var e3 = n3.l, t3 = n3.a, a3 = n3.b, o3 = n3.alpha, i3 = Math.sqrt(t3 * t3 + a3 * a3), r3 = {
          mode: "dlch",
          l: e3,
          c: i3
        };
        return i3 && (r3.h = I3(180 * Math.atan2(a3, t3) / Math.PI)), o3 !== void 0 && (r3.alpha = o3), r3;
      }, ln2 = 26 / 180 * Math.PI, xn = Math.cos(ln2), wn2 = Math.sin(ln2), ot2 = 100 / Math.log(1.39), ne2 = function(n3) {
        var e3 = n3.l, t3 = n3.c, a3 = n3.h, o3 = n3.alpha, i3 = {
          mode: "lab65",
          l: (Math.exp(1 * e3 / ot2) - 1) / 39e-4
        };
        if (a3 === void 0) i3.a = i3.b = 0;
        else {
          var r3 = (Math.exp(0.0435 * t3 * 1 * 1) - 1) / 0.075, u3 = r3 * Math.cos(a3 / 180 * Math.PI - ln2), h3 = r3 * Math.sin(a3 / 180 * Math.PI - ln2);
          i3.a = u3 * xn - h3 / 0.83 * wn2, i3.b = u3 * wn2 + h3 / 0.83 * xn;
        }
        return o3 !== void 0 && (i3.alpha = o3), i3;
      }, rt2 = function(n3) {
        return ne2(it2(n3));
      }, ee2 = function(n3) {
        var e3 = n3.l, t3 = n3.a, a3 = n3.b, o3 = n3.alpha, i3 = t3 * xn + a3 * wn2, r3 = 0.83 * (a3 * xn - t3 * wn2), u3 = Math.sqrt(i3 * i3 + r3 * r3), h3 = {
          mode: "dlch",
          l: ot2 / 1 * Math.log(1 + 39e-4 * e3),
          c: Math.log(1 + 0.075 * u3) / 0.0435
        };
        return h3.c && (h3.h = I3((Math.atan2(r3, i3) + ln2) / Math.PI * 180)), o3 !== void 0 && (h3.alpha = o3), h3;
      }, ut2 = function(n3) {
        var e3 = n3.l, t3 = n3.c, a3 = n3.h, o3 = n3.alpha, i3 = {
          mode: "dlab",
          l: e3,
          a: t3 === 0 ? 0 : t3 * Math.cos(a3 / 180 * Math.PI),
          b: t3 === 0 ? 0 : t3 * Math.sin(a3 / 180 * Math.PI)
        };
        return o3 !== void 0 && (i3.alpha = o3), i3;
      }, lt2 = function(n3) {
        return ut2(ee2(n3));
      }, za2 = {
        mode: "dlab",
        parsers: [
          "--din99o-lab"
        ],
        serialize: "color(--din99o-lab ",
        output: {
          lab65: rt2,
          rgb: function(n3) {
            return mn2(rt2(n3));
          }
        },
        input: {
          lab65: lt2,
          rgb: function(n3) {
            return lt2(yn2(n3));
          }
        },
        channels: [
          "l",
          "a",
          "b",
          "alpha"
        ],
        ranges: {
          l: [
            0,
            100
          ],
          a: [
            -40.09,
            45.501
          ],
          b: [
            -40.469,
            44.344
          ]
        },
        interpolate: {
          l: c3,
          a: c3,
          b: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        }
      }, ka2 = {
        mode: "dlch",
        parsers: [
          "--din99o-lch"
        ],
        serialize: "color(--din99o-lch ",
        output: {
          lab65: ne2,
          dlab: ut2,
          rgb: function(n3) {
            return mn2(ne2(n3));
          }
        },
        input: {
          lab65: ee2,
          dlab: it2,
          rgb: function(n3) {
            return ee2(yn2(n3));
          }
        },
        channels: [
          "l",
          "c",
          "h",
          "alpha"
        ],
        ranges: {
          l: [
            0,
            100
          ],
          c: [
            0,
            51.484
          ],
          h: [
            0,
            360
          ]
        },
        interpolate: {
          l: c3,
          c: c3,
          h: {
            use: c3,
            fixup: N3
          },
          alpha: {
            use: c3,
            fixup: z3
          }
        },
        difference: {
          h: rn
        },
        average: {
          h: D3
        }
      }, Pa2 = {
        mode: "xyz",
        parsers: [
          "xyz",
          "--xyz-d50"
        ],
        serialize: "color(--xyz-d50 ",
        output: {
          rgb: vn2,
          lab: Un2
        },
        input: {
          rgb: bn2,
          lab: Jn
        },
        channels: [
          "x",
          "y",
          "z",
          "alpha"
        ],
        ranges: {
          x: [
            0,
            0.964
          ],
          y: [
            0,
            0.999
          ],
          z: [
            0,
            0.825
          ]
        },
        interpolate: {
          x: c3,
          y: c3,
          z: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        }
      }, ja2 = {
        mode: "xyz65",
        serialize: "color(--xyz-d65 ",
        output: {
          rgb: X3,
          xyz: function(n3) {
            var e3 = n3.x, t3 = n3.y, a3 = n3.z, o3 = n3.alpha, i3 = {
              mode: "xyz",
              x: 1.0478112 * e3 + 0.0228866 * t3 - 0.050127 * a3,
              y: 0.0295424 * e3 + 0.9904844 * t3 - 0.0170491 * a3,
              z: -92345e-7 * e3 + 0.0150436 * t3 + 0.7521316 * a3
            };
            return o3 !== void 0 && (i3.alpha = o3), i3;
          }
        },
        input: {
          rgb: V3,
          xyz: function(n3) {
            var e3 = n3.x, t3 = n3.y, a3 = n3.z, o3 = n3.alpha, i3 = {
              mode: "xyz65",
              x: 0.9555766 * e3 - 0.0230393 * t3 + 0.0631636 * a3,
              y: -0.0282895 * e3 + 1.0099416 * t3 + 0.0210077 * a3,
              z: 0.0122982 * e3 - 0.020483 * t3 + 1.3299098 * a3
            };
            return o3 !== void 0 && (i3.alpha = o3), i3;
          }
        },
        ranges: {
          x: [
            0,
            0.95
          ],
          y: [
            0,
            1
          ],
          z: [
            0,
            1.088
          ]
        },
        channels: [
          "x",
          "y",
          "z",
          "alpha"
        ],
        parsers: [
          "--xyz-d65"
        ],
        interpolate: {
          x: c3,
          y: c3,
          z: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        }
      }, Ia2 = {
        mode: "yiq",
        output: {
          rgb: function(n3) {
            var e3 = n3.y, t3 = n3.i, a3 = n3.q, o3 = n3.alpha;
            return U3({
              r: e3 + 0.95608445 * t3 + 0.6208885 * a3,
              g: e3 - 0.27137664 * t3 - 0.6486059 * a3,
              b: e3 - 1.10561724 * t3 + 1.70250126 * a3,
              alpha: o3
            });
          }
        },
        input: {
          rgb: function(n3) {
            var e3 = Q3(n3), t3 = e3.r, a3 = e3.g, o3 = e3.b, i3 = e3.alpha, r3 = {
              mode: "yiq",
              y: 0.29889531 * t3 + 0.58662247 * a3 + 0.11448223 * o3,
              i: 0.59597799 * t3 - 0.2741761 * a3 - 0.32180189 * o3,
              q: 0.21147017 * t3 - 0.52261711 * a3 + 0.31114694 * o3
            };
            return i3 !== void 0 && (r3.alpha = i3), r3;
          }
        },
        channels: [
          "y",
          "i",
          "q",
          "alpha"
        ],
        parsers: [
          "--yiq"
        ],
        serialize: "color(--yiq ",
        ranges: {
          i: [
            -0.595,
            0.595
          ],
          q: [
            -0.522,
            0.522
          ]
        },
        interpolate: {
          y: c3,
          i: c3,
          q: c3,
          alpha: {
            use: c3,
            fixup: z3
          }
        }
      }, ht2 = function(n3) {
        var e3 = n3.l, t3 = n3.a, a3 = n3.b, o3 = n3.alpha, i3 = Math.pow(e3 + 0.3963377774 * t3 + 0.2158037573 * a3, 3), r3 = Math.pow(e3 - 0.1055613458 * t3 - 0.0638541728 * a3, 3), u3 = Math.pow(e3 - 0.0894841775 * t3 - 1.291485548 * a3, 3), h3 = {
          mode: "lrgb",
          r: 4.0767416621 * i3 - 3.3077115913 * r3 + 0.2309699292 * u3,
          g: -1.2684380046 * i3 + 2.6097574011 * r3 - 0.3413193965 * u3,
          b: -0.0041960863 * i3 - 0.7034186147 * r3 + 1.707614701 * u3
        };
        return o3 !== void 0 && (h3.alpha = o3), h3;
      }, ct2 = function(n3) {
        var e3 = n3.r, t3 = n3.g, a3 = n3.b, o3 = n3.alpha, i3 = Math.cbrt(0.4122214708 * e3 + 0.5363325363 * t3 + 0.0514459929 * a3), r3 = Math.cbrt(0.2119034982 * e3 + 0.6806995451 * t3 + 0.1073969566 * a3), u3 = Math.cbrt(0.0883024619 * e3 + 0.2817188376 * t3 + 0.6299787005 * a3), h3 = {
          mode: "oklab",
          l: 0.2104542553 * i3 + 0.793617785 * r3 - 0.0040720468 * u3,
          a: 1.9779984951 * i3 - 2.428592205 * r3 + 0.4505937099 * u3,
          b: 0.0259040371 * i3 + 0.7827717662 * r3 - 0.808675766 * u3
        };
        return o3 !== void 0 && (h3.alpha = o3), h3;
      }, pt2 = function(n3) {
        var e3 = ct2(Q3(n3));
        return n3.r === n3.b && n3.b === n3.g && (e3.a = e3.b = 0), e3;
      }, ft2 = function(n3) {
        return U3(ht2(n3));
      }, qa2 = Object.assign({}, Vn2, {
        mode: "oklab",
        output: {
          lrgb: ht2,
          rgb: ft2
        },
        input: {
          lrgb: ct2,
          rgb: pt2
        },
        ranges: {
          l: [
            0,
            0.999
          ],
          a: [
            -0.233,
            0.276
          ],
          b: [
            -0.311,
            0.198
          ]
        },
        parsers: [
          "--oklab"
        ],
        serialize: "color(--oklab "
      }), Sa = Object.assign({}, Zn, {
        mode: "oklch",
        output: {
          oklab: function(n3) {
            return en2(n3, "oklab");
          },
          rgb: function(n3) {
            return ft2(en2(n3, "oklab"));
          }
        },
        input: {
          rgb: function(n3) {
            return nn2(pt2(n3), "oklch");
          },
          oklab: function(n3) {
            return nn2(n3, "oklch");
          }
        },
        parsers: [
          "--oklch"
        ],
        serialize: "color(--oklch ",
        ranges: {
          l: [
            0,
            0.999
          ],
          c: [
            0,
            0.322
          ],
          h: [
            0,
            360
          ]
        }
      }), st2 = function(n3) {
        return n3 === void 0 && (n3 = 4), function(e3) {
          return typeof e3 == "number" ? function(t3, a3) {
            return Math.round(t3 * (a3 = Math.pow(10, a3))) / a3;
          }(e3, n3) : e3;
        };
      }, te2 = d3("rgb"), Ca2 = d3("hsl"), hn2 = st2(2), cn2 = function(n3) {
        return Math.max(0, Math.min(1, n3));
      }, _3 = function(n3) {
        return Math.round(255 * cn2(n3));
      }, ae2 = function(n3) {
        var e3 = te2(n3);
        if (e3 !== void 0) return "#" + (1 << 24 | _3(e3.r) << 16 | _3(e3.g) << 8 | _3(e3.b)).toString(16).slice(1);
      }, dt2 = function(n3) {
        var e3 = te2(n3);
        if (e3 !== void 0) {
          var t3 = _3(e3.r), a3 = _3(e3.g), o3 = _3(e3.b);
          return e3.alpha === void 0 || e3.alpha === 1 ? "rgb(" + t3 + ", " + a3 + ", " + o3 + ")" : "rgba(" + t3 + ", " + a3 + ", " + o3 + ", " + hn2(cn2(e3.alpha)) + ")";
        }
      }, vt2 = function(n3) {
        return n3 === void 0 && (n3 = 0.5), function(e3) {
          return n3 <= 0 ? 1 : n3 >= 1 ? 0 : Math.pow(e3, Math.log(0.5) / Math.log(n3));
        };
      }, pn2 = function(n3, e3, t3) {
        e3 === void 0 && (e3 = "rgb"), t3 === void 0 && (t3 = false);
        var a3 = e3 ? E3(e3).channels : null, o3 = e3 ? d3(e3) : G3;
        return function(i3) {
          var r3 = o3(i3), u3 = (a3 || E3(i3.mode).channels).reduce(function(s3, v3) {
            var b3 = n3(r3[v3], v3, r3, e3);
            return b3 === void 0 || isNaN(b3) || (s3[v3] = b3), s3;
          }, {
            mode: e3
          });
          if (!t3) return u3;
          var h3 = G3(i3);
          return h3 && h3.mode !== u3.mode ? d3(h3.mode)(u3) : u3;
        };
      }, bt2 = function(n3, e3, t3) {
        return e3 !== "alpha" ? (n3 || 0) * (t3.alpha !== void 0 ? t3.alpha : 1) : n3;
      }, gt2 = function(n3, e3, t3) {
        return e3 !== "alpha" && t3.alpha !== 0 ? (n3 || 0) / (t3.alpha !== void 0 ? t3.alpha : 1) : n3;
      }, ie2 = function(n3, e3) {
        return n3 === void 0 && (n3 = 1), e3 === void 0 && (e3 = 0), function(t3, a3) {
          return a3 !== "alpha" ? t3 * n3 + e3 : t3;
        };
      }, zn2 = function(n3) {
        return typeof n3 == "function";
      }, F3 = function(n3) {
        return n3 && typeof n3 == "object";
      }, Mt2 = function(n3) {
        return typeof n3 == "number";
      }, mt2 = function(n3, e3, t3, a3) {
        e3 === void 0 && (e3 = "rgb");
        var o3 = E3(e3), i3 = d3(e3), r3 = [], u3 = [], h3 = {};
        n3.forEach(function(p3) {
          Array.isArray(p3) ? (r3.push(i3(p3[0])), u3.push(p3[1])) : Mt2(p3) || zn2(p3) ? h3[u3.length] = p3 : (r3.push(i3(p3)), u3.push(void 0));
        }), function(p3) {
          p3[0] === void 0 && (p3[0] = 0), p3[p3.length - 1] === void 0 && (p3[p3.length - 1] = 1);
          for (var f3, M3, y3, j3, g3 = 1; g3 < p3.length; ) {
            if (p3[g3] === void 0) {
              for (M3 = g3, y3 = p3[g3 - 1], f3 = g3; p3[f3] === void 0; ) f3++;
              for (j3 = (p3[f3] - y3) / (f3 - g3 + 1); g3 < f3; ) p3[g3] = y3 + (g3 + 1 - M3) * j3, g3++;
            } else p3[g3] < p3[g3 - 1] && (p3[g3] = p3[g3 - 1]);
            g3++;
          }
        }(u3);
        var s3 = o3.channels.reduce(function(p3, f3) {
          var M3;
          return M3 = F3(t3) && F3(t3[f3]) && t3[f3].fixup ? t3[f3].fixup : F3(o3.interpolate[f3]) && o3.interpolate[f3].fixup ? o3.interpolate[f3].fixup : function(y3) {
            return y3;
          }, p3[f3] = M3(r3.map(function(y3) {
            return y3[f3];
          })), p3;
        }, {});
        if (a3) {
          var v3 = r3.map(function(p3, f3) {
            return o3.channels.reduce(function(M3, y3) {
              return M3[y3] = s3[y3][f3], M3;
            }, {
              mode: e3
            });
          });
          s3 = o3.channels.reduce(function(p3, f3) {
            return p3[f3] = v3.map(function(M3) {
              var y3 = a3(M3[f3], f3, M3, e3);
              return isNaN(y3) ? void 0 : y3;
            }), p3;
          }, {});
        }
        var b3 = o3.channels.reduce(function(p3, f3) {
          var M3;
          return zn2(t3) ? M3 = t3 : F3(t3) && zn2(t3[f3]) ? M3 = t3[f3] : F3(t3) && F3(t3[f3]) && t3[f3].use ? M3 = t3[f3].use : zn2(o3.interpolate[f3]) ? M3 = o3.interpolate[f3] : F3(o3.interpolate[f3]) && (M3 = o3.interpolate[f3].use), p3[f3] = M3(s3[f3]), p3;
        }, {}), q3 = r3.length - 1;
        return function(p3) {
          if ((p3 = Math.min(Math.max(0, p3), 1)) <= u3[0]) return r3[0];
          if (p3 > u3[q3]) return r3[q3];
          for (var f3 = 0; u3[f3] < p3; ) f3++;
          var M3 = u3[f3 - 1], y3 = u3[f3] - M3, j3 = (p3 - M3) / y3, g3 = h3[f3] || h3[0];
          g3 !== void 0 && (Mt2(g3) && (g3 = vt2((g3 - M3) / y3)), j3 = g3(j3));
          var $3 = (f3 - 1 + j3) / q3;
          return o3.channels.reduce(function(L3, A3) {
            var O3 = b3[A3]($3);
            return O3 !== void 0 && (L3[A3] = O3), L3;
          }, {
            mode: e3
          });
        };
      }, yt2 = function(n3, e3) {
        return function(t3, a3, o3) {
          a3 === void 0 && (a3 = "rgb");
          var i3 = e3 ? pn2(e3, a3) : void 0, r3 = mt2(t3, a3, o3, n3);
          return i3 ? function(u3) {
            return i3(r3(u3));
          } : r3;
        };
      }, Ha2 = yt2(bt2, gt2), xt2 = function(n3) {
        return (1 - Math.cos(n3 * Math.PI)) / 2;
      }, kn = function(n3, e3) {
        return (n3 + e3) % e3;
      }, wt2 = function(n3, e3, t3, a3, o3) {
        var i3 = o3 * o3, r3 = i3 * o3;
        return ((1 - 3 * o3 + 3 * i3 - r3) * n3 + (4 - 6 * i3 + 3 * r3) * e3 + (1 + 3 * o3 + 3 * i3 - 3 * r3) * t3 + r3 * a3) / 6;
      }, oe2 = function(n3) {
        return function(e3) {
          var t3 = n3.length - 1, a3 = e3 >= 1 ? t3 - 1 : Math.max(0, Math.floor(e3 * t3));
          return wt2(a3 > 0 ? n3[a3 - 1] : 2 * n3[a3] - n3[a3 + 1], n3[a3], n3[a3 + 1], a3 < t3 - 1 ? n3[a3 + 2] : 2 * n3[a3 + 1] - n3[a3], (e3 - a3 / t3) * t3);
        };
      }, re2 = function(n3) {
        return function(e3) {
          var t3 = n3.length - 1, a3 = Math.floor(e3 * t3);
          return wt2(n3[kn(a3 - 1, n3.length)], n3[kn(a3, n3.length)], n3[kn(a3 + 1, n3.length)], n3[kn(a3 + 2, n3.length)], (e3 - a3 / t3) * t3);
        };
      }, zt2 = function(n3) {
        var e3, t3 = n3.length - 1, a3 = new Array(t3), o3 = new Array(t3), i3 = new Array(t3);
        for (a3[1] = 1 / 4, o3[1] = (6 * n3[1] - n3[0]) / 4, e3 = 2; e3 < t3; ++e3) a3[e3] = 1 / (4 - a3[e3 - 1]), o3[e3] = (6 * n3[e3] - (e3 == t3 - 1 ? n3[t3] : 0) - o3[e3 - 1]) * a3[e3];
        for (i3[0] = n3[0], i3[t3] = n3[t3], t3 - 1 > 0 && (i3[t3 - 1] = o3[t3 - 1]), e3 = t3 - 2; e3 > 0; --e3) i3[e3] = o3[e3] - a3[e3] * i3[e3 + 1];
        return i3;
      }, kt2 = function(n3) {
        return oe2(zt2(n3));
      }, Pt2 = function(n3) {
        return re2(zt2(n3));
      }, tn2 = Math.sign, ue2 = Math.min, H3 = Math.abs, le2 = function(n3) {
        for (var e3 = n3.length - 1, t3 = [], a3 = [], o3 = [], i3 = 0; i3 < e3; i3++) t3.push((n3[i3 + 1] - n3[i3]) * e3), a3.push(i3 > 0 ? 0.5 * (n3[i3 + 1] - n3[i3 - 1]) * e3 : void 0), o3.push(i3 > 0 ? (tn2(t3[i3 - 1]) + tn2(t3[i3])) * ue2(H3(t3[i3 - 1]), H3(t3[i3]), 0.5 * H3(a3[i3])) : void 0);
        return [
          t3,
          a3,
          o3
        ];
      }, he2 = function(n3, e3, t3) {
        var a3 = n3.length - 1, o3 = a3 * a3;
        return function(i3) {
          var r3, u3 = i3 - (r3 = i3 >= 1 ? a3 - 1 : Math.max(0, Math.floor(i3 * a3))) / a3, h3 = u3 * u3, s3 = h3 * u3;
          return (e3[r3] + e3[r3 + 1] - 2 * t3[r3]) * o3 * s3 + (3 * t3[r3] - 2 * e3[r3] - e3[r3 + 1]) * a3 * h3 + e3[r3] * u3 + n3[r3];
        };
      }, jt2 = function(n3) {
        if (n3.length < 3) return c3(n3);
        var e3 = n3.length - 1, t3 = le2(n3), a3 = t3[0], o3 = t3[2];
        return o3[0] = a3[0], o3[e3] = a3[e3 - 1], he2(n3, o3, a3);
      }, It2 = function(n3) {
        var e3 = n3.length - 1, t3 = le2(n3), a3 = t3[0], o3 = t3[1], i3 = t3[2];
        o3[0] = 0.5 * (n3[1] - n3[e3]) * e3, o3[e3] = 0.5 * (n3[0] - n3[e3 - 1]) * e3;
        var r3 = (n3[0] - n3[e3]) * e3, u3 = r3;
        return i3[0] = (tn2(r3) + tn2(a3[0])) * ue2(H3(r3), H3(a3[0]), 0.5 * H3(o3[0])), i3[e3] = (tn2(a3[e3 - 1]) + tn2(u3)) * ue2(H3(a3[e3 - 1]), H3(u3), 0.5 * H3(o3[e3])), he2(n3, i3, a3);
      }, Ea2 = d3("rgb"), an2 = function(n3) {
        var e3 = Ea2(n3);
        return e3 !== void 0 && e3.r >= 0 && e3.r <= 1 && e3.g >= 0 && e3.g <= 1 && e3.b >= 0 && e3.b <= 1;
      }, Aa2 = d3("rgb"), qt2 = function(n3) {
        var e3 = Aa2(n3);
        return e3.r = Math.max(0, Math.min(e3.r, 1)), e3.g = Math.max(0, Math.min(e3.g, 1)), e3.b = Math.max(0, Math.min(e3.b, 1)), e3;
      }, St2 = function(n3) {
        return (n3 = G3(n3)) === void 0 || an2(n3) ? n3 : d3(n3.mode)(qt2(n3));
      }, Ct2 = function(n3, e3) {
        if (e3 === void 0 && (e3 = "lch"), (n3 = G3(n3)) === void 0 || an2(n3)) return n3;
        var t3 = d3(n3.mode);
        n3 = d3(e3)(n3);
        var a3 = Object.assign({}, n3, {
          c: 0
        });
        if (!an2(a3)) return t3(qt2(a3));
        for (var o3, i3 = 0, r3 = n3.c, u3 = E3(e3).ranges.c, h3 = (u3[1] - u3[0]) / Math.pow(2, 13); r3 - i3 > h3; ) a3.c = i3 + 0.5 * (r3 - i3), an2(a3) ? (o3 = a3.c, i3 = a3.c) : r3 = a3.c;
        return t3(an2(a3) ? a3 : Object.assign({}, a3, {
          c: o3
        }));
      }, Na2 = {
        normal: function(n3, e3) {
          return e3;
        },
        multiply: function(n3, e3) {
          return n3 * e3;
        },
        screen: function(n3, e3) {
          return n3 + e3 - n3 * e3;
        },
        "hard-light": function(n3, e3) {
          return e3 < 0.5 ? 2 * n3 * e3 : 2 * e3 * (1 - n3) - 1;
        },
        overlay: function(n3, e3) {
          return n3 < 0.5 ? 2 * e3 * n3 : 2 * n3 * (1 - e3) - 1;
        },
        darken: function(n3, e3) {
          return Math.min(n3, e3);
        },
        lighten: function(n3, e3) {
          return Math.max(n3, e3);
        },
        "color-dodge": function(n3, e3) {
          return n3 === 0 ? 0 : e3 === 1 ? 1 : Math.min(1, n3 / (1 - e3));
        },
        "color-burn": function(n3, e3) {
          return n3 === 1 ? 1 : e3 === 0 ? 0 : 1 - Math.min(1, (1 - n3) / e3);
        },
        "soft-light": function(n3, e3) {
          return e3 < 0.5 ? n3 - (1 - 2 * e3) * n3 * (1 - n3) : n3 + (2 * e3 - 1) * ((n3 < 0.25 ? ((16 * n3 - 12) * n3 + 4) * n3 : Math.sqrt(n3)) - n3);
        },
        difference: function(n3, e3) {
          return Math.abs(n3 - e3);
        },
        exclusion: function(n3, e3) {
          return n3 + e3 - 2 * n3 * e3;
        }
      };
      function ce2(n3) {
        var e3 = d3("lrgb")(n3);
        return 0.2126 * e3.r + 0.7152 * e3.g + 0.0722 * e3.b;
      }
      var Oa2 = d3("rgb"), Ra2 = [
        [
          1,
          0,
          -0,
          0,
          1,
          0,
          -0,
          -0,
          1
        ],
        [
          0.856167,
          0.182038,
          -0.038205,
          0.029342,
          0.955115,
          0.015544,
          -288e-5,
          -1563e-6,
          1.004443
        ],
        [
          0.734766,
          0.334872,
          -0.069637,
          0.05184,
          0.919198,
          0.028963,
          -4928e-6,
          -4209e-6,
          1.009137
        ],
        [
          0.630323,
          0.465641,
          -0.095964,
          0.069181,
          0.890046,
          0.040773,
          -6308e-6,
          -7724e-6,
          1.014032
        ],
        [
          0.539009,
          0.579343,
          -0.118352,
          0.082546,
          0.866121,
          0.051332,
          -7136e-6,
          -0.011959,
          1.019095
        ],
        [
          0.458064,
          0.679578,
          -0.137642,
          0.092785,
          0.846313,
          0.060902,
          -7494e-6,
          -0.016807,
          1.024301
        ],
        [
          0.38545,
          0.769005,
          -0.154455,
          0.100526,
          0.829802,
          0.069673,
          -7442e-6,
          -0.02219,
          1.029632
        ],
        [
          0.319627,
          0.849633,
          -0.169261,
          0.106241,
          0.815969,
          0.07779,
          -7025e-6,
          -0.028051,
          1.035076
        ],
        [
          0.259411,
          0.923008,
          -0.18242,
          0.110296,
          0.80434,
          0.085364,
          -6276e-6,
          -0.034346,
          1.040622
        ],
        [
          0.203876,
          0.990338,
          -0.194214,
          0.112975,
          0.794542,
          0.092483,
          -5222e-6,
          -0.041043,
          1.046265
        ],
        [
          0.152286,
          1.052583,
          -0.204868,
          0.114503,
          0.786281,
          0.099216,
          -3882e-6,
          -0.048116,
          1.051998
        ]
      ], Da2 = [
        [
          1,
          0,
          -0,
          0,
          1,
          0,
          -0,
          -0,
          1
        ],
        [
          0.866435,
          0.177704,
          -0.044139,
          0.049567,
          0.939063,
          0.01137,
          -3453e-6,
          7233e-6,
          0.99622
        ],
        [
          0.760729,
          0.319078,
          -0.079807,
          0.090568,
          0.889315,
          0.020117,
          -6027e-6,
          0.013325,
          0.992702
        ],
        [
          0.675425,
          0.43385,
          -0.109275,
          0.125303,
          0.847755,
          0.026942,
          -795e-5,
          0.018572,
          0.989378
        ],
        [
          0.605511,
          0.52856,
          -0.134071,
          0.155318,
          0.812366,
          0.032316,
          -9376e-6,
          0.023176,
          0.9862
        ],
        [
          0.547494,
          0.607765,
          -0.155259,
          0.181692,
          0.781742,
          0.036566,
          -0.01041,
          0.027275,
          0.983136
        ],
        [
          0.498864,
          0.674741,
          -0.173604,
          0.205199,
          0.754872,
          0.039929,
          -0.011131,
          0.030969,
          0.980162
        ],
        [
          0.457771,
          0.731899,
          -0.18967,
          0.226409,
          0.731012,
          0.042579,
          -0.011595,
          0.034333,
          0.977261
        ],
        [
          0.422823,
          0.781057,
          -0.203881,
          0.245752,
          0.709602,
          0.044646,
          -0.011843,
          0.037423,
          0.974421
        ],
        [
          0.392952,
          0.82361,
          -0.216562,
          0.263559,
          0.69021,
          0.046232,
          -0.01191,
          0.040281,
          0.97163
        ],
        [
          0.367322,
          0.860646,
          -0.227968,
          0.280085,
          0.672501,
          0.047413,
          -0.01182,
          0.04294,
          0.968881
        ]
      ], $a2 = [
        [
          1,
          0,
          -0,
          0,
          1,
          0,
          -0,
          -0,
          1
        ],
        [
          0.92667,
          0.092514,
          -0.019184,
          0.021191,
          0.964503,
          0.014306,
          8437e-6,
          0.054813,
          0.93675
        ],
        [
          0.89572,
          0.13333,
          -0.02905,
          0.029997,
          0.9454,
          0.024603,
          0.013027,
          0.104707,
          0.882266
        ],
        [
          0.905871,
          0.127791,
          -0.033662,
          0.026856,
          0.941251,
          0.031893,
          0.01341,
          0.148296,
          0.838294
        ],
        [
          0.948035,
          0.08949,
          -0.037526,
          0.014364,
          0.946792,
          0.038844,
          0.010853,
          0.193991,
          0.795156
        ],
        [
          1.017277,
          0.027029,
          -0.044306,
          -6113e-6,
          0.958479,
          0.047634,
          6379e-6,
          0.248708,
          0.744913
        ],
        [
          1.104996,
          -0.046633,
          -0.058363,
          -0.032137,
          0.971635,
          0.060503,
          1336e-6,
          0.317922,
          0.680742
        ],
        [
          1.193214,
          -0.109812,
          -0.083402,
          -0.058496,
          0.97941,
          0.079086,
          -2346e-6,
          0.403492,
          0.598854
        ],
        [
          1.257728,
          -0.139648,
          -0.118081,
          -0.078003,
          0.975409,
          0.102594,
          -3316e-6,
          0.501214,
          0.502102
        ],
        [
          1.278864,
          -0.125333,
          -0.153531,
          -0.084748,
          0.957674,
          0.127074,
          -989e-6,
          0.601151,
          0.399838
        ],
        [
          1.255528,
          -0.076749,
          -0.178779,
          -0.078411,
          0.930809,
          0.147602,
          4733e-6,
          0.691367,
          0.3039
        ]
      ], pe2 = function(n3, e3) {
        var t3 = Math.max(0, Math.min(1, e3)), a3 = Math.round(t3 / 0.1), o3 = Math.round(t3 % 0.1), i3 = n3[a3];
        if (o3 > 0 && a3 < n3.length - 1) {
          var r3 = n3[a3 + 1];
          i3 = i3.map(function(u3, h3) {
            return dn2(i3[h3], r3[h3], o3);
          });
        }
        return function(u3) {
          var h3 = G3(u3);
          if (h3 !== void 0) {
            var s3 = Oa2(h3), v3 = s3.r, b3 = s3.g, q3 = s3.b, p3 = {
              mode: "rgb",
              r: i3[0] * v3 + i3[1] * b3 + i3[2] * q3,
              g: i3[3] * v3 + i3[4] * b3 + i3[5] * q3,
              b: i3[6] * v3 + i3[7] * b3 + i3[8] * q3
            };
            return h3.alpha !== void 0 && (p3.alpha = h3.alpha), d3(h3.mode)(p3);
          }
        };
      }, Ht2 = function(n3) {
        return n3 === void 0 && (n3 = 1), pe2(Ra2, n3);
      }, Et2 = function(n3) {
        return n3 === void 0 && (n3 = 1), pe2(Da2, n3);
      }, At2 = function(n3) {
        return n3 === void 0 && (n3 = 1), pe2($a2, n3);
      }, fe2 = function(n3) {
        return Math.max(n3, 0);
      }, se2 = function(n3) {
        return Math.max(Math.min(n3, 1), 0);
      }, Pn2 = function(n3, e3, t3) {
        var a3 = d3(e3), o3 = E3(e3).channels;
        return function(i3) {
          var r3 = a3(i3);
          if (r3) {
            for (var u3, h3 = {
              mode: e3
            }, s3 = o3.length, v3 = 0; v3 < n3.length; v3++) r3[u3 = o3[Math.floor(v3 / s3)]] !== void 0 && (h3[u3] = (h3[u3] || 0) + n3[v3] * (r3[o3[v3 % s3]] || 0));
            var b3 = G3(i3);
            return b3 && h3.mode !== b3.mode ? d3(b3.mode)(h3) : h3;
          }
        };
      };
      m3(ea), m3(wa2), m3(za2), m3(ka2), m3(la), m3(ra), m3(ua), m3(ha), m3(ca), m3(pa), m3(Vn2), m3(fa), m3(Zn), m3(sa), m3(ma2), m3(na), m3(Ma2), m3(ta), m3(aa), m3(ia), m3(J3), m3(ja2), m3(Pa2), m3(Ia2), m3(qa2), m3(Sa);
      var La2 = d3("a98"), Ta2 = d3("cubehelix"), Ba2 = d3("dlab"), Ga2 = d3("dlch"), Wa2 = d3("hsi"), _a = d3("hsl"), Fa2 = d3("hsv"), Ka2 = d3("hwb"), Ja2 = d3("jab"), Qa2 = d3("jch"), Ua2 = d3("lab"), Va2 = d3("lab65"), Xa2 = d3("lch"), Ya2 = d3("lch65"), Za2 = d3("lchuv"), n0 = d3("lrgb"), e0 = d3("luv"), t0 = d3("p3"), a0 = d3("prophoto"), i0 = d3("rec2020"), o0 = d3("rgb"), r0 = d3("xyz"), u0 = d3("xyz65"), l0 = d3("yiq"), h0 = d3("oklab"), c0 = d3("oklch");
      l3.a98 = La2, l3.average = function(n3, e3, t3) {
        e3 === void 0 && (e3 = "rgb");
        var a3 = E3(e3), o3 = n3.map(d3(e3));
        return a3.channels.reduce(function(i3, r3) {
          var u3, h3 = o3.map(function(s3) {
            return s3[r3];
          }).filter(function(s3) {
            return s3 !== void 0;
          });
          return h3.length && (u3 = Tn2(t3) ? t3 : t3 && Tn2(t3[r3]) ? t3[r3] : a3.average && Tn2(a3.average[r3]) ? a3.average[r3] : qe2, i3[r3] = u3(h3, r3)), i3;
        }, {
          mode: e3
        });
      }, l3.averageAngle = D3, l3.averageNumber = qe2, l3.blend = function(n3, e3, t3) {
        e3 === void 0 && (e3 = "normal"), t3 === void 0 && (t3 = "rgb");
        var a3 = typeof e3 == "function" ? e3 : Na2[e3], o3 = d3(t3), i3 = E3(t3).channels;
        return n3.map(function(r3) {
          var u3 = o3(r3);
          return u3.alpha === void 0 && (u3.alpha = 1), u3;
        }).reduce(function(r3, u3) {
          if (r3 === void 0) return u3;
          var h3 = u3.alpha + r3.alpha * (1 - u3.alpha);
          return i3.reduce(function(s3, v3) {
            return v3 !== "alpha" && (h3 === 0 ? s3[v3] = 0 : (s3[v3] = u3.alpha * (1 - r3.alpha) * u3[v3] + u3.alpha * r3.alpha * a3(r3[v3], u3[v3]) + (1 - u3.alpha) * r3.alpha * r3[v3], s3[v3] = Math.max(0, Math.min(1, s3[v3] / h3)))), s3;
          }, {
            mode: t3,
            alpha: h3
          });
        });
      }, l3.clamp = function(n3) {
        switch (n3 === void 0 && (n3 = "rgb"), n3) {
          case "rgb":
            return St2;
          case "lch":
            return Ct2;
        }
      }, l3.clampChroma = Ct2, l3.clampRgb = St2, l3.colorsNamed = B3, l3.converter = d3, l3.cubehelix = Ta2, l3.deficiencyDeuter = Et2, l3.deficiencyProt = Ht2, l3.deficiencyTrit = At2, l3.defineMode = m3, l3.differenceCie76 = function() {
        return un2("lab65");
      }, l3.differenceCie94 = function(n3, e3, t3) {
        n3 === void 0 && (n3 = 1), e3 === void 0 && (e3 = 0.045), t3 === void 0 && (t3 = 0.015);
        var a3 = d3("lab65");
        return function(o3, i3) {
          var r3 = a3(o3), u3 = a3(i3), h3 = r3.l, s3 = r3.a, v3 = r3.b, b3 = Math.sqrt(s3 * s3 + v3 * v3), q3 = u3.l, p3 = u3.a, f3 = u3.b, M3 = Math.sqrt(p3 * p3 + f3 * f3), y3 = Math.pow(h3 - q3, 2), j3 = Math.pow(b3 - M3, 2), g3 = Math.pow(s3 - p3, 2) + Math.pow(v3 - f3, 2) - j3;
          return Math.sqrt(y3 / Math.pow(n3, 2) + j3 / Math.pow(1 + e3 * b3, 2) + g3 / Math.pow(1 + t3 * b3, 2));
        };
      }, l3.differenceCiede2000 = function(n3, e3, t3) {
        n3 === void 0 && (n3 = 1), e3 === void 0 && (e3 = 1), t3 === void 0 && (t3 = 1);
        var a3 = d3("lab65");
        return function(o3, i3) {
          var r3 = a3(o3), u3 = a3(i3), h3 = r3.l, s3 = r3.a, v3 = r3.b, b3 = Math.sqrt(s3 * s3 + v3 * v3), q3 = u3.l, p3 = u3.a, f3 = u3.b, M3 = (b3 + Math.sqrt(p3 * p3 + f3 * f3)) / 2, y3 = 0.5 * (1 - Math.sqrt(Math.pow(M3, 7) / (Math.pow(M3, 7) + Math.pow(25, 7)))), j3 = s3 * (1 + y3), g3 = p3 * (1 + y3), $3 = Math.sqrt(j3 * j3 + v3 * v3), L3 = Math.sqrt(g3 * g3 + f3 * f3), A3 = Math.abs(j3) + Math.abs(v3) === 0 ? 0 : Math.atan2(v3, j3);
          A3 += 2 * (A3 < 0) * Math.PI;
          var O3 = Math.abs(g3) + Math.abs(f3) === 0 ? 0 : Math.atan2(f3, g3);
          O3 += 2 * (O3 < 0) * Math.PI;
          var p0 = q3 - h3, Nt2 = L3 - $3, fn2 = $3 * L3 == 0 ? 0 : O3 - A3;
          fn2 -= 2 * (fn2 > Math.PI) * Math.PI, fn2 += 2 * (fn2 < -Math.PI) * Math.PI;
          var T3, Ot2 = 2 * Math.sqrt($3 * L3) * Math.sin(fn2 / 2), f0 = (h3 + q3) / 2, jn2 = ($3 + L3) / 2;
          $3 * L3 == 0 ? T3 = A3 + O3 : (T3 = (A3 + O3) / 2, T3 -= (Math.abs(A3 - O3) > Math.PI) * Math.PI, T3 += 2 * (T3 < 0) * Math.PI);
          var Rt2 = Math.pow(f0 - 50, 2), s0 = 1 - 0.17 * Math.cos(T3 - Math.PI / 6) + 0.24 * Math.cos(2 * T3) + 0.32 * Math.cos(3 * T3 + Math.PI / 30) - 0.2 * Math.cos(4 * T3 - 63 * Math.PI / 180), d0 = 1 + 0.015 * Rt2 / Math.sqrt(20 + Rt2), Dt2 = 1 + 0.045 * jn2, $t2 = 1 + 0.015 * jn2 * s0, v0 = 30 * Math.PI / 180 * Math.exp(-1 * Math.pow((180 / Math.PI * T3 - 275) / 25, 2)), b0 = 2 * Math.sqrt(Math.pow(jn2, 7) / (Math.pow(jn2, 7) + Math.pow(25, 7))), g0 = -1 * Math.sin(2 * v0) * b0;
          return Math.sqrt(Math.pow(p0 / (n3 * d0), 2) + Math.pow(Nt2 / (e3 * Dt2), 2) + Math.pow(Ot2 / (t3 * $t2), 2) + g0 * Nt2 / (e3 * Dt2) * Ot2 / (t3 * $t2));
        };
      }, l3.differenceCmc = function(n3, e3) {
        n3 === void 0 && (n3 = 1), e3 === void 0 && (e3 = 1);
        var t3 = d3("lab65");
        return function(a3, o3) {
          var i3 = t3(a3), r3 = i3.l, u3 = i3.a, h3 = i3.b, s3 = Math.sqrt(u3 * u3 + h3 * h3), v3 = Math.atan2(h3, u3);
          v3 += 2 * Math.PI * (v3 < 0);
          var b3 = t3(o3), q3 = b3.l, p3 = b3.a, f3 = b3.b, M3 = Math.sqrt(p3 * p3 + f3 * f3), y3 = Math.pow(r3 - q3, 2), j3 = Math.pow(s3 - M3, 2), g3 = Math.pow(u3 - p3, 2) + Math.pow(h3 - f3, 2) - j3, $3 = Math.sqrt(Math.pow(s3, 4) / (Math.pow(s3, 4) + 1900)), L3 = r3 < 16 ? 0.511 : 0.040975 * r3 / (1 + 0.01765 * r3), A3 = 0.0638 * s3 / (1 + 0.0131 * s3) + 0.638, O3 = A3 * ($3 * (v3 >= 164 / 180 * Math.PI && v3 <= 345 / 180 * Math.PI ? 0.56 + Math.abs(0.2 * Math.cos(v3 + 168 / 180 * Math.PI)) : 0.36 + Math.abs(0.4 * Math.cos(v3 + 35 / 180 * Math.PI))) + 1 - $3);
          return Math.sqrt(y3 / Math.pow(n3 * L3, 2) + j3 / Math.pow(e3 * A3, 2) + g3 / Math.pow(O3, 2));
        };
      }, l3.differenceDin99o = function() {
        return un2("dlab");
      }, l3.differenceEuclidean = un2, l3.differenceHueChroma = rn, l3.differenceHueNaive = Ie2, l3.differenceHueSaturation = on2, l3.differenceHyab = function() {
        var n3 = d3("lab65");
        return function(e3, t3) {
          var a3 = n3(e3), o3 = n3(t3), i3 = a3.l - o3.l, r3 = a3.a - o3.a, u3 = a3.b - o3.b;
          return Math.abs(i3) + Math.sqrt(r3 * r3 + u3 * u3);
        };
      }, l3.differenceKotsarenkoRamos = function() {
        return un2("yiq", [
          0.5053,
          0.299,
          0.1957
        ]);
      }, l3.displayable = an2, l3.dlab = Ba2, l3.dlch = Ga2, l3.easingGamma = W3, l3.easingInOutSine = xt2, l3.easingMidpoint = vt2, l3.easingSmootherstep = function(n3) {
        return n3 * n3 * n3 * (n3 * (6 * n3 - 15) + 10);
      }, l3.easingSmoothstep = function(n3) {
        return n3 * n3 * (3 - 2 * n3);
      }, l3.filterBrightness = function(n3, e3) {
        n3 === void 0 && (n3 = 1), e3 === void 0 && (e3 = "rgb");
        var t3 = fe2(n3);
        return pn2(ie2(t3), e3, true);
      }, l3.filterContrast = function(n3, e3) {
        n3 === void 0 && (n3 = 1), e3 === void 0 && (e3 = "rgb");
        var t3 = fe2(n3);
        return pn2(ie2(t3, (1 - t3) / 2), e3, true);
      }, l3.filterDeficiencyDeuter = Et2, l3.filterDeficiencyProt = Ht2, l3.filterDeficiencyTrit = At2, l3.filterGrayscale = function(n3, e3) {
        return n3 === void 0 && (n3 = 1), e3 === void 0 && (e3 = "rgb"), Pn2([
          0.2126 + 0.7874 * (t3 = 1 - se2(n3)),
          0.7152 - 0.7152 * t3,
          0.0722 - 0.0722 * t3,
          0,
          0.2126 - 0.2126 * t3,
          0.7152 + 0.2848 * t3,
          0.0722 - 0.0722 * t3,
          0,
          0.2126 - 0.2126 * t3,
          0.7152 - 0.7152 * t3,
          0.0722 + 0.9278 * t3,
          0,
          0,
          0,
          0,
          1
        ], e3);
        var t3;
      }, l3.filterHueRotate = function(n3, e3) {
        return n3 === void 0 && (n3 = 0), e3 === void 0 && (e3 = "rgb"), Pn2(function(t3) {
          var a3 = Math.PI * t3 / 180, o3 = Math.cos(a3), i3 = Math.sin(a3);
          return [
            0.213 + 0.787 * o3 - 0.213 * i3,
            0.715 - 0.715 * o3 - 0.715 * i3,
            0.072 - 0.072 * o3 + 0.928 * i3,
            0,
            0.213 - 0.213 * o3 + 0.143 * i3,
            0.715 + 0.285 * o3 + 0.14 * i3,
            0.072 - 0.072 * o3 - 0.283 * i3,
            0,
            0.213 - 0.213 * o3 - 0.787 * i3,
            0.715 - 0.715 * o3 + 0.715 * i3,
            0.072 + 0.928 * o3 + 0.072 * i3,
            0,
            0,
            0,
            0,
            1
          ];
        }(n3), e3);
      }, l3.filterInvert = function(n3, e3) {
        n3 === void 0 && (n3 = 1), e3 === void 0 && (e3 = "rgb");
        var t3 = se2(n3);
        return pn2(function(a3, o3) {
          return o3 === "alpha" ? a3 : function(i3, r3, u3) {
            return i3 === void 0 || r3 === void 0 ? void 0 : i3 + u3 * (r3 - i3);
          }(t3, 1 - t3, a3);
        }, e3, true);
      }, l3.filterSaturate = function(n3, e3) {
        return n3 === void 0 && (n3 = 1), e3 === void 0 && (e3 = "rgb"), Pn2(function(t3) {
          var a3 = fe2(t3);
          return [
            0.213 + 0.787 * a3,
            0.715 - 0.715 * a3,
            0.072 - 0.072 * a3,
            0,
            0.213 - 0.213 * a3,
            0.715 + 0.285 * a3,
            0.072 - 0.072 * a3,
            0,
            0.213 - 0.213 * a3,
            0.715 - 0.715 * a3,
            0.072 + 0.928 * a3,
            0,
            0,
            0,
            0,
            1
          ];
        }(n3), e3);
      }, l3.filterSepia = function(n3, e3) {
        return n3 === void 0 && (n3 = 1), e3 === void 0 && (e3 = "rgb"), Pn2([
          0.393 + 0.607 * (t3 = 1 - se2(n3)),
          0.769 - 0.769 * t3,
          0.189 - 0.189 * t3,
          0,
          0.349 - 0.349 * t3,
          0.686 + 0.314 * t3,
          0.168 - 0.168 * t3,
          0,
          0.272 - 0.272 * t3,
          0.534 - 0.534 * t3,
          0.131 + 0.869 * t3,
          0,
          0,
          0,
          0,
          1
        ], e3);
        var t3;
      }, l3.fixupAlpha = z3, l3.fixupHueDecreasing = function(n3) {
        return gn2(n3, function(e3) {
          return e3 <= 0 ? e3 : e3 - 360;
        });
      }, l3.fixupHueIncreasing = function(n3) {
        return gn2(n3, function(e3) {
          return e3 >= 0 ? e3 : e3 + 360;
        });
      }, l3.fixupHueLonger = function(n3) {
        return gn2(n3, function(e3) {
          return Math.abs(e3) >= 180 || e3 === 0 ? e3 : e3 - 360 * Math.sign(e3);
        });
      }, l3.fixupHueShorter = N3, l3.formatCss = function(n3) {
        var e3 = G3(n3);
        if (e3) {
          var t3 = E3(e3.mode);
          if (!t3.serialize || typeof t3.serialize == "string") {
            var a3 = t3.serialize || "color(--" + e3.mode + " ";
            return t3.channels.forEach(function(o3, i3) {
              o3 !== "alpha" && (a3 += (i3 ? " " : "") + (e3[o3] || 0));
            }), e3.alpha !== void 0 && e3.alpha < 1 && (a3 += " / " + e3.alpha), a3 + ")";
          }
          return typeof t3.serialize == "function" ? t3.serialize(e3) : void 0;
        }
      }, l3.formatHex = ae2, l3.formatHex8 = function(n3) {
        var e3 = te2(n3);
        if (e3 !== void 0) {
          var t3 = _3(e3.alpha !== void 0 ? e3.alpha : 1);
          return ae2(e3) + (256 | t3).toString(16).slice(1);
        }
      }, l3.formatHsl = function(n3) {
        var e3 = Ca2(n3);
        if (e3 !== void 0) {
          var t3 = hn2(e3.h || 0), a3 = hn2(100 * cn2(e3.s)), o3 = hn2(100 * cn2(e3.l));
          return e3.alpha === void 0 || e3.alpha === 1 ? "hsl(" + t3 + ", " + a3 + "%, " + o3 + "%)" : "hsla(" + t3 + ", " + a3 + "%, " + o3 + "%, " + hn2(cn2(e3.alpha)) + ")";
        }
      }, l3.formatRgb = dt2, l3.formatter = function(n3) {
        switch (n3 === void 0 && (n3 = "rgb"), n3) {
          case "rgb":
            return dt2;
          case "hex":
            return ae2;
        }
      }, l3.getModeDefinition = E3, l3.hsi = Wa2, l3.hsl = _a, l3.hsv = Fa2, l3.hwb = Ka2, l3.interpolate = function(n3, e3, t3) {
        return e3 === void 0 && (e3 = "rgb"), mt2(n3, e3, t3);
      }, l3.interpolateAlpha = z3, l3.interpolateCosine = function(n3, e3) {
        return e3 === void 0 && (e3 = 1), function(t3) {
          var a3 = W3(e3), o3 = Sn2(function(i3, r3, u3) {
            return dn2(i3, r3, xt2(u3));
          })((n3 || function(i3) {
            return i3;
          })(t3));
          return function(i3) {
            return o3(a3(i3));
          };
        };
      }, l3.interpolateHue = N3, l3.interpolateLinear = function(n3, e3) {
        return e3 === void 0 && (e3 = 1), function(t3) {
          var a3 = W3(e3);
          return function(o3) {
            return c3((n3 || function(i3) {
              return i3;
            })(t3))(a3(o3));
          };
        };
      }, l3.interpolateSplineBasis = function(n3, e3, t3) {
        return e3 === void 0 && (e3 = "default"), t3 === void 0 && (t3 = 1), function(a3) {
          var o3 = W3(t3);
          return e3 === "default" ? function(i3) {
            return oe2((n3 || function(r3) {
              return r3;
            })(a3))(o3(i3));
          } : e3 === "closed" ? function(i3) {
            return re2((n3 || function(r3) {
              return r3;
            })(a3))(o3(i3));
          } : void 0;
        };
      }, l3.interpolateSplineMonotone = function(n3, e3, t3) {
        return e3 === void 0 && (e3 = "default"), t3 === void 0 && (t3 = 1), function(a3) {
          var o3 = W3(t3);
          return e3 === "closed" ? function(i3) {
            return It2((n3 || function(r3) {
              return r3;
            })(a3))(o3(i3));
          } : e3 === "default" ? function(i3) {
            return jt2((n3 || function(r3) {
              return r3;
            })(a3))(o3(i3));
          } : void 0;
        };
      }, l3.interpolateSplineNatural = function(n3, e3, t3) {
        return e3 === void 0 && (e3 = "default"), t3 === void 0 && (t3 = 1), function(a3) {
          var o3 = W3(t3);
          return e3 === "default" ? function(i3) {
            return kt2((n3 || function(r3) {
              return r3;
            })(a3))(o3(i3));
          } : e3 === "closed" ? function(i3) {
            return Pt2((n3 || function(r3) {
              return r3;
            })(a3))(o3(i3));
          } : void 0;
        };
      }, l3.interpolateWith = yt2, l3.interpolateWithPremultipliedAlpha = Ha2, l3.interpolatorLinear = c3, l3.interpolatorPiecewise = Sn2, l3.interpolatorSplineBasis = oe2, l3.interpolatorSplineBasisClosed = re2, l3.interpolatorSplineMonotone = jt2, l3.interpolatorSplineMonotone2 = function(n3) {
        if (n3.length < 3) return c3(n3);
        var e3 = n3.length - 1, t3 = le2(n3), a3 = t3[0], o3 = t3[1], i3 = t3[2];
        return o3[0] = (2 * n3[1] - 1.5 * n3[0] - 0.5 * n3[2]) * e3, o3[e3] = (1.5 * n3[e3] - 2 * n3[e3 - 1] + 0.5 * n3[e3 - 2]) * e3, i3[0] = o3[0] * a3[0] <= 0 ? 0 : H3(o3[0]) > 2 * H3(a3[0]) ? 2 * a3[0] : o3[0], i3[e3] = o3[e3] * a3[e3 - 1] <= 0 ? 0 : H3(o3[e3]) > 2 * H3(a3[e3 - 1]) ? 2 * a3[e3 - 1] : o3[e3], he2(n3, i3, a3);
      }, l3.interpolatorSplineMonotoneClosed = It2, l3.interpolatorSplineNatural = kt2, l3.interpolatorSplineNaturalClosed = Pt2, l3.jab = Ja2, l3.jch = Qa2, l3.lab = Ua2, l3.lab65 = Va2, l3.lch = Xa2, l3.lch65 = Ya2, l3.lchuv = Za2, l3.lerp = dn2, l3.lrgb = n0, l3.luv = e0, l3.mapAlphaDivide = gt2, l3.mapAlphaMultiply = bt2, l3.mapTransferGamma = function(n3, e3, t3) {
        return n3 === void 0 && (n3 = 1), e3 === void 0 && (e3 = 1), t3 === void 0 && (t3 = 0), function(a3, o3) {
          return o3 !== "alpha" ? n3 * Math.pow(a3, e3) + t3 : a3;
        };
      }, l3.mapTransferLinear = ie2, l3.mapper = pn2, l3.nearest = function(n3, e3, t3) {
        e3 === void 0 && (e3 = un2()), t3 === void 0 && (t3 = function(o3) {
          return o3;
        });
        var a3 = n3.map(function(o3, i3) {
          return {
            color: t3(o3),
            i: i3
          };
        });
        return function(o3, i3, r3) {
          return i3 === void 0 && (i3 = 1), r3 === void 0 && (r3 = 1 / 0), isFinite(i3) && (i3 = Math.max(1, Math.min(i3, a3.length - 1))), a3.forEach(function(u3) {
            u3.d = e3(o3, u3.color);
          }), a3.sort(function(u3, h3) {
            return u3.d - h3.d;
          }).slice(0, i3).filter(function(u3) {
            return u3.d < r3;
          }).map(function(u3) {
            return n3[u3.i];
          });
        };
      }, l3.oklab = h0, l3.oklch = c0, l3.p3 = t0, l3.parse = je2, l3.prophoto = a0, l3.random = function(n3, e3) {
        n3 === void 0 && (n3 = "rgb"), e3 === void 0 && (e3 = {});
        var t3 = E3(n3), a3 = function(o3) {
          return Object.keys(o3).reduce(function(i3, r3) {
            var u3 = o3[r3];
            return i3[r3] = Array.isArray(u3) ? u3 : [
              u3,
              u3
            ], i3;
          }, {});
        }(e3);
        return t3.channels.reduce(function(o3, i3) {
          return (a3.alpha || i3 !== "alpha") && (o3[i3] = function(r3) {
            var u3 = r3[0], h3 = r3[1];
            return u3 + Math.random() * (h3 - u3);
          }(a3[i3] || t3.ranges[i3])), o3;
        }, {
          mode: n3
        });
      }, l3.rec2020 = i0, l3.rgb = o0, l3.round = st2, l3.samples = function(n3, e3) {
        n3 === void 0 && (n3 = 2), e3 === void 0 && (e3 = 1);
        var t3 = W3(e3);
        if (n3 < 2) return n3 < 1 ? [] : [
          t3(0.5)
        ];
        for (var a3 = [], o3 = 0; o3 < n3; o3++) a3.push(t3(o3 / (n3 - 1)));
        return a3;
      }, l3.wcagContrast = function(n3, e3) {
        var t3 = ce2(n3), a3 = ce2(e3);
        return (Math.max(t3, a3) + 0.05) / (Math.min(t3, a3) + 0.05);
      }, l3.wcagLuminance = ce2, l3.xyz = r0, l3.xyz65 = u0, l3.yiq = l0, Object.defineProperty(l3, "__esModule", {
        value: true
      });
    });
  });
  var qn$1 = P0(Bt$1()), { a98: I0, average: q0, averageAngle: S0, averageNumber: C0, blend: H0, clamp: E0, clampChroma: A0, clampRgb: N0, colorsNamed: O0, converter: R0, cubehelix: D0, deficiencyDeuter: $0, deficiencyProt: L0, deficiencyTrit: T0, defineMode: B0, differenceCie76: G0, differenceCie94: W0, differenceCiede2000: _0, differenceCmc: F0, differenceDin99o: K0, differenceEuclidean: J0, differenceHueChroma: Q0, differenceHueNaive: U0, differenceHueSaturation: V0, differenceHyab: X0, differenceKotsarenkoRamos: Y0, displayable: Z0, dlab: ni, dlch: ei, easingGamma: ti, easingInOutSine: ai, easingMidpoint: ii, easingSmootherstep: oi, easingSmoothstep: ri, filterBrightness: ui, filterContrast: li, filterDeficiencyDeuter: hi, filterDeficiencyProt: ci, filterDeficiencyTrit: pi, filterGrayscale: fi, filterHueRotate: si, filterInvert: di, filterSaturate: vi, filterSepia: bi, fixupAlpha: gi, fixupHueDecreasing: Mi, fixupHueIncreasing: mi, fixupHueLonger: yi, fixupHueShorter: xi, formatCss: wi, formatHex: zi, formatHex8: ki, formatHsl: Pi, formatRgb: ji, formatter: Ii, getModeDefinition: qi, hsi: Si, hsl: Ci, hsv: Hi$1, hwb: Ei, interpolate: Ai, interpolateAlpha: Ni, interpolateCosine: Oi, interpolateHue: Ri, interpolateLinear: Di, interpolateSplineBasis: $i, interpolateSplineMonotone: Li, interpolateSplineNatural: Ti, interpolateWith: Bi, interpolateWithPremultipliedAlpha: Gi$1, interpolatorLinear: Wi, interpolatorPiecewise: _i, interpolatorSplineBasis: Fi, interpolatorSplineBasisClosed: Ki$1, interpolatorSplineMonotone: Ji, interpolatorSplineMonotone2: Qi$1, interpolatorSplineMonotoneClosed: Ui, interpolatorSplineNatural: Vi$1, interpolatorSplineNaturalClosed: Xi$1, jab: Yi$1, jch: Zi$1, lab: no$1, lab65: eo, lch: to, lch65: ao, lchuv: io, lerp: oo, lrgb: ro, luv: uo, mapAlphaDivide: lo, mapAlphaMultiply: ho, mapTransferGamma: co, mapTransferLinear: po, mapper: fo, nearest: so, oklab: vo, oklch: bo, p3: go, parse: Mo, prophoto: mo, random: yo, rec2020: xo, rgb: wo, round: zo, samples: ko, wcagContrast: Po, wcagLuminance: jo, xyz: Io, xyz65: qo, yiq: So, __esModule: Co } = qn$1, Ho = qn$1.default ?? qn$1;
  const __1$$3 = Object.freeze(Object.defineProperty({
    __proto__: null,
    __esModule: Co,
    a98: I0,
    average: q0,
    averageAngle: S0,
    averageNumber: C0,
    blend: H0,
    clamp: E0,
    clampChroma: A0,
    clampRgb: N0,
    colorsNamed: O0,
    converter: R0,
    cubehelix: D0,
    default: Ho,
    deficiencyDeuter: $0,
    deficiencyProt: L0,
    deficiencyTrit: T0,
    defineMode: B0,
    differenceCie76: G0,
    differenceCie94: W0,
    differenceCiede2000: _0,
    differenceCmc: F0,
    differenceDin99o: K0,
    differenceEuclidean: J0,
    differenceHueChroma: Q0,
    differenceHueNaive: U0,
    differenceHueSaturation: V0,
    differenceHyab: X0,
    differenceKotsarenkoRamos: Y0,
    displayable: Z0,
    dlab: ni,
    dlch: ei,
    easingGamma: ti,
    easingInOutSine: ai,
    easingMidpoint: ii,
    easingSmootherstep: oi,
    easingSmoothstep: ri,
    filterBrightness: ui,
    filterContrast: li,
    filterDeficiencyDeuter: hi,
    filterDeficiencyProt: ci,
    filterDeficiencyTrit: pi,
    filterGrayscale: fi,
    filterHueRotate: si,
    filterInvert: di,
    filterSaturate: vi,
    filterSepia: bi,
    fixupAlpha: gi,
    fixupHueDecreasing: Mi,
    fixupHueIncreasing: mi,
    fixupHueLonger: yi,
    fixupHueShorter: xi,
    formatCss: wi,
    formatHex: zi,
    formatHex8: ki,
    formatHsl: Pi,
    formatRgb: ji,
    formatter: Ii,
    getModeDefinition: qi,
    hsi: Si,
    hsl: Ci,
    hsv: Hi$1,
    hwb: Ei,
    interpolate: Ai,
    interpolateAlpha: Ni,
    interpolateCosine: Oi,
    interpolateHue: Ri,
    interpolateLinear: Di,
    interpolateSplineBasis: $i,
    interpolateSplineMonotone: Li,
    interpolateSplineNatural: Ti,
    interpolateWith: Bi,
    interpolateWithPremultipliedAlpha: Gi$1,
    interpolatorLinear: Wi,
    interpolatorPiecewise: _i,
    interpolatorSplineBasis: Fi,
    interpolatorSplineBasisClosed: Ki$1,
    interpolatorSplineMonotone: Ji,
    interpolatorSplineMonotone2: Qi$1,
    interpolatorSplineMonotoneClosed: Ui,
    interpolatorSplineNatural: Vi$1,
    interpolatorSplineNaturalClosed: Xi$1,
    jab: Yi$1,
    jch: Zi$1,
    lab: no$1,
    lab65: eo,
    lch: to,
    lch65: ao,
    lchuv: io,
    lerp: oo,
    lrgb: ro,
    luv: uo,
    mapAlphaDivide: lo,
    mapAlphaMultiply: ho,
    mapTransferGamma: co,
    mapTransferLinear: po,
    mapper: fo,
    nearest: so,
    oklab: vo,
    oklch: bo,
    p3: go,
    parse: Mo,
    prophoto: mo,
    random: yo,
    rec2020: xo,
    rgb: wo,
    round: zo,
    samples: ko,
    wcagContrast: Po,
    wcagLuminance: jo,
    xyz: Io,
    xyz65: qo,
    yiq: So
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var E$4 = Object.create;
  var h$9 = Object.defineProperty;
  var T$7 = Object.getOwnPropertyDescriptor;
  var N$7 = Object.getOwnPropertyNames;
  var b$b = Object.getPrototypeOf, j$f = Object.prototype.hasOwnProperty;
  var k$6 = (t3, e3) => () => (e3 || t3((e3 = {
    exports: {}
  }).exports, e3), e3.exports);
  var v$7 = (t3, e3, n3, i3) => {
    if (e3 && typeof e3 == "object" || typeof e3 == "function") for (let s3 of N$7(e3)) !j$f.call(t3, s3) && s3 !== n3 && h$9(t3, s3, {
      get: () => e3[s3],
      enumerable: !(i3 = T$7(e3, s3)) || i3.enumerable
    });
    return t3;
  };
  var D$7 = (t3, e3, n3) => (n3 = t3 != null ? E$4(b$b(t3)) : {}, v$7(!t3 || !t3.__esModule ? h$9(n3, "default", {
    value: t3,
    enumerable: true
  }) : n3, t3));
  var x$f = k$6((U3, w3) => {
    var I3 = /^(?:( )+|\t+)/;
    function M3(t3) {
      let e3 = 0, n3 = 0, i3 = 0;
      for (let [s3, [l3, r3]] of t3) (l3 > n3 || l3 === n3 && r3 > i3) && (n3 = l3, i3 = r3, e3 = s3);
      return e3;
    }
    w3.exports = (t3) => {
      if (typeof t3 != "string") throw new TypeError("Expected a string");
      let e3 = 0, n3, i3, s3 = /* @__PURE__ */ new Map();
      for (let y3 of t3.split(/\n/g)) {
        if (!y3) continue;
        let a3, f3, d3, o3, m3 = y3.match(I3);
        if (m3 === null) e3 = 0, n3 = "";
        else {
          a3 = m3[0].length, m3[1] ? f3 = "s" : f3 = "t", f3 !== n3 && (e3 = 0), n3 = f3, d3 = 0;
          let c3 = a3 - e3;
          e3 = a3, c3 === 0 ? d3++ : i3 = f3 + String(c3 > 0 ? c3 : -c3), o3 = s3.get(i3), o3 === void 0 ? o3 = [
            1,
            0
          ] : o3 = [
            ++o3[0],
            o3[1] + d3
          ], s3.set(i3, o3);
        }
      }
      let l3 = M3(s3), r3 = 0, u3, p3 = "";
      return l3 !== 0 && (r3 = Number(l3.slice(1)), l3[0] === "s" ? (u3 = "space", p3 = " ".repeat(r3)) : (u3 = "tab", p3 = "	".repeat(r3))), {
        amount: r3,
        type: u3,
        indent: p3
      };
    };
  });
  var g$8 = D$7(x$f()), z$4 = g$8.default ?? g$8;
  const __d$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: z$4
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  function _$9(l3, t3, n3) {
    t3.split && (t3 = t3.split("."));
    for (var p3 = 0, r3 = t3.length, i3 = l3, f3, o3; p3 < r3 && (o3 = t3[p3++], !(o3 === "__proto__" || o3 === "constructor" || o3 === "prototype")); ) i3 = i3[o3] = p3 === r3 ? n3 : typeof (f3 = i3[o3]) == typeof t3 ? f3 : t3[p3] * 0 !== 0 || ~("" + t3[p3]).indexOf(".") ? {} : [];
  }
  const __e$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    dset: _$9
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var f$9 = Object.create;
  var i$5 = Object.defineProperty;
  var l$c = Object.getOwnPropertyDescriptor;
  var m$d = Object.getOwnPropertyNames;
  var u$6 = Object.getPrototypeOf, j$e = Object.prototype.hasOwnProperty;
  var p$b = (r3, t3) => () => (t3 || r3((t3 = {
    exports: {}
  }).exports, t3), t3.exports);
  var y$9 = (r3, t3, a3, c3) => {
    if (t3 && typeof t3 == "object" || typeof t3 == "function") for (let o3 of m$d(t3)) !j$e.call(r3, o3) && o3 !== a3 && i$5(r3, o3, {
      get: () => t3[o3],
      enumerable: !(c3 = l$c(t3, o3)) || c3.enumerable
    });
    return r3;
  };
  var A$a = (r3, t3, a3) => (a3 = r3 != null ? f$9(u$6(r3)) : {}, y$9(!r3 || !r3.__esModule ? i$5(a3, "default", {
    value: r3,
    enumerable: true
  }) : a3, r3));
  var s$4 = p$b((x3, n3) => {
    var d3 = {}.toString;
    n3.exports = Array.isArray || function(r3) {
      return d3.call(r3) == "[object Array]";
    };
  });
  var e$1 = A$a(s$4()), S$4 = e$1.default ?? e$1;
  const __0$$4 = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: S$4
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const __0$$3 = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: S$4
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var require$5 = (n3) => {
    const e3 = (m3) => typeof m3.default < "u" ? m3.default : m3;
    switch (n3) {
      case "isarray":
        return e3(__0$$4);
      default:
        console.error('module "' + n3 + '" not found');
        return null;
    }
  };
  var a$9 = Object.create;
  var c$9 = Object.defineProperty;
  var j$d = Object.getOwnPropertyDescriptor;
  var m$c = Object.getOwnPropertyNames;
  var n$5 = Object.getPrototypeOf, p$a = Object.prototype.hasOwnProperty;
  var l$b = ((r3) => typeof require$5 < "u" ? require$5 : typeof Proxy < "u" ? new Proxy(r3, {
    get: (e3, t3) => (typeof require$5 < "u" ? require$5 : e3)[t3]
  }) : r3)(function(r3) {
    if (typeof require$5 < "u") return require$5.apply(this, arguments);
    throw Error('Dynamic require of "' + r3 + '" is not supported');
  });
  var b$a = (r3, e3) => () => (e3 || r3((e3 = {
    exports: {}
  }).exports, e3), e3.exports);
  var d$b = (r3, e3, t3, u3) => {
    if (e3 && typeof e3 == "object" || typeof e3 == "function") for (let s3 of m$c(e3)) !p$a.call(r3, s3) && s3 !== t3 && c$9(r3, s3, {
      get: () => e3[s3],
      enumerable: !(u3 = j$d(e3, s3)) || u3.enumerable
    });
    return r3;
  };
  var x$e = (r3, e3, t3) => (t3 = r3 != null ? a$9(n$5(r3)) : {}, d$b(!r3 || !r3.__esModule ? c$9(t3, "default", {
    value: r3,
    enumerable: true
  }) : t3, r3));
  var i$4 = b$a((A3, f3) => {
    var y3 = l$b("isarray");
    f3.exports = function(e3) {
      return e3 != null && typeof e3 == "object" && y3(e3) === false;
    };
  });
  var o$6 = x$e(i$4()), O$9 = o$6.default ?? o$6;
  const __1$$2 = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: O$9
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var require$4 = (n3) => {
    const e3 = (m3) => typeof m3.default < "u" ? m3.default : m3;
    switch (n3) {
      case "isarray":
        return e3(__0$$3);
      case "isobject":
        return e3(__1$$2);
      default:
        console.error('module "' + n3 + '" not found');
        return null;
    }
  };
  var a$8 = Object.create;
  var h$8 = Object.defineProperty;
  var l$a = Object.getOwnPropertyDescriptor;
  var I$7 = Object.getOwnPropertyNames;
  var x$d = Object.getPrototypeOf, c$8 = Object.prototype.hasOwnProperty;
  var f$8 = ((t3) => typeof require$4 < "u" ? require$4 : typeof Proxy < "u" ? new Proxy(t3, {
    get: (e3, n3) => (typeof require$4 < "u" ? require$4 : e3)[n3]
  }) : t3)(function(t3) {
    if (typeof require$4 < "u") return require$4.apply(this, arguments);
    throw Error('Dynamic require of "' + t3 + '" is not supported');
  });
  var y$8 = (t3, e3) => () => (e3 || t3((e3 = {
    exports: {}
  }).exports, e3), e3.exports);
  var T$6 = (t3, e3, n3, i3) => {
    if (e3 && typeof e3 == "object" || typeof e3 == "function") for (let r3 of I$7(e3)) !c$8.call(t3, r3) && r3 !== n3 && h$8(t3, r3, {
      get: () => e3[r3],
      enumerable: !(i3 = l$a(e3, r3)) || i3.enumerable
    });
    return t3;
  };
  var m$b = (t3, e3, n3) => (n3 = t3 != null ? a$8(x$d(t3)) : {}, T$6(!t3 || !t3.__esModule ? h$8(n3, "default", {
    value: t3,
    enumerable: true
  }) : n3, t3));
  var d$a = y$8((j3, u3) => {
    var p3 = f$8("isarray"), v3 = f$8("isobject");
    u3.exports = s3;
    function s3(t3, e3) {
      if (!(this instanceof s3)) return typeof e3 == "number" ? new s3(t3).fromIndex(e3) : new s3(t3, e3);
      this.str = t3 || "", this.lineToIndex = N3(this.str), e3 = e3 || {}, this.origin = typeof e3.origin > "u" ? 1 : e3.origin;
    }
    s3.prototype.fromIndex = function(t3) {
      if (t3 < 0 || t3 >= this.str.length || isNaN(t3)) return null;
      var e3 = w3(t3, this.lineToIndex);
      return {
        line: e3 + this.origin,
        col: t3 - this.lineToIndex[e3] + this.origin
      };
    };
    s3.prototype.toIndex = function(t3, e3) {
      if (typeof e3 > "u") return p3(t3) && t3.length >= 2 ? this.toIndex(t3[0], t3[1]) : v3(t3) && "line" in t3 && ("col" in t3 || "column" in t3) ? this.toIndex(t3.line, "col" in t3 ? t3.col : t3.column) : -1;
      if (isNaN(t3) || isNaN(e3)) return -1;
      if (t3 -= this.origin, e3 -= this.origin, t3 >= 0 && e3 >= 0 && t3 < this.lineToIndex.length) {
        var n3 = this.lineToIndex[t3], i3 = t3 === this.lineToIndex.length - 1 ? this.str.length : this.lineToIndex[t3 + 1];
        if (e3 < i3 - n3) return n3 + e3;
      }
      return -1;
    };
    function N3(t3) {
      for (var e3 = t3.split(`
`), n3 = new Array(e3.length), i3 = 0, r3 = 0, g3 = e3.length; r3 < g3; r3++) n3[r3] = i3, i3 += e3[r3].length + 1;
      return n3;
    }
    function w3(t3, e3) {
      if (t3 >= e3[e3.length - 1]) return e3.length - 1;
      for (var n3 = 0, i3 = e3.length - 2, r3; n3 < i3; ) if (r3 = n3 + (i3 - n3 >> 1), t3 < e3[r3]) i3 = r3 - 1;
      else if (t3 >= e3[r3 + 1]) n3 = r3 + 1;
      else {
        n3 = r3;
        break;
      }
      return n3;
    }
  });
  var o$5 = m$b(d$a()), L$7 = o$5.default ?? o$5;
  const __3$$1 = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: L$7
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var Y$4 = Object.create;
  var M$6 = Object.defineProperty;
  var Z$5 = Object.getOwnPropertyDescriptor;
  var K$4 = Object.getOwnPropertyNames;
  var j$c = Object.getPrototypeOf, ee$4 = Object.prototype.hasOwnProperty;
  var re$3 = (p3, f3) => () => (f3 || p3((f3 = {
    exports: {}
  }).exports, f3), f3.exports);
  var te$3 = (p3, f3, y3, w3) => {
    if (f3 && typeof f3 == "object" || typeof f3 == "function") for (let x3 of K$4(f3)) !ee$4.call(p3, x3) && x3 !== y3 && M$6(p3, x3, {
      get: () => f3[x3],
      enumerable: !(w3 = Z$5(f3, x3)) || w3.enumerable
    });
    return p3;
  };
  var ne$3 = (p3, f3, y3) => (y3 = p3 != null ? Y$4(j$c(p3)) : {}, te$3(!p3 || !p3.__esModule ? M$6(y3, "default", {
    value: p3,
    enumerable: true
  }) : y3, p3));
  var P$4 = re$3((N3, R3) => {
    (function(p3, f3) {
      typeof define == "function" && define.amd ? define([], f3) : typeof R3 == "object" && R3.exports ? R3.exports = f3() : p3.moo = f3();
    })(N3, function() {
      var p3 = Object.prototype.hasOwnProperty, f3 = Object.prototype.toString, y3 = typeof new RegExp().sticky == "boolean";
      function w3(e3) {
        return e3 && f3.call(e3) === "[object RegExp]";
      }
      function x3(e3) {
        return e3 && typeof e3 == "object" && !w3(e3) && !Array.isArray(e3);
      }
      function $3(e3) {
        return e3.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      function z3(e3) {
        var r3 = new RegExp("|" + e3);
        return r3.exec("").length - 1;
      }
      function F3(e3) {
        return "(" + e3 + ")";
      }
      function G3(e3) {
        if (!e3.length) return "(?!)";
        var r3 = e3.map(function(t3) {
          return "(?:" + t3 + ")";
        }).join("|");
        return "(?:" + r3 + ")";
      }
      function I3(e3) {
        if (typeof e3 == "string") return "(?:" + $3(e3) + ")";
        if (w3(e3)) {
          if (e3.ignoreCase) throw new Error("RegExp /i flag not allowed");
          if (e3.global) throw new Error("RegExp /g flag is implied");
          if (e3.sticky) throw new Error("RegExp /y flag is implied");
          if (e3.multiline) throw new Error("RegExp /m flag is implied");
          return e3.source;
        } else throw new Error("Not a pattern: " + e3);
      }
      function J3(e3) {
        for (var r3 = Object.getOwnPropertyNames(e3), t3 = [], n3 = 0; n3 < r3.length; n3++) {
          var l3 = r3[n3], i3 = e3[l3], o3 = [].concat(i3);
          if (l3 === "include") {
            for (var s3 = 0; s3 < o3.length; s3++) t3.push({
              include: o3[s3]
            });
            continue;
          }
          var u3 = [];
          o3.forEach(function(a3) {
            x3(a3) ? (u3.length && t3.push(O3(l3, u3)), t3.push(O3(l3, a3)), u3 = []) : u3.push(a3);
          }), u3.length && t3.push(O3(l3, u3));
        }
        return t3;
      }
      function U3(e3) {
        for (var r3 = [], t3 = 0; t3 < e3.length; t3++) {
          var n3 = e3[t3];
          if (n3.include) {
            for (var l3 = [].concat(n3.include), i3 = 0; i3 < l3.length; i3++) r3.push({
              include: l3[i3]
            });
            continue;
          }
          if (!n3.type) throw new Error("Rule has no type: " + JSON.stringify(n3));
          r3.push(O3(n3.type, n3));
        }
        return r3;
      }
      function O3(e3, r3) {
        if (x3(r3) || (r3 = {
          match: r3
        }), r3.include) throw new Error("Matching rules cannot also include states");
        var t3 = {
          defaultType: e3,
          lineBreaks: !!r3.error || !!r3.fallback,
          pop: false,
          next: null,
          push: null,
          error: false,
          fallback: false,
          value: null,
          type: null,
          shouldThrow: false
        };
        for (var n3 in r3) p3.call(r3, n3) && (t3[n3] = r3[n3]);
        if (typeof t3.type == "string" && e3 !== t3.type) throw new Error("Type transform cannot be a string (type '" + t3.type + "' for token '" + e3 + "')");
        var l3 = t3.match;
        return t3.match = Array.isArray(l3) ? l3 : l3 ? [
          l3
        ] : [], t3.match.sort(function(i3, o3) {
          return w3(i3) && w3(o3) ? 0 : w3(o3) ? -1 : w3(i3) ? 1 : o3.length - i3.length;
        }), t3;
      }
      function q3(e3) {
        return Array.isArray(e3) ? U3(e3) : J3(e3);
      }
      var L3 = O3("error", {
        lineBreaks: true,
        shouldThrow: true
      });
      function _3(e3, r3) {
        for (var t3 = null, n3 = /* @__PURE__ */ Object.create(null), l3 = true, i3 = null, o3 = [], s3 = [], u3 = 0; u3 < e3.length; u3++) e3[u3].fallback && (l3 = false);
        for (var u3 = 0; u3 < e3.length; u3++) {
          var a3 = e3[u3];
          if (a3.include) throw new Error("Inheritance is not allowed in stateless lexers");
          if (a3.error || a3.fallback) {
            if (t3) throw !a3.fallback == !t3.fallback ? new Error("Multiple " + (a3.fallback ? "fallback" : "error") + " rules not allowed (for token '" + a3.defaultType + "')") : new Error("fallback and error are mutually exclusive (for token '" + a3.defaultType + "')");
            t3 = a3;
          }
          var h3 = a3.match.slice();
          if (l3) for (; h3.length && typeof h3[0] == "string" && h3[0].length === 1; ) {
            var k3 = h3.shift();
            n3[k3.charCodeAt(0)] = a3;
          }
          if (a3.pop || a3.push || a3.next) {
            if (!r3) throw new Error("State-switching options are not allowed in stateless lexers (for token '" + a3.defaultType + "')");
            if (a3.fallback) throw new Error("State-switching options are not allowed on fallback tokens (for token '" + a3.defaultType + "')");
          }
          if (h3.length !== 0) {
            l3 = false, o3.push(a3);
            for (var c3 = 0; c3 < h3.length; c3++) {
              var g3 = h3[c3];
              if (w3(g3)) {
                if (i3 === null) i3 = g3.unicode;
                else if (i3 !== g3.unicode && a3.fallback === false) throw new Error("If one rule is /u then all must be");
              }
            }
            var E3 = G3(h3.map(I3)), d3 = new RegExp(E3);
            if (d3.test("")) throw new Error("RegExp matches empty string: " + d3);
            var m3 = z3(E3);
            if (m3 > 0) throw new Error("RegExp has capture groups: " + d3 + `
Use (?: \u2026 ) instead`);
            if (!a3.lineBreaks && d3.test(`
`)) throw new Error("Rule should declare lineBreaks: " + d3);
            s3.push(F3(E3));
          }
        }
        var b3 = t3 && t3.fallback, T3 = y3 && !b3 ? "ym" : "gm", S3 = y3 || b3 ? "" : "|";
        i3 === true && (T3 += "u");
        var X3 = new RegExp(G3(s3) + S3, T3);
        return {
          regexp: X3,
          groups: o3,
          fast: n3,
          error: t3 || L3
        };
      }
      function D3(e3) {
        var r3 = _3(q3(e3));
        return new v3({
          start: r3
        }, "start");
      }
      function C3(e3, r3, t3) {
        var n3 = e3 && (e3.push || e3.next);
        if (n3 && !t3[n3]) throw new Error("Missing state '" + n3 + "' (in token '" + e3.defaultType + "' of state '" + r3 + "')");
        if (e3 && e3.pop && +e3.pop != 1) throw new Error("pop must be 1 (in token '" + e3.defaultType + "' of state '" + r3 + "')");
      }
      function H3(e3, r3) {
        var t3 = e3.$all ? q3(e3.$all) : [];
        delete e3.$all;
        var n3 = Object.getOwnPropertyNames(e3);
        r3 || (r3 = n3[0]);
        for (var l3 = /* @__PURE__ */ Object.create(null), i3 = 0; i3 < n3.length; i3++) {
          var o3 = n3[i3];
          l3[o3] = q3(e3[o3]).concat(t3);
        }
        for (var i3 = 0; i3 < n3.length; i3++) for (var o3 = n3[i3], s3 = l3[o3], u3 = /* @__PURE__ */ Object.create(null), a3 = 0; a3 < s3.length; a3++) {
          var h3 = s3[a3];
          if (h3.include) {
            var k3 = [
              a3,
              1
            ];
            if (h3.include !== o3 && !u3[h3.include]) {
              u3[h3.include] = true;
              var c3 = l3[h3.include];
              if (!c3) throw new Error("Cannot include nonexistent state '" + h3.include + "' (in state '" + o3 + "')");
              for (var g3 = 0; g3 < c3.length; g3++) {
                var E3 = c3[g3];
                s3.indexOf(E3) === -1 && k3.push(E3);
              }
            }
            s3.splice.apply(s3, k3), a3--;
          }
        }
        for (var d3 = /* @__PURE__ */ Object.create(null), i3 = 0; i3 < n3.length; i3++) {
          var o3 = n3[i3];
          d3[o3] = _3(l3[o3], true);
        }
        for (var i3 = 0; i3 < n3.length; i3++) {
          for (var m3 = n3[i3], b3 = d3[m3], T3 = b3.groups, a3 = 0; a3 < T3.length; a3++) C3(T3[a3], m3, d3);
          for (var S3 = Object.getOwnPropertyNames(b3.fast), a3 = 0; a3 < S3.length; a3++) C3(b3.fast[S3[a3]], m3, d3);
        }
        return new v3(d3, r3);
      }
      function Q3(e3) {
        for (var r3 = /* @__PURE__ */ Object.create(null), t3 = /* @__PURE__ */ Object.create(null), n3 = Object.getOwnPropertyNames(e3), l3 = 0; l3 < n3.length; l3++) {
          var i3 = n3[l3], o3 = e3[i3], s3 = Array.isArray(o3) ? o3 : [
            o3
          ];
          s3.forEach(function(c3) {
            if ((t3[c3.length] = t3[c3.length] || []).push(c3), typeof c3 != "string") throw new Error("keyword must be string (in keyword '" + i3 + "')");
            r3[c3] = i3;
          });
        }
        function u3(c3) {
          return JSON.stringify(c3);
        }
        var a3 = "";
        a3 += `switch (value.length) {
`;
        for (var h3 in t3) {
          var k3 = t3[h3];
          a3 += "case " + h3 + `:
`, a3 += `switch (value) {
`, k3.forEach(function(c3) {
            var g3 = r3[c3];
            a3 += "case " + u3(c3) + ": return " + u3(g3) + `
`;
          }), a3 += `}
`;
        }
        return a3 += `}
`, Function("value", a3);
      }
      var v3 = function(e3, r3) {
        this.startState = r3, this.states = e3, this.buffer = "", this.stack = [], this.reset();
      };
      v3.prototype.reset = function(e3, r3) {
        return this.buffer = e3 || "", this.index = 0, this.line = r3 ? r3.line : 1, this.col = r3 ? r3.col : 1, this.queuedToken = r3 ? r3.queuedToken : null, this.queuedThrow = r3 ? r3.queuedThrow : null, this.setState(r3 ? r3.state : this.startState), this.stack = r3 && r3.stack ? r3.stack.slice() : [], this;
      }, v3.prototype.save = function() {
        return {
          line: this.line,
          col: this.col,
          state: this.state,
          stack: this.stack.slice(),
          queuedToken: this.queuedToken,
          queuedThrow: this.queuedThrow
        };
      }, v3.prototype.setState = function(e3) {
        if (!(!e3 || this.state === e3)) {
          this.state = e3;
          var r3 = this.states[e3];
          this.groups = r3.groups, this.error = r3.error, this.re = r3.regexp, this.fast = r3.fast;
        }
      }, v3.prototype.popState = function() {
        this.setState(this.stack.pop());
      }, v3.prototype.pushState = function(e3) {
        this.stack.push(this.state), this.setState(e3);
      };
      var V3 = y3 ? function(e3, r3) {
        return e3.exec(r3);
      } : function(e3, r3) {
        var t3 = e3.exec(r3);
        return t3[0].length === 0 ? null : t3;
      };
      v3.prototype._getGroup = function(e3) {
        for (var r3 = this.groups.length, t3 = 0; t3 < r3; t3++) if (e3[t3 + 1] !== void 0) return this.groups[t3];
        throw new Error("Cannot find token type for matched text");
      };
      function W3() {
        return this.value;
      }
      if (v3.prototype.next = function() {
        var e3 = this.index;
        if (this.queuedGroup) {
          var r3 = this._token(this.queuedGroup, this.queuedText, e3);
          return this.queuedGroup = null, this.queuedText = "", r3;
        }
        var t3 = this.buffer;
        if (e3 !== t3.length) {
          var o3 = this.fast[t3.charCodeAt(e3)];
          if (o3) return this._token(o3, t3.charAt(e3), e3);
          var n3 = this.re;
          n3.lastIndex = e3;
          var l3 = V3(n3, t3), i3 = this.error;
          if (l3 == null) return this._token(i3, t3.slice(e3, t3.length), e3);
          var o3 = this._getGroup(l3), s3 = l3[0];
          return i3.fallback && l3.index !== e3 ? (this.queuedGroup = o3, this.queuedText = s3, this._token(i3, t3.slice(e3, l3.index), e3)) : this._token(o3, s3, e3);
        }
      }, v3.prototype._token = function(e3, r3, t3) {
        var n3 = 0;
        if (e3.lineBreaks) {
          var l3 = /\n/g, i3 = 1;
          if (r3 === `
`) n3 = 1;
          else for (; l3.exec(r3); ) n3++, i3 = l3.lastIndex;
        }
        var o3 = {
          type: typeof e3.type == "function" && e3.type(r3) || e3.defaultType,
          value: typeof e3.value == "function" ? e3.value(r3) : r3,
          text: r3,
          toString: W3,
          offset: t3,
          lineBreaks: n3,
          line: this.line,
          col: this.col
        }, s3 = r3.length;
        if (this.index += s3, this.line += n3, n3 !== 0 ? this.col = s3 - i3 + 1 : this.col += s3, e3.shouldThrow) throw new Error(this.formatError(o3, "invalid syntax"));
        return e3.pop ? this.popState() : e3.push ? this.pushState(e3.push) : e3.next && this.setState(e3.next), o3;
      }, typeof Symbol < "u" && Symbol.iterator) {
        var A3 = function(e3) {
          this.lexer = e3;
        };
        A3.prototype.next = function() {
          var e3 = this.lexer.next();
          return {
            value: e3,
            done: !e3
          };
        }, A3.prototype[Symbol.iterator] = function() {
          return this;
        }, v3.prototype[Symbol.iterator] = function() {
          return new A3(this);
        };
      }
      return v3.prototype.formatError = function(e3, r3) {
        if (e3 == null) var t3 = this.buffer.slice(this.index), e3 = {
          text: t3,
          offset: this.index,
          lineBreaks: t3.indexOf(`
`) === -1 ? 0 : 1,
          line: this.line,
          col: this.col
        };
        var n3 = Math.max(0, e3.offset - e3.col + 1), l3 = e3.lineBreaks ? e3.text.indexOf(`
`) : e3.text.length, i3 = this.buffer.substring(n3, e3.offset + l3);
        return r3 += " at line " + e3.line + " col " + e3.col + `:

`, r3 += "  " + i3 + `
`, r3 += "  " + Array(e3.col).join(" ") + "^", r3;
      }, v3.prototype.clone = function() {
        return new v3(this.states, this.state);
      }, v3.prototype.has = function(e3) {
        return true;
      }, {
        compile: D3,
        states: H3,
        error: Object.freeze({
          error: true
        }),
        fallback: Object.freeze({
          fallback: true
        }),
        keywords: Q3
      };
    });
  });
  var B$8 = ne$3(P$4()), ie$3 = B$8.default ?? B$8;
  const __4$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: ie$3
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var a$7 = Object.create;
  var n$4 = Object.defineProperty;
  var d$9 = Object.getOwnPropertyDescriptor;
  var m$a = Object.getOwnPropertyNames;
  var p$9 = Object.getPrototypeOf, x$c = Object.prototype.hasOwnProperty;
  var c$7 = (r3, e3) => () => (e3 || r3((e3 = {
    exports: {}
  }).exports, e3), e3.exports);
  var l$9 = (r3, e3, t3, i3) => {
    if (e3 && typeof e3 == "object" || typeof e3 == "function") for (let s3 of m$a(e3)) !x$c.call(r3, s3) && s3 !== t3 && n$4(r3, s3, {
      get: () => e3[s3],
      enumerable: !(i3 = d$9(e3, s3)) || i3.enumerable
    });
    return r3;
  };
  var h$7 = (r3, e3, t3) => (t3 = r3 != null ? a$7(p$9(r3)) : {}, l$9(!r3 || !r3.__esModule ? n$4(t3, "default", {
    value: r3,
    enumerable: true
  }) : t3, r3));
  var u$5 = c$7((v3, o3) => {
    o3.exports = function(r3, e3) {
      for (var t3 = -1, i3 = []; (t3 = r3.indexOf(e3, t3 + 1)) !== -1; ) i3.push(t3);
      return i3;
    };
  });
  var f$7 = h$7(u$5()), w$4 = f$7.default ?? f$7;
  const __0$$2 = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: w$4
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var p$8 = Object.create;
  var c$6 = Object.defineProperty;
  var q$7 = Object.getOwnPropertyDescriptor;
  var v$6 = Object.getOwnPropertyNames;
  var b$9 = Object.getPrototypeOf, d$8 = Object.prototype.hasOwnProperty;
  var j$b = (n3, r3) => () => (r3 || n3((r3 = {
    exports: {}
  }).exports, r3), r3.exports);
  var m$9 = (n3, r3, e3, f3) => {
    if (r3 && typeof r3 == "object" || typeof r3 == "function") for (let u3 of v$6(r3)) !d$8.call(n3, u3) && u3 !== e3 && c$6(n3, u3, {
      get: () => r3[u3],
      enumerable: !(f3 = q$7(r3, u3)) || f3.enumerable
    });
    return n3;
  };
  var x$b = (n3, r3, e3) => (e3 = n3 != null ? p$8(b$9(n3)) : {}, m$9(!n3 || !n3.__esModule ? c$6(e3, "default", {
    value: n3,
    enumerable: true
  }) : e3, n3));
  var h$6 = j$b((z3, g3) => {
    function _3(n3, r3) {
      for (var e3 = 1, f3 = n3.length, u3 = n3[0], o3 = n3[0], t3 = 1; t3 < f3; ++t3) if (o3 = u3, u3 = n3[t3], r3(u3, o3)) {
        if (t3 === e3) {
          e3++;
          continue;
        }
        n3[e3++] = u3;
      }
      return n3.length = e3, n3;
    }
    function k3(n3) {
      for (var r3 = 1, e3 = n3.length, f3 = n3[0], u3 = n3[0], o3 = 1; o3 < e3; ++o3, u3 = f3) if (u3 = f3, f3 = n3[o3], f3 !== u3) {
        if (o3 === r3) {
          r3++;
          continue;
        }
        n3[r3++] = f3;
      }
      return n3.length = r3, n3;
    }
    function w3(n3, r3, e3) {
      return n3.length === 0 ? n3 : r3 ? (e3 || n3.sort(r3), _3(n3, r3)) : (e3 || n3.sort(), k3(n3));
    }
    g3.exports = w3;
  });
  var a$6 = x$b(h$6()), A$9 = a$6.default ?? a$6;
  const __1$$1 = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: A$9
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  function n$3(t3) {
    return new Error(`[unenv] ${t3} is not implemented yet!`);
  }
  function s$3(t3) {
    return Object.assign(() => {
      throw n$3(t3);
    }, {
      __unenv__: true
    });
  }
  var o$4 = Object.defineProperty, r$2 = (t3, i3) => {
    for (var e3 in i3) o$4(t3, e3, {
      get: i3[e3],
      enumerable: true
    });
  };
  var a$5 = {};
  r$2(a$5, {
    isAnyArrayBuffer: () => h$5,
    isArgumentsObject: () => p$7,
    isArrayBuffer: () => w$3,
    isArrayBufferView: () => k$5,
    isAsyncFunction: () => d$7,
    isBigInt64Array: () => J$5,
    isBigIntObject: () => f$6,
    isBigUint64Array: () => $$5,
    isBooleanObject: () => c$5,
    isBoxedPrimitive: () => N$6,
    isCryptoKey: () => L$6,
    isDataView: () => F$6,
    isDate: () => u$4,
    isExternal: () => y$7,
    isFloat32Array: () => q$6,
    isFloat64Array: () => z$3,
    isGeneratorFunction: () => j$a,
    isGeneratorObject: () => v$5,
    isInt16Array: () => R$4,
    isInt32Array: () => T$5,
    isInt8Array: () => W$5,
    isKeyObject: () => H$5,
    isMap: () => _$8,
    isMapIterator: () => I$6,
    isModuleNamespaceObject: () => P$3,
    isNativeError: () => b$8,
    isNumberObject: () => l$8,
    isPromise: () => O$8,
    isProxy: () => E$3,
    isRegExp: () => B$7,
    isSet: () => g$7,
    isSetIterator: () => S$3,
    isSharedArrayBuffer: () => M$5,
    isStringObject: () => A$8,
    isSymbolObject: () => m$8,
    isTypedArray: () => C$5,
    isUint16Array: () => G$5,
    isUint32Array: () => V$6,
    isUint8Array: () => D$6,
    isUint8ClampedArray: () => K$3,
    isWeakMap: () => x$a,
    isWeakSet: () => U$5
  });
  var y$7 = (t3) => false, u$4 = (t3) => t3 instanceof Date, p$7 = s$3("util.types.isArgumentsObject"), f$6 = (t3) => t3 instanceof BigInt, c$5 = (t3) => t3 instanceof Boolean, l$8 = (t3) => t3 instanceof Number, A$8 = (t3) => t3 instanceof String, m$8 = (t3) => t3 instanceof Symbol, b$8 = s$3("util.types.isNativeError"), B$7 = (t3) => t3 instanceof RegExp, d$7 = s$3("util.types.isAsyncFunction"), j$a = s$3("util.types.isGeneratorFunction"), v$5 = s$3("util.types.isGeneratorObject"), O$8 = (t3) => t3 instanceof Promise, _$8 = (t3) => t3 instanceof Map, g$7 = (t3) => t3 instanceof Set, I$6 = s$3("util.types.isMapIterator"), S$3 = s$3("util.types.isSetIterator"), x$a = (t3) => t3 instanceof WeakMap, U$5 = (t3) => t3 instanceof WeakSet, w$3 = (t3) => t3 instanceof ArrayBuffer, F$6 = (t3) => t3 instanceof DataView, M$5 = (t3) => t3 instanceof SharedArrayBuffer, E$3 = s$3("util.types.isProxy"), P$3 = s$3("util.types.isModuleNamespaceObject"), h$5 = s$3("util.types.isAnyArrayBuffer"), N$6 = s$3("util.types.isBoxedPrimitive"), k$5 = s$3("util.types.isArrayBufferView"), C$5 = s$3("util.types.isTypedArray"), D$6 = s$3("util.types.isUint8Array"), K$3 = s$3("util.types.isUint8ClampedArray"), G$5 = s$3("util.types.isUint16Array"), V$6 = s$3("util.types.isUint32Array"), W$5 = s$3("util.types.isInt8Array"), R$4 = s$3("util.types.isInt16Array"), T$5 = s$3("util.types.isInt32Array"), q$6 = s$3("util.types.isFloat32Array"), z$3 = s$3("util.types.isFloat64Array"), J$5 = s$3("util.types.isBigInt64Array"), $$5 = s$3("util.types.isBigUint64Array"), H$5 = s$3("util.types.isKeyObject"), L$6 = s$3("util.types.isCryptoKey"), tt$1 = a$5;
  function S$2(e3) {
    return new Error(`[unenv] ${e3} is not implemented yet!`);
  }
  function r$1(e3) {
    return Object.assign(() => {
      throw S$2(e3);
    }, {
      __unenv__: true
    });
  }
  var _$7 = Object.defineProperty, l$7 = (e3, t3) => {
    for (var i3 in t3) _$7(e3, i3, {
      get: t3[i3],
      enumerable: true
    });
  };
  function E$2(e3, t3) {
    t3 && (e3.super_ = t3, e3.prototype = Object.create(t3.prototype, {
      constructor: {
        value: e3,
        enumerable: false,
        writable: true,
        configurable: true
      }
    }));
  }
  var f$5 = {};
  l$7(f$5, {
    isArray: () => O$7,
    isBoolean: () => A$7,
    isBuffer: () => k$4,
    isDate: () => x$9,
    isDeepStrictEqual: () => D$5,
    isError: () => $$4,
    isFunction: () => w$2,
    isNull: () => T$4,
    isNullOrUndefined: () => N$5,
    isNumber: () => j$9,
    isObject: () => U$4,
    isPrimitive: () => V$5,
    isRegExp: () => v$4,
    isString: () => C$4,
    isSymbol: () => M$4,
    isUndefined: () => P$2
  });
  var v$4 = (e3) => e3 instanceof RegExp, x$9 = (e3) => e3 instanceof Date, O$7 = (e3) => Array.isArray(e3), A$7 = (e3) => typeof e3 == "boolean", T$4 = (e3) => e3 === null, N$5 = (e3) => e3 == null, j$9 = (e3) => typeof e3 == "number", C$4 = (e3) => typeof e3 == "string", M$4 = (e3) => typeof e3 == "symbol", P$2 = (e3) => e3 === void 0, w$2 = (e3) => typeof e3 == "function", k$4 = (e3) => e3 && typeof e3 == "object" && typeof e3.copy == "function" && typeof e3.fill == "function" && typeof e3.readUInt8 == "function", D$5 = (e3, t3) => JSON.stringify(e3) === JSON.stringify(t3), U$4 = (e3) => e3 !== null && typeof e3 == "object" && Object.getPrototypeOf(e3).isPrototypeOf(Object), $$4 = (e3) => e3 instanceof Error, V$5 = (e3) => typeof e3 == "object" ? e3 === null : typeof e3 != "function", y$6 = {};
  l$7(y$6, {
    debug: () => J$4,
    debuglog: () => b$7,
    format: () => B$6,
    formatWithOptions: () => H$4,
    inspect: () => W$4,
    log: () => I$5
  });
  var I$5 = (...e3) => {
    console.log(...e3);
  }, b$7 = (e3, t3) => {
    let i3 = (n3, ...a3) => {
      i3.enabled && console.debug(`[${e3}] ${n3}`, ...a3);
    };
    return i3.enabled = true, i3;
  }, J$4 = b$7, W$4 = (e3) => JSON.stringify(e3, null, 2), B$6 = (...e3) => g$6(...e3), H$4 = (e3, ...t3) => g$6(...t3);
  function g$6(e3, ...t3) {
    let i3 = /(%?)(%([djos]))/g;
    return t3.length > 0 && (e3 = e3.replace(i3, (n3, a3, o3, u3) => {
      let s3 = t3.shift();
      switch (u3) {
        case "o":
          if (Array.isArray(s3)) {
            s3 = JSON.stringify(s3);
            break;
          }
          break;
        case "s":
          s3 = "" + s3;
          break;
        case "d":
          s3 = Number(s3);
          break;
        case "j":
          s3 = JSON.stringify(s3);
          break;
      }
      return a3 ? (t3.unshift(s3), n3) : s3;
    })), t3.length > 0 && (e3 += " " + t3.join(" ")), e3 = e3.replace(/%{2}/g, "%"), "" + e3;
  }
  var c$4 = Symbol("customPromisify");
  function m$7(e3) {
    return e3[c$4] ? e3[c$4] : function(...t3) {
      return new Promise((i3, n3) => {
        try {
          e3.call(this, ...t3, (a3, o3) => {
            if (a3) return n3(a3);
            i3(o3);
          });
        } catch (a3) {
          n3(a3);
        }
      });
    };
  }
  m$7.custom = c$4;
  var R$3 = m$7, d$6 = {};
  l$7(d$6, {
    MIMEParams: () => p$6,
    MIMEType: () => q$5
  });
  var q$5 = class q {
    constructor(e3) {
      __publicField(this, "__unenv__", true);
      __publicField(this, "params", new p$6());
      __publicField(this, "type");
      __publicField(this, "subtype");
      let [t3 = "", ...i3] = String(e3).split(";"), [n3 = "", a3 = ""] = t3.split("/");
      this.type = n3, this.subtype = a3, this.params = new p$6();
      for (let o3 of i3) {
        let [u3, s3] = o3.split("=");
        this.params.set(u3, s3);
      }
    }
    get essence() {
      return this.type + "/" + this.subtype;
    }
    toString() {
      let e3 = this.params.toString();
      return this.essence + (e3 ? `;${e3}` : "");
    }
  }, p$6 = class p extends Map {
    constructor() {
      super(...arguments);
      __publicField(this, "__unenv__", true);
    }
    get(e3) {
      return super.get(e3) || null;
    }
    toString() {
      return [
        ...this.entries()
      ].map(([e3, t3]) => `${e3}=${t3}`).join("&");
    }
  }, F$5 = globalThis.TextDecoder, Q$2 = globalThis.TextEncoder, z$2 = (e3) => e3, G$4 = r$1("util._errnoException"), K$2 = r$1("util._exceptionWithHostPort"), L$5 = r$1("util._extend"), X$3 = r$1("util.aborted"), Y$3 = r$1("util.callbackify"), Z$4 = r$1("util.getSystemErrorMap"), ee$3 = r$1("util.getSystemErrorName"), te$2 = r$1("util.toUSVString"), re$2 = r$1("util.stripVTControlCharacters"), se$3 = r$1("util.transferableAbortController"), ie$2 = r$1("util.transferableAbortSignal"), ae$3 = r$1("util.parseArgs"), ne$2 = r$1("util.parseEnv"), oe$2 = r$1("util.styleText"), le$3 = r$1("util.getCallSites"), be$3 = {
    _errnoException: G$4,
    _exceptionWithHostPort: K$2,
    _extend: L$5,
    aborted: X$3,
    callbackify: Y$3,
    deprecate: z$2,
    getCallSite: le$3,
    getSystemErrorMap: Z$4,
    getSystemErrorName: ee$3,
    inherits: E$2,
    promisify: R$3,
    stripVTControlCharacters: re$2,
    toUSVString: te$2,
    TextDecoder: F$5,
    TextEncoder: Q$2,
    types: tt$1,
    transferableAbortController: se$3,
    transferableAbortSignal: ie$2,
    parseArgs: ae$3,
    parseEnv: ne$2,
    styleText: oe$2,
    ...d$6,
    ...y$6,
    ...f$5
  };
  const __3$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    MIMEParams: p$6,
    MIMEType: q$5,
    TextDecoder: F$5,
    TextEncoder: Q$2,
    _errnoException: G$4,
    _exceptionWithHostPort: K$2,
    _extend: L$5,
    aborted: X$3,
    callbackify: Y$3,
    debug: J$4,
    debuglog: b$7,
    default: be$3,
    deprecate: z$2,
    format: B$6,
    formatWithOptions: H$4,
    getCallSite: le$3,
    getSystemErrorMap: Z$4,
    getSystemErrorName: ee$3,
    inherits: E$2,
    inspect: W$4,
    isArray: O$7,
    isBoolean: A$7,
    isBuffer: k$4,
    isDate: x$9,
    isDeepStrictEqual: D$5,
    isError: $$4,
    isFunction: w$2,
    isNull: T$4,
    isNullOrUndefined: N$5,
    isNumber: j$9,
    isObject: U$4,
    isPrimitive: V$5,
    isRegExp: v$4,
    isString: C$4,
    isSymbol: M$4,
    isUndefined: P$2,
    log: I$5,
    parseArgs: ae$3,
    parseEnv: ne$2,
    promisify: R$3,
    stripVTControlCharacters: re$2,
    styleText: oe$2,
    toUSVString: te$2,
    transferableAbortController: se$3,
    transferableAbortSignal: ie$2,
    types: tt$1
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var require$3 = (n3) => {
    const e3 = (m3) => typeof m3.default < "u" ? m3.default : m3;
    switch (n3) {
      case "indexes-of":
        return e3(__0$$2);
      case "uniq":
        return e3(__1$$1);
      case "cssesc":
        return e3(__2$$2);
      case "node:util":
        return e3(__3$);
      default:
        console.error('module "' + n3 + '" not found');
        return null;
    }
  };
  var _r$1 = Object.create;
  var at$1 = Object.defineProperty;
  var Sr$2 = Object.getOwnPropertyDescriptor;
  var gr$1 = Object.getOwnPropertyNames;
  var Tr$2 = Object.getPrototypeOf, Er$1 = Object.prototype.hasOwnProperty;
  var H$3 = ((e3) => typeof require$3 < "u" ? require$3 : typeof Proxy < "u" ? new Proxy(e3, {
    get: (i3, n3) => (typeof require$3 < "u" ? require$3 : i3)[n3]
  }) : e3)(function(e3) {
    if (typeof require$3 < "u") return require$3.apply(this, arguments);
    throw Error('Dynamic require of "' + e3 + '" is not supported');
  });
  var T$3 = (e3, i3) => () => (i3 || e3((i3 = {
    exports: {}
  }).exports, i3), i3.exports);
  var mr$2 = (e3, i3, n3, t3) => {
    if (i3 && typeof i3 == "object" || typeof i3 == "function") for (let r3 of gr$1(i3)) !Er$1.call(e3, r3) && r3 !== n3 && at$1(e3, r3, {
      get: () => i3[r3],
      enumerable: !(t3 = Sr$2(i3, r3)) || t3.enumerable
    });
    return e3;
  };
  var wr$2 = (e3, i3, n3) => (n3 = e3 != null ? _r$1(Tr$2(e3)) : {}, mr$2(!e3 || !e3.__esModule ? at$1(n3, "default", {
    value: e3,
    enumerable: true
  }) : n3, e3));
  var be$2 = T$3((Te2, ot2) => {
    Te2.__esModule = true;
    Te2.default = yr2;
    var ut2 = "[\\x20\\t\\r\\n\\f]", kr2 = new RegExp("\\\\([\\da-f]{1,6}" + ut2 + "?|(" + ut2 + ")|.)", "ig");
    function yr2(e3) {
      return e3.replace(kr2, function(i3, n3, t3) {
        var r3 = "0x" + n3 - 65536;
        return r3 !== r3 || t3 ? n3 : r3 < 0 ? String.fromCharCode(r3 + 65536) : String.fromCharCode(r3 >> 10 | 55296, r3 & 1023 | 56320);
      });
    }
    ot2.exports = Te2.default;
  });
  var ft = T$3((Ee2, ct2) => {
    Ee2.__esModule = true;
    Ee2.default = Or2;
    function Or2(e3) {
      for (var i3 = arguments.length, n3 = new Array(i3 > 1 ? i3 - 1 : 0), t3 = 1; t3 < i3; t3++) n3[t3 - 1] = arguments[t3];
      for (; n3.length > 0; ) {
        var r3 = n3.shift();
        if (!e3[r3]) return;
        e3 = e3[r3];
      }
      return e3;
    }
    ct2.exports = Ee2.default;
  });
  var ht$1 = T$3((me2, lt2) => {
    me2.__esModule = true;
    me2.default = Pr2;
    function Pr2(e3) {
      for (var i3 = arguments.length, n3 = new Array(i3 > 1 ? i3 - 1 : 0), t3 = 1; t3 < i3; t3++) n3[t3 - 1] = arguments[t3];
      for (; n3.length > 0; ) {
        var r3 = n3.shift();
        e3[r3] || (e3[r3] = {}), e3 = e3[r3];
      }
    }
    lt2.exports = me2.default;
  });
  var pt$1 = T$3((we2, dt2) => {
    we2.__esModule = true;
    we2.default = Ir2;
    function Ir2(e3) {
      for (var i3 = "", n3 = e3.indexOf("/*"), t3 = 0; n3 >= 0; ) {
        i3 = i3 + e3.slice(t3, n3);
        var r3 = e3.indexOf("*/", n3 + 2);
        if (r3 < 0) return i3;
        t3 = r3 + 2, n3 = e3.indexOf("/*", t3);
      }
      return i3 = i3 + e3.slice(t3), i3;
    }
    dt2.exports = we2.default;
  });
  var J$3 = T$3((C3) => {
    C3.__esModule = true;
    C3.stripComments = C3.ensureObject = C3.getProp = C3.unesc = void 0;
    var qr2 = ke2(be$2());
    C3.unesc = qr2.default;
    var Lr2 = ke2(ft());
    C3.getProp = Lr2.default;
    var Dr2 = ke2(ht$1());
    C3.ensureObject = Dr2.default;
    var br2 = ke2(pt$1());
    C3.stripComments = br2.default;
    function ke2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
  });
  var U$3 = T$3((X3, St2) => {
    X3.__esModule = true;
    X3.default = void 0;
    var vt2 = J$3();
    function _t2(e3, i3) {
      for (var n3 = 0; n3 < i3.length; n3++) {
        var t3 = i3[n3];
        t3.enumerable = t3.enumerable || false, t3.configurable = true, "value" in t3 && (t3.writable = true), Object.defineProperty(e3, t3.key, t3);
      }
    }
    function Ar2(e3, i3, n3) {
      return i3 && _t2(e3.prototype, i3), e3;
    }
    var xr2 = function e3(i3, n3) {
      if (typeof i3 != "object" || i3 === null) return i3;
      var t3 = new i3.constructor();
      for (var r3 in i3) if (i3.hasOwnProperty(r3)) {
        var a3 = i3[r3], s3 = typeof a3;
        r3 === "parent" && s3 === "object" ? n3 && (t3[r3] = n3) : a3 instanceof Array ? t3[r3] = a3.map(function(u3) {
          return e3(u3, t3);
        }) : t3[r3] = e3(a3, t3);
      }
      return t3;
    }, Nr2 = function() {
      function e3(n3) {
        n3 === void 0 && (n3 = {}), Object.assign(this, n3), this.spaces = this.spaces || {}, this.spaces.before = this.spaces.before || "", this.spaces.after = this.spaces.after || "";
      }
      var i3 = e3.prototype;
      return i3.remove = function() {
        return this.parent && this.parent.removeChild(this), this.parent = void 0, this;
      }, i3.replaceWith = function() {
        if (this.parent) {
          for (var t3 in arguments) this.parent.insertBefore(this, arguments[t3]);
          this.remove();
        }
        return this;
      }, i3.next = function() {
        return this.parent.at(this.parent.index(this) + 1);
      }, i3.prev = function() {
        return this.parent.at(this.parent.index(this) - 1);
      }, i3.clone = function(t3) {
        t3 === void 0 && (t3 = {});
        var r3 = xr2(this);
        for (var a3 in t3) r3[a3] = t3[a3];
        return r3;
      }, i3.appendToPropertyAndEscape = function(t3, r3, a3) {
        this.raws || (this.raws = {});
        var s3 = this[t3], u3 = this.raws[t3];
        this[t3] = s3 + r3, u3 || a3 !== r3 ? this.raws[t3] = (u3 || s3) + a3 : delete this.raws[t3];
      }, i3.setPropertyAndEscape = function(t3, r3, a3) {
        this.raws || (this.raws = {}), this[t3] = r3, this.raws[t3] = a3;
      }, i3.setPropertyWithoutEscape = function(t3, r3) {
        this[t3] = r3, this.raws && delete this.raws[t3];
      }, i3.isAtPosition = function(t3, r3) {
        if (this.source && this.source.start && this.source.end) return !(this.source.start.line > t3 || this.source.end.line < t3 || this.source.start.line === t3 && this.source.start.column > r3 || this.source.end.line === t3 && this.source.end.column < r3);
      }, i3.stringifyProperty = function(t3) {
        return this.raws && this.raws[t3] || this[t3];
      }, i3.toString = function() {
        return [
          this.rawSpaceBefore,
          String(this.stringifyProperty("value")),
          this.rawSpaceAfter
        ].join("");
      }, Ar2(e3, [
        {
          key: "rawSpaceBefore",
          get: function() {
            var t3 = this.raws && this.raws.spaces && this.raws.spaces.before;
            return t3 === void 0 && (t3 = this.spaces && this.spaces.before), t3 || "";
          },
          set: function(t3) {
            (0, vt2.ensureObject)(this, "raws", "spaces"), this.raws.spaces.before = t3;
          }
        },
        {
          key: "rawSpaceAfter",
          get: function() {
            var t3 = this.raws && this.raws.spaces && this.raws.spaces.after;
            return t3 === void 0 && (t3 = this.spaces.after), t3 || "";
          },
          set: function(t3) {
            (0, vt2.ensureObject)(this, "raws", "spaces"), this.raws.spaces.after = t3;
          }
        }
      ]), e3;
    }();
    X3.default = Nr2;
    St2.exports = X3.default;
  });
  var D$4 = T$3((k3) => {
    k3.__esModule = true;
    k3.UNIVERSAL = k3.ATTRIBUTE = k3.CLASS = k3.COMBINATOR = k3.COMMENT = k3.ID = k3.NESTING = k3.PSEUDO = k3.ROOT = k3.SELECTOR = k3.STRING = k3.TAG = void 0;
    var Mr2 = "tag";
    k3.TAG = Mr2;
    var Rr2 = "string";
    k3.STRING = Rr2;
    var Fr2 = "selector";
    k3.SELECTOR = Fr2;
    var Cr2 = "root";
    k3.ROOT = Cr2;
    var Ur2 = "pseudo";
    k3.PSEUDO = Ur2;
    var Br2 = "nesting";
    k3.NESTING = Br2;
    var Qr2 = "id";
    k3.ID = Qr2;
    var Yr2 = "comment";
    k3.COMMENT = Yr2;
    var Gr2 = "combinator";
    k3.COMBINATOR = Gr2;
    var Wr2 = "class";
    k3.CLASS = Wr2;
    var Vr2 = "attribute";
    k3.ATTRIBUTE = Vr2;
    var Hr2 = "universal";
    k3.UNIVERSAL = Hr2;
  });
  var ye$2 = T$3((Z3, Tt2) => {
    Z3.__esModule = true;
    Z3.default = void 0;
    var Kr = $r2(U$3()), B3 = zr2(D$4());
    function zr2(e3) {
      if (e3 && e3.__esModule) return e3;
      var i3 = {};
      if (e3 != null) {
        for (var n3 in e3) if (Object.prototype.hasOwnProperty.call(e3, n3)) {
          var t3 = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(e3, n3) : {};
          t3.get || t3.set ? Object.defineProperty(i3, n3, t3) : i3[n3] = e3[n3];
        }
      }
      return i3.default = e3, i3;
    }
    function $r2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function gt2(e3, i3) {
      for (var n3 = 0; n3 < i3.length; n3++) {
        var t3 = i3[n3];
        t3.enumerable = t3.enumerable || false, t3.configurable = true, "value" in t3 && (t3.writable = true), Object.defineProperty(e3, t3.key, t3);
      }
    }
    function Jr(e3, i3, n3) {
      return i3 && gt2(e3.prototype, i3), e3;
    }
    function Xr2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var Zr2 = function(e3) {
      Xr2(i3, e3);
      function i3(t3) {
        var r3;
        return r3 = e3.call(this, t3) || this, r3.nodes || (r3.nodes = []), r3;
      }
      var n3 = i3.prototype;
      return n3.append = function(r3) {
        return r3.parent = this, this.nodes.push(r3), this;
      }, n3.prepend = function(r3) {
        return r3.parent = this, this.nodes.unshift(r3), this;
      }, n3.at = function(r3) {
        return this.nodes[r3];
      }, n3.index = function(r3) {
        return typeof r3 == "number" ? r3 : this.nodes.indexOf(r3);
      }, n3.removeChild = function(r3) {
        r3 = this.index(r3), this.at(r3).parent = void 0, this.nodes.splice(r3, 1);
        var a3;
        for (var s3 in this.indexes) a3 = this.indexes[s3], a3 >= r3 && (this.indexes[s3] = a3 - 1);
        return this;
      }, n3.removeAll = function() {
        for (var s3 = this.nodes, r3 = Array.isArray(s3), a3 = 0, s3 = r3 ? s3 : s3[Symbol.iterator](); ; ) {
          var u3;
          if (r3) {
            if (a3 >= s3.length) break;
            u3 = s3[a3++];
          } else {
            if (a3 = s3.next(), a3.done) break;
            u3 = a3.value;
          }
          var h3 = u3;
          h3.parent = void 0;
        }
        return this.nodes = [], this;
      }, n3.empty = function() {
        return this.removeAll();
      }, n3.insertAfter = function(r3, a3) {
        a3.parent = this;
        var s3 = this.index(r3);
        this.nodes.splice(s3 + 1, 0, a3), a3.parent = this;
        var u3;
        for (var h3 in this.indexes) u3 = this.indexes[h3], s3 <= u3 && (this.indexes[h3] = u3 + 1);
        return this;
      }, n3.insertBefore = function(r3, a3) {
        a3.parent = this;
        var s3 = this.index(r3);
        this.nodes.splice(s3, 0, a3), a3.parent = this;
        var u3;
        for (var h3 in this.indexes) u3 = this.indexes[h3], u3 <= s3 && (this.indexes[h3] = u3 + 1);
        return this;
      }, n3._findChildAtPosition = function(r3, a3) {
        var s3 = void 0;
        return this.each(function(u3) {
          if (u3.atPosition) {
            var h3 = u3.atPosition(r3, a3);
            if (h3) return s3 = h3, false;
          } else if (u3.isAtPosition(r3, a3)) return s3 = u3, false;
        }), s3;
      }, n3.atPosition = function(r3, a3) {
        if (this.isAtPosition(r3, a3)) return this._findChildAtPosition(r3, a3) || this;
      }, n3._inferEndPosition = function() {
        this.last && this.last.source && this.last.source.end && (this.source = this.source || {}, this.source.end = this.source.end || {}, Object.assign(this.source.end, this.last.source.end));
      }, n3.each = function(r3) {
        this.lastEach || (this.lastEach = 0), this.indexes || (this.indexes = {}), this.lastEach++;
        var a3 = this.lastEach;
        if (this.indexes[a3] = 0, !!this.length) {
          for (var s3, u3; this.indexes[a3] < this.length && (s3 = this.indexes[a3], u3 = r3(this.at(s3), s3), u3 !== false); ) this.indexes[a3] += 1;
          if (delete this.indexes[a3], u3 === false) return false;
        }
      }, n3.walk = function(r3) {
        return this.each(function(a3, s3) {
          var u3 = r3(a3, s3);
          if (u3 !== false && a3.length && (u3 = a3.walk(r3)), u3 === false) return false;
        });
      }, n3.walkAttributes = function(r3) {
        var a3 = this;
        return this.walk(function(s3) {
          if (s3.type === B3.ATTRIBUTE) return r3.call(a3, s3);
        });
      }, n3.walkClasses = function(r3) {
        var a3 = this;
        return this.walk(function(s3) {
          if (s3.type === B3.CLASS) return r3.call(a3, s3);
        });
      }, n3.walkCombinators = function(r3) {
        var a3 = this;
        return this.walk(function(s3) {
          if (s3.type === B3.COMBINATOR) return r3.call(a3, s3);
        });
      }, n3.walkComments = function(r3) {
        var a3 = this;
        return this.walk(function(s3) {
          if (s3.type === B3.COMMENT) return r3.call(a3, s3);
        });
      }, n3.walkIds = function(r3) {
        var a3 = this;
        return this.walk(function(s3) {
          if (s3.type === B3.ID) return r3.call(a3, s3);
        });
      }, n3.walkNesting = function(r3) {
        var a3 = this;
        return this.walk(function(s3) {
          if (s3.type === B3.NESTING) return r3.call(a3, s3);
        });
      }, n3.walkPseudos = function(r3) {
        var a3 = this;
        return this.walk(function(s3) {
          if (s3.type === B3.PSEUDO) return r3.call(a3, s3);
        });
      }, n3.walkTags = function(r3) {
        var a3 = this;
        return this.walk(function(s3) {
          if (s3.type === B3.TAG) return r3.call(a3, s3);
        });
      }, n3.walkUniversals = function(r3) {
        var a3 = this;
        return this.walk(function(s3) {
          if (s3.type === B3.UNIVERSAL) return r3.call(a3, s3);
        });
      }, n3.split = function(r3) {
        var a3 = this, s3 = [];
        return this.reduce(function(u3, h3, l3) {
          var p3 = r3.call(a3, h3);
          return s3.push(h3), p3 ? (u3.push(s3), s3 = []) : l3 === a3.length - 1 && u3.push(s3), u3;
        }, []);
      }, n3.map = function(r3) {
        return this.nodes.map(r3);
      }, n3.reduce = function(r3, a3) {
        return this.nodes.reduce(r3, a3);
      }, n3.every = function(r3) {
        return this.nodes.every(r3);
      }, n3.some = function(r3) {
        return this.nodes.some(r3);
      }, n3.filter = function(r3) {
        return this.nodes.filter(r3);
      }, n3.sort = function(r3) {
        return this.nodes.sort(r3);
      }, n3.toString = function() {
        return this.map(String).join("");
      }, Jr(i3, [
        {
          key: "first",
          get: function() {
            return this.at(0);
          }
        },
        {
          key: "last",
          get: function() {
            return this.at(this.length - 1);
          }
        },
        {
          key: "length",
          get: function() {
            return this.nodes.length;
          }
        }
      ]), i3;
    }(Kr.default);
    Z3.default = Zr2;
    Tt2.exports = Z3.default;
  });
  var Ae$1 = T$3((j3, mt2) => {
    j3.__esModule = true;
    j3.default = void 0;
    var jr2 = ti2(ye$2()), ei2 = D$4();
    function ti2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function Et2(e3, i3) {
      for (var n3 = 0; n3 < i3.length; n3++) {
        var t3 = i3[n3];
        t3.enumerable = t3.enumerable || false, t3.configurable = true, "value" in t3 && (t3.writable = true), Object.defineProperty(e3, t3.key, t3);
      }
    }
    function ri2(e3, i3, n3) {
      return i3 && Et2(e3.prototype, i3), e3;
    }
    function ii2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var ni2 = function(e3) {
      ii2(i3, e3);
      function i3(t3) {
        var r3;
        return r3 = e3.call(this, t3) || this, r3.type = ei2.ROOT, r3;
      }
      var n3 = i3.prototype;
      return n3.toString = function() {
        var r3 = this.reduce(function(a3, s3) {
          return a3.push(String(s3)), a3;
        }, []).join(",");
        return this.trailingComma ? r3 + "," : r3;
      }, n3.error = function(r3, a3) {
        return this._error ? this._error(r3, a3) : new Error(r3);
      }, ri2(i3, [
        {
          key: "errorGenerator",
          set: function(r3) {
            this._error = r3;
          }
        }
      ]), i3;
    }(jr2.default);
    j3.default = ni2;
    mt2.exports = j3.default;
  });
  var xe = T$3((ee2, wt2) => {
    ee2.__esModule = true;
    ee2.default = void 0;
    var si2 = ui2(ye$2()), ai2 = D$4();
    function ui2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function oi2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var ci2 = function(e3) {
      oi2(i3, e3);
      function i3(n3) {
        var t3;
        return t3 = e3.call(this, n3) || this, t3.type = ai2.SELECTOR, t3;
      }
      return i3;
    }(si2.default);
    ee2.default = ci2;
    wt2.exports = ee2.default;
  });
  var Ne$3 = T$3((te2, Ot2) => {
    te2.__esModule = true;
    te2.default = void 0;
    var fi2 = yt2(H$3("cssesc")), li2 = J$3(), hi2 = yt2(U$3()), di2 = D$4();
    function yt2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function kt2(e3, i3) {
      for (var n3 = 0; n3 < i3.length; n3++) {
        var t3 = i3[n3];
        t3.enumerable = t3.enumerable || false, t3.configurable = true, "value" in t3 && (t3.writable = true), Object.defineProperty(e3, t3.key, t3);
      }
    }
    function pi2(e3, i3, n3) {
      return i3 && kt2(e3.prototype, i3), e3;
    }
    function vi2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var _i2 = function(e3) {
      vi2(i3, e3);
      function i3(t3) {
        var r3;
        return r3 = e3.call(this, t3) || this, r3.type = di2.CLASS, r3._constructed = true, r3;
      }
      var n3 = i3.prototype;
      return n3.toString = function() {
        return [
          this.rawSpaceBefore,
          "." + this.stringifyProperty("value"),
          this.rawSpaceAfter
        ].join("");
      }, pi2(i3, [
        {
          key: "value",
          set: function(r3) {
            if (this._constructed) {
              var a3 = (0, fi2.default)(r3, {
                isIdentifier: true
              });
              a3 !== r3 ? ((0, li2.ensureObject)(this, "raws"), this.raws.value = a3) : this.raws && delete this.raws.value;
            }
            this._value = r3;
          },
          get: function() {
            return this._value;
          }
        }
      ]), i3;
    }(hi2.default);
    te2.default = _i2;
    Ot2.exports = te2.default;
  });
  var Me$2 = T$3((re2, Pt2) => {
    re2.__esModule = true;
    re2.default = void 0;
    var Si2 = Ti2(U$3()), gi2 = D$4();
    function Ti2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function Ei2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var mi2 = function(e3) {
      Ei2(i3, e3);
      function i3(n3) {
        var t3;
        return t3 = e3.call(this, n3) || this, t3.type = gi2.COMMENT, t3;
      }
      return i3;
    }(Si2.default);
    re2.default = mi2;
    Pt2.exports = re2.default;
  });
  var Re$3 = T$3((ie2, It2) => {
    ie2.__esModule = true;
    ie2.default = void 0;
    var wi2 = yi2(U$3()), ki2 = D$4();
    function yi2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function Oi2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var Pi2 = function(e3) {
      Oi2(i3, e3);
      function i3(t3) {
        var r3;
        return r3 = e3.call(this, t3) || this, r3.type = ki2.ID, r3;
      }
      var n3 = i3.prototype;
      return n3.toString = function() {
        return [
          this.rawSpaceBefore,
          "#" + this.stringifyProperty("value"),
          this.rawSpaceAfter
        ].join("");
      }, i3;
    }(wi2.default);
    ie2.default = Pi2;
    It2.exports = ie2.default;
  });
  var Oe$2 = T$3((ne2, Dt2) => {
    ne2.__esModule = true;
    ne2.default = void 0;
    var Ii2 = Lt2(H$3("cssesc")), qi2 = J$3(), Li2 = Lt2(U$3());
    function Lt2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function qt2(e3, i3) {
      for (var n3 = 0; n3 < i3.length; n3++) {
        var t3 = i3[n3];
        t3.enumerable = t3.enumerable || false, t3.configurable = true, "value" in t3 && (t3.writable = true), Object.defineProperty(e3, t3.key, t3);
      }
    }
    function Di2(e3, i3, n3) {
      return i3 && qt2(e3.prototype, i3), e3;
    }
    function bi2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var Ai2 = function(e3) {
      bi2(i3, e3);
      function i3() {
        return e3.apply(this, arguments) || this;
      }
      var n3 = i3.prototype;
      return n3.qualifiedName = function(r3) {
        return this.namespace ? this.namespaceString + "|" + r3 : r3;
      }, n3.toString = function() {
        return [
          this.rawSpaceBefore,
          this.qualifiedName(this.stringifyProperty("value")),
          this.rawSpaceAfter
        ].join("");
      }, Di2(i3, [
        {
          key: "namespace",
          get: function() {
            return this._namespace;
          },
          set: function(r3) {
            if (r3 === true || r3 === "*" || r3 === "&") {
              this._namespace = r3, this.raws && delete this.raws.namespace;
              return;
            }
            var a3 = (0, Ii2.default)(r3, {
              isIdentifier: true
            });
            this._namespace = r3, a3 !== r3 ? ((0, qi2.ensureObject)(this, "raws"), this.raws.namespace = a3) : this.raws && delete this.raws.namespace;
          }
        },
        {
          key: "ns",
          get: function() {
            return this._namespace;
          },
          set: function(r3) {
            this.namespace = r3;
          }
        },
        {
          key: "namespaceString",
          get: function() {
            if (this.namespace) {
              var r3 = this.stringifyProperty("namespace");
              return r3 === true ? "" : r3;
            } else return "";
          }
        }
      ]), i3;
    }(Li2.default);
    ne2.default = Ai2;
    Dt2.exports = ne2.default;
  });
  var Fe$2 = T$3((se2, bt2) => {
    se2.__esModule = true;
    se2.default = void 0;
    var xi2 = Mi2(Oe$2()), Ni2 = D$4();
    function Mi2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function Ri2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var Fi2 = function(e3) {
      Ri2(i3, e3);
      function i3(n3) {
        var t3;
        return t3 = e3.call(this, n3) || this, t3.type = Ni2.TAG, t3;
      }
      return i3;
    }(xi2.default);
    se2.default = Fi2;
    bt2.exports = se2.default;
  });
  var Ce$3 = T$3((ae2, At2) => {
    ae2.__esModule = true;
    ae2.default = void 0;
    var Ci2 = Bi2(U$3()), Ui2 = D$4();
    function Bi2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function Qi2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var Yi2 = function(e3) {
      Qi2(i3, e3);
      function i3(n3) {
        var t3;
        return t3 = e3.call(this, n3) || this, t3.type = Ui2.STRING, t3;
      }
      return i3;
    }(Ci2.default);
    ae2.default = Yi2;
    At2.exports = ae2.default;
  });
  var Ue$3 = T$3((ue2, xt2) => {
    ue2.__esModule = true;
    ue2.default = void 0;
    var Gi2 = Vi2(ye$2()), Wi2 = D$4();
    function Vi2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function Hi2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var Ki2 = function(e3) {
      Hi2(i3, e3);
      function i3(t3) {
        var r3;
        return r3 = e3.call(this, t3) || this, r3.type = Wi2.PSEUDO, r3;
      }
      var n3 = i3.prototype;
      return n3.toString = function() {
        var r3 = this.length ? "(" + this.map(String).join(",") + ")" : "";
        return [
          this.rawSpaceBefore,
          this.stringifyProperty("value"),
          r3,
          this.rawSpaceAfter
        ].join("");
      }, i3;
    }(Gi2.default);
    ue2.default = Ki2;
    xt2.exports = ue2.default;
  });
  var We$2 = T$3((fe2) => {
    fe2.__esModule = true;
    fe2.unescapeValue = Ge2;
    fe2.default = void 0;
    var oe2 = Ye2(H$3("cssesc")), zi2 = Ye2(be$2()), $i2 = Ye2(Oe$2()), Ji2 = D$4(), Be2;
    function Ye2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function Nt2(e3, i3) {
      for (var n3 = 0; n3 < i3.length; n3++) {
        var t3 = i3[n3];
        t3.enumerable = t3.enumerable || false, t3.configurable = true, "value" in t3 && (t3.writable = true), Object.defineProperty(e3, t3.key, t3);
      }
    }
    function Xi2(e3, i3, n3) {
      return i3 && Nt2(e3.prototype, i3), e3;
    }
    function Zi2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var ji2 = H$3("node:util"), ce2 = ji2.deprecate, en2 = /^('|")(.*)\1$/, tn2 = ce2(function() {
    }, "Assigning an attribute a value containing characters that might need to be escaped is deprecated. Call attribute.setValue() instead."), rn = ce2(function() {
    }, "Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead."), nn2 = ce2(function() {
    }, "Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.");
    function Ge2(e3) {
      var i3 = false, n3 = null, t3 = e3, r3 = t3.match(en2);
      return r3 && (n3 = r3[1], t3 = r3[2]), t3 = (0, zi2.default)(t3), t3 !== e3 && (i3 = true), {
        deprecatedUsage: i3,
        unescaped: t3,
        quoteMark: n3
      };
    }
    function sn2(e3) {
      if (e3.quoteMark !== void 0 || e3.value === void 0) return e3;
      nn2();
      var i3 = Ge2(e3.value), n3 = i3.quoteMark, t3 = i3.unescaped;
      return e3.raws || (e3.raws = {}), e3.raws.value === void 0 && (e3.raws.value = e3.value), e3.value = t3, e3.quoteMark = n3, e3;
    }
    var Pe2 = function(e3) {
      Zi2(i3, e3);
      function i3(t3) {
        var r3;
        return t3 === void 0 && (t3 = {}), r3 = e3.call(this, sn2(t3)) || this, r3.type = Ji2.ATTRIBUTE, r3.raws = r3.raws || {}, Object.defineProperty(r3.raws, "unquoted", {
          get: ce2(function() {
            return r3.value;
          }, "attr.raws.unquoted is deprecated. Call attr.value instead."),
          set: ce2(function() {
            return r3.value;
          }, "Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.")
        }), r3._constructed = true, r3;
      }
      var n3 = i3.prototype;
      return n3.getQuotedValue = function(r3) {
        r3 === void 0 && (r3 = {});
        var a3 = this._determineQuoteMark(r3), s3 = Qe2[a3], u3 = (0, oe2.default)(this._value, s3);
        return u3;
      }, n3._determineQuoteMark = function(r3) {
        return r3.smart ? this.smartQuoteMark(r3) : this.preferredQuoteMark(r3);
      }, n3.setValue = function(r3, a3) {
        a3 === void 0 && (a3 = {}), this._value = r3, this._quoteMark = this._determineQuoteMark(a3), this._syncRawValue();
      }, n3.smartQuoteMark = function(r3) {
        var a3 = this.value, s3 = a3.replace(/[^']/g, "").length, u3 = a3.replace(/[^"]/g, "").length;
        if (s3 + u3 === 0) {
          var h3 = (0, oe2.default)(a3, {
            isIdentifier: true
          });
          if (h3 === a3) return i3.NO_QUOTE;
          var l3 = this.preferredQuoteMark(r3);
          if (l3 === i3.NO_QUOTE) {
            var p3 = this.quoteMark || r3.quoteMark || i3.DOUBLE_QUOTE, S3 = Qe2[p3], E3 = (0, oe2.default)(a3, S3);
            if (E3.length < h3.length) return p3;
          }
          return l3;
        } else return u3 === s3 ? this.preferredQuoteMark(r3) : u3 < s3 ? i3.DOUBLE_QUOTE : i3.SINGLE_QUOTE;
      }, n3.preferredQuoteMark = function(r3) {
        var a3 = r3.preferCurrentQuoteMark ? this.quoteMark : r3.quoteMark;
        return a3 === void 0 && (a3 = r3.preferCurrentQuoteMark ? r3.quoteMark : this.quoteMark), a3 === void 0 && (a3 = i3.DOUBLE_QUOTE), a3;
      }, n3._syncRawValue = function() {
        var r3 = (0, oe2.default)(this._value, Qe2[this.quoteMark]);
        r3 === this._value ? this.raws && delete this.raws.value : this.raws.value = r3;
      }, n3._handleEscapes = function(r3, a3) {
        if (this._constructed) {
          var s3 = (0, oe2.default)(a3, {
            isIdentifier: true
          });
          s3 !== a3 ? this.raws[r3] = s3 : delete this.raws[r3];
        }
      }, n3._spacesFor = function(r3) {
        var a3 = {
          before: "",
          after: ""
        }, s3 = this.spaces[r3] || {}, u3 = this.raws.spaces && this.raws.spaces[r3] || {};
        return Object.assign(a3, s3, u3);
      }, n3._stringFor = function(r3, a3, s3) {
        a3 === void 0 && (a3 = r3), s3 === void 0 && (s3 = Mt2);
        var u3 = this._spacesFor(a3);
        return s3(this.stringifyProperty(r3), u3);
      }, n3.offsetOf = function(r3) {
        var a3 = 1, s3 = this._spacesFor("attribute");
        if (a3 += s3.before.length, r3 === "namespace" || r3 === "ns") return this.namespace ? a3 : -1;
        if (r3 === "attributeNS" || (a3 += this.namespaceString.length, this.namespace && (a3 += 1), r3 === "attribute")) return a3;
        a3 += this.stringifyProperty("attribute").length, a3 += s3.after.length;
        var u3 = this._spacesFor("operator");
        a3 += u3.before.length;
        var h3 = this.stringifyProperty("operator");
        if (r3 === "operator") return h3 ? a3 : -1;
        a3 += h3.length, a3 += u3.after.length;
        var l3 = this._spacesFor("value");
        a3 += l3.before.length;
        var p3 = this.stringifyProperty("value");
        if (r3 === "value") return p3 ? a3 : -1;
        a3 += p3.length, a3 += l3.after.length;
        var S3 = this._spacesFor("insensitive");
        return a3 += S3.before.length, r3 === "insensitive" && this.insensitive ? a3 : -1;
      }, n3.toString = function() {
        var r3 = this, a3 = [
          this.rawSpaceBefore,
          "["
        ];
        return a3.push(this._stringFor("qualifiedAttribute", "attribute")), this.operator && (this.value || this.value === "") && (a3.push(this._stringFor("operator")), a3.push(this._stringFor("value")), a3.push(this._stringFor("insensitiveFlag", "insensitive", function(s3, u3) {
          return s3.length > 0 && !r3.quoted && u3.before.length === 0 && !(r3.spaces.value && r3.spaces.value.after) && (u3.before = " "), Mt2(s3, u3);
        }))), a3.push("]"), a3.push(this.rawSpaceAfter), a3.join("");
      }, Xi2(i3, [
        {
          key: "quoted",
          get: function() {
            var r3 = this.quoteMark;
            return r3 === "'" || r3 === '"';
          },
          set: function(r3) {
            rn();
          }
        },
        {
          key: "quoteMark",
          get: function() {
            return this._quoteMark;
          },
          set: function(r3) {
            if (!this._constructed) {
              this._quoteMark = r3;
              return;
            }
            this._quoteMark !== r3 && (this._quoteMark = r3, this._syncRawValue());
          }
        },
        {
          key: "qualifiedAttribute",
          get: function() {
            return this.qualifiedName(this.raws.attribute || this.attribute);
          }
        },
        {
          key: "insensitiveFlag",
          get: function() {
            return this.insensitive ? "i" : "";
          }
        },
        {
          key: "value",
          get: function() {
            return this._value;
          },
          set: function(r3) {
            if (this._constructed) {
              var a3 = Ge2(r3), s3 = a3.deprecatedUsage, u3 = a3.unescaped, h3 = a3.quoteMark;
              if (s3 && tn2(), u3 === this._value && h3 === this._quoteMark) return;
              this._value = u3, this._quoteMark = h3, this._syncRawValue();
            } else this._value = r3;
          }
        },
        {
          key: "attribute",
          get: function() {
            return this._attribute;
          },
          set: function(r3) {
            this._handleEscapes("attribute", r3), this._attribute = r3;
          }
        }
      ]), i3;
    }($i2.default);
    fe2.default = Pe2;
    Pe2.NO_QUOTE = null;
    Pe2.SINGLE_QUOTE = "'";
    Pe2.DOUBLE_QUOTE = '"';
    var Qe2 = (Be2 = {
      "'": {
        quotes: "single",
        wrap: true
      },
      '"': {
        quotes: "double",
        wrap: true
      }
    }, Be2[null] = {
      isIdentifier: true
    }, Be2);
    function Mt2(e3, i3) {
      return "" + i3.before + e3 + i3.after;
    }
  });
  var Ve$2 = T$3((le2, Rt2) => {
    le2.__esModule = true;
    le2.default = void 0;
    var an2 = on2(Oe$2()), un2 = D$4();
    function on2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function cn2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var fn2 = function(e3) {
      cn2(i3, e3);
      function i3(n3) {
        var t3;
        return t3 = e3.call(this, n3) || this, t3.type = un2.UNIVERSAL, t3.value = "*", t3;
      }
      return i3;
    }(an2.default);
    le2.default = fn2;
    Rt2.exports = le2.default;
  });
  var He$4 = T$3((he2, Ft2) => {
    he2.__esModule = true;
    he2.default = void 0;
    var ln2 = dn2(U$3()), hn2 = D$4();
    function dn2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function pn2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var vn2 = function(e3) {
      pn2(i3, e3);
      function i3(n3) {
        var t3;
        return t3 = e3.call(this, n3) || this, t3.type = hn2.COMBINATOR, t3;
      }
      return i3;
    }(ln2.default);
    he2.default = vn2;
    Ft2.exports = he2.default;
  });
  var Ke$3 = T$3((de2, Ct2) => {
    de2.__esModule = true;
    de2.default = void 0;
    var _n2 = gn2(U$3()), Sn2 = D$4();
    function gn2(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function Tn2(e3, i3) {
      e3.prototype = Object.create(i3.prototype), e3.prototype.constructor = e3, e3.__proto__ = i3;
    }
    var En2 = function(e3) {
      Tn2(i3, e3);
      function i3(n3) {
        var t3;
        return t3 = e3.call(this, n3) || this, t3.type = Sn2.NESTING, t3.value = "&", t3;
      }
      return i3;
    }(_n2.default);
    de2.default = En2;
    Ct2.exports = de2.default;
  });
  var Bt = T$3((Ie2, Ut2) => {
    Ie2.__esModule = true;
    Ie2.default = mn2;
    function mn2(e3) {
      return e3.sort(function(i3, n3) {
        return i3 - n3;
      });
    }
    Ut2.exports = Ie2.default;
  });
  var ze$2 = T$3((d3) => {
    d3.__esModule = true;
    d3.combinator = d3.word = d3.comment = d3.str = d3.tab = d3.newline = d3.feed = d3.cr = d3.backslash = d3.bang = d3.slash = d3.doubleQuote = d3.singleQuote = d3.space = d3.greaterThan = d3.pipe = d3.equals = d3.plus = d3.caret = d3.tilde = d3.dollar = d3.closeSquare = d3.openSquare = d3.closeParenthesis = d3.openParenthesis = d3.semicolon = d3.colon = d3.comma = d3.at = d3.asterisk = d3.ampersand = void 0;
    var wn2 = 38;
    d3.ampersand = wn2;
    var kn = 42;
    d3.asterisk = kn;
    var yn2 = 64;
    d3.at = yn2;
    var On2 = 44;
    d3.comma = On2;
    var Pn2 = 58;
    d3.colon = Pn2;
    var In2 = 59;
    d3.semicolon = In2;
    var qn2 = 40;
    d3.openParenthesis = qn2;
    var Ln2 = 41;
    d3.closeParenthesis = Ln2;
    var Dn2 = 91;
    d3.openSquare = Dn2;
    var bn2 = 93;
    d3.closeSquare = bn2;
    var An = 36;
    d3.dollar = An;
    var xn = 126;
    d3.tilde = xn;
    var Nn2 = 94;
    d3.caret = Nn2;
    var Mn2 = 43;
    d3.plus = Mn2;
    var Rn2 = 61;
    d3.equals = Rn2;
    var Fn2 = 124;
    d3.pipe = Fn2;
    var Cn = 62;
    d3.greaterThan = Cn;
    var Un2 = 32;
    d3.space = Un2;
    var Qt = 39;
    d3.singleQuote = Qt;
    var Bn2 = 34;
    d3.doubleQuote = Bn2;
    var Qn = 47;
    d3.slash = Qn;
    var Yn = 33;
    d3.bang = Yn;
    var Gn = 92;
    d3.backslash = Gn;
    var Wn2 = 13;
    d3.cr = Wn2;
    var Vn2 = 12;
    d3.feed = Vn2;
    var Hn = 10;
    d3.newline = Hn;
    var Kn2 = 9;
    d3.tab = Kn2;
    var zn2 = Qt;
    d3.str = zn2;
    var $n2 = -1;
    d3.comment = $n2;
    var Jn = -2;
    d3.word = Jn;
    var Xn = -3;
    d3.combinator = Xn;
  });
  var Gt$2 = T$3((pe2) => {
    pe2.__esModule = true;
    pe2.default = ns;
    pe2.FIELDS = void 0;
    var c3 = Zn(ze$2()), K3, m3;
    function Zn(e3) {
      if (e3 && e3.__esModule) return e3;
      var i3 = {};
      if (e3 != null) {
        for (var n3 in e3) if (Object.prototype.hasOwnProperty.call(e3, n3)) {
          var t3 = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(e3, n3) : {};
          t3.get || t3.set ? Object.defineProperty(i3, n3, t3) : i3[n3] = e3[n3];
        }
      }
      return i3.default = e3, i3;
    }
    var jn2 = (K3 = {}, K3[c3.tab] = true, K3[c3.newline] = true, K3[c3.cr] = true, K3[c3.feed] = true, K3), es = (m3 = {}, m3[c3.space] = true, m3[c3.tab] = true, m3[c3.newline] = true, m3[c3.cr] = true, m3[c3.feed] = true, m3[c3.ampersand] = true, m3[c3.asterisk] = true, m3[c3.bang] = true, m3[c3.comma] = true, m3[c3.colon] = true, m3[c3.semicolon] = true, m3[c3.openParenthesis] = true, m3[c3.closeParenthesis] = true, m3[c3.openSquare] = true, m3[c3.closeSquare] = true, m3[c3.singleQuote] = true, m3[c3.doubleQuote] = true, m3[c3.plus] = true, m3[c3.pipe] = true, m3[c3.tilde] = true, m3[c3.greaterThan] = true, m3[c3.equals] = true, m3[c3.dollar] = true, m3[c3.caret] = true, m3[c3.slash] = true, m3), $e2 = {}, Yt2 = "0123456789abcdefABCDEF";
    for (qe2 = 0; qe2 < Yt2.length; qe2++) $e2[Yt2.charCodeAt(qe2)] = true;
    var qe2;
    function ts(e3, i3) {
      var n3 = i3, t3;
      do {
        if (t3 = e3.charCodeAt(n3), es[t3]) return n3 - 1;
        t3 === c3.backslash ? n3 = rs(e3, n3) + 1 : n3++;
      } while (n3 < e3.length);
      return n3 - 1;
    }
    function rs(e3, i3) {
      var n3 = i3, t3 = e3.charCodeAt(n3 + 1);
      if (!jn2[t3]) if ($e2[t3]) {
        var r3 = 0;
        do
          n3++, r3++, t3 = e3.charCodeAt(n3 + 1);
        while ($e2[t3] && r3 < 6);
        r3 < 6 && t3 === c3.space && n3++;
      } else n3++;
      return n3;
    }
    var is = {
      TYPE: 0,
      START_LINE: 1,
      START_COL: 2,
      END_LINE: 3,
      END_COL: 4,
      START_POS: 5,
      END_POS: 6
    };
    pe2.FIELDS = is;
    function ns(e3) {
      var i3 = [], n3 = e3.css.valueOf(), t3 = n3, r3 = t3.length, a3 = -1, s3 = 1, u3 = 0, h3 = 0, l3, p3, S3, E3, v3, w3, N3, M3, _3, I3, q3, b3, L3;
      function Q3(V3, Y3) {
        if (e3.safe) n3 += Y3, _3 = n3.length - 1;
        else throw e3.error("Unclosed " + V3, s3, u3 - a3, u3);
      }
      for (; u3 < r3; ) {
        switch (l3 = n3.charCodeAt(u3), l3 === c3.newline && (a3 = u3, s3 += 1), l3) {
          case c3.space:
          case c3.tab:
          case c3.newline:
          case c3.cr:
          case c3.feed:
            _3 = u3;
            do
              _3 += 1, l3 = n3.charCodeAt(_3), l3 === c3.newline && (a3 = _3, s3 += 1);
            while (l3 === c3.space || l3 === c3.newline || l3 === c3.tab || l3 === c3.cr || l3 === c3.feed);
            L3 = c3.space, E3 = s3, S3 = _3 - a3 - 1, h3 = _3;
            break;
          case c3.plus:
          case c3.greaterThan:
          case c3.tilde:
          case c3.pipe:
            _3 = u3;
            do
              _3 += 1, l3 = n3.charCodeAt(_3);
            while (l3 === c3.plus || l3 === c3.greaterThan || l3 === c3.tilde || l3 === c3.pipe);
            L3 = c3.combinator, E3 = s3, S3 = u3 - a3, h3 = _3;
            break;
          case c3.asterisk:
          case c3.ampersand:
          case c3.bang:
          case c3.comma:
          case c3.equals:
          case c3.dollar:
          case c3.caret:
          case c3.openSquare:
          case c3.closeSquare:
          case c3.colon:
          case c3.semicolon:
          case c3.openParenthesis:
          case c3.closeParenthesis:
            _3 = u3, L3 = l3, E3 = s3, S3 = u3 - a3, h3 = _3 + 1;
            break;
          case c3.singleQuote:
          case c3.doubleQuote:
            b3 = l3 === c3.singleQuote ? "'" : '"', _3 = u3;
            do
              for (v3 = false, _3 = n3.indexOf(b3, _3 + 1), _3 === -1 && Q3("quote", b3), w3 = _3; n3.charCodeAt(w3 - 1) === c3.backslash; ) w3 -= 1, v3 = !v3;
            while (v3);
            L3 = c3.str, E3 = s3, S3 = u3 - a3, h3 = _3 + 1;
            break;
          default:
            l3 === c3.slash && n3.charCodeAt(u3 + 1) === c3.asterisk ? (_3 = n3.indexOf("*/", u3 + 2) + 1, _3 === 0 && Q3("comment", "*/"), p3 = n3.slice(u3, _3 + 1), M3 = p3.split(`
`), N3 = M3.length - 1, N3 > 0 ? (I3 = s3 + N3, q3 = _3 - M3[N3].length) : (I3 = s3, q3 = a3), L3 = c3.comment, s3 = I3, E3 = I3, S3 = _3 - q3) : l3 === c3.slash ? (_3 = u3, L3 = l3, E3 = s3, S3 = u3 - a3, h3 = _3 + 1) : (_3 = ts(n3, u3), L3 = c3.word, E3 = s3, S3 = _3 - a3), h3 = _3 + 1;
            break;
        }
        i3.push([
          L3,
          s3,
          u3 - a3,
          E3,
          S3,
          u3,
          h3
        ]), q3 && (a3 = q3, q3 = null), u3 = h3;
      }
      return i3;
    }
  });
  var Jt$1 = T$3((ve2, $t2) => {
    ve2.__esModule = true;
    ve2.default = void 0;
    var Je2 = A3(H$3("indexes-of")), ss = A3(H$3("uniq")), as = A3(Ae$1()), Xe2 = A3(xe()), us = A3(Ne$3()), Wt2 = A3(Me$2()), os = A3(Re$3()), cs = A3(Fe$2()), Ze2 = A3(Ce$3()), fs = A3(Ue$3()), Vt2 = Le2(We$2()), ls = A3(Ve$2()), je2 = A3(He$4()), hs = A3(Ke$3()), ds = A3(Bt()), o3 = Le2(Gt$2()), f3 = Le2(ze$2()), ps = Le2(D$4()), O3 = J$3(), G3, et;
    function Le2(e3) {
      if (e3 && e3.__esModule) return e3;
      var i3 = {};
      if (e3 != null) {
        for (var n3 in e3) if (Object.prototype.hasOwnProperty.call(e3, n3)) {
          var t3 = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(e3, n3) : {};
          t3.get || t3.set ? Object.defineProperty(i3, n3, t3) : i3[n3] = e3[n3];
        }
      }
      return i3.default = e3, i3;
    }
    function A3(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    function Ht2(e3, i3) {
      for (var n3 = 0; n3 < i3.length; n3++) {
        var t3 = i3[n3];
        t3.enumerable = t3.enumerable || false, t3.configurable = true, "value" in t3 && (t3.writable = true), Object.defineProperty(e3, t3.key, t3);
      }
    }
    function vs(e3, i3, n3) {
      return i3 && Ht2(e3.prototype, i3), e3;
    }
    var rt2 = (G3 = {}, G3[f3.space] = true, G3[f3.cr] = true, G3[f3.feed] = true, G3[f3.newline] = true, G3[f3.tab] = true, G3), _s = Object.assign({}, rt2, (et = {}, et[f3.comment] = true, et));
    function Kt2(e3) {
      return {
        line: e3[o3.FIELDS.START_LINE],
        column: e3[o3.FIELDS.START_COL]
      };
    }
    function zt2(e3) {
      return {
        line: e3[o3.FIELDS.END_LINE],
        column: e3[o3.FIELDS.END_COL]
      };
    }
    function W3(e3, i3, n3, t3) {
      return {
        start: {
          line: e3,
          column: i3
        },
        end: {
          line: n3,
          column: t3
        }
      };
    }
    function z3(e3) {
      return W3(e3[o3.FIELDS.START_LINE], e3[o3.FIELDS.START_COL], e3[o3.FIELDS.END_LINE], e3[o3.FIELDS.END_COL]);
    }
    function tt2(e3, i3) {
      if (e3) return W3(e3[o3.FIELDS.START_LINE], e3[o3.FIELDS.START_COL], i3[o3.FIELDS.END_LINE], i3[o3.FIELDS.END_COL]);
    }
    function $3(e3, i3) {
      var n3 = e3[i3];
      if (typeof n3 == "string") return n3.indexOf("\\") !== -1 && ((0, O3.ensureObject)(e3, "raws"), e3[i3] = (0, O3.unesc)(n3), e3.raws[i3] === void 0 && (e3.raws[i3] = n3)), e3;
    }
    var Ss = function() {
      function e3(n3, t3) {
        t3 === void 0 && (t3 = {}), this.rule = n3, this.options = Object.assign({
          lossy: false,
          safe: false
        }, t3), this.position = 0, this.css = typeof this.rule == "string" ? this.rule : this.rule.selector, this.tokens = (0, o3.default)({
          css: this.css,
          error: this._errorGenerator(),
          safe: this.options.safe
        });
        var r3 = tt2(this.tokens[0], this.tokens[this.tokens.length - 1]);
        this.root = new as.default({
          source: r3
        }), this.root.errorGenerator = this._errorGenerator();
        var a3 = new Xe2.default({
          source: {
            start: {
              line: 1,
              column: 1
            }
          }
        });
        this.root.append(a3), this.current = a3, this.loop();
      }
      var i3 = e3.prototype;
      return i3._errorGenerator = function() {
        var t3 = this;
        return function(r3, a3) {
          return typeof t3.rule == "string" ? new Error(r3) : t3.rule.error(r3, a3);
        };
      }, i3.attribute = function() {
        var t3 = [], r3 = this.currToken;
        for (this.position++; this.position < this.tokens.length && this.currToken[o3.FIELDS.TYPE] !== f3.closeSquare; ) t3.push(this.currToken), this.position++;
        if (this.currToken[o3.FIELDS.TYPE] !== f3.closeSquare) return this.expected("closing square bracket", this.currToken[o3.FIELDS.START_POS]);
        var a3 = t3.length, s3 = {
          source: W3(r3[1], r3[2], this.currToken[3], this.currToken[4]),
          sourceIndex: r3[o3.FIELDS.START_POS]
        };
        if (a3 === 1 && !~[
          f3.word
        ].indexOf(t3[0][o3.FIELDS.TYPE])) return this.expected("attribute", t3[0][o3.FIELDS.START_POS]);
        for (var u3 = 0, h3 = "", l3 = "", p3 = null, S3 = false; u3 < a3; ) {
          var E3 = t3[u3], v3 = this.content(E3), w3 = t3[u3 + 1];
          switch (E3[o3.FIELDS.TYPE]) {
            case f3.space:
              if (S3 = true, this.options.lossy) break;
              if (p3) {
                (0, O3.ensureObject)(s3, "spaces", p3);
                var N3 = s3.spaces[p3].after || "";
                s3.spaces[p3].after = N3 + v3;
                var M3 = (0, O3.getProp)(s3, "raws", "spaces", p3, "after") || null;
                M3 && (s3.raws.spaces[p3].after = M3 + v3);
              } else h3 = h3 + v3, l3 = l3 + v3;
              break;
            case f3.asterisk:
              if (w3[o3.FIELDS.TYPE] === f3.equals) s3.operator = v3, p3 = "operator";
              else if ((!s3.namespace || p3 === "namespace" && !S3) && w3) {
                h3 && ((0, O3.ensureObject)(s3, "spaces", "attribute"), s3.spaces.attribute.before = h3, h3 = ""), l3 && ((0, O3.ensureObject)(s3, "raws", "spaces", "attribute"), s3.raws.spaces.attribute.before = h3, l3 = ""), s3.namespace = (s3.namespace || "") + v3;
                var _3 = (0, O3.getProp)(s3, "raws", "namespace") || null;
                _3 && (s3.raws.namespace += v3), p3 = "namespace";
              }
              S3 = false;
              break;
            case f3.dollar:
              if (p3 === "value") {
                var I3 = (0, O3.getProp)(s3, "raws", "value");
                s3.value += "$", I3 && (s3.raws.value = I3 + "$");
                break;
              }
            case f3.caret:
              w3[o3.FIELDS.TYPE] === f3.equals && (s3.operator = v3, p3 = "operator"), S3 = false;
              break;
            case f3.combinator:
              if (v3 === "~" && w3[o3.FIELDS.TYPE] === f3.equals && (s3.operator = v3, p3 = "operator"), v3 !== "|") {
                S3 = false;
                break;
              }
              w3[o3.FIELDS.TYPE] === f3.equals ? (s3.operator = v3, p3 = "operator") : !s3.namespace && !s3.attribute && (s3.namespace = true), S3 = false;
              break;
            case f3.word:
              if (w3 && this.content(w3) === "|" && t3[u3 + 2] && t3[u3 + 2][o3.FIELDS.TYPE] !== f3.equals && !s3.operator && !s3.namespace) s3.namespace = v3, p3 = "namespace";
              else if (!s3.attribute || p3 === "attribute" && !S3) {
                h3 && ((0, O3.ensureObject)(s3, "spaces", "attribute"), s3.spaces.attribute.before = h3, h3 = ""), l3 && ((0, O3.ensureObject)(s3, "raws", "spaces", "attribute"), s3.raws.spaces.attribute.before = l3, l3 = ""), s3.attribute = (s3.attribute || "") + v3;
                var q3 = (0, O3.getProp)(s3, "raws", "attribute") || null;
                q3 && (s3.raws.attribute += v3), p3 = "attribute";
              } else if (!s3.value && s3.value !== "" || p3 === "value" && !S3) {
                var b3 = (0, O3.unesc)(v3), L3 = (0, O3.getProp)(s3, "raws", "value") || "", Q3 = s3.value || "";
                s3.value = Q3 + b3, s3.quoteMark = null, (b3 !== v3 || L3) && ((0, O3.ensureObject)(s3, "raws"), s3.raws.value = (L3 || Q3) + v3), p3 = "value";
              } else {
                var V3 = v3 === "i" || v3 === "I";
                (s3.value || s3.value === "") && (s3.quoteMark || S3) ? (s3.insensitive = V3, (!V3 || v3 === "I") && ((0, O3.ensureObject)(s3, "raws"), s3.raws.insensitiveFlag = v3), p3 = "insensitive", h3 && ((0, O3.ensureObject)(s3, "spaces", "insensitive"), s3.spaces.insensitive.before = h3, h3 = ""), l3 && ((0, O3.ensureObject)(s3, "raws", "spaces", "insensitive"), s3.raws.spaces.insensitive.before = l3, l3 = "")) : (s3.value || s3.value === "") && (p3 = "value", s3.value += v3, s3.raws.value && (s3.raws.value += v3));
              }
              S3 = false;
              break;
            case f3.str:
              if (!s3.attribute || !s3.operator) return this.error("Expected an attribute followed by an operator preceding the string.", {
                index: E3[o3.FIELDS.START_POS]
              });
              var Y3 = (0, Vt2.unescapeValue)(v3), fr2 = Y3.unescaped, lr2 = Y3.quoteMark;
              s3.value = fr2, s3.quoteMark = lr2, p3 = "value", (0, O3.ensureObject)(s3, "raws"), s3.raws.value = v3, S3 = false;
              break;
            case f3.equals:
              if (!s3.attribute) return this.expected("attribute", E3[o3.FIELDS.START_POS], v3);
              if (s3.value) return this.error('Unexpected "=" found; an operator was already defined.', {
                index: E3[o3.FIELDS.START_POS]
              });
              s3.operator = s3.operator ? s3.operator + v3 : v3, p3 = "operator", S3 = false;
              break;
            case f3.comment:
              if (p3) if (S3 || w3 && w3[o3.FIELDS.TYPE] === f3.space || p3 === "insensitive") {
                var hr2 = (0, O3.getProp)(s3, "spaces", p3, "after") || "", dr2 = (0, O3.getProp)(s3, "raws", "spaces", p3, "after") || hr2;
                (0, O3.ensureObject)(s3, "raws", "spaces", p3), s3.raws.spaces[p3].after = dr2 + v3;
              } else {
                var pr2 = s3[p3] || "", vr2 = (0, O3.getProp)(s3, "raws", p3) || pr2;
                (0, O3.ensureObject)(s3, "raws"), s3.raws[p3] = vr2 + v3;
              }
              else l3 = l3 + v3;
              break;
            default:
              return this.error('Unexpected "' + v3 + '" found.', {
                index: E3[o3.FIELDS.START_POS]
              });
          }
          u3++;
        }
        $3(s3, "attribute"), $3(s3, "namespace"), this.newNode(new Vt2.default(s3)), this.position++;
      }, i3.parseWhitespaceEquivalentTokens = function(t3) {
        t3 < 0 && (t3 = this.tokens.length);
        var r3 = this.position, a3 = [], s3 = "", u3 = void 0;
        do
          if (rt2[this.currToken[o3.FIELDS.TYPE]]) this.options.lossy || (s3 += this.content());
          else if (this.currToken[o3.FIELDS.TYPE] === f3.comment) {
            var h3 = {};
            s3 && (h3.before = s3, s3 = ""), u3 = new Wt2.default({
              value: this.content(),
              source: z3(this.currToken),
              sourceIndex: this.currToken[o3.FIELDS.START_POS],
              spaces: h3
            }), a3.push(u3);
          }
        while (++this.position < t3);
        if (s3) {
          if (u3) u3.spaces.after = s3;
          else if (!this.options.lossy) {
            var l3 = this.tokens[r3], p3 = this.tokens[this.position - 1];
            a3.push(new Ze2.default({
              value: "",
              source: W3(l3[o3.FIELDS.START_LINE], l3[o3.FIELDS.START_COL], p3[o3.FIELDS.END_LINE], p3[o3.FIELDS.END_COL]),
              sourceIndex: l3[o3.FIELDS.START_POS],
              spaces: {
                before: s3,
                after: ""
              }
            }));
          }
        }
        return a3;
      }, i3.convertWhitespaceNodesToSpace = function(t3, r3) {
        var a3 = this;
        r3 === void 0 && (r3 = false);
        var s3 = "", u3 = "";
        t3.forEach(function(l3) {
          var p3 = a3.lossySpace(l3.spaces.before, r3), S3 = a3.lossySpace(l3.rawSpaceBefore, r3);
          s3 += p3 + a3.lossySpace(l3.spaces.after, r3 && p3.length === 0), u3 += p3 + l3.value + a3.lossySpace(l3.rawSpaceAfter, r3 && S3.length === 0);
        }), u3 === s3 && (u3 = void 0);
        var h3 = {
          space: s3,
          rawSpace: u3
        };
        return h3;
      }, i3.isNamedCombinator = function(t3) {
        return t3 === void 0 && (t3 = this.position), this.tokens[t3 + 0] && this.tokens[t3 + 0][o3.FIELDS.TYPE] === f3.slash && this.tokens[t3 + 1] && this.tokens[t3 + 1][o3.FIELDS.TYPE] === f3.word && this.tokens[t3 + 2] && this.tokens[t3 + 2][o3.FIELDS.TYPE] === f3.slash;
      }, i3.namedCombinator = function() {
        if (this.isNamedCombinator()) {
          var t3 = this.content(this.tokens[this.position + 1]), r3 = (0, O3.unesc)(t3).toLowerCase(), a3 = {};
          r3 !== t3 && (a3.value = "/" + t3 + "/");
          var s3 = new je2.default({
            value: "/" + r3 + "/",
            source: W3(this.currToken[o3.FIELDS.START_LINE], this.currToken[o3.FIELDS.START_COL], this.tokens[this.position + 2][o3.FIELDS.END_LINE], this.tokens[this.position + 2][o3.FIELDS.END_COL]),
            sourceIndex: this.currToken[o3.FIELDS.START_POS],
            raws: a3
          });
          return this.position = this.position + 3, s3;
        } else this.unexpected();
      }, i3.combinator = function() {
        var t3 = this;
        if (this.content() === "|") return this.namespace();
        var r3 = this.locateNextMeaningfulToken(this.position);
        if (r3 < 0 || this.tokens[r3][o3.FIELDS.TYPE] === f3.comma) {
          var a3 = this.parseWhitespaceEquivalentTokens(r3);
          if (a3.length > 0) {
            var s3 = this.current.last;
            if (s3) {
              var u3 = this.convertWhitespaceNodesToSpace(a3), h3 = u3.space, l3 = u3.rawSpace;
              l3 !== void 0 && (s3.rawSpaceAfter += l3), s3.spaces.after += h3;
            } else a3.forEach(function(L3) {
              return t3.newNode(L3);
            });
          }
          return;
        }
        var p3 = this.currToken, S3 = void 0;
        r3 > this.position && (S3 = this.parseWhitespaceEquivalentTokens(r3));
        var E3;
        if (this.isNamedCombinator() ? E3 = this.namedCombinator() : this.currToken[o3.FIELDS.TYPE] === f3.combinator ? (E3 = new je2.default({
          value: this.content(),
          source: z3(this.currToken),
          sourceIndex: this.currToken[o3.FIELDS.START_POS]
        }), this.position++) : rt2[this.currToken[o3.FIELDS.TYPE]] || S3 || this.unexpected(), E3) {
          if (S3) {
            var v3 = this.convertWhitespaceNodesToSpace(S3), w3 = v3.space, N3 = v3.rawSpace;
            E3.spaces.before = w3, E3.rawSpaceBefore = N3;
          }
        } else {
          var M3 = this.convertWhitespaceNodesToSpace(S3, true), _3 = M3.space, I3 = M3.rawSpace;
          I3 || (I3 = _3);
          var q3 = {}, b3 = {
            spaces: {}
          };
          _3.endsWith(" ") && I3.endsWith(" ") ? (q3.before = _3.slice(0, _3.length - 1), b3.spaces.before = I3.slice(0, I3.length - 1)) : _3.startsWith(" ") && I3.startsWith(" ") ? (q3.after = _3.slice(1), b3.spaces.after = I3.slice(1)) : b3.value = I3, E3 = new je2.default({
            value: " ",
            source: tt2(p3, this.tokens[this.position - 1]),
            sourceIndex: p3[o3.FIELDS.START_POS],
            spaces: q3,
            raws: b3
          });
        }
        return this.currToken && this.currToken[o3.FIELDS.TYPE] === f3.space && (E3.spaces.after = this.optionalSpace(this.content()), this.position++), this.newNode(E3);
      }, i3.comma = function() {
        if (this.position === this.tokens.length - 1) {
          this.root.trailingComma = true, this.position++;
          return;
        }
        this.current._inferEndPosition();
        var t3 = new Xe2.default({
          source: {
            start: Kt2(this.tokens[this.position + 1])
          }
        });
        this.current.parent.append(t3), this.current = t3, this.position++;
      }, i3.comment = function() {
        var t3 = this.currToken;
        this.newNode(new Wt2.default({
          value: this.content(),
          source: z3(t3),
          sourceIndex: t3[o3.FIELDS.START_POS]
        })), this.position++;
      }, i3.error = function(t3, r3) {
        throw this.root.error(t3, r3);
      }, i3.missingBackslash = function() {
        return this.error("Expected a backslash preceding the semicolon.", {
          index: this.currToken[o3.FIELDS.START_POS]
        });
      }, i3.missingParenthesis = function() {
        return this.expected("opening parenthesis", this.currToken[o3.FIELDS.START_POS]);
      }, i3.missingSquareBracket = function() {
        return this.expected("opening square bracket", this.currToken[o3.FIELDS.START_POS]);
      }, i3.unexpected = function() {
        return this.error("Unexpected '" + this.content() + "'. Escaping special characters with \\ may help.", this.currToken[o3.FIELDS.START_POS]);
      }, i3.namespace = function() {
        var t3 = this.prevToken && this.content(this.prevToken) || true;
        if (this.nextToken[o3.FIELDS.TYPE] === f3.word) return this.position++, this.word(t3);
        if (this.nextToken[o3.FIELDS.TYPE] === f3.asterisk) return this.position++, this.universal(t3);
      }, i3.nesting = function() {
        if (this.nextToken) {
          var t3 = this.content(this.nextToken);
          if (t3 === "|") {
            this.position++;
            return;
          }
        }
        var r3 = this.currToken;
        this.newNode(new hs.default({
          value: this.content(),
          source: z3(r3),
          sourceIndex: r3[o3.FIELDS.START_POS]
        })), this.position++;
      }, i3.parentheses = function() {
        var t3 = this.current.last, r3 = 1;
        if (this.position++, t3 && t3.type === ps.PSEUDO) {
          var a3 = new Xe2.default({
            source: {
              start: Kt2(this.tokens[this.position - 1])
            }
          }), s3 = this.current;
          for (t3.append(a3), this.current = a3; this.position < this.tokens.length && r3; ) this.currToken[o3.FIELDS.TYPE] === f3.openParenthesis && r3++, this.currToken[o3.FIELDS.TYPE] === f3.closeParenthesis && r3--, r3 ? this.parse() : (this.current.source.end = zt2(this.currToken), this.current.parent.source.end = zt2(this.currToken), this.position++);
          this.current = s3;
        } else {
          for (var u3 = this.currToken, h3 = "(", l3; this.position < this.tokens.length && r3; ) this.currToken[o3.FIELDS.TYPE] === f3.openParenthesis && r3++, this.currToken[o3.FIELDS.TYPE] === f3.closeParenthesis && r3--, l3 = this.currToken, h3 += this.parseParenthesisToken(this.currToken), this.position++;
          t3 ? t3.appendToPropertyAndEscape("value", h3, h3) : this.newNode(new Ze2.default({
            value: h3,
            source: W3(u3[o3.FIELDS.START_LINE], u3[o3.FIELDS.START_COL], l3[o3.FIELDS.END_LINE], l3[o3.FIELDS.END_COL]),
            sourceIndex: u3[o3.FIELDS.START_POS]
          }));
        }
        if (r3) return this.expected("closing parenthesis", this.currToken[o3.FIELDS.START_POS]);
      }, i3.pseudo = function() {
        for (var t3 = this, r3 = "", a3 = this.currToken; this.currToken && this.currToken[o3.FIELDS.TYPE] === f3.colon; ) r3 += this.content(), this.position++;
        if (!this.currToken) return this.expected([
          "pseudo-class",
          "pseudo-element"
        ], this.position - 1);
        if (this.currToken[o3.FIELDS.TYPE] === f3.word) this.splitWord(false, function(s3, u3) {
          r3 += s3, t3.newNode(new fs.default({
            value: r3,
            source: tt2(a3, t3.currToken),
            sourceIndex: a3[o3.FIELDS.START_POS]
          })), u3 > 1 && t3.nextToken && t3.nextToken[o3.FIELDS.TYPE] === f3.openParenthesis && t3.error("Misplaced parenthesis.", {
            index: t3.nextToken[o3.FIELDS.START_POS]
          });
        });
        else return this.expected([
          "pseudo-class",
          "pseudo-element"
        ], this.currToken[o3.FIELDS.START_POS]);
      }, i3.space = function() {
        var t3 = this.content();
        this.position === 0 || this.prevToken[o3.FIELDS.TYPE] === f3.comma || this.prevToken[o3.FIELDS.TYPE] === f3.openParenthesis ? (this.spaces = this.optionalSpace(t3), this.position++) : this.position === this.tokens.length - 1 || this.nextToken[o3.FIELDS.TYPE] === f3.comma || this.nextToken[o3.FIELDS.TYPE] === f3.closeParenthesis ? (this.current.last.spaces.after = this.optionalSpace(t3), this.position++) : this.combinator();
      }, i3.string = function() {
        var t3 = this.currToken;
        this.newNode(new Ze2.default({
          value: this.content(),
          source: z3(t3),
          sourceIndex: t3[o3.FIELDS.START_POS]
        })), this.position++;
      }, i3.universal = function(t3) {
        var r3 = this.nextToken;
        if (r3 && this.content(r3) === "|") return this.position++, this.namespace();
        var a3 = this.currToken;
        this.newNode(new ls.default({
          value: this.content(),
          source: z3(a3),
          sourceIndex: a3[o3.FIELDS.START_POS]
        }), t3), this.position++;
      }, i3.splitWord = function(t3, r3) {
        for (var a3 = this, s3 = this.nextToken, u3 = this.content(); s3 && ~[
          f3.dollar,
          f3.caret,
          f3.equals,
          f3.word
        ].indexOf(s3[o3.FIELDS.TYPE]); ) {
          this.position++;
          var h3 = this.content();
          if (u3 += h3, h3.lastIndexOf("\\") === h3.length - 1) {
            var l3 = this.nextToken;
            l3 && l3[o3.FIELDS.TYPE] === f3.space && (u3 += this.requiredSpace(this.content(l3)), this.position++);
          }
          s3 = this.nextToken;
        }
        var p3 = (0, Je2.default)(u3, ".").filter(function(w3) {
          return u3[w3 - 1] !== "\\";
        }), S3 = (0, Je2.default)(u3, "#").filter(function(w3) {
          return u3[w3 - 1] !== "\\";
        }), E3 = (0, Je2.default)(u3, "#{");
        E3.length && (S3 = S3.filter(function(w3) {
          return !~E3.indexOf(w3);
        }));
        var v3 = (0, ds.default)((0, ss.default)([
          0
        ].concat(p3, S3)));
        v3.forEach(function(w3, N3) {
          var M3 = v3[N3 + 1] || u3.length, _3 = u3.slice(w3, M3);
          if (N3 === 0 && r3) return r3.call(a3, _3, v3.length);
          var I3, q3 = a3.currToken, b3 = q3[o3.FIELDS.START_POS] + v3[N3], L3 = W3(q3[1], q3[2] + w3, q3[3], q3[2] + (M3 - 1));
          if (~p3.indexOf(w3)) {
            var Q3 = {
              value: _3.slice(1),
              source: L3,
              sourceIndex: b3
            };
            I3 = new us.default($3(Q3, "value"));
          } else if (~S3.indexOf(w3)) {
            var V3 = {
              value: _3.slice(1),
              source: L3,
              sourceIndex: b3
            };
            I3 = new os.default($3(V3, "value"));
          } else {
            var Y3 = {
              value: _3,
              source: L3,
              sourceIndex: b3
            };
            $3(Y3, "value"), I3 = new cs.default(Y3);
          }
          a3.newNode(I3, t3), t3 = null;
        }), this.position++;
      }, i3.word = function(t3) {
        var r3 = this.nextToken;
        return r3 && this.content(r3) === "|" ? (this.position++, this.namespace()) : this.splitWord(t3);
      }, i3.loop = function() {
        for (; this.position < this.tokens.length; ) this.parse(true);
        return this.current._inferEndPosition(), this.root;
      }, i3.parse = function(t3) {
        switch (this.currToken[o3.FIELDS.TYPE]) {
          case f3.space:
            this.space();
            break;
          case f3.comment:
            this.comment();
            break;
          case f3.openParenthesis:
            this.parentheses();
            break;
          case f3.closeParenthesis:
            t3 && this.missingParenthesis();
            break;
          case f3.openSquare:
            this.attribute();
            break;
          case f3.dollar:
          case f3.caret:
          case f3.equals:
          case f3.word:
            this.word();
            break;
          case f3.colon:
            this.pseudo();
            break;
          case f3.comma:
            this.comma();
            break;
          case f3.asterisk:
            this.universal();
            break;
          case f3.ampersand:
            this.nesting();
            break;
          case f3.slash:
          case f3.combinator:
            this.combinator();
            break;
          case f3.str:
            this.string();
            break;
          case f3.closeSquare:
            this.missingSquareBracket();
          case f3.semicolon:
            this.missingBackslash();
          default:
            this.unexpected();
        }
      }, i3.expected = function(t3, r3, a3) {
        if (Array.isArray(t3)) {
          var s3 = t3.pop();
          t3 = t3.join(", ") + " or " + s3;
        }
        var u3 = /^[aeiou]/.test(t3[0]) ? "an" : "a";
        return a3 ? this.error("Expected " + u3 + " " + t3 + ', found "' + a3 + '" instead.', {
          index: r3
        }) : this.error("Expected " + u3 + " " + t3 + ".", {
          index: r3
        });
      }, i3.requiredSpace = function(t3) {
        return this.options.lossy ? " " : t3;
      }, i3.optionalSpace = function(t3) {
        return this.options.lossy ? "" : t3;
      }, i3.lossySpace = function(t3, r3) {
        return this.options.lossy ? r3 ? " " : "" : t3;
      }, i3.parseParenthesisToken = function(t3) {
        var r3 = this.content(t3);
        return t3[o3.FIELDS.TYPE] === f3.space ? this.requiredSpace(r3) : r3;
      }, i3.newNode = function(t3, r3) {
        return r3 && (/^ +$/.test(r3) && (this.options.lossy || (this.spaces = (this.spaces || "") + r3), r3 = true), t3.namespace = r3, $3(t3, "namespace")), this.spaces && (t3.spaces.before = this.spaces, this.spaces = ""), this.current.append(t3);
      }, i3.content = function(t3) {
        return t3 === void 0 && (t3 = this.currToken), this.css.slice(t3[o3.FIELDS.START_POS], t3[o3.FIELDS.END_POS]);
      }, i3.locateNextMeaningfulToken = function(t3) {
        t3 === void 0 && (t3 = this.position + 1);
        for (var r3 = t3; r3 < this.tokens.length; ) if (_s[this.tokens[r3][o3.FIELDS.TYPE]]) {
          r3++;
          continue;
        } else return r3;
        return -1;
      }, vs(e3, [
        {
          key: "currToken",
          get: function() {
            return this.tokens[this.position];
          }
        },
        {
          key: "nextToken",
          get: function() {
            return this.tokens[this.position + 1];
          }
        },
        {
          key: "prevToken",
          get: function() {
            return this.tokens[this.position - 1];
          }
        }
      ]), e3;
    }();
    ve2.default = Ss;
    $t2.exports = ve2.default;
  });
  var Zt$1 = T$3((_e2, Xt2) => {
    _e2.__esModule = true;
    _e2.default = void 0;
    var gs = Ts(Jt$1());
    function Ts(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    var Es = function() {
      function e3(n3, t3) {
        this.func = n3 || function() {
        }, this.funcRes = null, this.options = t3;
      }
      var i3 = e3.prototype;
      return i3._shouldUpdateSelector = function(t3, r3) {
        r3 === void 0 && (r3 = {});
        var a3 = Object.assign({}, this.options, r3);
        return a3.updateSelector === false ? false : typeof t3 != "string";
      }, i3._isLossy = function(t3) {
        t3 === void 0 && (t3 = {});
        var r3 = Object.assign({}, this.options, t3);
        return r3.lossless === false;
      }, i3._root = function(t3, r3) {
        r3 === void 0 && (r3 = {});
        var a3 = new gs.default(t3, this._parseOptions(r3));
        return a3.root;
      }, i3._parseOptions = function(t3) {
        return {
          lossy: this._isLossy(t3)
        };
      }, i3._run = function(t3, r3) {
        var a3 = this;
        return r3 === void 0 && (r3 = {}), new Promise(function(s3, u3) {
          try {
            var h3 = a3._root(t3, r3);
            Promise.resolve(a3.func(h3)).then(function(l3) {
              var p3 = void 0;
              return a3._shouldUpdateSelector(t3, r3) && (p3 = h3.toString(), t3.selector = p3), {
                transform: l3,
                root: h3,
                string: p3
              };
            }).then(s3, u3);
          } catch (l3) {
            u3(l3);
            return;
          }
        });
      }, i3._runSync = function(t3, r3) {
        r3 === void 0 && (r3 = {});
        var a3 = this._root(t3, r3), s3 = this.func(a3);
        if (s3 && typeof s3.then == "function") throw new Error("Selector processor returned a promise to a synchronous call.");
        var u3 = void 0;
        return r3.updateSelector && typeof t3 != "string" && (u3 = a3.toString(), t3.selector = u3), {
          transform: s3,
          root: a3,
          string: u3
        };
      }, i3.ast = function(t3, r3) {
        return this._run(t3, r3).then(function(a3) {
          return a3.root;
        });
      }, i3.astSync = function(t3, r3) {
        return this._runSync(t3, r3).root;
      }, i3.transform = function(t3, r3) {
        return this._run(t3, r3).then(function(a3) {
          return a3.transform;
        });
      }, i3.transformSync = function(t3, r3) {
        return this._runSync(t3, r3).transform;
      }, i3.process = function(t3, r3) {
        return this._run(t3, r3).then(function(a3) {
          return a3.string || a3.root.toString();
        });
      }, i3.processSync = function(t3, r3) {
        var a3 = this._runSync(t3, r3);
        return a3.string || a3.root.toString();
      }, e3;
    }();
    _e2.default = Es;
    Xt2.exports = _e2.default;
  });
  var jt$2 = T$3((y3) => {
    y3.__esModule = true;
    y3.universal = y3.tag = y3.string = y3.selector = y3.root = y3.pseudo = y3.nesting = y3.id = y3.comment = y3.combinator = y3.className = y3.attribute = void 0;
    var ms = R3(We$2()), ws = R3(Ne$3()), ks = R3(He$4()), ys = R3(Me$2()), Os = R3(Re$3()), Ps = R3(Ke$3()), Is = R3(Ue$3()), qs = R3(Ae$1()), Ls = R3(xe()), Ds = R3(Ce$3()), bs = R3(Fe$2()), As = R3(Ve$2());
    function R3(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    var xs2 = function(i3) {
      return new ms.default(i3);
    };
    y3.attribute = xs2;
    var Ns = function(i3) {
      return new ws.default(i3);
    };
    y3.className = Ns;
    var Ms = function(i3) {
      return new ks.default(i3);
    };
    y3.combinator = Ms;
    var Rs = function(i3) {
      return new ys.default(i3);
    };
    y3.comment = Rs;
    var Fs = function(i3) {
      return new Os.default(i3);
    };
    y3.id = Fs;
    var Cs = function(i3) {
      return new Ps.default(i3);
    };
    y3.nesting = Cs;
    var Us = function(i3) {
      return new Is.default(i3);
    };
    y3.pseudo = Us;
    var Bs = function(i3) {
      return new qs.default(i3);
    };
    y3.root = Bs;
    var Qs = function(i3) {
      return new Ls.default(i3);
    };
    y3.selector = Qs;
    var Ys = function(i3) {
      return new Ds.default(i3);
    };
    y3.string = Ys;
    var Gs = function(i3) {
      return new bs.default(i3);
    };
    y3.tag = Gs;
    var Ws = function(i3) {
      return new As.default(i3);
    };
    y3.universal = Ws;
  });
  var ir$1 = T$3((g3) => {
    g3.__esModule = true;
    g3.isNode = it2;
    g3.isPseudoElement = rr2;
    g3.isPseudoClass = ta;
    g3.isContainer = ra;
    g3.isNamespace = ia;
    g3.isUniversal = g3.isTag = g3.isString = g3.isSelector = g3.isRoot = g3.isPseudo = g3.isNesting = g3.isIdentifier = g3.isComment = g3.isCombinator = g3.isClassName = g3.isAttribute = void 0;
    var P3 = D$4(), x3, Vs = (x3 = {}, x3[P3.ATTRIBUTE] = true, x3[P3.CLASS] = true, x3[P3.COMBINATOR] = true, x3[P3.COMMENT] = true, x3[P3.ID] = true, x3[P3.NESTING] = true, x3[P3.PSEUDO] = true, x3[P3.ROOT] = true, x3[P3.SELECTOR] = true, x3[P3.STRING] = true, x3[P3.TAG] = true, x3[P3.UNIVERSAL] = true, x3);
    function it2(e3) {
      return typeof e3 == "object" && Vs[e3.type];
    }
    function F3(e3, i3) {
      return it2(i3) && i3.type === e3;
    }
    var er2 = F3.bind(null, P3.ATTRIBUTE);
    g3.isAttribute = er2;
    var Hs = F3.bind(null, P3.CLASS);
    g3.isClassName = Hs;
    var Ks = F3.bind(null, P3.COMBINATOR);
    g3.isCombinator = Ks;
    var zs = F3.bind(null, P3.COMMENT);
    g3.isComment = zs;
    var $s = F3.bind(null, P3.ID);
    g3.isIdentifier = $s;
    var Js = F3.bind(null, P3.NESTING);
    g3.isNesting = Js;
    var nt2 = F3.bind(null, P3.PSEUDO);
    g3.isPseudo = nt2;
    var Xs = F3.bind(null, P3.ROOT);
    g3.isRoot = Xs;
    var Zs = F3.bind(null, P3.SELECTOR);
    g3.isSelector = Zs;
    var js = F3.bind(null, P3.STRING);
    g3.isString = js;
    var tr2 = F3.bind(null, P3.TAG);
    g3.isTag = tr2;
    var ea = F3.bind(null, P3.UNIVERSAL);
    g3.isUniversal = ea;
    function rr2(e3) {
      return nt2(e3) && e3.value && (e3.value.startsWith("::") || e3.value === ":before" || e3.value === ":after");
    }
    function ta(e3) {
      return nt2(e3) && !rr2(e3);
    }
    function ra(e3) {
      return !!(it2(e3) && e3.walk);
    }
    function ia(e3) {
      return er2(e3) || tr2(e3);
    }
  });
  var ur$2 = T$3((Se2) => {
    Se2.__esModule = true;
    var nr = D$4();
    Object.keys(nr).forEach(function(e3) {
      e3 === "default" || e3 === "__esModule" || (Se2[e3] = nr[e3]);
    });
    var sr2 = jt$2();
    Object.keys(sr2).forEach(function(e3) {
      e3 === "default" || e3 === "__esModule" || (Se2[e3] = sr2[e3]);
    });
    var ar2 = ir$1();
    Object.keys(ar2).forEach(function(e3) {
      e3 === "default" || e3 === "__esModule" || (Se2[e3] = ar2[e3]);
    });
  });
  var cr$2 = T$3((ge2, or2) => {
    ge2.__esModule = true;
    ge2.default = void 0;
    var na = ua(Zt$1()), sa = aa(ur$2());
    function aa(e3) {
      if (e3 && e3.__esModule) return e3;
      var i3 = {};
      if (e3 != null) {
        for (var n3 in e3) if (Object.prototype.hasOwnProperty.call(e3, n3)) {
          var t3 = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(e3, n3) : {};
          t3.get || t3.set ? Object.defineProperty(i3, n3, t3) : i3[n3] = e3[n3];
        }
      }
      return i3.default = e3, i3;
    }
    function ua(e3) {
      return e3 && e3.__esModule ? e3 : {
        default: e3
      };
    }
    var st2 = function(i3) {
      return new na.default(i3);
    };
    Object.assign(st2, sa);
    delete st2.__esModule;
    var oa = st2;
    ge2.default = oa;
    or2.exports = ge2.default;
  });
  var De$2 = wr$2(cr$2()), { TAG: ga, STRING: Ta, SELECTOR: Ea, ROOT: ma, PSEUDO: wa, NESTING: ka, ID: ya, COMMENT: Oa, COMBINATOR: Pa, CLASS: Ia, ATTRIBUTE: qa, UNIVERSAL: La, attribute: Da, className: ba, combinator: Aa, comment: xa, id: Na, nesting: Ma, pseudo: Ra, root: Fa, selector: Ca, string: Ua, tag: Ba, universal: Qa, isNode: Ya, isPseudoElement: Ga, isPseudoClass: Wa, isContainer: Va, isNamespace: Ha, isAttribute: Ka, isClassName: za, isCombinator: $a, isComment: Ja, isIdentifier: Xa, isNesting: Za, isPseudo: ja, isRoot: eu, isSelector: tu, isString: ru, isTag: iu, isUniversal: nu } = De$2, su = De$2.default ?? De$2;
  const __f$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    ATTRIBUTE: qa,
    CLASS: Ia,
    COMBINATOR: Pa,
    COMMENT: Oa,
    ID: ya,
    NESTING: ka,
    PSEUDO: wa,
    ROOT: ma,
    SELECTOR: Ea,
    STRING: Ta,
    TAG: ga,
    UNIVERSAL: La,
    attribute: Da,
    className: ba,
    combinator: Aa,
    comment: xa,
    default: su,
    id: Na,
    isAttribute: Ka,
    isClassName: za,
    isCombinator: $a,
    isComment: Ja,
    isContainer: Va,
    isIdentifier: Xa,
    isNamespace: Ha,
    isNesting: Za,
    isNode: Ya,
    isPseudo: ja,
    isPseudoClass: Wa,
    isPseudoElement: Ga,
    isRoot: eu,
    isSelector: tu,
    isString: ru,
    isTag: iu,
    isUniversal: nu,
    nesting: Ma,
    pseudo: Ra,
    root: Fa,
    selector: Ca,
    string: Ua,
    tag: Ba,
    universal: Qa
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var y$5 = Object.create;
  var A$6 = Object.defineProperty;
  var B$5 = Object.getOwnPropertyDescriptor;
  var V$4 = Object.getOwnPropertyNames;
  var _$6 = Object.getPrototypeOf, k$3 = Object.prototype.hasOwnProperty;
  var a$4 = (t3, e3) => () => (e3 || t3((e3 = {
    exports: {}
  }).exports, e3), e3.exports);
  var q$4 = (t3, e3, E3, n3) => {
    if (e3 && typeof e3 == "object" || typeof e3 == "function") for (let I3 of V$4(e3)) !k$3.call(t3, I3) && I3 !== E3 && A$6(t3, I3, {
      get: () => e3[I3],
      enumerable: !(n3 = B$5(e3, I3)) || n3.enumerable
    });
    return t3;
  };
  var H$2 = (t3, e3, E3) => (E3 = t3 != null ? y$5(_$6(t3)) : {}, q$4(!t3 || !t3.__esModule ? A$6(E3, "default", {
    value: t3,
    enumerable: true
  }) : E3, t3));
  var L$4 = a$4((ae2, T3) => {
    var z3 = typeof xs == "object" && xs.env && xs.env.NODE_DEBUG && /\bsemver\b/i.test(xs.env.NODE_DEBUG) ? (...t3) => console.error("SEMVER", ...t3) : () => {
    };
    T3.exports = z3;
  });
  var l$6 = a$4((Ne2, u3) => {
    var Z3 = "2.0.0", Y3 = Number.MAX_SAFE_INTEGER || 9007199254740991, J3 = 16;
    u3.exports = {
      SEMVER_SPEC_VERSION: Z3,
      MAX_LENGTH: 256,
      MAX_SAFE_INTEGER: Y3,
      MAX_SAFE_COMPONENT_LENGTH: J3
    };
  });
  var S$1 = a$4((N3, m3) => {
    var { MAX_SAFE_COMPONENT_LENGTH: p3 } = l$6(), K3 = L$4();
    N3 = m3.exports = {};
    var Q3 = N3.re = [], s3 = N3.src = [], r3 = N3.t = {}, W3 = 0, i3 = (t3, e3, E3) => {
      let n3 = W3++;
      K3(t3, n3, e3), r3[t3] = n3, s3[n3] = e3, Q3[n3] = new RegExp(e3, E3 ? "g" : void 0);
    };
    i3("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    i3("NUMERICIDENTIFIERLOOSE", "[0-9]+");
    i3("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
    i3("MAINVERSION", `(${s3[r3.NUMERICIDENTIFIER]})\\.(${s3[r3.NUMERICIDENTIFIER]})\\.(${s3[r3.NUMERICIDENTIFIER]})`);
    i3("MAINVERSIONLOOSE", `(${s3[r3.NUMERICIDENTIFIERLOOSE]})\\.(${s3[r3.NUMERICIDENTIFIERLOOSE]})\\.(${s3[r3.NUMERICIDENTIFIERLOOSE]})`);
    i3("PRERELEASEIDENTIFIER", `(?:${s3[r3.NUMERICIDENTIFIER]}|${s3[r3.NONNUMERICIDENTIFIER]})`);
    i3("PRERELEASEIDENTIFIERLOOSE", `(?:${s3[r3.NUMERICIDENTIFIERLOOSE]}|${s3[r3.NONNUMERICIDENTIFIER]})`);
    i3("PRERELEASE", `(?:-(${s3[r3.PRERELEASEIDENTIFIER]}(?:\\.${s3[r3.PRERELEASEIDENTIFIER]})*))`);
    i3("PRERELEASELOOSE", `(?:-?(${s3[r3.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${s3[r3.PRERELEASEIDENTIFIERLOOSE]})*))`);
    i3("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
    i3("BUILD", `(?:\\+(${s3[r3.BUILDIDENTIFIER]}(?:\\.${s3[r3.BUILDIDENTIFIER]})*))`);
    i3("FULLPLAIN", `v?${s3[r3.MAINVERSION]}${s3[r3.PRERELEASE]}?${s3[r3.BUILD]}?`);
    i3("FULL", `^${s3[r3.FULLPLAIN]}$`);
    i3("LOOSEPLAIN", `[v=\\s]*${s3[r3.MAINVERSIONLOOSE]}${s3[r3.PRERELEASELOOSE]}?${s3[r3.BUILD]}?`);
    i3("LOOSE", `^${s3[r3.LOOSEPLAIN]}$`);
    i3("GTLT", "((?:<|>)?=?)");
    i3("XRANGEIDENTIFIERLOOSE", `${s3[r3.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    i3("XRANGEIDENTIFIER", `${s3[r3.NUMERICIDENTIFIER]}|x|X|\\*`);
    i3("XRANGEPLAIN", `[v=\\s]*(${s3[r3.XRANGEIDENTIFIER]})(?:\\.(${s3[r3.XRANGEIDENTIFIER]})(?:\\.(${s3[r3.XRANGEIDENTIFIER]})(?:${s3[r3.PRERELEASE]})?${s3[r3.BUILD]}?)?)?`);
    i3("XRANGEPLAINLOOSE", `[v=\\s]*(${s3[r3.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s3[r3.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s3[r3.XRANGEIDENTIFIERLOOSE]})(?:${s3[r3.PRERELEASELOOSE]})?${s3[r3.BUILD]}?)?)?`);
    i3("XRANGE", `^${s3[r3.GTLT]}\\s*${s3[r3.XRANGEPLAIN]}$`);
    i3("XRANGELOOSE", `^${s3[r3.GTLT]}\\s*${s3[r3.XRANGEPLAINLOOSE]}$`);
    i3("COERCE", `(^|[^\\d])(\\d{1,${p3}})(?:\\.(\\d{1,${p3}}))?(?:\\.(\\d{1,${p3}}))?(?:$|[^\\d])`);
    i3("COERCERTL", s3[r3.COERCE], true);
    i3("LONETILDE", "(?:~>?)");
    i3("TILDETRIM", `(\\s*)${s3[r3.LONETILDE]}\\s+`, true);
    N3.tildeTrimReplace = "$1~";
    i3("TILDE", `^${s3[r3.LONETILDE]}${s3[r3.XRANGEPLAIN]}$`);
    i3("TILDELOOSE", `^${s3[r3.LONETILDE]}${s3[r3.XRANGEPLAINLOOSE]}$`);
    i3("LONECARET", "(?:\\^)");
    i3("CARETTRIM", `(\\s*)${s3[r3.LONECARET]}\\s+`, true);
    N3.caretTrimReplace = "$1^";
    i3("CARET", `^${s3[r3.LONECARET]}${s3[r3.XRANGEPLAIN]}$`);
    i3("CARETLOOSE", `^${s3[r3.LONECARET]}${s3[r3.XRANGEPLAINLOOSE]}$`);
    i3("COMPARATORLOOSE", `^${s3[r3.GTLT]}\\s*(${s3[r3.LOOSEPLAIN]})$|^$`);
    i3("COMPARATOR", `^${s3[r3.GTLT]}\\s*(${s3[r3.FULLPLAIN]})$|^$`);
    i3("COMPARATORTRIM", `(\\s*)${s3[r3.GTLT]}\\s*(${s3[r3.LOOSEPLAIN]}|${s3[r3.XRANGEPLAIN]})`, true);
    N3.comparatorTrimReplace = "$1$2$3";
    i3("HYPHENRANGE", `^\\s*(${s3[r3.XRANGEPLAIN]})\\s+-\\s+(${s3[r3.XRANGEPLAIN]})\\s*$`);
    i3("HYPHENRANGELOOSE", `^\\s*(${s3[r3.XRANGEPLAINLOOSE]})\\s+-\\s+(${s3[r3.XRANGEPLAINLOOSE]})\\s*$`);
    i3("STAR", "(<|>)?=?\\s*\\*");
    i3("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    i3("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  });
  var D$3 = a$4((Re2, f3) => {
    var ee2 = [
      "includePrerelease",
      "loose",
      "rtl"
    ], se2 = (t3) => t3 ? typeof t3 != "object" ? {
      loose: true
    } : ee2.filter((e3) => t3[e3]).reduce((e3, E3) => (e3[E3] = true, e3), {}) : {};
    f3.exports = se2;
  });
  var F$4 = a$4((ce2, G3) => {
    var P3 = /^[0-9]+$/, d3 = (t3, e3) => {
      let E3 = P3.test(t3), n3 = P3.test(e3);
      return E3 && n3 && (t3 = +t3, e3 = +e3), t3 === e3 ? 0 : E3 && !n3 ? -1 : n3 && !E3 ? 1 : t3 < e3 ? -1 : 1;
    }, re2 = (t3, e3) => d3(e3, t3);
    G3.exports = {
      compareIdentifiers: d3,
      rcompareIdentifiers: re2
    };
  });
  var g$5 = a$4((oe2, U3) => {
    var c3 = L$4(), { MAX_LENGTH: M3, MAX_SAFE_INTEGER: o3 } = l$6(), { re: C3, t: X3 } = S$1(), Ee2 = D$3(), { compareIdentifiers: R3 } = F$4(), O3 = class t3 {
      constructor(e3, E3) {
        if (E3 = Ee2(E3), e3 instanceof t3) {
          if (e3.loose === !!E3.loose && e3.includePrerelease === !!E3.includePrerelease) return e3;
          e3 = e3.version;
        } else if (typeof e3 != "string") throw new TypeError(`Invalid Version: ${e3}`);
        if (e3.length > M3) throw new TypeError(`version is longer than ${M3} characters`);
        c3("SemVer", e3, E3), this.options = E3, this.loose = !!E3.loose, this.includePrerelease = !!E3.includePrerelease;
        let n3 = e3.trim().match(E3.loose ? C3[X3.LOOSE] : C3[X3.FULL]);
        if (!n3) throw new TypeError(`Invalid Version: ${e3}`);
        if (this.raw = e3, this.major = +n3[1], this.minor = +n3[2], this.patch = +n3[3], this.major > o3 || this.major < 0) throw new TypeError("Invalid major version");
        if (this.minor > o3 || this.minor < 0) throw new TypeError("Invalid minor version");
        if (this.patch > o3 || this.patch < 0) throw new TypeError("Invalid patch version");
        n3[4] ? this.prerelease = n3[4].split(".").map((I3) => {
          if (/^[0-9]+$/.test(I3)) {
            let h3 = +I3;
            if (h3 >= 0 && h3 < o3) return h3;
          }
          return I3;
        }) : this.prerelease = [], this.build = n3[5] ? n3[5].split(".") : [], this.format();
      }
      format() {
        return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
      }
      toString() {
        return this.version;
      }
      compare(e3) {
        if (c3("SemVer.compare", this.version, this.options, e3), !(e3 instanceof t3)) {
          if (typeof e3 == "string" && e3 === this.version) return 0;
          e3 = new t3(e3, this.options);
        }
        return e3.version === this.version ? 0 : this.compareMain(e3) || this.comparePre(e3);
      }
      compareMain(e3) {
        return e3 instanceof t3 || (e3 = new t3(e3, this.options)), R3(this.major, e3.major) || R3(this.minor, e3.minor) || R3(this.patch, e3.patch);
      }
      comparePre(e3) {
        if (e3 instanceof t3 || (e3 = new t3(e3, this.options)), this.prerelease.length && !e3.prerelease.length) return -1;
        if (!this.prerelease.length && e3.prerelease.length) return 1;
        if (!this.prerelease.length && !e3.prerelease.length) return 0;
        let E3 = 0;
        do {
          let n3 = this.prerelease[E3], I3 = e3.prerelease[E3];
          if (c3("prerelease compare", E3, n3, I3), n3 === void 0 && I3 === void 0) return 0;
          if (I3 === void 0) return 1;
          if (n3 === void 0) return -1;
          if (n3 === I3) continue;
          return R3(n3, I3);
        } while (++E3);
      }
      compareBuild(e3) {
        e3 instanceof t3 || (e3 = new t3(e3, this.options));
        let E3 = 0;
        do {
          let n3 = this.build[E3], I3 = e3.build[E3];
          if (c3("prerelease compare", E3, n3, I3), n3 === void 0 && I3 === void 0) return 0;
          if (I3 === void 0) return 1;
          if (n3 === void 0) return -1;
          if (n3 === I3) continue;
          return R3(n3, I3);
        } while (++E3);
      }
      inc(e3, E3) {
        switch (e3) {
          case "premajor":
            this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", E3);
            break;
          case "preminor":
            this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", E3);
            break;
          case "prepatch":
            this.prerelease.length = 0, this.inc("patch", E3), this.inc("pre", E3);
            break;
          case "prerelease":
            this.prerelease.length === 0 && this.inc("patch", E3), this.inc("pre", E3);
            break;
          case "major":
            (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) && this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
            break;
          case "minor":
            (this.patch !== 0 || this.prerelease.length === 0) && this.minor++, this.patch = 0, this.prerelease = [];
            break;
          case "patch":
            this.prerelease.length === 0 && this.patch++, this.prerelease = [];
            break;
          case "pre":
            if (this.prerelease.length === 0) this.prerelease = [
              0
            ];
            else {
              let n3 = this.prerelease.length;
              for (; --n3 >= 0; ) typeof this.prerelease[n3] == "number" && (this.prerelease[n3]++, n3 = -2);
              n3 === -1 && this.prerelease.push(0);
            }
            E3 && (R3(this.prerelease[0], E3) === 0 ? isNaN(this.prerelease[1]) && (this.prerelease = [
              E3,
              0
            ]) : this.prerelease = [
              E3,
              0
            ]);
            break;
          default:
            throw new Error(`invalid increment argument: ${e3}`);
        }
        return this.format(), this.raw = this.version, this;
      }
    };
    U3.exports = O3;
  });
  var j$8 = a$4((he2, b3) => {
    var w3 = g$5(), te2 = (t3, e3, E3) => new w3(t3, E3).compare(new w3(e3, E3));
    b3.exports = te2;
  });
  var x$8 = a$4((Le2, v3) => {
    var ie2 = j$8(), ne2 = (t3, e3, E3) => ie2(t3, e3, E3) >= 0;
    v3.exports = ne2;
  });
  var $$3 = H$2(x$8()), le$2 = $$3.default ?? $$3;
  const __a$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: le$2
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var y$4 = Object.create;
  var A$5 = Object.defineProperty;
  var B$4 = Object.getOwnPropertyDescriptor;
  var V$3 = Object.getOwnPropertyNames;
  var _$5 = Object.getPrototypeOf, k$2 = Object.prototype.hasOwnProperty;
  var a$3 = (t3, e3) => () => (e3 || t3((e3 = {
    exports: {}
  }).exports, e3), e3.exports);
  var q$3 = (t3, e3, E3, n3) => {
    if (e3 && typeof e3 == "object" || typeof e3 == "function") for (let I3 of V$3(e3)) !k$2.call(t3, I3) && I3 !== E3 && A$5(t3, I3, {
      get: () => e3[I3],
      enumerable: !(n3 = B$4(e3, I3)) || n3.enumerable
    });
    return t3;
  };
  var H$1 = (t3, e3, E3) => (E3 = t3 != null ? y$4(_$5(t3)) : {}, q$3(!t3 || !t3.__esModule ? A$5(E3, "default", {
    value: t3,
    enumerable: true
  }) : E3, t3));
  var l$5 = a$3((ae2, T3) => {
    var z3 = typeof xs == "object" && xs.env && xs.env.NODE_DEBUG && /\bsemver\b/i.test(xs.env.NODE_DEBUG) ? (...t3) => console.error("SEMVER", ...t3) : () => {
    };
    T3.exports = z3;
  });
  var L$3 = a$3((Ne2, u3) => {
    var Z3 = "2.0.0", Y3 = Number.MAX_SAFE_INTEGER || 9007199254740991, J3 = 16;
    u3.exports = {
      SEMVER_SPEC_VERSION: Z3,
      MAX_LENGTH: 256,
      MAX_SAFE_INTEGER: Y3,
      MAX_SAFE_COMPONENT_LENGTH: J3
    };
  });
  var S = a$3((N3, m3) => {
    var { MAX_SAFE_COMPONENT_LENGTH: p3 } = L$3(), K3 = l$5();
    N3 = m3.exports = {};
    var Q3 = N3.re = [], s3 = N3.src = [], r3 = N3.t = {}, W3 = 0, i3 = (t3, e3, E3) => {
      let n3 = W3++;
      K3(t3, n3, e3), r3[t3] = n3, s3[n3] = e3, Q3[n3] = new RegExp(e3, E3 ? "g" : void 0);
    };
    i3("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    i3("NUMERICIDENTIFIERLOOSE", "[0-9]+");
    i3("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
    i3("MAINVERSION", `(${s3[r3.NUMERICIDENTIFIER]})\\.(${s3[r3.NUMERICIDENTIFIER]})\\.(${s3[r3.NUMERICIDENTIFIER]})`);
    i3("MAINVERSIONLOOSE", `(${s3[r3.NUMERICIDENTIFIERLOOSE]})\\.(${s3[r3.NUMERICIDENTIFIERLOOSE]})\\.(${s3[r3.NUMERICIDENTIFIERLOOSE]})`);
    i3("PRERELEASEIDENTIFIER", `(?:${s3[r3.NUMERICIDENTIFIER]}|${s3[r3.NONNUMERICIDENTIFIER]})`);
    i3("PRERELEASEIDENTIFIERLOOSE", `(?:${s3[r3.NUMERICIDENTIFIERLOOSE]}|${s3[r3.NONNUMERICIDENTIFIER]})`);
    i3("PRERELEASE", `(?:-(${s3[r3.PRERELEASEIDENTIFIER]}(?:\\.${s3[r3.PRERELEASEIDENTIFIER]})*))`);
    i3("PRERELEASELOOSE", `(?:-?(${s3[r3.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${s3[r3.PRERELEASEIDENTIFIERLOOSE]})*))`);
    i3("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
    i3("BUILD", `(?:\\+(${s3[r3.BUILDIDENTIFIER]}(?:\\.${s3[r3.BUILDIDENTIFIER]})*))`);
    i3("FULLPLAIN", `v?${s3[r3.MAINVERSION]}${s3[r3.PRERELEASE]}?${s3[r3.BUILD]}?`);
    i3("FULL", `^${s3[r3.FULLPLAIN]}$`);
    i3("LOOSEPLAIN", `[v=\\s]*${s3[r3.MAINVERSIONLOOSE]}${s3[r3.PRERELEASELOOSE]}?${s3[r3.BUILD]}?`);
    i3("LOOSE", `^${s3[r3.LOOSEPLAIN]}$`);
    i3("GTLT", "((?:<|>)?=?)");
    i3("XRANGEIDENTIFIERLOOSE", `${s3[r3.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    i3("XRANGEIDENTIFIER", `${s3[r3.NUMERICIDENTIFIER]}|x|X|\\*`);
    i3("XRANGEPLAIN", `[v=\\s]*(${s3[r3.XRANGEIDENTIFIER]})(?:\\.(${s3[r3.XRANGEIDENTIFIER]})(?:\\.(${s3[r3.XRANGEIDENTIFIER]})(?:${s3[r3.PRERELEASE]})?${s3[r3.BUILD]}?)?)?`);
    i3("XRANGEPLAINLOOSE", `[v=\\s]*(${s3[r3.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s3[r3.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s3[r3.XRANGEIDENTIFIERLOOSE]})(?:${s3[r3.PRERELEASELOOSE]})?${s3[r3.BUILD]}?)?)?`);
    i3("XRANGE", `^${s3[r3.GTLT]}\\s*${s3[r3.XRANGEPLAIN]}$`);
    i3("XRANGELOOSE", `^${s3[r3.GTLT]}\\s*${s3[r3.XRANGEPLAINLOOSE]}$`);
    i3("COERCE", `(^|[^\\d])(\\d{1,${p3}})(?:\\.(\\d{1,${p3}}))?(?:\\.(\\d{1,${p3}}))?(?:$|[^\\d])`);
    i3("COERCERTL", s3[r3.COERCE], true);
    i3("LONETILDE", "(?:~>?)");
    i3("TILDETRIM", `(\\s*)${s3[r3.LONETILDE]}\\s+`, true);
    N3.tildeTrimReplace = "$1~";
    i3("TILDE", `^${s3[r3.LONETILDE]}${s3[r3.XRANGEPLAIN]}$`);
    i3("TILDELOOSE", `^${s3[r3.LONETILDE]}${s3[r3.XRANGEPLAINLOOSE]}$`);
    i3("LONECARET", "(?:\\^)");
    i3("CARETTRIM", `(\\s*)${s3[r3.LONECARET]}\\s+`, true);
    N3.caretTrimReplace = "$1^";
    i3("CARET", `^${s3[r3.LONECARET]}${s3[r3.XRANGEPLAIN]}$`);
    i3("CARETLOOSE", `^${s3[r3.LONECARET]}${s3[r3.XRANGEPLAINLOOSE]}$`);
    i3("COMPARATORLOOSE", `^${s3[r3.GTLT]}\\s*(${s3[r3.LOOSEPLAIN]})$|^$`);
    i3("COMPARATOR", `^${s3[r3.GTLT]}\\s*(${s3[r3.FULLPLAIN]})$|^$`);
    i3("COMPARATORTRIM", `(\\s*)${s3[r3.GTLT]}\\s*(${s3[r3.LOOSEPLAIN]}|${s3[r3.XRANGEPLAIN]})`, true);
    N3.comparatorTrimReplace = "$1$2$3";
    i3("HYPHENRANGE", `^\\s*(${s3[r3.XRANGEPLAIN]})\\s+-\\s+(${s3[r3.XRANGEPLAIN]})\\s*$`);
    i3("HYPHENRANGELOOSE", `^\\s*(${s3[r3.XRANGEPLAINLOOSE]})\\s+-\\s+(${s3[r3.XRANGEPLAINLOOSE]})\\s*$`);
    i3("STAR", "(<|>)?=?\\s*\\*");
    i3("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    i3("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  });
  var D$2 = a$3((Re2, f3) => {
    var ee2 = [
      "includePrerelease",
      "loose",
      "rtl"
    ], se2 = (t3) => t3 ? typeof t3 != "object" ? {
      loose: true
    } : ee2.filter((e3) => t3[e3]).reduce((e3, E3) => (e3[E3] = true, e3), {}) : {};
    f3.exports = se2;
  });
  var F$3 = a$3((ce2, G3) => {
    var P3 = /^[0-9]+$/, d3 = (t3, e3) => {
      let E3 = P3.test(t3), n3 = P3.test(e3);
      return E3 && n3 && (t3 = +t3, e3 = +e3), t3 === e3 ? 0 : E3 && !n3 ? -1 : n3 && !E3 ? 1 : t3 < e3 ? -1 : 1;
    }, re2 = (t3, e3) => d3(e3, t3);
    G3.exports = {
      compareIdentifiers: d3,
      rcompareIdentifiers: re2
    };
  });
  var g$4 = a$3((oe2, U3) => {
    var c3 = l$5(), { MAX_LENGTH: M3, MAX_SAFE_INTEGER: o3 } = L$3(), { re: C3, t: X3 } = S(), Ee2 = D$2(), { compareIdentifiers: R3 } = F$3(), O3 = class t3 {
      constructor(e3, E3) {
        if (E3 = Ee2(E3), e3 instanceof t3) {
          if (e3.loose === !!E3.loose && e3.includePrerelease === !!E3.includePrerelease) return e3;
          e3 = e3.version;
        } else if (typeof e3 != "string") throw new TypeError(`Invalid Version: ${e3}`);
        if (e3.length > M3) throw new TypeError(`version is longer than ${M3} characters`);
        c3("SemVer", e3, E3), this.options = E3, this.loose = !!E3.loose, this.includePrerelease = !!E3.includePrerelease;
        let n3 = e3.trim().match(E3.loose ? C3[X3.LOOSE] : C3[X3.FULL]);
        if (!n3) throw new TypeError(`Invalid Version: ${e3}`);
        if (this.raw = e3, this.major = +n3[1], this.minor = +n3[2], this.patch = +n3[3], this.major > o3 || this.major < 0) throw new TypeError("Invalid major version");
        if (this.minor > o3 || this.minor < 0) throw new TypeError("Invalid minor version");
        if (this.patch > o3 || this.patch < 0) throw new TypeError("Invalid patch version");
        n3[4] ? this.prerelease = n3[4].split(".").map((I3) => {
          if (/^[0-9]+$/.test(I3)) {
            let h3 = +I3;
            if (h3 >= 0 && h3 < o3) return h3;
          }
          return I3;
        }) : this.prerelease = [], this.build = n3[5] ? n3[5].split(".") : [], this.format();
      }
      format() {
        return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
      }
      toString() {
        return this.version;
      }
      compare(e3) {
        if (c3("SemVer.compare", this.version, this.options, e3), !(e3 instanceof t3)) {
          if (typeof e3 == "string" && e3 === this.version) return 0;
          e3 = new t3(e3, this.options);
        }
        return e3.version === this.version ? 0 : this.compareMain(e3) || this.comparePre(e3);
      }
      compareMain(e3) {
        return e3 instanceof t3 || (e3 = new t3(e3, this.options)), R3(this.major, e3.major) || R3(this.minor, e3.minor) || R3(this.patch, e3.patch);
      }
      comparePre(e3) {
        if (e3 instanceof t3 || (e3 = new t3(e3, this.options)), this.prerelease.length && !e3.prerelease.length) return -1;
        if (!this.prerelease.length && e3.prerelease.length) return 1;
        if (!this.prerelease.length && !e3.prerelease.length) return 0;
        let E3 = 0;
        do {
          let n3 = this.prerelease[E3], I3 = e3.prerelease[E3];
          if (c3("prerelease compare", E3, n3, I3), n3 === void 0 && I3 === void 0) return 0;
          if (I3 === void 0) return 1;
          if (n3 === void 0) return -1;
          if (n3 === I3) continue;
          return R3(n3, I3);
        } while (++E3);
      }
      compareBuild(e3) {
        e3 instanceof t3 || (e3 = new t3(e3, this.options));
        let E3 = 0;
        do {
          let n3 = this.build[E3], I3 = e3.build[E3];
          if (c3("prerelease compare", E3, n3, I3), n3 === void 0 && I3 === void 0) return 0;
          if (I3 === void 0) return 1;
          if (n3 === void 0) return -1;
          if (n3 === I3) continue;
          return R3(n3, I3);
        } while (++E3);
      }
      inc(e3, E3) {
        switch (e3) {
          case "premajor":
            this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", E3);
            break;
          case "preminor":
            this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", E3);
            break;
          case "prepatch":
            this.prerelease.length = 0, this.inc("patch", E3), this.inc("pre", E3);
            break;
          case "prerelease":
            this.prerelease.length === 0 && this.inc("patch", E3), this.inc("pre", E3);
            break;
          case "major":
            (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) && this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
            break;
          case "minor":
            (this.patch !== 0 || this.prerelease.length === 0) && this.minor++, this.patch = 0, this.prerelease = [];
            break;
          case "patch":
            this.prerelease.length === 0 && this.patch++, this.prerelease = [];
            break;
          case "pre":
            if (this.prerelease.length === 0) this.prerelease = [
              0
            ];
            else {
              let n3 = this.prerelease.length;
              for (; --n3 >= 0; ) typeof this.prerelease[n3] == "number" && (this.prerelease[n3]++, n3 = -2);
              n3 === -1 && this.prerelease.push(0);
            }
            E3 && (R3(this.prerelease[0], E3) === 0 ? isNaN(this.prerelease[1]) && (this.prerelease = [
              E3,
              0
            ]) : this.prerelease = [
              E3,
              0
            ]);
            break;
          default:
            throw new Error(`invalid increment argument: ${e3}`);
        }
        return this.format(), this.raw = this.version, this;
      }
    };
    U3.exports = O3;
  });
  var j$7 = a$3((he2, b3) => {
    var w3 = g$4(), te2 = (t3, e3, E3) => new w3(t3, E3).compare(new w3(e3, E3));
    b3.exports = te2;
  });
  var x$7 = a$3((le2, v3) => {
    var ie2 = j$7(), ne2 = (t3, e3, E3) => ie2(t3, e3, E3) <= 0;
    v3.exports = ne2;
  });
  var $$2 = H$1(x$7()), Le$3 = $$2.default ?? $$2;
  const __b$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: Le$3
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var A$4 = Object.create;
  var g$3 = Object.defineProperty;
  var m$6 = Object.getOwnPropertyDescriptor;
  var i$3 = Object.getOwnPropertyNames;
  var p$5 = Object.getPrototypeOf, x$6 = Object.prototype.hasOwnProperty;
  var b$6 = (l3, t3) => () => (t3 || l3((t3 = {
    exports: {}
  }).exports, t3), t3.exports);
  var d$5 = (l3, t3, e3, r3) => {
    if (t3 && typeof t3 == "object" || typeof t3 == "function") for (let n3 of i$3(t3)) !x$6.call(l3, n3) && n3 !== e3 && g$3(l3, n3, {
      get: () => t3[n3],
      enumerable: !(r3 = m$6(t3, n3)) || r3.enumerable
    });
    return l3;
  };
  var j$6 = (l3, t3, e3) => (e3 = l3 != null ? A$4(p$5(l3)) : {}, d$5(!l3 || !l3.__esModule ? g$3(e3, "default", {
    value: l3,
    enumerable: true
  }) : e3, l3));
  var o$3 = b$6((w3, u3) => {
    u3.exports = function(t3, e3) {
      if (t3 == null || t3.length === 0) return e3 == null || e3.length === 0 ? 0 : e3.length;
      if (e3 == null || e3.length === 0) return t3.length;
      for (var r3 = 0, n3 = 0, f3 = 0, c3 = 0, v3 = 5; r3 + n3 < t3.length && r3 + f3 < e3.length; ) {
        if (t3.charAt(r3 + n3) == e3.charAt(r3 + f3)) c3++;
        else {
          n3 = 0, f3 = 0;
          for (var a3 = 0; a3 < v3; a3++) {
            if (r3 + a3 < t3.length && t3.charAt(r3 + a3) == e3.charAt(r3)) {
              n3 = a3;
              break;
            }
            if (r3 + a3 < e3.length && t3.charAt(r3) == e3.charAt(r3 + a3)) {
              f3 = a3;
              break;
            }
          }
        }
        r3++;
      }
      return (t3.length + e3.length) / 2 - c3;
    };
  });
  var h$4 = j$6(o$3()), O$6 = h$4.default ?? h$4;
  const __c$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: O$6
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var p$4 = Object.create;
  var f$4 = Object.defineProperty;
  var a$2 = Object.getOwnPropertyDescriptor;
  var i$2 = Object.getOwnPropertyNames;
  var l$4 = Object.getPrototypeOf, m$5 = Object.prototype.hasOwnProperty;
  var j$5 = (e3, t3) => () => (t3 || e3((t3 = {
    exports: {}
  }).exports, t3), t3.exports);
  var d$4 = (e3, t3, o3, c3) => {
    if (t3 && typeof t3 == "object" || typeof t3 == "function") for (let r3 of i$2(t3)) !m$5.call(e3, r3) && r3 !== o3 && f$4(e3, r3, {
      get: () => t3[r3],
      enumerable: !(c3 = a$2(t3, r3)) || c3.enumerable
    });
    return e3;
  };
  var y$3 = (e3, t3, o3) => (o3 = e3 != null ? p$4(l$4(e3)) : {}, d$4(!e3 || !e3.__esModule ? f$4(o3, "default", {
    value: e3,
    enumerable: true
  }) : o3, e3));
  var s$2 = j$5((v3, n3) => {
    n3.exports = function(e3) {
      var t3 = typeof e3;
      return e3 !== null && (t3 === "object" || t3 === "function");
    };
  });
  var u$3 = y$3(s$2()), x$5 = u$3.default ?? u$3;
  const __1$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: x$5
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var c$3 = Object.create;
  var u$2 = Object.defineProperty;
  var d$3 = Object.getOwnPropertyDescriptor;
  var f$3 = Object.getOwnPropertyNames;
  var m$4 = Object.getPrototypeOf, y$2 = Object.prototype.hasOwnProperty;
  var b$5 = (e3, t3) => () => (t3 || e3((t3 = {
    exports: {}
  }).exports, t3), t3.exports);
  var i$1 = (e3, t3, r3, p3) => {
    if (t3 && typeof t3 == "object" || typeof t3 == "function") for (let o3 of f$3(t3)) !y$2.call(e3, o3) && o3 !== r3 && u$2(e3, o3, {
      get: () => t3[o3],
      enumerable: !(p3 = d$3(t3, o3)) || p3.enumerable
    });
    return e3;
  };
  var j$4 = (e3, t3, r3) => (r3 = e3 != null ? c$3(m$4(e3)) : {}, i$1(!e3 || !e3.__esModule ? u$2(r3, "default", {
    value: e3,
    enumerable: true
  }) : r3, e3));
  var a$1 = b$5((s3) => {
    Object.defineProperty(s3, "__esModule", {
      value: true
    });
    s3.default = (e3) => Object.getOwnPropertySymbols(e3).filter((t3) => Object.prototype.propertyIsEnumerable.call(e3, t3));
  });
  var l$3 = j$4(a$1()), { __esModule: _$4 } = l$3, x$4 = l$3.default ?? l$3;
  const __2$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    __esModule: _$4,
    default: x$4
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var __0$$1 = /* @__PURE__ */ (() => {
    var t3 = (e3) => e3 instanceof RegExp;
    return {
      default: t3
    };
  })();
  var require$2 = (n3) => {
    const e3 = (m3) => typeof m3.default < "u" ? m3.default : m3, c3 = (m3) => Object.assign({
      __esModule: true
    }, m3);
    switch (n3) {
      case "npm:is-regexp":
        return e3(__0$$1);
      case "is-obj":
        return e3(__1$);
      case "get-own-enumerable-property-symbols":
        return c3(__2$);
      default:
        console.error('module "' + n3 + '" not found');
        return null;
    }
  };
  var h$3 = Object.create;
  var O$5 = Object.defineProperty;
  var x$3 = Object.getOwnPropertyDescriptor;
  var C$3 = Object.getOwnPropertyNames;
  var N$4 = Object.getPrototypeOf, b$4 = Object.prototype.hasOwnProperty;
  var m$3 = ((i3) => typeof require$2 < "u" ? require$2 : typeof Proxy < "u" ? new Proxy(i3, {
    get: (t3, u3) => (typeof require$2 < "u" ? require$2 : t3)[u3]
  }) : i3)(function(i3) {
    if (typeof require$2 < "u") return require$2.apply(this, arguments);
    throw Error('Dynamic require of "' + i3 + '" is not supported');
  });
  var T$2 = (i3, t3) => () => (t3 || i3((t3 = {
    exports: {}
  }).exports, t3), t3.exports);
  var j$3 = (i3, t3, u3, o3) => {
    if (t3 && typeof t3 == "object" || typeof t3 == "function") for (let _3 of C$3(t3)) !b$4.call(i3, _3) && _3 !== u3 && O$5(i3, _3, {
      get: () => t3[_3],
      enumerable: !(o3 = x$3(t3, _3)) || o3.enumerable
    });
    return i3;
  };
  var l$2 = (i3, t3, u3) => (u3 = i3 != null ? h$3(N$4(i3)) : {}, j$3(!i3 || !i3.__esModule ? O$5(u3, "default", {
    value: i3,
    enumerable: true
  }) : u3, i3));
  var a = T$2((F3, y3) => {
    var $3 = m$3("npm:is-regexp"), A3 = m$3("is-obj"), B3 = m$3("get-own-enumerable-property-symbols").default;
    y3.exports = (i3, t3, u3) => {
      let o3 = [];
      return function _3(e3, n3, g3) {
        n3 = n3 || {}, n3.indent = n3.indent || "	", g3 = g3 || "";
        let r3;
        n3.inlineCharacterLimit === void 0 ? r3 = {
          newLine: `
`,
          newLineOrSpace: `
`,
          pad: g3,
          indent: g3 + n3.indent
        } : r3 = {
          newLine: "@@__STRINGIFY_OBJECT_NEW_LINE__@@",
          newLineOrSpace: "@@__STRINGIFY_OBJECT_NEW_LINE_OR_SPACE__@@",
          pad: "@@__STRINGIFY_OBJECT_PAD__@@",
          indent: "@@__STRINGIFY_OBJECT_INDENT__@@"
        };
        let S3 = (c3) => {
          if (n3.inlineCharacterLimit === void 0) return c3;
          let s3 = c3.replace(new RegExp(r3.newLine, "g"), "").replace(new RegExp(r3.newLineOrSpace, "g"), " ").replace(new RegExp(r3.pad + "|" + r3.indent, "g"), "");
          return s3.length <= n3.inlineCharacterLimit ? s3 : c3.replace(new RegExp(r3.newLine + "|" + r3.newLineOrSpace, "g"), `
`).replace(new RegExp(r3.pad, "g"), g3).replace(new RegExp(r3.indent, "g"), g3 + n3.indent);
        };
        if (o3.indexOf(e3) !== -1) return '"[Circular]"';
        if (e3 == null || typeof e3 == "number" || typeof e3 == "boolean" || typeof e3 == "function" || typeof e3 == "symbol" || $3(e3)) return String(e3);
        if (e3 instanceof Date) return `new Date('${e3.toISOString()}')`;
        if (Array.isArray(e3)) {
          if (e3.length === 0) return "[]";
          o3.push(e3);
          let c3 = "[" + r3.newLine + e3.map((s3, f3) => {
            let w3 = e3.length - 1 === f3 ? r3.newLine : "," + r3.newLineOrSpace, d3 = _3(s3, n3, g3 + n3.indent);
            return n3.transform && (d3 = n3.transform(e3, f3, d3)), r3.indent + d3 + w3;
          }).join("") + r3.pad + "]";
          return o3.pop(), S3(c3);
        }
        if (A3(e3)) {
          let c3 = Object.keys(e3).concat(B3(e3));
          if (n3.filter && (c3 = c3.filter((f3) => n3.filter(e3, f3))), c3.length === 0) return "{}";
          o3.push(e3);
          let s3 = "{" + r3.newLine + c3.map((f3, w3) => {
            let d3 = c3.length - 1 === w3 ? r3.newLine : "," + r3.newLineOrSpace, E3 = typeof f3 == "symbol", I3 = !E3 && /^[a-z$_][a-z$_0-9]*$/i.test(f3), R3 = E3 || I3 ? f3 : _3(f3, n3), L3 = _3(e3[f3], n3, g3 + n3.indent);
            return n3.transform && (L3 = n3.transform(e3, f3, L3)), r3.indent + String(R3) + ": " + L3 + d3;
          }).join("") + r3.pad + "}";
          return o3.pop(), S3(s3);
        }
        return e3 = String(e3).replace(/[\r\n]/g, (c3) => c3 === `
` ? "\\n" : "\\r"), n3.singleQuotes === false ? (e3 = e3.replace(/"/g, '\\"'), `"${e3}"`) : (e3 = e3.replace(/\\?'/g, "\\'"), `'${e3}'`);
      }(i3, t3, u3);
    };
  });
  var p$3 = l$2(a()), G$3 = p$3.default ?? p$3;
  const __8$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: G$3
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var f$2 = Object.create;
  var h$2 = Object.defineProperty;
  var m$2 = Object.getOwnPropertyDescriptor;
  var d$2 = Object.getOwnPropertyNames;
  var o$2 = Object.getPrototypeOf, p$2 = Object.prototype.hasOwnProperty;
  var c$2 = (t3, e3) => () => (e3 || t3((e3 = {
    exports: {}
  }).exports, e3), e3.exports);
  var g$2 = (t3, e3, s3, i3) => {
    if (e3 && typeof e3 == "object" || typeof e3 == "function") for (let r3 of d$2(e3)) !p$2.call(t3, r3) && r3 !== s3 && h$2(t3, r3, {
      get: () => e3[r3],
      enumerable: !(i3 = m$2(e3, r3)) || i3.enumerable
    });
    return t3;
  };
  var v$3 = (t3, e3, s3) => (s3 = t3 != null ? f$2(o$2(t3)) : {}, g$2(!t3 || !t3.__esModule ? h$2(s3, "default", {
    value: t3,
    enumerable: true
  }) : s3, t3));
  var x$2 = c$2((w3, u3) => {
    var l3 = class extends Map {
      constructor(e3 = {}) {
        super(), typeof e3 == "number" && (e3 = {
          max: e3
        });
        let { max: s3, maxAge: i3 } = e3;
        this.max = s3 > 0 && s3 || 1 / 0, this.maxAge = i3 !== void 0 ? i3 : -1, this.stale = !!e3.stale;
      }
      peek(e3) {
        return this.get(e3, false);
      }
      set(e3, s3, i3 = this.maxAge) {
        this.has(e3) && this.delete(e3), this.size + 1 > this.max && this.delete(this.keys().next().value);
        let r3 = i3 > -1 && i3 + Date.now();
        return super.set(e3, {
          expires: r3,
          content: s3
        });
      }
      get(e3, s3 = true) {
        let i3 = super.get(e3);
        if (i3 === void 0) return i3;
        let { expires: r3, content: a3 } = i3;
        return r3 !== false && Date.now() >= r3 ? (this.delete(e3), this.stale ? a3 : void 0) : (s3 && this.set(e3, a3), a3);
      }
    };
    u3.exports = l3;
  });
  var n$2 = v$3(x$2()), A$3 = n$2.default ?? n$2;
  const __6$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: A$3
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var A$2 = Object.defineProperty, O$4 = (a3, E3) => {
    for (var S3 in E3) A$2(a3, S3, {
      get: E3[S3],
      enumerable: true
    });
  };
  var N$3 = {};
  O$4(N$3, {
    E2BIG: () => W$3,
    EACCES: () => L$2,
    EADDRINUSE: () => G$2,
    EADDRNOTAVAIL: () => U$2,
    EAFNOSUPPORT: () => C$2,
    EAGAIN: () => o$1,
    EALREADY: () => M$3,
    EBADF: () => F$2,
    EBADMSG: () => b$3,
    EBUSY: () => _$3,
    ECANCELED: () => Y$2,
    ECHILD: () => B$3,
    ECONNABORTED: () => t$1,
    ECONNREFUSED: () => H,
    ECONNRESET: () => V$2,
    EDEADLK: () => c$1,
    EDESTADDRREQ: () => K$1,
    EDOM: () => r,
    EDQUOT: () => e,
    EEXIST: () => X$2,
    EFAULT: () => Q$1,
    EFBIG: () => n$1,
    EHOSTUNREACH: () => p$1,
    EIDRM: () => Z$3,
    EILSEQ: () => i,
    EINPROGRESS: () => v$2,
    EINTR: () => f$1,
    EINVAL: () => l$1,
    EIO: () => d$1,
    EISCONN: () => m$1,
    EISDIR: () => x$1,
    ELOOP: () => g$1,
    EMFILE: () => u$1,
    EMLINK: () => y$1,
    EMSGSIZE: () => j$2,
    EMULTIHOP: () => h$1,
    ENAMETOOLONG: () => k$1,
    ENETDOWN: () => q$2,
    ENETRESET: () => w$1,
    ENETUNREACH: () => z$1,
    ENFILE: () => J$2,
    ENOBUFS: () => $$1,
    ENODATA: () => EE,
    ENODEV: () => SE,
    ENOENT: () => OE,
    ENOEXEC: () => aE,
    ENOLCK: () => AE,
    ENOLINK: () => NE,
    ENOMEM: () => IE,
    ENOMSG: () => TE,
    ENOPROTOOPT: () => RE,
    ENOSPC: () => sE,
    ENOSR: () => PE,
    ENOSTR: () => DE,
    ENOSYS: () => WE,
    ENOTCONN: () => LE,
    ENOTDIR: () => GE,
    ENOTEMPTY: () => UE,
    ENOTSOCK: () => CE,
    ENOTSUP: () => oE,
    ENOTTY: () => ME,
    ENXIO: () => FE,
    EOPNOTSUPP: () => bE,
    EOVERFLOW: () => _E,
    EPERM: () => YE,
    EPIPE: () => BE,
    EPROTO: () => tE,
    EPROTONOSUPPORT: () => HE,
    EPROTOTYPE: () => VE,
    ERANGE: () => cE,
    EROFS: () => KE,
    ESPIPE: () => rE,
    ESRCH: () => eE,
    ESTALE: () => XE,
    ETIME: () => QE,
    ETIMEDOUT: () => nE,
    ETXTBSY: () => pE,
    EWOULDBLOCK: () => ZE,
    EXDEV: () => iE,
    PRIORITY_ABOVE_NORMAL: () => cO,
    PRIORITY_BELOW_NORMAL: () => HO,
    PRIORITY_HIGH: () => KO,
    PRIORITY_HIGHEST: () => rO,
    PRIORITY_LOW: () => tO,
    PRIORITY_NORMAL: () => VO,
    RTLD_DEEPBIND: () => D$1,
    RTLD_GLOBAL: () => s$1,
    RTLD_LAZY: () => T$1,
    RTLD_LOCAL: () => P$1,
    RTLD_NOW: () => R$2,
    SIGABRT: () => jS,
    SIGALRM: () => SO,
    SIGBREAK: () => bO,
    SIGBUS: () => kS,
    SIGCHLD: () => aO,
    SIGCONT: () => AO,
    SIGFPE: () => qS,
    SIGHUP: () => mS,
    SIGILL: () => uS,
    SIGINFO: () => CO,
    SIGINT: () => xS,
    SIGIO: () => UO,
    SIGIOT: () => hS,
    SIGKILL: () => wS,
    SIGLOST: () => BO,
    SIGPIPE: () => EO,
    SIGPOLL: () => MO,
    SIGPROF: () => LO,
    SIGPWR: () => FO,
    SIGQUIT: () => gS,
    SIGSEGV: () => JS,
    SIGSTKFLT: () => _O,
    SIGSTOP: () => NO,
    SIGSYS: () => oO,
    SIGTERM: () => OO,
    SIGTRAP: () => yS,
    SIGTSTP: () => IO,
    SIGTTIN: () => TO,
    SIGTTOU: () => RO,
    SIGUNUSED: () => YO,
    SIGURG: () => sO,
    SIGUSR1: () => zS,
    SIGUSR2: () => $S,
    SIGVTALRM: () => WO,
    SIGWINCH: () => GO,
    SIGXCPU: () => PO,
    SIGXFSZ: () => DO,
    UV_UDP_REUSEADDR: () => I$4,
    WSAEACCES: () => lE,
    WSAEADDRINUSE: () => OS,
    WSAEADDRNOTAVAIL: () => aS,
    WSAEAFNOSUPPORT: () => SS,
    WSAEALREADY: () => yE,
    WSAEBADF: () => fE,
    WSAECANCELLED: () => XS,
    WSAECONNABORTED: () => TS,
    WSAECONNREFUSED: () => US,
    WSAECONNRESET: () => RS,
    WSAEDESTADDRREQ: () => hE,
    WSAEDISCON: () => rS,
    WSAEDQUOT: () => BS,
    WSAEFAULT: () => dE,
    WSAEHOSTDOWN: () => MS,
    WSAEHOSTUNREACH: () => FS,
    WSAEINPROGRESS: () => uE,
    WSAEINTR: () => vE,
    WSAEINVAL: () => mE,
    WSAEINVALIDPROCTABLE: () => QS,
    WSAEINVALIDPROVIDER: () => nS,
    WSAEISCONN: () => PS,
    WSAELOOP: () => CS,
    WSAEMFILE: () => xE,
    WSAEMSGSIZE: () => kE,
    WSAENAMETOOLONG: () => oS,
    WSAENETDOWN: () => AS,
    WSAENETRESET: () => IS,
    WSAENETUNREACH: () => NS,
    WSAENOBUFS: () => sS,
    WSAENOMORE: () => eS,
    WSAENOPROTOOPT: () => wE,
    WSAENOTCONN: () => DS,
    WSAENOTEMPTY: () => bS,
    WSAENOTSOCK: () => jE,
    WSAEOPNOTSUPP: () => $E,
    WSAEPFNOSUPPORT: () => ES,
    WSAEPROCLIM: () => _S,
    WSAEPROTONOSUPPORT: () => zE,
    WSAEPROTOTYPE: () => qE,
    WSAEPROVIDERFAILEDINIT: () => pS,
    WSAEREFUSED: () => dS,
    WSAEREMOTE: () => HS,
    WSAESHUTDOWN: () => WS,
    WSAESOCKTNOSUPPORT: () => JE,
    WSAESTALE: () => tS,
    WSAETIMEDOUT: () => GS,
    WSAETOOMANYREFS: () => LS,
    WSAEUSERS: () => YS,
    WSAEWOULDBLOCK: () => gE,
    WSANOTINITIALISED: () => KS,
    WSASERVICE_NOT_FOUND: () => iS,
    WSASYSCALLFAILURE: () => ZS,
    WSASYSNOTREADY: () => VS,
    WSATYPE_NOT_FOUND: () => vS,
    WSAVERNOTSUPPORTED: () => cS,
    WSA_E_CANCELLED: () => lS,
    WSA_E_NO_MORE: () => fS,
    default: () => eO
  });
  var I$4 = 4, T$1 = 1, R$2 = 2, s$1 = 8, P$1 = 4, D$1 = 16, W$3 = 7, L$2 = 13, G$2 = 48, U$2 = 49, C$2 = 47, o$1 = 35, M$3 = 37, F$2 = 9, b$3 = 94, _$3 = 16, Y$2 = 89, B$3 = 10, t$1 = 53, H = 61, V$2 = 54, c$1 = 11, K$1 = 39, r = 33, e = 69, X$2 = 17, Q$1 = 14, n$1 = 27, p$1 = 65, Z$3 = 90, i = 92, v$2 = 36, f$1 = 4, l$1 = 22, d$1 = 5, m$1 = 56, x$1 = 21, g$1 = 62, u$1 = 24, y$1 = 31, j$2 = 40, h$1 = 95, k$1 = 63, q$2 = 50, w$1 = 52, z$1 = 51, J$2 = 23, $$1 = 55, EE = 96, SE = 19, OE = 2, aE = 8, AE = 77, NE = 97, IE = 12, TE = 91, RE = 42, sE = 28, PE = 98, DE = 99, WE = 78, LE = 57, GE = 20, UE = 66, CE = 38, oE = 45, ME = 25, FE = 6, bE = 102, _E = 84, YE = 1, BE = 32, tE = 100, HE = 43, VE = 41, cE = 34, KE = 30, rE = 29, eE = 3, XE = 70, QE = 101, nE = 60, pE = 26, ZE = 35, iE = 18, vE = 10004, fE = 10009, lE = 10013, dE = 10014, mE = 10022, xE = 10024, gE = 10035, uE = 10036, yE = 10037, jE = 10038, hE = 10039, kE = 10040, qE = 10041, wE = 10042, zE = 10043, JE = 10044, $E = 10045, ES = 10046, SS = 10047, OS = 10048, aS = 10049, AS = 10050, NS = 10051, IS = 10052, TS = 10053, RS = 10054, sS = 10055, PS = 10056, DS = 10057, WS = 10058, LS = 10059, GS = 10060, US = 10061, CS = 10062, oS = 10063, MS = 10064, FS = 10065, bS = 10066, _S = 10067, YS = 10068, BS = 10069, tS = 10070, HS = 10071, VS = 10091, cS = 10092, KS = 10093, rS = 10101, eS = 10102, XS = 10103, QS = 10104, nS = 10105, pS = 10106, ZS = 10107, iS = 10108, vS = 100109, fS = 10110, lS = 10111, dS = 10112, mS = 1, xS = 2, gS = 3, uS = 4, yS = 5, jS = 6, hS = 6, kS = 10, qS = 8, wS = 9, zS = 30, JS = 11, $S = 31, EO = 13, SO = 14, OO = 15, aO = 20, AO = 19, NO = 17, IO = 18, TO = 21, RO = 22, sO = 16, PO = 24, DO = 25, WO = 26, LO = 27, GO = 28, UO = 23, CO = 29, oO = 12, MO = 34, FO = 29, bO = 21, _O = 16, YO = 31, BO = 29, tO = 19, HO = 10, VO = 0, cO = -7, KO = -14, rO = -20, eO = {
    UV_UDP_REUSEADDR: 4,
    dlopen: {
      RTLD_LAZY: 1,
      RTLD_NOW: 2,
      RTLD_GLOBAL: 8,
      RTLD_LOCAL: 4,
      RTLD_DEEPBIND: 16
    },
    errno: {
      E2BIG: 7,
      EACCES: 13,
      EADDRINUSE: 48,
      EADDRNOTAVAIL: 49,
      EAFNOSUPPORT: 47,
      EAGAIN: 35,
      EALREADY: 37,
      EBADF: 9,
      EBADMSG: 94,
      EBUSY: 16,
      ECANCELED: 89,
      ECHILD: 10,
      ECONNABORTED: 53,
      ECONNREFUSED: 61,
      ECONNRESET: 54,
      EDEADLK: 11,
      EDESTADDRREQ: 39,
      EDOM: 33,
      EDQUOT: 69,
      EEXIST: 17,
      EFAULT: 14,
      EFBIG: 27,
      EHOSTUNREACH: 65,
      EIDRM: 90,
      EILSEQ: 92,
      EINPROGRESS: 36,
      EINTR: 4,
      EINVAL: 22,
      EIO: 5,
      EISCONN: 56,
      EISDIR: 21,
      ELOOP: 62,
      EMFILE: 24,
      EMLINK: 31,
      EMSGSIZE: 40,
      EMULTIHOP: 95,
      ENAMETOOLONG: 63,
      ENETDOWN: 50,
      ENETRESET: 52,
      ENETUNREACH: 51,
      ENFILE: 23,
      ENOBUFS: 55,
      ENODATA: 96,
      ENODEV: 19,
      ENOENT: 2,
      ENOEXEC: 8,
      ENOLCK: 77,
      ENOLINK: 97,
      ENOMEM: 12,
      ENOMSG: 91,
      ENOPROTOOPT: 42,
      ENOSPC: 28,
      ENOSR: 98,
      ENOSTR: 99,
      ENOSYS: 78,
      ENOTCONN: 57,
      ENOTDIR: 20,
      ENOTEMPTY: 66,
      ENOTSOCK: 38,
      ENOTSUP: 45,
      ENOTTY: 25,
      ENXIO: 6,
      EOPNOTSUPP: 102,
      EOVERFLOW: 84,
      EPERM: 1,
      EPIPE: 32,
      EPROTO: 100,
      EPROTONOSUPPORT: 43,
      EPROTOTYPE: 41,
      ERANGE: 34,
      EROFS: 30,
      ESPIPE: 29,
      ESRCH: 3,
      ESTALE: 70,
      ETIME: 101,
      ETIMEDOUT: 60,
      ETXTBSY: 26,
      EWOULDBLOCK: 35,
      EXDEV: 18,
      WSAEINTR: 10004,
      WSAEBADF: 10009,
      WSAEACCES: 10013,
      WSAEFAULT: 10014,
      WSAEINVAL: 10022,
      WSAEMFILE: 10024,
      WSAEWOULDBLOCK: 10035,
      WSAEINPROGRESS: 10036,
      WSAEALREADY: 10037,
      WSAENOTSOCK: 10038,
      WSAEDESTADDRREQ: 10039,
      WSAEMSGSIZE: 10040,
      WSAEPROTOTYPE: 10041,
      WSAENOPROTOOPT: 10042,
      WSAEPROTONOSUPPORT: 10043,
      WSAESOCKTNOSUPPORT: 10044,
      WSAEOPNOTSUPP: 10045,
      WSAEPFNOSUPPORT: 10046,
      WSAEAFNOSUPPORT: 10047,
      WSAEADDRINUSE: 10048,
      WSAEADDRNOTAVAIL: 10049,
      WSAENETDOWN: 10050,
      WSAENETUNREACH: 10051,
      WSAENETRESET: 10052,
      WSAECONNABORTED: 10053,
      WSAECONNRESET: 10054,
      WSAENOBUFS: 10055,
      WSAEISCONN: 10056,
      WSAENOTCONN: 10057,
      WSAESHUTDOWN: 10058,
      WSAETOOMANYREFS: 10059,
      WSAETIMEDOUT: 10060,
      WSAECONNREFUSED: 10061,
      WSAELOOP: 10062,
      WSAENAMETOOLONG: 10063,
      WSAEHOSTDOWN: 10064,
      WSAEHOSTUNREACH: 10065,
      WSAENOTEMPTY: 10066,
      WSAEPROCLIM: 10067,
      WSAEUSERS: 10068,
      WSAEDQUOT: 10069,
      WSAESTALE: 10070,
      WSAEREMOTE: 10071,
      WSASYSNOTREADY: 10091,
      WSAVERNOTSUPPORTED: 10092,
      WSANOTINITIALISED: 10093,
      WSAEDISCON: 10101,
      WSAENOMORE: 10102,
      WSAECANCELLED: 10103,
      WSAEINVALIDPROCTABLE: 10104,
      WSAEINVALIDPROVIDER: 10105,
      WSAEPROVIDERFAILEDINIT: 10106,
      WSASYSCALLFAILURE: 10107,
      WSASERVICE_NOT_FOUND: 10108,
      WSATYPE_NOT_FOUND: 100109,
      WSA_E_NO_MORE: 10110,
      WSA_E_CANCELLED: 10111,
      WSAEREFUSED: 10112
    },
    signals: {
      SIGHUP: 1,
      SIGINT: 2,
      SIGQUIT: 3,
      SIGILL: 4,
      SIGTRAP: 5,
      SIGABRT: 6,
      SIGIOT: 6,
      SIGBUS: 10,
      SIGFPE: 8,
      SIGKILL: 9,
      SIGUSR1: 30,
      SIGSEGV: 11,
      SIGUSR2: 31,
      SIGPIPE: 13,
      SIGALRM: 14,
      SIGTERM: 15,
      SIGCHLD: 20,
      SIGCONT: 19,
      SIGSTOP: 17,
      SIGTSTP: 18,
      SIGTTIN: 21,
      SIGTTOU: 22,
      SIGURG: 16,
      SIGXCPU: 24,
      SIGXFSZ: 25,
      SIGVTALRM: 26,
      SIGPROF: 27,
      SIGWINCH: 28,
      SIGIO: 23,
      SIGINFO: 29,
      SIGSYS: 12,
      SIGBREAK: 21,
      SIGLOST: 29,
      SIGPWR: 29,
      SIGPOLL: 34,
      SIGSTKFLT: 16,
      SIGUNUSED: 31
    },
    priority: {
      PRIORITY_LOW: 19,
      PRIORITY_BELOW_NORMAL: 10,
      PRIORITY_NORMAL: 0,
      PRIORITY_ABOVE_NORMAL: -7,
      PRIORITY_HIGH: -14,
      PRIORITY_HIGHEST: -20
    }
  };
  function n(e3) {
    return new Error(`[unenv] ${e3} is not implemented yet!`);
  }
  function t(e3) {
    return Object.assign(() => {
      throw n(e3);
    }, {
      __unenv__: true
    });
  }
  var o = {
    ...eO
  }, f = 8, l = () => f, m = () => "", u = () => "", d = () => "LE", c = () => {
    let e3 = {
      model: "",
      speed: 0,
      times: {
        user: 0,
        nice: 0,
        sys: 0,
        idle: 0,
        irq: 0
      }
    };
    return Array.from({
      length: f
    }, () => e3);
  }, p = () => 0, v$1 = t("os.setPriority"), y = () => "/", h = () => "/tmp", _$2 = "/dev/null", g = () => 0, P = () => 0, b$2 = () => [
    0,
    0,
    0
  ], I$3 = () => 0, k = () => "", w = () => ({
    lo0: [
      {
        address: "127.0.0.1",
        netmask: "255.0.0.0",
        family: "IPv4",
        mac: "00:00:00:00:00:00",
        internal: true,
        cidr: "127.0.0.1/8"
      },
      {
        address: "::1",
        netmask: "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff",
        family: "IPv6",
        mac: "00:00:00:00:00:00",
        internal: true,
        cidr: "::1/128",
        scopeid: 0
      },
      {
        address: "fe80::1",
        netmask: "ffff:ffff:ffff:ffff::",
        family: "IPv6",
        mac: "00:00:00:00:00:00",
        internal: true,
        cidr: "fe80::1/64",
        scopeid: 1
      }
    ]
  }), x = () => "linux", E$1 = () => "Linux", L$1 = () => "", O$3 = () => "", A$1 = (e3) => {
    let r3 = (a3) => {
      if (e3 == null ? void 0 : e3.encoding) {
        let s3 = Buffer.from(a3);
        return e3.encoding === "buffer" ? s3 : s3.toString(e3.encoding);
      }
      return a3;
    };
    return {
      gid: 1e3,
      uid: 1e3,
      homedir: r3("/"),
      shell: r3("/bin/sh"),
      username: r3("root")
    };
  }, N$2 = `
`, C$1 = {
    arch: m,
    availableParallelism: l,
    constants: o,
    cpus: c,
    EOL: N$2,
    endianness: d,
    devNull: _$2,
    freemem: g,
    getPriority: p,
    homedir: y,
    hostname: k,
    loadavg: b$2,
    machine: u,
    networkInterfaces: w,
    platform: x,
    release: L$1,
    setPriority: v$1,
    tmpdir: h,
    totalmem: P,
    type: E$1,
    uptime: I$3,
    userInfo: A$1,
    version: O$3
  };
  const __0$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    EOL: N$2,
    arch: m,
    availableParallelism: l,
    constants: o,
    cpus: c,
    default: C$1,
    devNull: _$2,
    endianness: d,
    freemem: g,
    getPriority: p,
    homedir: y,
    hostname: k,
    loadavg: b$2,
    machine: u,
    networkInterfaces: w,
    platform: x,
    release: L$1,
    setPriority: v$1,
    tmpdir: h,
    totalmem: P,
    type: E$1,
    uptime: I$3,
    userInfo: A$1,
    version: O$3
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var require$1 = (n3) => {
    const e3 = (m3) => typeof m3.default < "u" ? m3.default : m3;
    switch (n3) {
      case "node:os":
        return e3(__0$);
      case "node:path":
        return e3(__1$$4);
      case "node:fs":
        return e3(__2$$3);
      default:
        console.error('module "' + n3 + '" not found');
        return null;
    }
  };
  var Vi = Object.create;
  var Xt$2 = Object.defineProperty;
  var Ki = Object.getOwnPropertyDescriptor;
  var Hi = Object.getOwnPropertyNames;
  var Yi = Object.getPrototypeOf, Qi = Object.prototype.hasOwnProperty;
  var Re$2 = ((U3) => typeof require$1 < "u" ? require$1 : typeof Proxy < "u" ? new Proxy(U3, {
    get: (j3, L3) => (typeof require$1 < "u" ? require$1 : j3)[L3]
  }) : U3)(function(U3) {
    if (typeof require$1 < "u") return require$1.apply(this, arguments);
    throw Error('Dynamic require of "' + U3 + '" is not supported');
  });
  var Zi = (U3, j3) => () => (j3 || U3((j3 = {
    exports: {}
  }).exports, j3), j3.exports);
  var Gi = (U3, j3, L3, f3) => {
    if (j3 && typeof j3 == "object" || typeof j3 == "function") for (let K3 of Hi(j3)) !Qi.call(U3, K3) && K3 !== L3 && Xt$2(U3, K3, {
      get: () => j3[K3],
      enumerable: !(f3 = Ki(j3, K3)) || f3.enumerable
    });
    return U3;
  };
  var Xi = (U3, j3, L3) => (L3 = U3 != null ? Vi(Yi(U3)) : {}, Gi(!U3 || !U3.__esModule ? Xt$2(L3, "default", {
    value: U3,
    enumerable: true
  }) : L3, U3));
  var en$1 = Zi((eo2, Jt2) => {
    Jt2.exports = function(U3, j3) {
      var L3 = {};
      function f3(D3) {
        if (L3[D3]) return L3[D3].exports;
        var R3 = L3[D3] = {
          i: D3,
          l: false,
          exports: {}
        };
        return U3[D3].call(R3.exports, R3, R3.exports, f3), R3.l = true, R3.exports;
      }
      f3.ab = "/vscode-emmet-helper-bundled@0.0.1/es2022/";
      function K3() {
        return f3(104);
      }
      return j3(f3), K3();
    }({
      34: function(U3, j3) {
        (function(L3, f3) {
          f3(j3);
        })(this, function(L3) {
          var f3 = {
            indent: "	",
            tagCase: "",
            attributeCase: "",
            attributeQuotes: "double",
            format: true,
            formatSkip: [
              "html"
            ],
            formatForce: [
              "body"
            ],
            inlineBreak: 3,
            compactBooleanAttributes: false,
            booleanAttributes: [
              "contenteditable",
              "seamless",
              "async",
              "autofocus",
              "autoplay",
              "checked",
              "controls",
              "defer",
              "disabled",
              "formnovalidate",
              "hidden",
              "ismap",
              "loop",
              "multiple",
              "muted",
              "novalidate",
              "readonly",
              "required",
              "reversed",
              "selected",
              "typemustmatch"
            ],
            selfClosingStyle: "html",
            inlineElements: [
              "a",
              "abbr",
              "acronym",
              "applet",
              "b",
              "basefont",
              "bdo",
              "big",
              "br",
              "button",
              "cite",
              "code",
              "del",
              "dfn",
              "em",
              "font",
              "i",
              "iframe",
              "img",
              "input",
              "ins",
              "kbd",
              "label",
              "map",
              "object",
              "q",
              "s",
              "samp",
              "select",
              "small",
              "span",
              "strike",
              "strong",
              "sub",
              "sup",
              "textarea",
              "tt",
              "u",
              "var"
            ]
          };
          class K3 {
            constructor(t3) {
              this.options = Object.assign({}, f3, t3), this.quoteChar = this.options.attributeQuotes === "single" ? "'" : '"';
            }
            get(t3) {
              return this.options[t3];
            }
            quote(t3) {
              return `${this.quoteChar}${t3 ?? ""}${this.quoteChar}`;
            }
            name(t3) {
              return D3(t3, this.options.tagCase);
            }
            attribute(t3) {
              return D3(t3, this.options.attributeCase);
            }
            isBooleanAttribute(t3) {
              return t3.options.boolean || this.get("booleanAttributes").indexOf((t3.name || "").toLowerCase()) !== -1;
            }
            selfClose() {
              switch (this.options.selfClosingStyle) {
                case "xhtml":
                  return " /";
                case "xml":
                  return "/";
                default:
                  return "";
              }
            }
            indent(t3) {
              t3 = t3 || 0;
              let n3 = "";
              for (; t3--; ) n3 += this.options.indent;
              return n3;
            }
            isInline(t3) {
              return typeof t3 == "string" ? this.get("inlineElements").indexOf(t3.toLowerCase()) !== -1 : t3.name != null ? this.isInline(t3.name) : t3.isTextOnly;
            }
            field(t3, n3) {
              return this.options.field(t3, n3);
            }
          }
          function D3(e3, t3) {
            return t3 && (e3 = t3 === "upper" ? e3.toUpperCase() : e3.toLowerCase()), e3;
          }
          class R3 {
            constructor(t3, n3) {
              this.key = t3, this.value = n3;
            }
          }
          class E3 {
            constructor(t3) {
              this._string = /* @__PURE__ */ new Map(), this._regexp = /* @__PURE__ */ new Map(), this._disabled = false, this.load(t3);
            }
            get disabled() {
              return this._disabled;
            }
            disable() {
              this._disabled = true;
            }
            enable() {
              this._disabled = false;
            }
            set(t3, n3) {
              if (typeof t3 == "string") t3.split("|").forEach((r3) => this._string.set(r3, new R3(r3, n3)));
              else if (t3 instanceof RegExp) this._regexp.set(t3, new R3(t3, n3));
              else throw new Error("Unknow snippet key: " + t3);
              return this;
            }
            get(t3) {
              if (this.disabled) return;
              if (this._string.has(t3)) return this._string.get(t3);
              let n3 = Array.from(this._regexp.keys());
              for (let r3 = 0, o3 = n3.length; r3 < o3; r3++) if (n3[r3].test(t3)) return this._regexp.get(n3[r3]);
            }
            load(t3) {
              this.reset(), t3 instanceof Map ? t3.forEach((n3, r3) => this.set(r3, n3)) : t3 && typeof t3 == "object" && Object.keys(t3).forEach((n3) => this.set(n3, t3[n3]));
            }
            reset() {
              this._string.clear(), this._regexp.clear();
            }
            values() {
              if (this.disabled) return [];
              let t3 = Array.from(this._string.values()), n3 = Array.from(this._regexp.values());
              return t3.concat(n3);
            }
          }
          class ye2 {
            constructor(t3) {
              this._registry = [], Array.isArray(t3) ? t3.forEach((n3, r3) => this.add(r3, n3)) : typeof t3 == "object" && this.add(t3);
            }
            get(t3) {
              for (let n3 = 0; n3 < this._registry.length; n3++) {
                let r3 = this._registry[n3];
                if (r3.level === t3) return r3.store;
              }
            }
            add(t3, n3) {
              t3 != null && typeof t3 == "object" && (n3 = t3, t3 = 0);
              let r3 = new E3(n3);
              return this.remove(t3), this._registry.push({
                level: t3,
                store: r3
              }), this._registry.sort((o3, l3) => l3.level - o3.level), r3;
            }
            remove(t3) {
              this._registry = this._registry.filter((n3) => n3.level !== t3 && n3.store !== t3);
            }
            resolve(t3) {
              for (let n3 = 0; n3 < this._registry.length; n3++) {
                let r3 = this._registry[n3].store.get(t3);
                if (r3) return r3;
              }
            }
            all(t3) {
              t3 = t3 || {};
              let n3 = /* @__PURE__ */ new Map(), r3 = (o3) => {
                let l3 = o3.key instanceof RegExp ? "regexp" : "string";
                (!t3.type || t3.type === l3) && !n3.has(o3.key) && n3.set(o3.key, o3);
              };
              return this._registry.forEach((o3) => {
                o3.store.values().forEach(r3);
              }), Array.from(n3.values());
            }
            clear() {
              this._registry.length = 0;
            }
          }
          let Te2 = 39, me2 = 34, oe2 = {
            escape: 92,
            throws: false
          };
          var he2 = function(e3, t3) {
            t3 = t3 ? Object.assign({}, oe2, t3) : oe2;
            let n3 = e3.pos, r3 = e3.peek();
            if (e3.eat(W3)) {
              for (; !e3.eof(); ) switch (e3.next()) {
                case r3:
                  return e3.start = n3, true;
                case t3.escape:
                  e3.next();
                  break;
              }
              if (e3.pos = n3, t3.throws) throw e3.error("Unable to consume quoted string");
            }
            return false;
          };
          function W3(e3) {
            return e3 === Te2 || e3 === me2;
          }
          function ae2(e3) {
            return e3 > 47 && e3 < 58;
          }
          function Ee2(e3, t3, n3) {
            return t3 = t3 || 65, n3 = n3 || 90, e3 &= -33, e3 >= t3 && e3 <= n3;
          }
          function Se2(e3) {
            return ae2(e3) || Ee2(e3);
          }
          function ge2(e3) {
            return e3 === 32 || e3 === 9 || e3 === 160;
          }
          function be2(e3) {
            return ge2(e3) || e3 === 10 || e3 === 13;
          }
          class ne2 {
            constructor(t3, n3, r3) {
              this.name = t3, this.value = n3 ?? null, this.options = r3 || {};
            }
            clone() {
              return new ne2(this.name, this.value, Object.assign({}, this.options));
            }
            valueOf() {
              return `${this.name}="${this.value}"`;
            }
          }
          class ee2 {
            constructor(t3, n3) {
              this.name = t3 || null, this.value = null, this.repeat = null, this.selfClosing = false, this.children = [], this.parent = null, this.next = null, this.previous = null, this._attributes = [], Array.isArray(n3) && n3.forEach((r3) => this.setAttribute(r3));
            }
            get attributes() {
              return this._attributes;
            }
            get attributesMap() {
              return this.attributes.reduce((t3, n3) => (t3[n3.name] = n3.options.boolean ? n3.name : n3.value, t3), {});
            }
            get isGroup() {
              return !this.name && !this.value && !this._attributes.length;
            }
            get isTextOnly() {
              return !this.name && !!this.value && !this._attributes.length;
            }
            get firstChild() {
              return this.children[0];
            }
            get lastChild() {
              return this.children[this.children.length - 1];
            }
            get childIndex() {
              return this.parent ? this.parent.children.indexOf(this) : -1;
            }
            get nextSibling() {
              return this.next;
            }
            get previousSibling() {
              return this.previous;
            }
            get classList() {
              let t3 = this.getAttribute("class");
              return t3 && t3.value ? t3.value.split(/\s+/g).filter(ve2) : [];
            }
            create(t3, n3) {
              return new ee2(t3, n3);
            }
            setAttribute(t3, n3) {
              let r3 = we2(t3, n3), o3 = this.getAttribute(t3);
              o3 ? this.replaceAttribute(o3, r3) : this._attributes.push(r3);
            }
            hasAttribute(t3) {
              return !!this.getAttribute(t3);
            }
            getAttribute(t3) {
              typeof t3 == "object" && (t3 = t3.name);
              for (var n3 = 0; n3 < this._attributes.length; n3++) {
                let r3 = this._attributes[n3];
                if (r3.name === t3) return r3;
              }
            }
            replaceAttribute(t3, n3, r3) {
              typeof t3 == "string" && (t3 = this.getAttribute(t3));
              let o3 = this._attributes.indexOf(t3);
              o3 !== -1 && this._attributes.splice(o3, 1, we2(n3, r3));
            }
            removeAttribute(t3) {
              typeof t3 == "string" && (t3 = this.getAttribute(t3));
              let n3 = this._attributes.indexOf(t3);
              n3 !== -1 && this._attributes.splice(n3, 1);
            }
            clearAttributes() {
              this._attributes.length = 0;
            }
            addClass(t3) {
              t3 = fe2(t3), this.hasAttribute("class") ? t3 && !this.hasClass(t3) && this.setAttribute("class", this.classList.concat(t3).join(" ")) : this.setAttribute("class", t3);
            }
            hasClass(t3) {
              return this.classList.indexOf(fe2(t3)) !== -1;
            }
            removeClass(t3) {
              t3 = fe2(t3), this.hasClass(t3) && this.setAttribute("class", this.classList.filter((n3) => n3 !== t3).join(" "));
            }
            appendChild(t3) {
              this.insertAt(t3, this.children.length);
            }
            insertBefore(t3, n3) {
              this.insertAt(t3, this.children.indexOf(n3));
            }
            insertAt(t3, n3) {
              if (n3 < 0 || n3 > this.children.length) throw new Error("Unable to insert node: position is out of child list range");
              let r3 = this.children[n3 - 1], o3 = this.children[n3];
              t3.remove(), t3.parent = this, this.children.splice(n3, 0, t3), r3 && (t3.previous = r3, r3.next = t3), o3 && (t3.next = o3, o3.previous = t3);
            }
            removeChild(t3) {
              let n3 = this.children.indexOf(t3);
              n3 !== -1 && (this.children.splice(n3, 1), t3.previous && (t3.previous.next = t3.next), t3.next && (t3.next.previous = t3.previous), t3.parent = t3.next = t3.previous = null);
            }
            remove() {
              this.parent && this.parent.removeChild(this);
            }
            clone(t3) {
              let n3 = new ee2(this.name);
              return n3.value = this.value, n3.selfClosing = this.selfClosing, this.repeat && (n3.repeat = Object.assign({}, this.repeat)), this._attributes.forEach((r3) => n3.setAttribute(r3.clone())), t3 && this.children.forEach((r3) => n3.appendChild(r3.clone(true))), n3;
            }
            walk(t3, n3) {
              n3 = n3 || 0;
              let r3 = this.firstChild;
              for (; r3; ) {
                let o3 = r3.next;
                if (t3(r3, n3) === false || r3.walk(t3, n3 + 1) === false) return false;
                r3 = o3;
              }
            }
            use(t3) {
              let n3 = [
                this
              ];
              for (var r3 = 1; r3 < arguments.length; r3++) n3.push(arguments[r3]);
              return t3.apply(null, n3), this;
            }
            toString() {
              let t3 = this.attributes.map((r3) => {
                r3 = this.getAttribute(r3.name);
                let o3 = r3.options, l3 = `${o3 && o3.implied ? "!" : ""}${r3.name || ""}`;
                return o3 && o3.boolean ? l3 += "." : r3.value != null && (l3 += `="${r3.value}"`), l3;
              }), n3 = `${this.name || ""}`;
              return t3.length && (n3 += `[${t3.join(" ")}]`), this.value != null && (n3 += `{${this.value}}`), this.selfClosing && (n3 += "/"), this.repeat && (n3 += `*${this.repeat.count ? this.repeat.count : ""}`, this.repeat.value != null && (n3 += `@${this.repeat.value}`)), n3;
            }
          }
          function we2(e3, t3) {
            if (e3 instanceof ne2) return e3;
            if (typeof e3 == "string") return new ne2(e3, t3);
            if (e3 && typeof e3 == "object") return new ne2(e3.name, e3.value, e3.options);
          }
          function fe2(e3) {
            return String(e3).trim();
          }
          function ve2(e3, t3, n3) {
            return e3 && n3.indexOf(e3) === t3;
          }
          class c3 {
            constructor(t3, n3, r3) {
              r3 == null && typeof t3 == "string" && (r3 = t3.length), this.string = t3, this.pos = this.start = n3 || 0, this.end = r3;
            }
            eof() {
              return this.pos >= this.end;
            }
            limit(t3, n3) {
              return new this.constructor(this.string, t3, n3);
            }
            peek() {
              return this.string.charCodeAt(this.pos);
            }
            next() {
              if (this.pos < this.string.length) return this.string.charCodeAt(this.pos++);
            }
            eat(t3) {
              let n3 = this.peek(), r3 = typeof t3 == "function" ? t3(n3) : n3 === t3;
              return r3 && this.next(), r3;
            }
            eatWhile(t3) {
              let n3 = this.pos;
              for (; !this.eof() && this.eat(t3); ) ;
              return this.pos !== n3;
            }
            backUp(t3) {
              this.pos -= t3 || 1;
            }
            current() {
              return this.substring(this.start, this.pos);
            }
            substring(t3, n3) {
              return this.string.slice(t3, n3);
            }
            error(t3) {
              let n3 = new Error(`${t3} at char ${this.pos + 1}`);
              return n3.originalMessage = t3, n3.pos = this.pos, n3.string = this.string, n3;
            }
          }
          let O3 = 42;
          function p3(e3) {
            if (e3.eat(O3)) return e3.start = e3.pos, {
              count: e3.eatWhile(ae2) ? +e3.current() : null
            };
          }
          let x3 = {
            throws: true
          };
          function S3(e3) {
            if (he2(e3, x3)) return e3.current().slice(1, -1);
          }
          let P3 = 123, _3 = 125, V3 = 92;
          function A3(e3) {
            let t3 = e3.pos;
            if (e3.eat(P3)) {
              let n3 = 1, r3, o3 = "", l3 = e3.pos;
              for (; !e3.eof(); ) if (r3 = e3.next(), r3 === P3) n3++;
              else if (r3 === _3) {
                if (n3--, !n3) return e3.start = t3, o3 + e3.substring(l3, e3.pos - 1);
              } else r3 === V3 && (r3 = e3.next(), (r3 === P3 || r3 === _3) && (o3 += e3.substring(l3, e3.pos - 2) + String.fromCharCode(r3), l3 = e3.pos));
              throw e3.pos = t3, e3.error(`Unable to find closing ${String.fromCharCode(_3)} for text start`);
            }
            return null;
          }
          let z3 = 33, M3 = 46, Q3 = 61, se2 = 91, de2 = 93, te2 = /^\!?[\w\-:\$@]+\.?$|^\!?\[[\w\-:\$@]+\]\.?$/;
          function I3(e3) {
            if (!e3.eat(se2)) return null;
            let t3 = [], n3, r3;
            for (; !e3.eof(); ) {
              if (e3.eatWhile(ge2), e3.eat(de2)) return t3;
              if ((n3 = S3(e3)) != null) t3.push({
                name: null,
                value: n3
              });
              else if (h3(e3)) n3 = e3.current(), n3[0] === "[" && e3.peek() === de2 && (e3.next(), n3 = e3.current()), te2.test(n3) ? (r3 = G3(n3), t3.push(r3), e3.eat(Q3) && ((n3 = S3(e3)) != null ? r3.value = n3 : (n3 = A3(e3)) != null ? (r3.value = n3, r3.options = {
                before: "{",
                after: "}"
              }) : h3(e3) && (r3.value = e3.current()))) : t3.push({
                name: null,
                value: n3
              });
              else throw e3.error("Expected attribute name");
            }
            throw e3.error('Expected closing "]" brace');
          }
          function G3(e3) {
            let t3 = {};
            e3.charCodeAt(0) === z3 && (e3 = e3.slice(1), t3.implied = true), e3.charCodeAt(e3.length - 1) === M3 && (e3 = e3.slice(0, e3.length - 1), t3.boolean = true);
            let n3 = {
              name: e3
            };
            return Object.keys(t3).length && (n3.options = t3), n3;
          }
          function h3(e3) {
            let t3 = e3.pos;
            if (e3.eatWhile(T3)) return e3.start = t3, true;
          }
          function T3(e3) {
            return !be2(e3) && !W3(e3) && e3 !== de2 && e3 !== Q3;
          }
          let B3 = 35, xe2 = 46, ue2 = 47;
          function ke2(e3) {
            let t3 = e3.pos, n3 = new ee2($e2(e3)), r3;
            for (; !e3.eof(); ) if (e3.eat(xe2)) n3.addClass($e2(e3));
            else if (e3.eat(B3)) n3.setAttribute("id", $e2(e3));
            else if (e3.eat(ue2)) {
              if (n3.isGroup) throw e3.backUp(1), e3.error("Unexpected self-closing indicator");
              n3.selfClosing = true, (r3 = p3(e3)) && (n3.repeat = r3);
              break;
            } else if (r3 = I3(e3)) for (let o3 = 0, l3 = r3.length; o3 < l3; o3++) n3.setAttribute(r3[o3]);
            else if ((r3 = A3(e3)) !== null) n3.value = r3;
            else if (r3 = p3(e3)) n3.repeat = r3;
            else break;
            if (t3 === e3.pos) throw e3.error(`Unable to consume abbreviation node, unexpected ${e3.peek()}`);
            return n3;
          }
          function $e2(e3) {
            return e3.start = e3.pos, e3.eatWhile(_e2), e3.current();
          }
          function _e2(e3) {
            return Se2(e3) || e3 === 45 || e3 === 58 || e3 === 36 || e3 === 64 || e3 === 33 || e3 === 95 || e3 === 37;
          }
          let Z3 = 40, pe2 = 41, Oe2 = 43, ze2 = 62, Be2 = 94;
          function Le2(e3) {
            let t3 = new c3(e3.trim()), n3 = new ee2(), r3 = n3, o3 = [], l3;
            for (; !t3.eof(); ) {
              if (l3 = t3.peek(), l3 === Z3) {
                let $3 = new ee2();
                o3.push([
                  $3,
                  r3,
                  t3.pos
                ]), r3 = $3, t3.next();
                continue;
              } else if (l3 === pe2) {
                let $3 = o3.pop();
                if (!$3) throw t3.error('Unexpected ")" group end');
                let q3 = $3[0];
                if (r3 = $3[1], t3.next(), q3.repeat = p3(t3)) r3.appendChild(q3);
                else for (; q3.firstChild; ) r3.appendChild(q3.firstChild);
                t3.eat(Oe2);
                continue;
              }
              let b3 = ke2(t3);
              if (r3.appendChild(b3), t3.eof()) break;
              switch (t3.peek()) {
                case Oe2:
                  t3.next();
                  continue;
                case ze2:
                  t3.next(), r3 = b3;
                  continue;
                case Be2:
                  for (; t3.eat(Be2); ) r3 = r3.parent || r3;
                  continue;
              }
            }
            if (o3.length) throw t3.pos = o3.pop()[2], t3.error("Expected group close");
            return n3;
          }
          function g3(e3) {
            let t3 = Le2(e3);
            return t3.walk(s3), t3;
          }
          function s3(e3) {
            if (!e3.repeat || !e3.repeat.count) return;
            let t3 = e3.parent, n3 = t3.children.indexOf(e3);
            for (let r3 = 0; r3 < e3.repeat.count; r3++) {
              let o3 = e3.clone(true);
              if (o3.repeat.value = r3 + 1, o3.walk(s3), o3.isGroup) for (; o3.children.length > 0; ) o3.firstChild.repeat = o3.repeat, t3.insertAt(o3.firstChild, n3++);
              else t3.insertAt(o3, n3++);
            }
            e3.parent.removeChild(e3);
          }
          var m3 = function(e3, t3) {
            return e3.walk((n3) => v3(n3, t3)), e3;
          };
          function v3(e3, t3) {
            let n3 = /* @__PURE__ */ new Set(), r3 = (o3) => {
              let l3 = t3.resolve(o3.name);
              if (!l3 || n3.has(l3)) return;
              if (typeof l3.value == "function") return l3.value(o3, t3, r3);
              let b3 = g3(l3.value);
              n3.add(l3), b3.walk(r3), n3.delete(l3);
              let $3 = d3(b3);
              for (u3($3, o3); b3.firstChild; ) o3.parent.insertBefore(b3.firstChild, o3);
              $3.parent.insertBefore(o3, $3), $3.remove();
            };
            r3(e3);
          }
          function u3(e3, t3) {
            return t3.name = e3.name, e3.selfClosing && (t3.selfClosing = true), e3.value != null && (t3.value = e3.value), e3.repeat && (t3.repeat = Object.assign({}, e3.repeat)), i3(e3, t3);
          }
          function i3(e3, t3) {
            a3(e3, t3);
            let n3 = /* @__PURE__ */ new Map(), r3 = e3.attributes;
            for (let l3 = 0; l3 < r3.length; l3++) n3.set(r3[l3].name, r3[l3].clone());
            r3 = t3.attributes.slice();
            for (let l3 = 0, b3, $3; l3 < r3.length; l3++) b3 = r3[l3], n3.has(b3.name) ? ($3 = n3.get(b3.name), $3.value = b3.value, $3.options.implied && ($3.options.implied = false)) : n3.set(b3.name, b3), t3.removeAttribute(b3);
            let o3 = Array.from(n3.values());
            for (let l3 = 0; l3 < o3.length; l3++) t3.setAttribute(o3[l3]);
            return t3;
          }
          function a3(e3, t3) {
            let n3 = e3.classList;
            for (let r3 = 0; r3 < n3.length; r3++) t3.addClass(n3[r3]);
            return t3;
          }
          function d3(e3) {
            for (; e3.children.length; ) e3 = e3.children[e3.children.length - 1];
            return e3;
          }
          let y3 = new Set("a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,select,small,span,strike,strong,sub,sup,textarea,tt,u,var".split(",")), k3 = {
            p: "span",
            ul: "li",
            ol: "li",
            table: "tr",
            tr: "td",
            tbody: "tr",
            thead: "tr",
            tfoot: "tr",
            colgroup: "col",
            select: "option",
            optgroup: "option",
            audio: "source",
            video: "source",
            object: "param",
            map: "area"
          };
          function w3(e3) {
            return e3 = (e3 || "").toLowerCase(), k3[e3] || (y3.has(e3) ? "span" : "div");
          }
          var C3 = function(e3) {
            return e3.walk((t3) => {
              t3.name == null && t3.attributes.length && (t3.name = w3(t3.parent.name));
            }), e3;
          };
          function F3(e3, t3) {
            let n3 = /* @__PURE__ */ new Set(), r3 = t3.length, o3 = 0;
            for (; (o3 = e3.indexOf(t3, o3)) !== -1; ) n3.add(o3), o3 += r3;
            if (n3.size) {
              let l3 = 0, b3 = e3.length;
              for (; l3 < b3; ) e3[l3++] === "\\" && n3.delete(l3++);
            }
            return Array.from(n3).map((l3) => H3(l3, r3));
          }
          function N3(e3, t3, n3) {
            for (let r3 = t3.length - 1; r3 >= 0; r3--) {
              let o3 = t3[r3], l3 = 0, b3 = 0;
              if (e3.substr(o3[0] + o3[1], 1) === "@") {
                let $3 = e3.substr(o3[0] + o3[1] + 1).match(/^(\d+)/);
                $3 && (b3 = $3[1].length + 1, l3 = parseInt($3[1]) - 1);
              }
              e3 = e3.substring(0, o3[0]) + (typeof n3 == "function" ? n3(e3.substr(o3[0], o3[1]), l3) : n3) + e3.substring(o3[0] + o3[1] + b3);
            }
            return e3;
          }
          function H3(e3, t3) {
            return [
              e3,
              t3
            ];
          }
          let J3 = "$";
          var le2 = function(e3) {
            return e3.walk(re2), e3;
          };
          function re2(e3) {
            let t3 = Y3(e3);
            if (t3 && t3.value != null) {
              let n3 = t3.value;
              e3.name = ie2(e3.name, n3), e3.value = ie2(e3.value, n3), e3.attributes.forEach((r3) => {
                let o3 = e3.getAttribute(r3.name).clone();
                o3.name = ie2(r3.name, n3), o3.value = ie2(r3.value, n3), e3.replaceAttribute(r3.name, o3);
              });
            }
            return e3;
          }
          function Y3(e3) {
            for (; e3; ) {
              if (e3.repeat) return e3.repeat;
              e3 = e3.parent;
            }
          }
          function ie2(e3, t3) {
            if (typeof e3 == "string") {
              let n3 = Ce2(e3);
              return ce2(e3, n3, t3);
            }
            return e3;
          }
          function Ce2(e3) {
            return F3(e3 || "", J3).reduce((t3, n3) => {
              if (!/[#{]/.test(e3[n3[0] + 1] || "")) {
                let r3 = t3[t3.length - 1];
                r3 && r3[0] + r3[1] === n3[0] ? r3[1] += n3[1] : t3.push(n3);
              }
              return t3;
            }, []);
          }
          function ce2(e3, t3, n3) {
            let r3 = N3(e3, t3, (o3, l3) => {
              let b3 = String(n3 + l3);
              for (; b3.length < o3.length; ) b3 = "0" + b3;
              return b3;
            });
            return X3(r3);
          }
          function X3(e3) {
            let t3 = 0, n3 = "", r3 = e3.length;
            for (; t3 < r3; ) {
              let o3 = e3[t3++];
              n3 += o3 === "\\" ? e3[t3++] || "" : o3;
            }
            return n3;
          }
          let Fe2 = "$#", Pe2 = "|", je2 = /^((?:https?|ftp|file):\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/, Ue2 = /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/, tn2 = /^([a-z]+:)?\/\//i;
          function nn2(e3, t3) {
            return t3 = t3 || 1, e3.walk((n3) => {
              if (n3.repeat && n3.repeat.count === null) {
                for (let r3 = 0; r3 < t3; r3++) {
                  let o3 = n3.clone(true);
                  o3.repeat.implicit = true, o3.repeat.count = t3, o3.repeat.value = r3 + 1, o3.repeat.index = r3, n3.parent.insertBefore(o3, n3);
                }
                n3.remove();
              }
            }), e3;
          }
          function rn(e3, t3) {
            if (Array.isArray(t3) && t3.length) {
              let n3 = false;
              e3.walk((r3) => {
                r3.repeat && r3.repeat.implicit && (n3 = true, on2(r3, t3[r3.repeat.index]));
              }), n3 || pt2(dt2(e3), t3.join(`
`));
            }
            return e3;
          }
          function on2(e3, t3) {
            let n3 = ut2(e3, t3);
            return e3.walk((r3) => n3 |= ut2(r3, t3)), n3 || pt2(dt2(e3), t3), e3;
          }
          function ut2(e3, t3) {
            let n3 = {
              replaced: false
            };
            return e3.value = ft2(e3.value, t3, n3), e3.attributes.forEach((r3) => {
              r3.value && e3.setAttribute(r3.name, ft2(r3.value, t3, n3));
            }), n3.replaced;
          }
          function ft2(e3, t3, n3) {
            if (typeof e3 == "string") {
              let r3 = F3(e3, Fe2);
              r3.length && (n3 && (n3.replaced = true), e3 = N3(e3, r3, t3));
            }
            return e3;
          }
          function dt2(e3) {
            for (; e3.children.length; ) e3 = e3.children[e3.children.length - 1];
            return e3;
          }
          function pt2(e3, t3) {
            if (e3.value) {
              let n3 = F3(e3.value, Pe2);
              if (n3.length) {
                e3.value = N3(e3.value, n3, t3);
                return;
              }
            }
            (e3.name.toLowerCase() === "a" || e3.hasAttribute("href")) && (je2.test(t3) ? e3.setAttribute("href", (tn2.test(t3) ? "" : "http://") + t3) : Ue2.test(t3) && e3.setAttribute("href", "mailto:" + t3)), e3.value = t3;
          }
          let an2 = {
            element: "__",
            modifier: "_"
          }, sn2 = /^(-+)([a-z0-9]+[a-z0-9-]*)/i, ln2 = /^(_+)([a-z0-9]+[a-z0-9-]*)/i, cn2 = (e3) => /^[a-z]\-/i.test(e3), un2 = (e3) => /^[a-z]/i.test(e3);
          var fn2 = function(e3, t3) {
            t3 = Object.assign({}, an2, t3), e3.walk((r3) => dn2(r3));
            let n3 = mn2(e3);
            return e3.walk((r3) => pn2(r3, n3, t3)), e3;
          };
          function dn2(e3, t3) {
            let n3 = e3.classList.reduce((r3, o3) => {
              let l3 = o3.indexOf("_");
              return l3 > 0 && !o3.startsWith("-") ? (r3.add(o3.slice(0, l3)), r3.add(o3.slice(l3)), r3) : r3.add(o3);
            }, /* @__PURE__ */ new Set());
            n3.size && e3.setAttribute("class", Array.from(n3).join(" "));
          }
          function pn2(e3, t3, n3) {
            let r3 = e3.classList.reduce((l3, b3) => {
              let $3, q3, Ae2 = b3;
              for ((q3 = b3.match(sn2)) && ($3 = mt2(e3, t3, q3[1]) + n3.element + q3[2], l3.add($3), b3 = b3.slice(q3[0].length)); q3 = b3.match(ln2); ) $3 || ($3 = mt2(e3, t3, q3[1]), l3.add($3)), l3.add(`${$3}${n3.modifier}${q3[2]}`), b3 = b3.slice(q3[0].length);
              return b3 === Ae2 && l3.add(Ae2), l3;
            }, /* @__PURE__ */ new Set()), o3 = Array.from(r3).filter(Boolean);
            o3.length && e3.setAttribute("class", o3.join(" "));
          }
          function mn2(e3) {
            let t3 = /* @__PURE__ */ new Map();
            return e3.walk((n3) => {
              let r3 = n3.classList;
              r3.length && t3.set(n3, ht2(r3, cn2) || ht2(r3, un2) || t3.get(n3.parent));
            }), t3;
          }
          function mt2(e3, t3, n3) {
            let r3 = n3.length > 1 ? n3.length : 0;
            for (; e3.parent && e3.parent.parent && r3--; ) e3 = e3.parent;
            return t3.get(e3) || "";
          }
          function ht2(e3, t3) {
            return e3.filter(t3)[0];
          }
          var hn2 = function(e3) {
            return e3.walk((t3) => {
              gt2(t3, "class", "className"), gt2(t3, "for", "htmlFor");
            }), e3;
          };
          function gt2(e3, t3, n3) {
            let r3 = e3.getAttribute(t3);
            r3 && (r3.name = n3);
          }
          let gn2 = /^xsl:(variable|with\-param)$/i;
          var bn2 = function(e3) {
            return e3.walk((t3) => {
              gn2.test(t3.name || "") && (t3.children.length || t3.value) && t3.removeAttribute("select");
            }), e3;
          };
          let bt2 = {
            bem: fn2,
            jsx: hn2,
            xsl: bn2
          };
          var vn2 = function(e3, t3) {
            return Object.keys(t3 || {}).forEach((n3) => {
              if (n3 in bt2) {
                let r3 = typeof t3[n3] == "object" ? t3[n3] : null;
                e3 = e3.use(bt2[n3], r3);
              }
            }), e3;
          }, xn = function(e3, t3, n3) {
            return typeof t3 == "string" ? t3 = [
              t3
            ] : t3 && typeof t3 == "object" && !Array.isArray(t3) && (n3 = t3, t3 = null), e3.use(C3).use(nn2, Array.isArray(t3) ? t3.length : null).use(le2).use(rn, t3).use(vn2, n3);
          };
          function yn2(e3, t3) {
            return t3 = t3 || {}, e3.walk((n3) => wn2(n3, t3)), e3;
          }
          function wn2(e3, t3) {
            let n3 = e3.attributes;
            for (let r3 = 0, o3 = n3.length; r3 < o3; r3++) {
              let l3 = n3[r3];
              typeof l3.value == "string" && e3.setAttribute(l3.name, vt2(l3.value, t3));
            }
            return e3.value != null && (e3.value = vt2(e3.value, t3)), e3;
          }
          function vt2(e3, t3) {
            let n3 = kn(e3), r3 = 0, o3 = "";
            for (let l3 = 0, b3 = n3.variables.length; l3 < b3; l3++) {
              let $3 = n3.variables[l3], q3 = $3.name in t3 ? t3[$3.name] : $3.name;
              typeof q3 == "function" && (q3 = q3(n3.string, $3, r3 + $3.location)), o3 += n3.string.slice(r3, $3.location) + q3, r3 = $3.location + $3.length;
            }
            return o3 + n3.string.slice(r3);
          }
          function kn(e3) {
            let t3 = /\$\{([a-z][\w\-]*)\}/gi, r3 = [], o3 = /* @__PURE__ */ new Map(), l3;
            for (; l3 = t3.exec(e3); ) o3.set(l3.index, l3);
            if (o3.size) {
              let b3 = 0, $3 = 0, q3 = e3.length, Ae2 = "";
              for (; $3 < q3; ) {
                if (e3.charCodeAt($3) === 92 && o3.has($3 + 1)) {
                  let Ie2 = o3.get($3 + 1);
                  Ae2 += e3.slice(b3, $3) + Ie2[0], b3 = $3 = Ie2.index + Ie2[0].length, o3.delete($3 + 1);
                  continue;
                }
                $3++;
              }
              e3 = Ae2 + e3.slice(b3);
              let Ne2 = Array.from(o3.values());
              for (let Ie2 = 0, st2 = Ne2.length; Ie2 < st2; Ie2++) {
                let lt2 = Ne2[Ie2];
                r3.push({
                  name: lt2[1],
                  location: lt2.index,
                  length: lt2[0].length
                });
              }
            }
            return {
              string: e3,
              variables: r3
            };
          }
          let Cn = 36, $n2 = 58, An = 92, xt2 = 123, yt2 = 125;
          function We2(e3) {
            let t3 = new c3(e3), n3 = [], r3 = "", o3 = 0, l3 = 0, b3, $3;
            for (; !t3.eof(); ) b3 = t3.peek(), l3 = t3.pos, b3 === An ? (t3.next(), t3.next()) : ($3 = Sn2(t3, r3.length + l3 - o3)) ? (n3.push($3), r3 += t3.string.slice(o3, l3) + $3.placeholder, o3 = t3.pos) : t3.next();
            return new zn2(r3 + t3.string.slice(o3), n3);
          }
          function Tn2(e3, t3, n3) {
            n3 = n3 || En2;
            let r3 = t3.map((b3, $3) => ({
              order: $3,
              field: b3,
              end: b3.location + b3.length
            })).sort((b3, $3) => b3.end - $3.end || b3.order - $3.order), o3 = 0;
            return r3.map((b3) => {
              let $3 = e3.substr(b3.field.location, b3.field.length), q3 = e3.slice(o3, b3.field.location);
              return o3 = b3.end, q3 + n3(b3.field.index, $3);
            }).join("") + e3.slice(o3);
          }
          function En2(e3, t3) {
            return t3 ? `\${${e3}:${t3}}` : `\${${e3}}`;
          }
          function Sn2(e3, t3) {
            let n3 = e3.pos;
            if (e3.eat(Cn)) {
              let r3 = wt2(e3), o3 = "";
              if (r3 != null) return new kt2(r3, o3, t3);
              if (e3.eat(xt2) && (r3 = wt2(e3), r3 != null && (e3.eat($n2) && (o3 = On2(e3)), e3.eat(yt2)))) return new kt2(r3, o3, t3);
            }
            e3.pos = n3;
          }
          function On2(e3) {
            let t3, n3 = [];
            for (e3.start = e3.pos; !e3.eof(); ) {
              if (t3 = e3.peek(), t3 === xt2) n3.push(e3.pos);
              else if (t3 === yt2) {
                if (!n3.length) break;
                n3.pop();
              }
              e3.next();
            }
            if (n3.length) throw e3.error('Unable to find matching "}" for curly brace at ' + n3.pop());
            return e3.current();
          }
          function wt2(e3) {
            if (e3.start = e3.pos, e3.eatWhile(ae2)) return Number(e3.current());
          }
          class kt2 {
            constructor(t3, n3, r3) {
              this.index = t3, this.placeholder = n3, this.location = r3, this.length = this.placeholder.length;
            }
          }
          class zn2 {
            constructor(t3, n3) {
              this.string = t3, this.fields = n3;
            }
            mark(t3) {
              return Tn2(this.string, this.fields, t3);
            }
            toString() {
              return string;
            }
          }
          let jn2 = (e3) => e3;
          class In2 {
            constructor(t3, n3, r3) {
              typeof n3 == "object" && (r3 = n3, n3 = null), this.node = t3, this._fieldsRenderer = n3 || jn2, this.open = null, this.beforeOpen = "", this.afterOpen = "", this.close = null, this.beforeClose = "", this.afterClose = "", this.text = null, this.beforeText = "", this.afterText = "", this.indent = "", this.newline = "", r3 && Object.assign(this, r3);
            }
            clone() {
              return new this.constructor(this.node, this);
            }
            indentText(t3) {
              let n3 = _n2(t3);
              if (n3.length === 1) return t3;
              let r3 = !this.newline && !this.indent ? " " : this.newline;
              return n3.map((o3, l3) => l3 ? this.indent + o3 : o3).join(r3);
            }
            renderFields(t3) {
              return this._fieldsRenderer(t3);
            }
            toString(t3) {
              let n3 = this._wrap(this.open, this.beforeOpen, this.afterOpen), r3 = this._wrap(this.close, this.beforeClose, this.afterClose), o3 = this._wrap(this.text, this.beforeText, this.afterText);
              return n3 + o3 + (t3 ?? "") + r3;
            }
            _wrap(t3, n3, r3) {
              return n3 = n3 ?? "", r3 = r3 ?? "", t3 != null ? (t3 = n3 ? t3.replace(/^\s+/, "") : t3, t3 = r3 ? t3.replace(/\s+$/, "") : t3, n3 + this.indentText(t3) + r3) : "";
            }
          }
          function _n2(e3) {
            return (e3 || "").split(/\r\n|\r|\n/g);
          }
          let Fn2 = (e3, t3) => t3 || "";
          function Me2(e3, t3, n3) {
            typeof n3 > "u" && (n3 = t3, t3 = null), t3 = t3 || Fn2;
            let r3 = {
              index: 1
            }, o3 = (l3) => l3 == null ? t3(r3.index++) : Nn2(l3, r3).mark(t3);
            return Ct2(e3.children, n3, o3);
          }
          function Ct2(e3, t3, n3) {
            return e3.map((r3) => {
              let o3 = t3(new In2(r3, n3));
              return o3 ? o3.toString(Ct2(r3.children, t3, n3)) : "";
            }).join("");
          }
          function Nn2(e3, t3) {
            let n3 = typeof e3 == "object" ? e3 : We2(e3), r3 = -1;
            return n3.fields.forEach((o3) => {
              o3.index += t3.index, o3.index > r3 && (r3 = o3.index);
            }), r3 !== -1 && (t3.index = r3 + 1), n3;
          }
          let Ln2 = /^(.*?)([A-Z_]+)(.*?)$/, Pn2 = 91, qn2 = 93;
          function Ve2(e3, t3) {
            if (e3 == null) return e3;
            let n3 = [], r3 = (Ae2, Ne2, Ie2, st2) => t3[Ie2] != null ? Ne2 + t3[Ie2] + st2 : "", o3 = "", l3 = 0, b3 = 0, $3, q3;
            for (; b3 < e3.length; ) $3 = e3.charCodeAt(b3), $3 === Pn2 ? n3.push(b3) : $3 === qn2 && (q3 = n3.pop(), n3.length || (o3 += e3.slice(l3, q3) + e3.slice(q3 + 1, b3).replace(Ln2, r3), l3 = b3 + 1)), b3++;
            return o3 + e3.slice(l3);
          }
          function Ge2(e3) {
            return (e3 || "").split(/\r\n|\r|\n/g);
          }
          function $t2(e3) {
            return e3.parent.firstChild === e3;
          }
          function Xe2(e3) {
            return e3 && !e3.parent;
          }
          function At2(e3) {
            return e3.isTextOnly && !!e3.children.length;
          }
          function Ke2(e3) {
            let t3 = e3.node;
            if (At2(t3)) {
              let n3 = We2(t3.value), r3 = Bn2(n3);
              if (r3) {
                let o3 = Un2(n3, r3);
                e3.open = e3.renderFields(o3[0]), e3.close = e3.renderFields(o3[1]);
              } else e3.text = e3.renderFields(n3);
              return true;
            }
            return false;
          }
          function Bn2(e3) {
            return e3.fields.reduce((t3, n3) => !t3 || n3.index < t3.index ? n3 : t3, null);
          }
          function Un2(e3, t3) {
            let n3 = e3.fields.indexOf(t3), r3 = new e3.constructor(e3.string.slice(0, t3.location), e3.fields.slice(0, n3)), o3 = new e3.constructor(e3.string.slice(t3.location + t3.length), e3.fields.slice(n3 + 1));
            return [
              r3,
              o3
            ];
          }
          let Rn2 = {
            enabled: false,
            trigger: [
              "id",
              "class"
            ],
            before: "",
            after: `
<!-- /[#ID][.CLASS] -->`
          };
          function Mn2(e3, t3, n3) {
            return n3 = Object.assign({}, n3), n3.comment = Object.assign({}, Rn2, n3.comment), Me2(e3, n3.field, (r3) => {
              if (r3 = Dn2(r3, t3), !Ke2(r3)) {
                let o3 = r3.node;
                if (o3.name) {
                  let l3 = t3.name(o3.name), b3 = Kn2(r3, t3);
                  r3.open = `<${l3}${b3}${o3.selfClosing ? t3.selfClose() : ""}>`, o3.selfClosing || (r3.close = `</${l3}>`), Yn(r3, n3.comment);
                }
                (o3.value || !o3.children.length && !o3.selfClosing) && (r3.text = r3.renderFields(o3.value));
              }
              return r3;
            });
          }
          function Dn2(e3, t3) {
            let n3 = e3.node;
            if (Je2(n3, t3)) {
              e3.indent = t3.indent(Hn(n3, t3)), e3.newline = `
`;
              let r3 = e3.newline + e3.indent;
              (!Xe2(n3.parent) || !$t2(n3)) && (e3.beforeOpen = r3, n3.isTextOnly && (e3.beforeText = r3)), Vn2(n3, t3) && (n3.isTextOnly || (e3.beforeText = r3 + t3.indent(1)), e3.beforeClose = r3);
            }
            return e3;
          }
          function Je2(e3, t3) {
            return !t3.get("format") || e3.parent.isTextOnly && e3.parent.children.length === 1 && We2(e3.parent.value).fields.length ? false : He2(e3, t3) ? Wn2(e3, t3) : true;
          }
          function Wn2(e3, t3) {
            if (!He2(e3, t3)) return false;
            if (At2(e3)) return true;
            if (e3.childIndex === 0) {
              let n3 = e3;
              for (; n3 = n3.nextSibling; ) if (!He2(n3, t3)) return true;
            } else if (!He2(e3.previousSibling, t3)) return true;
            if (t3.get("inlineBreak")) {
              let n3 = 1, r3 = e3, o3 = e3;
              for (; et(r3 = r3.previousSibling, t3); ) n3++;
              for (; et(o3 = o3.nextSibling, t3); ) n3++;
              if (n3 >= t3.get("inlineBreak")) return true;
            }
            for (let n3 = 0, r3 = e3.children.length; n3 < r3; n3++) if (Je2(e3.children[n3], t3)) return true;
            return false;
          }
          function Vn2(e3, t3) {
            let n3 = (e3.name || "").toLowerCase();
            if (t3.get("formatForce").indexOf(n3) !== -1) return true;
            for (let r3 = 0; r3 < e3.children.length; r3++) if (Je2(e3.children[r3], t3)) return true;
            return false;
          }
          function Kn2(e3, t3) {
            return e3.node.attributes.map((r3) => {
              if (r3.options.implied && r3.value == null) return null;
              let o3 = t3.attribute(r3.name), l3 = null;
              if (r3.options.boolean || t3.get("booleanAttributes").indexOf(o3.toLowerCase()) !== -1) {
                if (t3.get("compactBooleanAttributes") && r3.value == null) return ` ${o3}`;
                r3.value == null && (l3 = o3);
              }
              return l3 == null && (l3 = e3.renderFields(r3.value)), r3.options.before && r3.options.after ? ` ${o3}=${r3.options.before + l3 + r3.options.after}` : ` ${o3}=${t3.quote(l3)}`;
            }).join("");
          }
          function He2(e3, t3) {
            return e3 && e3.isTextOnly || et(e3, t3);
          }
          function et(e3, t3) {
            return e3 && t3.isInline(e3);
          }
          function Hn(e3, t3) {
            let n3 = t3.get("formatSkip") || [], r3 = e3.parent.isTextOnly ? -2 : -1, o3 = e3;
            for (; o3 = o3.parent; ) n3.indexOf((o3.name || "").toLowerCase()) === -1 && r3++;
            return r3 < 0 ? 0 : r3;
          }
          function Yn(e3, t3) {
            let n3 = e3.node;
            if (!t3.enabled || !t3.trigger || !n3.name) return;
            let r3 = e3.node.attributes.reduce((o3, l3) => (l3.name && l3.value != null && (o3[l3.name.toUpperCase().replace(/-/g, "_")] = l3.value), o3), {});
            for (let o3 = 0, l3 = t3.trigger.length; o3 < l3; o3++) if (t3.trigger[o3].toUpperCase() in r3) {
              e3.open = Ve2(t3.before, r3) + e3.open, e3.close && (e3.close += Ve2(t3.after, r3));
              break;
            }
          }
          let Qn = /^id$/i, Zn = /^class$/i, Tt2 = {
            primary: (e3) => e3.join(""),
            secondary: (e3) => e3.map((t3) => t3.isBoolean ? t3.name : `${t3.name}=${t3.value}`).join(", ")
          }, Gn = {
            open: null,
            close: null,
            omitName: /^div$/i,
            attributes: Tt2
          };
          function tt2(e3, t3, n3) {
            n3 = Object.assign({}, Gn, n3);
            let r3 = e3.node;
            if (e3.indent = t3.indent(Jn(r3)), e3.newline = `
`, (!Xe2(r3.parent) || !$t2(r3)) && (e3.beforeOpen = e3.newline + e3.indent), r3.name) {
              let o3 = Object.assign({
                NAME: t3.name(r3.name),
                SELF_CLOSE: r3.selfClosing ? n3.selfClose : null
              }, Xn(e3, t3, n3.attributes));
              n3.omitName && n3.omitName.test(o3.NAME) && o3.PRIMARY_ATTRS && (o3.NAME = null), n3.open != null && (e3.open = Ve2(n3.open, o3)), n3.close != null && (e3.close = Ve2(n3.close, o3));
            }
            return e3;
          }
          function Xn(e3, t3, n3) {
            n3 = Object.assign({}, Tt2, n3);
            let r3 = [], o3 = [];
            return e3.node.attributes.forEach((b3) => {
              if (b3.options.implied && b3.value == null) return null;
              let $3 = t3.attribute(b3.name), q3 = e3.renderFields(b3.value);
              if (Qn.test($3)) q3 && r3.push(`#${q3}`);
              else if (Zn.test($3)) q3 && r3.push(`.${q3.replace(/\s+/g, ".")}`);
              else {
                let Ae2 = b3.value == null && (b3.options.boolean || t3.get("booleanAttributes").indexOf($3.toLowerCase()) !== -1);
                o3.push({
                  name: $3,
                  value: q3,
                  isBoolean: Ae2
                });
              }
            }), {
              PRIMARY_ATTRS: n3.primary(r3) || null,
              SECONDARY_ATTRS: n3.secondary(o3) || null
            };
          }
          function Jn(e3, t3) {
            let n3 = e3.parent.isTextOnly ? -2 : -1, r3 = e3;
            for (; r3 = r3.parent; ) n3++;
            return n3 < 0 ? 0 : n3;
          }
          let Et2 = /\n|\r/;
          function er2(e3, t3, n3) {
            n3 = n3 || {};
            let r3 = {
              open: "[%NAME][PRIMARY_ATTRS][(SECONDARY_ATTRS)][SELF_CLOSE]",
              selfClose: "/",
              attributes: {
                secondary(o3) {
                  return o3.map((l3) => l3.isBoolean ? `${l3.name}${t3.get("compactBooleanAttributes") ? "" : "=true"}` : `${l3.name}=${t3.quote(l3.value)}`).join(" ");
                }
              }
            };
            return Me2(e3, n3.field, (o3) => {
              if (o3 = tt2(o3, t3, r3), o3 = tr2(o3, t3), !Ke2(o3)) {
                let l3 = o3.node;
                (l3.value || !l3.children.length && !l3.selfClosing) && (o3.text = o3.renderFields(nr(l3, t3)));
              }
              return o3;
            });
          }
          function tr2(e3, t3) {
            let n3 = e3.node;
            return !n3.isTextOnly && n3.value && (e3.beforeText = Et2.test(n3.value) ? e3.newline + e3.indent + t3.indent(1) : " "), e3;
          }
          function nr(e3, t3) {
            if (e3.value != null && Et2.test(e3.value)) {
              let n3 = Ge2(e3.value), r3 = t3.indent(1), o3 = n3.reduce((l3, b3) => Math.max(l3, b3.length), 0);
              return n3.map((l3, b3) => `${b3 ? r3 : ""}${rr2(l3, o3)} |`).join(`
`);
            }
            return e3.value;
          }
          function rr2(e3, t3) {
            for (; e3.length < t3; ) e3 += " ";
            return e3;
          }
          let St2 = /\n|\r/, nt2 = {
            none: "[ SECONDARY_ATTRS]",
            round: "[(SECONDARY_ATTRS)]",
            curly: "[{SECONDARY_ATTRS}]",
            square: "[[SECONDARY_ATTRS]"
          };
          function ir2(e3, t3, n3) {
            n3 = n3 || {};
            let r3 = n3.attributeWrap && nt2[n3.attributeWrap] || nt2.none, o3 = r3 === nt2.none ? (b3) => `${b3.name}=true` : (b3) => b3.name, l3 = {
              open: `[NAME][PRIMARY_ATTRS]${r3}[SELF_CLOSE]`,
              selfClose: "/",
              attributes: {
                secondary(b3) {
                  return b3.map(($3) => $3.isBoolean ? o3($3) : `${$3.name}=${t3.quote($3.value)}`).join(" ");
                }
              }
            };
            return Me2(e3, n3.field, (b3, $3) => {
              if (b3 = tt2(b3, t3, l3), b3 = or2(b3, t3), !Ke2(b3)) {
                let q3 = b3.node;
                (q3.value || !q3.children.length && !q3.selfClosing) && (b3.text = b3.renderFields(ar2(q3, t3)));
              }
              return b3;
            });
          }
          function or2(e3, t3) {
            let n3 = e3.node, r3 = n3.parent;
            return t3.get("inlineBreak") === 0 && sr2(n3, t3) && !Xe2(r3) && r3.value == null && r3.children.length === 1 && (e3.beforeOpen = ": "), !n3.isTextOnly && n3.value && (e3.beforeText = St2.test(n3.value) ? e3.newline + e3.indent + t3.indent(1) : " "), e3;
          }
          function ar2(e3, t3) {
            if (e3.value != null && St2.test(e3.value)) {
              let n3 = t3.indent(1);
              return Ge2(e3.value).map((r3, o3) => `${n3}${o3 ? " " : "|"} ${r3}`).join(`
`);
            }
            return e3.value;
          }
          function sr2(e3, t3) {
            return e3 && (e3.isTextOnly || t3.isInline(e3));
          }
          let Ot2 = /\n|\r/;
          function lr2(e3, t3, n3) {
            n3 = n3 || {};
            let r3 = {
              open: "[NAME][PRIMARY_ATTRS][(SECONDARY_ATTRS)]",
              attributes: {
                secondary(o3) {
                  return o3.map((l3) => l3.isBoolean ? l3.name : `${l3.name}=${t3.quote(l3.value)}`).join(", ");
                }
              }
            };
            return Me2(e3, n3.field, (o3) => {
              if (o3 = tt2(o3, t3, r3), o3 = cr2(o3, t3), !Ke2(o3)) {
                let l3 = o3.node;
                (l3.value || !l3.children.length && !l3.selfClosing) && (o3.text = o3.renderFields(ur2(l3, t3)));
              }
              return o3;
            });
          }
          function cr2(e3, t3) {
            let n3 = e3.node;
            return !n3.isTextOnly && n3.value && (e3.beforeText = Ot2.test(n3.value) ? e3.newline + e3.indent + t3.indent(1) : " "), e3;
          }
          function ur2(e3, t3) {
            if (e3.value != null && Ot2.test(e3.value)) {
              let n3 = t3.indent(1);
              return Ge2(e3.value).map((r3) => `${n3}| ${r3}`).join(`
`);
            }
            return e3.value;
          }
          let zt2 = {
            html: Mn2,
            haml: er2,
            slim: ir2,
            pug: lr2
          };
          var fr2 = function(e3, t3, n3, r3) {
            return typeof n3 == "object" && (r3 = n3, n3 = null), dr2(n3) || (n3 = "html"), zt2[n3](e3, t3, r3);
          };
          function dr2(e3) {
            return !!e3 && e3 in zt2;
          }
          function pr2(e3, t3) {
            return t3 = t3 || {}, typeof e3 == "string" && (e3 = jt2(e3, t3)), fr2(e3, t3.profile, t3.syntax, t3.format);
          }
          function jt2(e3, t3) {
            return g3(e3).use(m3, t3.snippets).use(yn2, t3.variables).use(xn, t3.text, t3.addons);
          }
          class It2 {
            constructor() {
              this.type = "css-value", this.value = [];
            }
            get size() {
              return this.value.length;
            }
            add(t3) {
              this.value.push(t3);
            }
            has(t3) {
              return this.value.indexOf(t3) !== -1;
            }
            toString() {
              return this.value.join(" ");
            }
          }
          let mr2 = 35, hr2 = 46;
          var _t2 = function(e3) {
            if (e3.peek() === mr2) {
              e3.start = e3.pos, e3.next(), e3.eat(116) || e3.eatWhile(br2);
              let t3 = e3.current();
              if (e3.start = e3.pos, e3.eat(hr2) && !e3.eatWhile(ae2)) throw e3.error("Unexpected character for alpha value of color");
              return new gr2(t3, e3.current());
            }
          };
          class gr2 {
            constructor(t3, n3) {
              this.type = "color", this.raw = t3, this.alpha = Number(n3 != null && n3 !== "" ? n3 : 1), t3 = t3.slice(1);
              let r3 = 0, o3 = 0, l3 = 0;
              if (t3 === "t") this.alpha = 0;
              else switch (t3.length) {
                case 0:
                  break;
                case 1:
                  r3 = o3 = l3 = t3 + t3;
                  break;
                case 2:
                  r3 = o3 = l3 = t3;
                  break;
                case 3:
                  r3 = t3[0] + t3[0], o3 = t3[1] + t3[1], l3 = t3[2] + t3[2];
                  break;
                default:
                  t3 += t3, r3 = t3.slice(0, 2), o3 = t3.slice(2, 4), l3 = t3.slice(4, 6);
              }
              this.r = parseInt(r3, 16), this.g = parseInt(o3, 16), this.b = parseInt(l3, 16);
            }
            toHex(t3) {
              let n3 = t3 && rt2(this.r) && rt2(this.g) && rt2(this.b) ? vr2 : xr2;
              return "#" + n3(this.r) + n3(this.g) + n3(this.b);
            }
            toRGB() {
              let t3 = [
                this.r,
                this.g,
                this.b
              ];
              return this.alpha !== 1 && t3.push(this.alpha.toFixed(8).replace(/\.?0+$/, "")), `${t3.length === 3 ? "rgb" : "rgba"}(${t3.join(", ")})`;
            }
            toString(t3) {
              return !this.r && !this.g && !this.b && !this.alpha ? "transparent" : this.alpha === 1 ? this.toHex(t3) : this.toRGB();
            }
          }
          function br2(e3) {
            return ae2(e3) || Ee2(e3, 65, 70);
          }
          function rt2(e3) {
            return !(e3 % 17);
          }
          function vr2(e3) {
            return (e3 >> 4).toString(16);
          }
          function xr2(e3) {
            return yr2(e3.toString(16), 2);
          }
          function yr2(e3, t3) {
            for (; e3.length < t3; ) e3 = "0" + e3;
            return e3;
          }
          function Ft2(e3) {
            return ae2(e3) || Ye2(e3);
          }
          function Ye2(e3) {
            return e3 === 95 || Ee2(e3);
          }
          let wr2 = 37, Nt2 = 46, kr2 = 45;
          var Lt2 = function(e3) {
            if (e3.start = e3.pos, $r2(e3)) {
              let t3 = e3.current();
              return e3.start = e3.pos, e3.eat(wr2) || e3.eatWhile(Ye2), new Cr2(t3, e3.current());
            }
          };
          class Cr2 {
            constructor(t3, n3) {
              this.type = "numeric", this.value = Number(t3), this.unit = n3 || "";
            }
            toString() {
              return `${this.value}${this.unit}`;
            }
          }
          function $r2(e3) {
            let t3 = e3.pos, n3 = e3.eat(kr2), r3 = false, o3 = false, l3;
            for (; !e3.eof() && (l3 = e3.peek(), !(l3 === Nt2 ? r3 : !ae2(l3))); ) o3 = true, l3 === Nt2 && (r3 = true), e3.next();
            return n3 && !o3 && (e3.pos = t3), t3 !== e3.pos;
          }
          let Ar2 = 36, Tr2 = 45, Er2 = 64;
          var Pt2 = function(e3, t3) {
            return e3.start = e3.pos, e3.eat(Ar2) || e3.eat(Er2) ? e3.eatWhile(zr2) : t3 ? e3.eatWhile(Ye2) : e3.eatWhile(Or2), e3.start !== e3.pos ? new Sr2(e3.current()) : null;
          };
          class Sr2 {
            constructor(t3) {
              this.type = "keyword", this.value = t3;
            }
            toString() {
              return this.value;
            }
          }
          function Or2(e3) {
            return Ft2(e3) || e3 === Tr2;
          }
          function zr2(e3) {
            return e3 === 45 || Ft2(e3);
          }
          let jr2 = {
            throws: true
          };
          var Ir2 = function(e3) {
            if (he2(e3, jr2)) return new _r2(e3.current());
          };
          class _r2 {
            constructor(t3) {
              this.type = "string", this.value = t3;
            }
            toString() {
              return this.value;
            }
          }
          let Fr2 = 40, Nr2 = 41, Lr2 = 44;
          function qt2(e3) {
            if (!e3.eat(Fr2)) return null;
            let r3, o3 = [];
            for (; !e3.eof(); ) if (r3 = Pr2(e3)) o3.push(r3);
            else {
              if (e3.eatWhile(ge2), e3.eat(Nr2)) break;
              if (!e3.eat(Lr2)) throw e3.error("Expected , or )");
            }
            return o3;
          }
          function Pr2(e3) {
            let t3 = new It2(), n3;
            for (; !e3.eof() && (e3.eatWhile(ge2), n3 = Lt2(e3) || _t2(e3) || Ir2(e3) || qr2(e3), !!n3); ) t3.add(n3);
            return t3.size ? t3 : null;
          }
          function qr2(e3) {
            let t3 = Pt2(e3);
            if (t3) {
              let n3 = qt2(e3);
              return n3 ? new Br2(t3.toString(), n3) : t3;
            }
          }
          class Br2 {
            constructor(t3, n3) {
              this.type = "function", this.name = t3, this.args = n3 || [];
            }
            toString() {
              return `${this.name}(${this.args.join(", ")})`;
            }
          }
          let Bt2 = 33, Ur2 = 36, Rr2 = 43, Ut2 = 45, Mr2 = 58, Dr2 = 64;
          var Wr2 = function(e3) {
            let t3 = new ee2(), n3 = new c3(e3);
            for (; !n3.eof(); ) {
              let r3 = new ee2(Vr2(n3));
              r3.value = Kr(n3);
              let o3 = qt2(n3);
              if (o3) for (let l3 = 0; l3 < o3.length; l3++) r3.setAttribute(String(l3), o3[l3]);
              if (n3.eat(Bt2) && r3.value.add("!"), t3.appendChild(r3), !n3.eat(Rr2)) break;
            }
            if (!n3.eof()) throw n3.error("Unexpected character");
            return t3;
          };
          function Vr2(e3) {
            return e3.start = e3.pos, e3.eatWhile(Yr2), e3.eatWhile(Hr2), e3.start !== e3.pos ? e3.current() : null;
          }
          function Kr(e3) {
            let t3 = new It2(), n3;
            for (; !e3.eof() && (e3.eat(Mr2), (n3 = Lt2(e3) || _t2(e3)) ? n3.unit || e3.eat(Ut2) : (e3.eat(Ut2), n3 = Pt2(e3, true)), !!n3); ) t3.add(n3);
            return t3;
          }
          function Hr2(e3) {
            return Ye2(e3);
          }
          function Yr2(e3) {
            return e3 === Dr2 || e3 === Ur2 || e3 === Bt2;
          }
          let Qr2 = 45;
          var Zr2 = function(e3, t3) {
            if (e3 = e3.toLowerCase(), t3 = t3.toLowerCase(), e3 === t3) return 1;
            if (!t3 || e3.charCodeAt(0) !== t3.charCodeAt(0)) return 0;
            let n3 = e3.length, r3 = t3.length, o3 = 1, l3 = 1, b3 = r3, $3, q3, Ae2, Ne2;
            for (; o3 < n3; ) {
              for ($3 = e3.charCodeAt(o3), Ae2 = false, Ne2 = false; l3 < r3; ) {
                if (q3 = t3.charCodeAt(l3), $3 === q3) {
                  Ae2 = true, b3 += (r3 - l3) * (Ne2 ? 2 : 1);
                  break;
                }
                Ne2 = q3 === Qr2, l3++;
              }
              if (!Ae2) break;
              o3++;
            }
            return b3 && b3 * (o3 / n3) / Gr2(r3);
          };
          function Gr2(e3) {
            return e3 * (e3 + 1) / 2;
          }
          let Xr2 = /^([a-z\-]+)(?:\s*:\s*([^\n\r]+))?$/, Jr = 45;
          var ei2 = function(e3) {
            return ni2(e3.map((t3) => new ti2(t3.key, t3.value)));
          };
          class ti2 {
            constructor(t3, n3) {
              this.key = t3, this.value = n3, this.property = null;
              let r3 = n3 && n3.match(Xr2);
              r3 && (this.property = r3[1], this.value = r3[2]), this.dependencies = [];
            }
            addDependency(t3) {
              this.dependencies.push(t3);
            }
            get defaulValue() {
              return this.value != null ? Rt2(this.value)[0] : null;
            }
            keywords() {
              let t3 = [], n3 = /* @__PURE__ */ new Set(), r3 = 0, o3, l3;
              for (this.property && t3.push(this); r3 < t3.length; ) if (o3 = t3[r3++], o3.value) {
                l3 = Rt2(o3.value).filter(ii2);
                for (let b3 = 0; b3 < l3.length; b3++) n3.add(l3[b3].trim());
                for (let b3 = 0, $3 = o3.dependencies; b3 < $3.length; b3++) t3.indexOf($3[b3]) === -1 && t3.push($3[b3]);
              }
              return Array.from(n3);
            }
          }
          function ni2(e3) {
            e3 = e3.sort(ri2);
            let t3 = [];
            for (let n3 = 0, r3, o3; n3 < e3.length; n3++) if (r3 = e3[n3], !!r3.property) {
              for (; t3.length; ) {
                if (o3 = t3[t3.length - 1], r3.property.indexOf(o3.property) === 0 && r3.property.charCodeAt(o3.property.length) === Jr) {
                  o3.addDependency(r3), t3.push(r3);
                  break;
                }
                t3.pop();
              }
              t3.length || t3.push(r3);
            }
            return e3;
          }
          function ri2(e3, t3) {
            return e3.key === t3.key ? 0 : e3.key < t3.key ? -1 : 1;
          }
          function ii2(e3) {
            return /^\s*[\w\-]+/.test(e3);
          }
          function Rt2(e3) {
            return String(e3).split("|");
          }
          let oi2 = [
            "auto",
            "inherit",
            "unset"
          ], ai2 = [
            "z-index",
            "line-height",
            "opacity",
            "font-weight",
            "zoom",
            "flex",
            "flex-grow",
            "flex-shrink"
          ], Qe2 = {
            intUnit: "px",
            floatUnit: "em",
            unitAliases: {
              e: "em",
              p: "%",
              x: "ex",
              r: "rem"
            },
            fuzzySearchMinScore: 0
          };
          var si2 = function(e3, t3, n3) {
            let r3 = li2(t3);
            return n3 = {
              intUnit: n3 && n3.intUnit || Qe2.intUnit,
              floatUnit: n3 && n3.floatUnit || Qe2.floatUnit,
              unitAliases: Object.assign({}, Qe2.unitAliases, n3 && n3.unitAliases),
              fuzzySearchMinScore: n3 && n3.fuzzySearchMinScore || Qe2.fuzzySearchMinScore
            }, e3.walk((o3) => ci2(o3, r3, n3)), e3;
          };
          function li2(e3) {
            return ei2(e3.all({
              type: "string"
            }));
          }
          function ci2(e3, t3, n3) {
            let r3 = Ze2(e3.name, t3, "key", n3.fuzzySearchMinScore);
            return r3 ? r3.property ? ui2(e3, r3, n3) : fi2(e3, r3) : e3.name === "!" ? Mt2(e3, "!important") : e3;
          }
          function ui2(e3, t3, n3) {
            let r3 = e3.name;
            if (e3.name = t3.property, e3.value && typeof e3.value == "object") {
              let o3 = t3.keywords();
              if (e3.value.size) for (let l3 = 0, b3; l3 < e3.value.value.length; l3++) b3 = e3.value.value[l3], b3 === "!" ? b3 = `${l3 ? "" : "${1} "}!important` : mi2(b3) ? b3 = Ze2(b3.value, o3) || Ze2(b3.value, oi2) || b3 : hi2(b3) && (b3 = gi2(e3.name, b3, n3)), e3.value.value[l3] = b3;
              else {
                let l3 = Ze2(pi2(r3, t3.key), o3);
                l3 || (l3 = t3.defaulValue, l3 && l3.indexOf("${") === -1 && (l3 = `\${1:${l3}}`)), l3 && e3.value.add(l3);
              }
            }
            return e3;
          }
          function fi2(e3, t3) {
            return Mt2(e3, t3.value);
          }
          function Mt2(e3, t3) {
            return e3.name = null, e3.value = t3, e3;
          }
          function Ze2(e3, t3, n3, r3) {
            if (!e3) return null;
            let o3 = null, l3 = 0;
            r3 = r3 || 0;
            for (let b3 = 0, $3; b3 < t3.length; b3++) {
              $3 = t3[b3];
              let q3 = Zr2(e3, di2($3, n3));
              if (q3 === 1) return $3;
              q3 && q3 >= l3 && (l3 = q3, o3 = $3);
            }
            return l3 >= r3 ? o3 : null;
          }
          function di2(e3, t3) {
            let n3 = e3 && typeof e3 == "object" ? e3[t3] : e3, r3 = (n3 || "").match(/^[\w-@]+/);
            return r3 ? r3[0] : n3;
          }
          function pi2(e3, t3) {
            for (let n3 = 0, r3 = 0; n3 < e3.length; n3++) {
              if (r3 = t3.indexOf(e3[n3], r3), r3 === -1) return e3.slice(n3);
              r3++;
            }
            return "";
          }
          function mi2(e3) {
            return Dt2(e3, "keyword");
          }
          function hi2(e3) {
            return Dt2(e3, "numeric");
          }
          function Dt2(e3, t3) {
            return e3 && typeof e3 == "object" && e3.type === t3;
          }
          function gi2(e3, t3, n3) {
            return t3.unit ? t3.unit = n3.unitAliases[t3.unit] || t3.unit : t3.value !== 0 && ai2.indexOf(e3) === -1 && (t3.unit = t3.value === (t3.value | 0) ? n3.intUnit : n3.floatUnit), t3;
          }
          let bi2 = {
            shortHex: true,
            format: {
              between: ": ",
              after: ";"
            }
          };
          function vi2(e3, t3, n3) {
            return n3 = Object.assign({}, bi2, n3), Me2(e3, n3.field, (r3) => {
              let o3 = r3.node, l3 = String(o3.value || "");
              if (o3.attributes.length) {
                let b3 = o3.attributes.map(($3) => yi2($3, n3));
                l3 = xi2(l3, b3);
              }
              return r3.open = o3.name && t3.name(o3.name), r3.afterOpen = n3.format.between, r3.text = r3.renderFields(l3 || null), r3.open && (!r3.text || !r3.text.endsWith(";")) && (r3.afterText = n3.format.after), t3.get("format") && (r3.newline = `
`, e3.lastChild !== o3 && (r3.afterText += r3.newline)), r3;
            });
          }
          function xi2(e3, t3) {
            let n3 = We2(e3), r3 = n3.fields.length;
            if (r3) for (t3 = t3.slice(), t3.length > r3 && (t3 = t3.slice(0, r3 - 1).concat(t3.slice(r3 - 1).join(", "))); t3.length; ) {
              let o3 = t3.shift(), l3 = n3.fields.shift(), b3 = o3.length - l3.length;
              n3.string = n3.string.slice(0, l3.location) + o3 + n3.string.slice(l3.location + l3.length);
              for (let $3 = 0, q3 = n3.fields.length; $3 < q3; $3++) n3.fields[$3].location += b3;
            }
            return n3;
          }
          function yi2(e3, t3) {
            return e3.value && typeof e3.value == "object" && e3.value.type === "css-value" ? e3.value.value.map((n3) => n3 && typeof n3 == "object" ? n3.type === "color" ? n3.toString(t3.shortHex) : n3.toString() : String(n3)).join(" ") : e3.value != null ? String(e3.value) : "";
          }
          let it2 = {
            css: {
              between: ": ",
              after: ";"
            },
            scss: "css",
            less: "css",
            sass: {
              between: ": ",
              after: ""
            },
            stylus: {
              between: " ",
              after: ""
            }
          };
          var wi2 = function(e3, t3, n3, r3) {
            return typeof n3 == "object" && (r3 = n3, n3 = null), ki2(n3) || (n3 = "css"), r3 = Object.assign({}, r3, {
              format: Ci2(n3, r3)
            }), vi2(e3, t3, r3);
          };
          function ki2(e3) {
            return !!e3 && e3 in it2;
          }
          function Ci2(e3, t3) {
            let n3 = it2[e3];
            return typeof n3 == "string" && (n3 = it2[n3]), Object.assign({}, n3, t3 && t3.stylesheet);
          }
          function $i2(e3, t3) {
            return t3 = t3 || {}, typeof e3 == "string" && (e3 = Wt2(e3, t3)), wi2(e3, t3.profile, t3.syntax, t3.format);
          }
          function Wt2(e3, t3) {
            return typeof e3 == "string" && (e3 = Wr2(e3)), e3.use(si2, t3.snippets, t3.format ? t3.format.stylesheet : {});
          }
          var Ai2 = {
            a: "a[href]",
            "a:blank": "a[href='http://${0}' target='_blank' rel='noopener noreferrer']",
            "a:link": "a[href='http://${0}']",
            "a:mail": "a[href='mailto:${0}']",
            "a:tel": "a[href='tel:+${0}']",
            abbr: "abbr[title]",
            "acr|acronym": "acronym[title]",
            base: "base[href]/",
            basefont: "basefont/",
            br: "br/",
            frame: "frame/",
            hr: "hr/",
            bdo: "bdo[dir]",
            "bdo:r": "bdo[dir=rtl]",
            "bdo:l": "bdo[dir=ltr]",
            col: "col/",
            link: "link[rel=stylesheet href]/",
            "link:css": "link[href='${1:style}.css']",
            "link:print": "link[href='${1:print}.css' media=print]",
            "link:favicon": "link[rel='shortcut icon' type=image/x-icon href='${1:favicon.ico}']",
            "link:mf|link:manifest": "link[rel='manifest' href='${1:manifest.json}']",
            "link:touch": "link[rel=apple-touch-icon href='${1:favicon.png}']",
            "link:rss": "link[rel=alternate type=application/rss+xml title=RSS href='${1:rss.xml}']",
            "link:atom": "link[rel=alternate type=application/atom+xml title=Atom href='${1:atom.xml}']",
            "link:im|link:import": "link[rel=import href='${1:component}.html']",
            meta: "meta/",
            "meta:utf": "meta[http-equiv=Content-Type content='text/html;charset=UTF-8']",
            "meta:vp": "meta[name=viewport content='width=${1:device-width}, initial-scale=${2:1.0}']",
            "meta:compat": "meta[http-equiv=X-UA-Compatible content='${1:IE=7}']",
            "meta:edge": "meta:compat[content='${1:ie=edge}']",
            "meta:redirect": "meta[http-equiv=refresh content='0; url=${1:http://example.com}']",
            "meta:kw": "meta[name=keywords content]",
            "meta:desc": "meta[name=description content]",
            style: "style",
            script: "script",
            "script:src": "script[src]",
            img: "img[src alt]/",
            "img:s|img:srcset": "img[srcset src alt]",
            "img:z|img:sizes": "img[sizes srcset src alt]",
            picture: "picture",
            "src|source": "source/",
            "src:sc|source:src": "source[src type]",
            "src:s|source:srcset": "source[srcset]",
            "src:t|source:type": "source[srcset type='${1:image/}']",
            "src:z|source:sizes": "source[sizes srcset]",
            "src:m|source:media": "source[media='(${1:min-width: })' srcset]",
            "src:mt|source:media:type": "source:media[type='${2:image/}']",
            "src:mz|source:media:sizes": "source:media[sizes srcset]",
            "src:zt|source:sizes:type": "source[sizes srcset type='${1:image/}']",
            iframe: "iframe[src frameborder=0]",
            embed: "embed[src type]/",
            object: "object[data type]",
            param: "param[name value]/",
            map: "map[name]",
            area: "area[shape coords href alt]/",
            "area:d": "area[shape=default]",
            "area:c": "area[shape=circle]",
            "area:r": "area[shape=rect]",
            "area:p": "area[shape=poly]",
            form: "form[action]",
            "form:get": "form[method=get]",
            "form:post": "form[method=post]",
            label: "label[for]",
            input: "input[type=${1:text}]/",
            inp: "input[name=${1} id=${1}]",
            "input:h|input:hidden": "input[type=hidden name]",
            "input:t|input:text": "inp[type=text]",
            "input:search": "inp[type=search]",
            "input:email": "inp[type=email]",
            "input:url": "inp[type=url]",
            "input:p|input:password": "inp[type=password]",
            "input:datetime": "inp[type=datetime]",
            "input:date": "inp[type=date]",
            "input:datetime-local": "inp[type=datetime-local]",
            "input:month": "inp[type=month]",
            "input:week": "inp[type=week]",
            "input:time": "inp[type=time]",
            "input:tel": "inp[type=tel]",
            "input:number": "inp[type=number]",
            "input:color": "inp[type=color]",
            "input:c|input:checkbox": "inp[type=checkbox]",
            "input:r|input:radio": "inp[type=radio]",
            "input:range": "inp[type=range]",
            "input:f|input:file": "inp[type=file]",
            "input:s|input:submit": "input[type=submit value]",
            "input:i|input:image": "input[type=image src alt]",
            "input:b|input:button": "input[type=button value]",
            "input:reset": "input:button[type=reset]",
            isindex: "isindex/",
            select: "select[name=${1} id=${1}]",
            "select:d|select:disabled": "select[disabled.]",
            "opt|option": "option[value]",
            textarea: "textarea[name=${1} id=${1} cols=${2:30} rows=${3:10}]",
            marquee: "marquee[behavior direction]",
            "menu:c|menu:context": "menu[type=context]",
            "menu:t|menu:toolbar": "menu[type=toolbar]",
            video: "video[src]",
            audio: "audio[src]",
            "html:xml": "html[xmlns=http://www.w3.org/1999/xhtml]",
            keygen: "keygen/",
            command: "command/",
            "btn:s|button:s|button:submit": "button[type=submit]",
            "btn:r|button:r|button:reset": "button[type=reset]",
            "btn:d|button:d|button:disabled": "button[disabled.]",
            "fst:d|fset:d|fieldset:d|fieldset:disabled": "fieldset[disabled.]",
            bq: "blockquote",
            fig: "figure",
            figc: "figcaption",
            pic: "picture",
            ifr: "iframe",
            emb: "embed",
            obj: "object",
            cap: "caption",
            colg: "colgroup",
            fst: "fieldset",
            btn: "button",
            optg: "optgroup",
            tarea: "textarea",
            leg: "legend",
            sect: "section",
            art: "article",
            hdr: "header",
            ftr: "footer",
            adr: "address",
            dlg: "dialog",
            str: "strong",
            prog: "progress",
            mn: "main",
            tem: "template",
            fset: "fieldset",
            datag: "datagrid",
            datal: "datalist",
            kg: "keygen",
            out: "output",
            det: "details",
            cmd: "command",
            "ri:d|ri:dpr": "img:s",
            "ri:v|ri:viewport": "img:z",
            "ri:a|ri:art": "pic>src:m+img",
            "ri:t|ri:type": "pic>src:t+img",
            "!!!": "{<!DOCTYPE html>}",
            doc: "html[lang=${lang}]>(head>meta[charset=${charset}]+meta:vp+title{${1:Document}})+body",
            "!|html:5": "!!!+doc",
            c: "{<!-- ${0} -->}",
            "cc:ie": "{<!--[if IE]>${0}<![endif]-->}",
            "cc:noie": "{<!--[if !IE]><!-->${0}<!--<![endif]-->}"
          }, Ti2 = {
            "@f": `@font-face {
	font-family: \${1};
	src: url(\${1});
}`,
            "@ff": "@font-face {\n	font-family: '${1:FontName}';\n	src: url('${2:FileName}.eot');\n	src: url('${2:FileName}.eot?#iefix') format('embedded-opentype'),\n		 url('${2:FileName}.woff') format('woff'),\n		 url('${2:FileName}.ttf') format('truetype'),\n		 url('${2:FileName}.svg#${1:FontName}') format('svg');\n	font-style: ${3:normal};\n	font-weight: ${4:normal};\n}",
            "@i|@import": "@import url(${0});",
            "@kf": "@keyframes ${1:identifier} {\n	${2}\n}",
            "@m|@media": "@media ${1:screen} {\n	${0}\n}",
            ac: "align-content:start|end|flex-start|flex-end|center|space-between|space-around|stretch|space-evenly",
            ai: "align-items:start|end|flex-start|flex-end|center|baseline|stretch",
            anim: "animation:${1:name} ${2:duration} ${3:timing-function} ${4:delay} ${5:iteration-count} ${6:direction} ${7:fill-mode}",
            animdel: "animation-delay:time",
            animdir: "animation-direction:normal|reverse|alternate|alternate-reverse",
            animdur: "animation-duration:${1:0}s",
            animfm: "animation-fill-mode:both|forwards|backwards",
            animic: "animation-iteration-count:1|infinite",
            animn: "animation-name",
            animps: "animation-play-state:running|paused",
            animtf: "animation-timing-function:linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(${1:0.1}, ${2:0.7}, ${3:1.0}, ${3:0.1})",
            ap: "appearance:none",
            as: "align-self:start|end|auto|flex-start|flex-end|center|baseline|stretch",
            b: "bottom",
            bd: "border:${1:1px} ${2:solid} ${3:#000}",
            bdb: "border-bottom:${1:1px} ${2:solid} ${3:#000}",
            bdbc: "border-bottom-color:${1:#000}",
            bdbi: "border-bottom-image:url(${0})",
            bdbk: "border-break:close",
            bdbli: "border-bottom-left-image:url(${0})|continue",
            bdblrs: "border-bottom-left-radius",
            bdbri: "border-bottom-right-image:url(${0})|continue",
            bdbrrs: "border-bottom-right-radius",
            bdbs: "border-bottom-style",
            bdbw: "border-bottom-width",
            bdc: "border-color:${1:#000}",
            bdci: "border-corner-image:url(${0})|continue",
            bdcl: "border-collapse:collapse|separate",
            bdf: "border-fit:repeat|clip|scale|stretch|overwrite|overflow|space",
            bdi: "border-image:url(${0})",
            bdl: "border-left:${1:1px} ${2:solid} ${3:#000}",
            bdlc: "border-left-color:${1:#000}",
            bdlen: "border-length",
            bdli: "border-left-image:url(${0})",
            bdls: "border-left-style",
            bdlw: "border-left-width",
            bdr: "border-right:${1:1px} ${2:solid} ${3:#000}",
            bdrc: "border-right-color:${1:#000}",
            bdri: "border-right-image:url(${0})",
            bdrs: "border-radius",
            bdrst: "border-right-style",
            bdrw: "border-right-width",
            bds: "border-style:none|hidden|dotted|dashed|solid|double|dot-dash|dot-dot-dash|wave|groove|ridge|inset|outset",
            bdsp: "border-spacing",
            bdt: "border-top:${1:1px} ${2:solid} ${3:#000}",
            bdtc: "border-top-color:${1:#000}",
            bdti: "border-top-image:url(${0})",
            bdtli: "border-top-left-image:url(${0})|continue",
            bdtlrs: "border-top-left-radius",
            bdtri: "border-top-right-image:url(${0})|continue",
            bdtrrs: "border-top-right-radius",
            bdts: "border-top-style",
            bdtw: "border-top-width",
            bdw: "border-width",
            bfv: "backface-visibility:hidden|visible",
            bg: "background:${1:#000}",
            bga: "background-attachment:fixed|scroll",
            bgbk: "background-break:bounding-box|each-box|continuous",
            bgc: "background-color:#${1:fff}",
            bgcp: "background-clip:padding-box|border-box|content-box|no-clip",
            bgi: "background-image:url(${0})",
            bgo: "background-origin:padding-box|border-box|content-box",
            bgp: "background-position:${1:0} ${2:0}",
            bgpx: "background-position-x",
            bgpy: "background-position-y",
            bgr: "background-repeat:no-repeat|repeat-x|repeat-y|space|round",
            bgsz: "background-size:contain|cover",
            bxsh: "box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} ${5:#000}|none",
            bxsz: "box-sizing:border-box|content-box|border-box",
            c: "color:${1:#000}",
            cl: "clear:both|left|right|none",
            cm: "/* ${0} */",
            cnt: "content:'${0}'|normal|open-quote|no-open-quote|close-quote|no-close-quote|attr(${0})|counter(${0})|counters(${0})",
            coi: "counter-increment",
            colm: "columns",
            colmc: "column-count",
            colmf: "column-fill",
            colmg: "column-gap",
            colmr: "column-rule",
            colmrc: "column-rule-color",
            colmrs: "column-rule-style",
            colmrw: "column-rule-width",
            colms: "column-span",
            colmw: "column-width",
            cor: "counter-reset",
            cp: "clip:auto|rect(${1:top} ${2:right} ${3:bottom} ${4:left})",
            cps: "caption-side:top|bottom",
            cur: "cursor:pointer|auto|default|crosshair|hand|help|move|pointer|text",
            d: "display:grid|inline-grid|subgrid|block|none|flex|inline-flex|inline|inline-block|list-item|run-in|compact|table|inline-table|table-caption|table-column|table-column-group|table-header-group|table-footer-group|table-row|table-row-group|table-cell|ruby|ruby-base|ruby-base-group|ruby-text|ruby-text-group",
            ec: "empty-cells:show|hide",
            f: "font:${1:1em} ${2:sans-serif}",
            fd: "font-display:auto|block|swap|fallback|optional",
            fef: "font-effect:none|engrave|emboss|outline",
            fem: "font-emphasize",
            femp: "font-emphasize-position:before|after",
            fems: "font-emphasize-style:none|accent|dot|circle|disc",
            ff: "font-family:serif|sans-serif|cursive|fantasy|monospace",
            fft: 'font-family:"Times New Roman", Times, Baskerville, Georgia, serif',
            ffa: 'font-family:Arial, "Helvetica Neue", Helvetica, sans-serif',
            ffv: "font-family:Verdana, Geneva, sans-serif",
            fl: "float:left|right|none",
            fs: "font-style:italic|normal|oblique",
            fsm: "font-smoothing:antialiased|subpixel-antialiased|none",
            fst: "font-stretch:normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded",
            fv: "font-variant:normal|small-caps",
            fvs: "font-variation-settings:normal|inherit|initial|unset",
            fw: "font-weight:normal|bold|bolder|lighter",
            fx: "flex",
            fxb: "flex-basis:fill|max-content|min-content|fit-content|content",
            fxd: "flex-direction:row|row-reverse|column|column-reverse",
            fxf: "flex-flow",
            fxg: "flex-grow",
            fxsh: "flex-shrink",
            fxw: "flex-wrap:nowrap|wrap|wrap-reverse",
            fsz: "font-size",
            fsza: "font-size-adjust",
            gtc: "grid-template-columns:repeat()|minmax()",
            gtr: "grid-template-rows:repeat()|minmax()",
            gta: "grid-template-areas",
            gt: "grid-template",
            gg: "grid-gap",
            gcg: "grid-column-gap",
            grg: "grid-row-gap",
            gac: "grid-auto-columns:auto|minmax()",
            gar: "grid-auto-rows:auto|minmax()",
            gaf: "grid-auto-flow:row|column|dense|inherit|initial|unset",
            gd: "grid",
            gc: "grid-column",
            gcs: "grid-column-start",
            gce: "grid-column-end",
            gr: "grid-row",
            grs: "grid-row-start",
            gre: "grid-row-end",
            ga: "grid-area",
            h: "height",
            jc: "justify-content:start|end|stretch|flex-start|flex-end|center|space-between|space-around|space-evenly",
            ji: "justify-items:start|end|center|stretch",
            js: "justify-self:start|end|center|stretch",
            l: "left",
            lg: "background-image:linear-gradient(${1})",
            lh: "line-height",
            lis: "list-style",
            lisi: "list-style-image",
            lisp: "list-style-position:inside|outside",
            list: "list-style-type:disc|circle|square|decimal|decimal-leading-zero|lower-roman|upper-roman",
            lts: "letter-spacing:normal",
            m: "margin",
            mah: "max-height",
            mar: "max-resolution",
            maw: "max-width",
            mb: "margin-bottom",
            mih: "min-height",
            mir: "min-resolution",
            miw: "min-width",
            ml: "margin-left",
            mr: "margin-right",
            mt: "margin-top",
            ol: "outline",
            olc: "outline-color:${1:#000}|invert",
            olo: "outline-offset",
            ols: "outline-style:none|dotted|dashed|solid|double|groove|ridge|inset|outset",
            olw: "outline-width|thin|medium|thick",
            op: "opacity",
            ord: "order",
            ori: "orientation:landscape|portrait",
            orp: "orphans",
            ov: "overflow:hidden|visible|hidden|scroll|auto",
            ovs: "overflow-style:scrollbar|auto|scrollbar|panner|move|marquee",
            ovx: "overflow-x:hidden|visible|hidden|scroll|auto",
            ovy: "overflow-y:hidden|visible|hidden|scroll|auto",
            p: "padding",
            pb: "padding-bottom",
            pgba: "page-break-after:auto|always|left|right",
            pgbb: "page-break-before:auto|always|left|right",
            pgbi: "page-break-inside:auto|avoid",
            pl: "padding-left",
            pos: "position:relative|absolute|relative|fixed|static",
            pr: "padding-right",
            pt: "padding-top",
            q: "quotes",
            qen: "quotes:'\\201C' '\\201D' '\\2018' '\\2019'",
            qru: "quotes:'\\00AB' '\\00BB' '\\201E' '\\201C'",
            r: "right",
            rsz: "resize:none|both|horizontal|vertical",
            t: "top",
            ta: "text-align:left|center|right|justify",
            tal: "text-align-last:left|center|right",
            tbl: "table-layout:fixed",
            td: "text-decoration:none|underline|overline|line-through",
            te: "text-emphasis:none|accent|dot|circle|disc|before|after",
            th: "text-height:auto|font-size|text-size|max-size",
            ti: "text-indent",
            tj: "text-justify:auto|inter-word|inter-ideograph|inter-cluster|distribute|kashida|tibetan",
            to: "text-outline:${1:0} ${2:0} ${3:#000}",
            tov: "text-overflow:ellipsis|clip",
            tr: "text-replace",
            trf: "transform:${1}|skewX(${1:angle})|skewY(${1:angle})|scale(${1:x}, ${2:y})|scaleX(${1:x})|scaleY(${1:y})|scaleZ(${1:z})|scale3d(${1:x}, ${2:y}, ${3:z})|rotate(${1:angle})|rotateX(${1:angle})|rotateY(${1:angle})|rotateZ(${1:angle})|translate(${1:x}, ${2:y})|translateX(${1:x})|translateY(${1:y})|translateZ(${1:z})|translate3d(${1:tx}, ${2:ty}, ${3:tz})",
            trfo: "transform-origin",
            trfs: "transform-style:preserve-3d",
            trs: "transition:${1:prop} ${2:time}",
            trsde: "transition-delay:${1:time}",
            trsdu: "transition-duration:${1:time}",
            trsp: "transition-property:${1:prop}",
            trstf: "transition-timing-function:${1:fn}",
            tsh: "text-shadow:${1:hoff} ${2:voff} ${3:blur} ${4:#000}",
            tt: "text-transform:uppercase|lowercase|capitalize|none",
            tw: "text-wrap:none|normal|unrestricted|suppress",
            us: "user-select:none",
            v: "visibility:hidden|visible|collapse",
            va: "vertical-align:top|super|text-top|middle|baseline|bottom|text-bottom|sub",
            w: "width",
            whs: "white-space:nowrap|pre|pre-wrap|pre-line|normal",
            whsc: "white-space-collapse:normal|keep-all|loose|break-strict|break-all",
            wid: "widows",
            wm: "writing-mode:lr-tb|lr-tb|lr-bt|rl-tb|rl-bt|tb-rl|tb-lr|bt-lr|bt-rl",
            wob: "word-break:normal|keep-all|break-all",
            wos: "word-spacing",
            wow: "word-wrap:none|unrestricted|suppress|break-word|normal",
            z: "z-index",
            zom: "zoom:1"
          }, Ei2 = {
            "tm|tmatch": "xsl:template[match mode]",
            "tn|tname": "xsl:template[name]",
            call: "xsl:call-template[name]",
            ap: "xsl:apply-templates[select mode]",
            api: "xsl:apply-imports",
            imp: "xsl:import[href]",
            inc: "xsl:include[href]",
            ch: "xsl:choose",
            "wh|xsl:when": "xsl:when[test]",
            ot: "xsl:otherwise",
            if: "xsl:if[test]",
            par: "xsl:param[name]",
            pare: "xsl:param[name select]",
            var: "xsl:variable[name]",
            vare: "xsl:variable[name select]",
            wp: "xsl:with-param[name select]",
            key: "xsl:key[name match use]",
            elem: "xsl:element[name]",
            attr: "xsl:attribute[name]",
            attrs: "xsl:attribute-set[name]",
            cp: "xsl:copy[select]",
            co: "xsl:copy-of[select]",
            val: "xsl:value-of[select]",
            "for|each": "xsl:for-each[select]",
            tex: "xsl:text",
            com: "xsl:comment",
            msg: "xsl:message[terminate=no]",
            fall: "xsl:fallback",
            num: "xsl:number[value]",
            nam: "namespace-alias[stylesheet-prefix result-prefix]",
            pres: "xsl:preserve-space[elements]",
            strip: "xsl:strip-space[elements]",
            proc: "xsl:processing-instruction[name]",
            sort: "xsl:sort[select order]",
            choose: "xsl:choose>xsl:when+xsl:otherwise",
            xsl: `!!!+xsl:stylesheet[version=1.0 xmlns:xsl=http://www.w3.org/1999/XSL/Transform]>{
|}`,
            "!!!": '{<?xml version="1.0" encoding="UTF-8"?>}'
          }, ot2 = {
            html: Ai2,
            css: Ti2,
            xsl: Ei2
          }, Si2 = {
            common: [
              "lorem",
              "ipsum",
              "dolor",
              "sit",
              "amet",
              "consectetur",
              "adipisicing",
              "elit"
            ],
            words: [
              "exercitationem",
              "perferendis",
              "perspiciatis",
              "laborum",
              "eveniet",
              "sunt",
              "iure",
              "nam",
              "nobis",
              "eum",
              "cum",
              "officiis",
              "excepturi",
              "odio",
              "consectetur",
              "quasi",
              "aut",
              "quisquam",
              "vel",
              "eligendi",
              "itaque",
              "non",
              "odit",
              "tempore",
              "quaerat",
              "dignissimos",
              "facilis",
              "neque",
              "nihil",
              "expedita",
              "vitae",
              "vero",
              "ipsum",
              "nisi",
              "animi",
              "cumque",
              "pariatur",
              "velit",
              "modi",
              "natus",
              "iusto",
              "eaque",
              "sequi",
              "illo",
              "sed",
              "ex",
              "et",
              "voluptatibus",
              "tempora",
              "veritatis",
              "ratione",
              "assumenda",
              "incidunt",
              "nostrum",
              "placeat",
              "aliquid",
              "fuga",
              "provident",
              "praesentium",
              "rem",
              "necessitatibus",
              "suscipit",
              "adipisci",
              "quidem",
              "possimus",
              "voluptas",
              "debitis",
              "sint",
              "accusantium",
              "unde",
              "sapiente",
              "voluptate",
              "qui",
              "aspernatur",
              "laudantium",
              "soluta",
              "amet",
              "quo",
              "aliquam",
              "saepe",
              "culpa",
              "libero",
              "ipsa",
              "dicta",
              "reiciendis",
              "nesciunt",
              "doloribus",
              "autem",
              "impedit",
              "minima",
              "maiores",
              "repudiandae",
              "ipsam",
              "obcaecati",
              "ullam",
              "enim",
              "totam",
              "delectus",
              "ducimus",
              "quis",
              "voluptates",
              "dolores",
              "molestiae",
              "harum",
              "dolorem",
              "quia",
              "voluptatem",
              "molestias",
              "magni",
              "distinctio",
              "omnis",
              "illum",
              "dolorum",
              "voluptatum",
              "ea",
              "quas",
              "quam",
              "corporis",
              "quae",
              "blanditiis",
              "atque",
              "deserunt",
              "laboriosam",
              "earum",
              "consequuntur",
              "hic",
              "cupiditate",
              "quibusdam",
              "accusamus",
              "ut",
              "rerum",
              "error",
              "minus",
              "eius",
              "ab",
              "ad",
              "nemo",
              "fugit",
              "officia",
              "at",
              "in",
              "id",
              "quos",
              "reprehenderit",
              "numquam",
              "iste",
              "fugiat",
              "sit",
              "inventore",
              "beatae",
              "repellendus",
              "magnam",
              "recusandae",
              "quod",
              "explicabo",
              "doloremque",
              "aperiam",
              "consequatur",
              "asperiores",
              "commodi",
              "optio",
              "dolor",
              "labore",
              "temporibus",
              "repellat",
              "veniam",
              "architecto",
              "est",
              "esse",
              "mollitia",
              "nulla",
              "a",
              "similique",
              "eos",
              "alias",
              "dolore",
              "tenetur",
              "deleniti",
              "porro",
              "facere",
              "maxime",
              "corrupti"
            ]
          }, Oi2 = {
            common: [
              "\u0434\u0430\u043B\u0435\u043A\u043E-\u0434\u0430\u043B\u0435\u043A\u043E",
              "\u0437\u0430",
              "\u0441\u043B\u043E\u0432\u0435\u0441\u043D\u044B\u043C\u0438",
              "\u0433\u043E\u0440\u0430\u043C\u0438",
              "\u0432 \u0441\u0442\u0440\u0430\u043D\u0435",
              "\u0433\u043B\u0430\u0441\u043D\u044B\u0445",
              "\u0438 \u0441\u043E\u0433\u043B\u0430\u0441\u043D\u044B\u0445",
              "\u0436\u0438\u0432\u0443\u0442",
              "\u0440\u044B\u0431\u043D\u044B\u0435",
              "\u0442\u0435\u043A\u0441\u0442\u044B"
            ],
            words: [
              "\u0432\u0434\u0430\u043B\u0438",
              "\u043E\u0442 \u0432\u0441\u0435\u0445",
              "\u043E\u043D\u0438",
              "\u0431\u0443\u043A\u0432\u0435\u043D\u043D\u044B\u0445",
              "\u0434\u043E\u043C\u0430\u0445",
              "\u043D\u0430 \u0431\u0435\u0440\u0435\u0433\u0443",
              "\u0441\u0435\u043C\u0430\u043D\u0442\u0438\u043A\u0430",
              "\u0431\u043E\u043B\u044C\u0448\u043E\u0433\u043E",
              "\u044F\u0437\u044B\u043A\u043E\u0432\u043E\u0433\u043E",
              "\u043E\u043A\u0435\u0430\u043D\u0430",
              "\u043C\u0430\u043B\u0435\u043D\u044C\u043A\u0438\u0439",
              "\u0440\u0443\u0447\u0435\u0435\u043A",
              "\u0434\u0430\u043B\u044C",
              "\u0436\u0443\u0440\u0447\u0438\u0442",
              "\u043F\u043E \u0432\u0441\u0435\u0439",
              "\u043E\u0431\u0435\u0441\u043F\u0435\u0447\u0438\u0432\u0430\u0435\u0442",
              "\u0435\u0435",
              "\u0432\u0441\u0435\u043C\u0438",
              "\u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u044B\u043C\u0438",
              "\u043F\u0440\u0430\u0432\u0438\u043B\u0430\u043C\u0438",
              "\u044D\u0442\u0430",
              "\u043F\u0430\u0440\u0430\u0434\u0438\u0433\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F",
              "\u0441\u0442\u0440\u0430\u043D\u0430",
              "\u043A\u043E\u0442\u043E\u0440\u043E\u0439",
              "\u0436\u0430\u0440\u0435\u043D\u043D\u044B\u0435",
              "\u043F\u0440\u0435\u0434\u043B\u043E\u0436\u0435\u043D\u0438\u044F",
              "\u0437\u0430\u043B\u0435\u0442\u0430\u044E\u0442",
              "\u043F\u0440\u044F\u043C\u043E",
              "\u0440\u043E\u0442",
              "\u0434\u0430\u0436\u0435",
              "\u0432\u0441\u0435\u043C\u043E\u0433\u0443\u0449\u0430\u044F",
              "\u043F\u0443\u043D\u043A\u0442\u0443\u0430\u0446\u0438\u044F",
              "\u043D\u0435",
              "\u0438\u043C\u0435\u0435\u0442",
              "\u0432\u043B\u0430\u0441\u0442\u0438",
              "\u043D\u0430\u0434",
              "\u0440\u044B\u0431\u043D\u044B\u043C\u0438",
              "\u0442\u0435\u043A\u0441\u0442\u0430\u043C\u0438",
              "\u0432\u0435\u0434\u0443\u0449\u0438\u043C\u0438",
              "\u0431\u0435\u0437\u043E\u0440\u0444\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u043D\u044B\u0439",
              "\u043E\u0431\u0440\u0430\u0437",
              "\u0436\u0438\u0437\u043D\u0438",
              "\u043E\u0434\u043D\u0430\u0436\u0434\u044B",
              "\u043E\u0434\u043D\u0430",
              "\u043C\u0430\u043B\u0435\u043D\u044C\u043A\u0430\u044F",
              "\u0441\u0442\u0440\u043E\u0447\u043A\u0430",
              "\u0440\u044B\u0431\u043D\u043E\u0433\u043E",
              "\u0442\u0435\u043A\u0441\u0442\u0430",
              "\u0438\u043C\u0435\u043D\u0438",
              "lorem",
              "ipsum",
              "\u0440\u0435\u0448\u0438\u043B\u0430",
              "\u0432\u044B\u0439\u0442\u0438",
              "\u0431\u043E\u043B\u044C\u0448\u043E\u0439",
              "\u043C\u0438\u0440",
              "\u0433\u0440\u0430\u043C\u043C\u0430\u0442\u0438\u043A\u0438",
              "\u0432\u0435\u043B\u0438\u043A\u0438\u0439",
              "\u043E\u043A\u0441\u043C\u043E\u043A\u0441",
              "\u043F\u0440\u0435\u0434\u0443\u043F\u0440\u0435\u0436\u0434\u0430\u043B",
              "\u043E",
              "\u0437\u043B\u044B\u0445",
              "\u0437\u0430\u043F\u044F\u0442\u044B\u0445",
              "\u0434\u0438\u043A\u0438\u0445",
              "\u0437\u043D\u0430\u043A\u0430\u0445",
              "\u0432\u043E\u043F\u0440\u043E\u0441\u0430",
              "\u043A\u043E\u0432\u0430\u0440\u043D\u044B\u0445",
              "\u0442\u043E\u0447\u043A\u0430\u0445",
              "\u0437\u0430\u043F\u044F\u0442\u043E\u0439",
              "\u043D\u043E",
              "\u0442\u0435\u043A\u0441\u0442",
              "\u0434\u0430\u043B",
              "\u0441\u0431\u0438\u0442\u044C",
              "\u0441\u0435\u0431\u044F",
              "\u0442\u043E\u043B\u043A\u0443",
              "\u043E\u043D",
              "\u0441\u043E\u0431\u0440\u0430\u043B",
              "\u0441\u0435\u043C\u044C",
              "\u0441\u0432\u043E\u0438\u0445",
              "\u0437\u0430\u0433\u043B\u0430\u0432\u043D\u044B\u0445",
              "\u0431\u0443\u043A\u0432",
              "\u043F\u043E\u0434\u043F\u043E\u044F\u0441\u0430\u043B",
              "\u0438\u043D\u0438\u0446\u0438\u0430\u043B",
              "\u0437\u0430",
              "\u043F\u043E\u044F\u0441",
              "\u043F\u0443\u0441\u0442\u0438\u043B\u0441\u044F",
              "\u0434\u043E\u0440\u043E\u0433\u0443",
              "\u0432\u0437\u043E\u0431\u0440\u0430\u0432\u0448\u0438\u0441\u044C",
              "\u043F\u0435\u0440\u0432\u0443\u044E",
              "\u0432\u0435\u0440\u0448\u0438\u043D\u0443",
              "\u043A\u0443\u0440\u0441\u0438\u0432\u043D\u044B\u0445",
              "\u0433\u043E\u0440",
              "\u0431\u0440\u043E\u0441\u0438\u043B",
              "\u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0439",
              "\u0432\u0437\u0433\u043B\u044F\u0434",
              "\u043D\u0430\u0437\u0430\u0434",
              "\u0441\u0438\u043B\u0443\u044D\u0442",
              "\u0441\u0432\u043E\u0435\u0433\u043E",
              "\u0440\u043E\u0434\u043D\u043E\u0433\u043E",
              "\u0433\u043E\u0440\u043E\u0434\u0430",
              "\u0431\u0443\u043A\u0432\u043E\u0433\u0440\u0430\u0434",
              "\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A",
              "\u0434\u0435\u0440\u0435\u0432\u043D\u0438",
              "\u0430\u043B\u0444\u0430\u0432\u0438\u0442",
              "\u043F\u043E\u0434\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A",
              "\u0441\u0432\u043E\u0435\u0433\u043E",
              "\u043F\u0435\u0440\u0435\u0443\u043B\u043A\u0430",
              "\u0433\u0440\u0443\u0441\u0442\u043D\u044B\u0439",
              "\u0440\u0435\u0442\u043E\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0439",
              "\u0432\u043E\u043F\u0440\u043E\u0441",
              "\u0441\u043A\u0430\u0442\u0438\u043B\u0441\u044F",
              "\u0435\u0433\u043E",
              "\u0449\u0435\u043A\u0435",
              "\u043F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u043B",
              "\u0441\u0432\u043E\u0439",
              "\u043F\u0443\u0442\u044C",
              "\u0434\u043E\u0440\u043E\u0433\u0435",
              "\u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043B",
              "\u0440\u0443\u043A\u043E\u043F\u0438\u0441\u044C",
              "\u043E\u043D\u0430",
              "\u043F\u0440\u0435\u0434\u0443\u043F\u0440\u0435\u0434\u0438\u043B\u0430",
              "\u043C\u043E\u0435\u0439",
              "\u0432\u0441\u0435",
              "\u043F\u0435\u0440\u0435\u043F\u0438\u0441\u044B\u0432\u0430\u0435\u0442\u0441\u044F",
              "\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E",
              "\u0440\u0430\u0437",
              "\u0435\u0434\u0438\u043D\u0441\u0442\u0432\u0435\u043D\u043D\u043E\u0435",
              "\u0447\u0442\u043E",
              "\u043C\u0435\u043D\u044F",
              "\u043E\u0441\u0442\u0430\u043B\u043E\u0441\u044C",
              "\u044D\u0442\u043E",
              "\u043F\u0440\u0438\u0441\u0442\u0430\u0432\u043A\u0430",
              "\u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0439\u0441\u044F",
              "\u0442\u044B",
              "\u043B\u0443\u0447\u0448\u0435",
              "\u0441\u0432\u043E\u044E",
              "\u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u0443\u044E",
              "\u0441\u0442\u0440\u0430\u043D\u0443",
              "\u043F\u043E\u0441\u043B\u0443\u0448\u0430\u0432\u0448\u0438\u0441\u044C",
              "\u0440\u0443\u043A\u043E\u043F\u0438\u0441\u0438",
              "\u043D\u0430\u0448",
              "\u043F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u043B",
              "\u0441\u0432\u043E\u0439",
              "\u043F\u0443\u0442\u044C",
              "\u0432\u0441\u043A\u043E\u0440\u0435",
              "\u0435\u043C\u0443",
              "\u043F\u043E\u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043B\u0441\u044F",
              "\u043A\u043E\u0432\u0430\u0440\u043D\u044B\u0439",
              "\u0441\u043E\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043B\u044C",
              "\u0440\u0435\u043A\u043B\u0430\u043C\u043D\u044B\u0445",
              "\u0442\u0435\u043A\u0441\u0442\u043E\u0432",
              "\u043D\u0430\u043F\u043E\u0438\u0432\u0448\u0438\u0439",
              "\u044F\u0437\u044B\u043A\u043E\u043C",
              "\u0440\u0435\u0447\u044C\u044E",
              "\u0437\u0430\u043C\u0430\u043D\u0438\u0432\u0448\u0438\u0439",
              "\u0441\u0432\u043E\u0435",
              "\u0430\u0433\u0435\u043D\u0442\u0441\u0442\u0432\u043E",
              "\u043A\u043E\u0442\u043E\u0440\u043E\u0435",
              "\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043B\u043E",
              "\u0441\u043D\u043E\u0432\u0430",
              "\u0441\u043D\u043E\u0432\u0430",
              "\u0441\u0432\u043E\u0438\u0445",
              "\u043F\u0440\u043E\u0435\u043A\u0442\u0430\u0445",
              "\u0435\u0441\u043B\u0438",
              "\u043F\u0435\u0440\u0435\u043F\u0438\u0441\u0430\u043B\u0438",
              "\u0442\u043E",
              "\u0436\u0438\u0432\u0435\u0442",
              "\u0442\u0430\u043C",
              "\u0434\u043E",
              "\u0441\u0438\u0445",
              "\u043F\u043E\u0440"
            ]
          }, zi2 = {
            common: [
              "mujer",
              "uno",
              "dolor",
              "m\xE1s",
              "de",
              "poder",
              "mismo",
              "si"
            ],
            words: [
              "ejercicio",
              "preferencia",
              "perspicacia",
              "laboral",
              "pa\xF1o",
              "suntuoso",
              "molde",
              "namibia",
              "planeador",
              "mirar",
              "dem\xE1s",
              "oficinista",
              "excepci\xF3n",
              "odio",
              "consecuencia",
              "casi",
              "auto",
              "chicharra",
              "velo",
              "elixir",
              "ataque",
              "no",
              "odio",
              "temporal",
              "cu\xF3rum",
              "dign\xEDsimo",
              "facilismo",
              "letra",
              "nihilista",
              "expedici\xF3n",
              "alma",
              "alveolar",
              "aparte",
              "le\xF3n",
              "animal",
              "como",
              "paria",
              "belleza",
              "modo",
              "natividad",
              "justo",
              "ataque",
              "s\xE9quito",
              "pillo",
              "sed",
              "ex",
              "y",
              "voluminoso",
              "temporalidad",
              "verdades",
              "racional",
              "asunci\xF3n",
              "incidente",
              "marejada",
              "placenta",
              "amanecer",
              "fuga",
              "previsor",
              "presentaci\xF3n",
              "lejos",
              "necesariamente",
              "sospechoso",
              "adiposidad",
              "quind\xEDo",
              "p\xF3cima",
              "voluble",
              "d\xE9bito",
              "sinti\xF3",
              "accesorio",
              "falda",
              "sapiencia",
              "volutas",
              "queso",
              "permacultura",
              "laudo",
              "soluciones",
              "entero",
              "pan",
              "litro",
              "tonelada",
              "culpa",
              "libertario",
              "mosca",
              "dictado",
              "reincidente",
              "nascimiento",
              "dolor",
              "escolar",
              "impedimento",
              "m\xEDnima",
              "mayores",
              "repugnante",
              "dulce",
              "obcecado",
              "monta\xF1a",
              "enigma",
              "total",
              "delet\xE9reo",
              "d\xE9cima",
              "c\xE1bala",
              "fotograf\xEDa",
              "dolores",
              "molesto",
              "olvido",
              "paciencia",
              "resiliencia",
              "voluntad",
              "molestias",
              "magn\xEDfico",
              "distinci\xF3n",
              "ovni",
              "marejada",
              "cerro",
              "torre",
              "y",
              "abogada",
              "manantial",
              "corporal",
              "agua",
              "crep\xFAsculo",
              "ataque",
              "desierto",
              "laboriosamente",
              "angustia",
              "afortunado",
              "alma",
              "encefalograma",
              "materialidad",
              "cosas",
              "o",
              "renuncia",
              "error",
              "menos",
              "conejo",
              "abad\xEDa",
              "analfabeto",
              "remo",
              "fugacidad",
              "oficio",
              "en",
              "alm\xE1cigo",
              "vos",
              "pan",
              "represi\xF3n",
              "n\xFAmeros",
              "triste",
              "refugiado",
              "trote",
              "inventor",
              "corchea",
              "repelente",
              "magma",
              "recusado",
              "patr\xF3n",
              "expl\xEDcito",
              "paloma",
              "s\xEDndrome",
              "inmune",
              "autoinmune",
              "comodidad",
              "ley",
              "vietnamita",
              "demonio",
              "tasmania",
              "repeler",
              "ap\xE9ndice",
              "arquitecto",
              "columna",
              "yugo",
              "computador",
              "mula",
              "a",
              "prop\xF3sito",
              "fantas\xEDa",
              "alias",
              "rayo",
              "tenedor",
              "deleznable",
              "ventana",
              "cara",
              "anemia",
              "corrupto"
            ]
          };
          let Vt2 = {
            latin: Si2,
            ru: Oi2,
            sp: zi2
          }, ji2 = {
            wordCount: 30,
            skipCommon: false,
            lang: "latin"
          };
          var Ii2 = function(e3, t3) {
            t3 = Object.assign({}, ji2, t3);
            let n3 = Vt2[t3.lang] || Vt2.latin, r3 = !t3.skipCommon && !Pi2(e3);
            return !e3.repeat && !_i2(e3.parent) ? (e3.parent.value = Yt2(n3, t3.wordCount, r3), e3.remove()) : (e3.value = Yt2(n3, t3.wordCount, r3), e3.name = e3.parent.name ? w3(e3.parent.name) : null), e3;
          };
          function _i2(e3) {
            return !e3.parent;
          }
          function qe2(e3, t3) {
            return Math.floor(Math.random() * (t3 - e3) + e3);
          }
          function Fi2(e3, t3) {
            let n3 = e3.length, r3 = Math.min(n3, t3), o3 = /* @__PURE__ */ new Set();
            for (; o3.size < r3; ) o3.add(e3[qe2(0, n3)]);
            return Array.from(o3);
          }
          function Ni2(e3) {
            return e3[qe2(0, e3.length - 1)];
          }
          function Kt2(e3, t3) {
            return e3.length && (e3 = [
              Li2(e3[0])
            ].concat(e3.slice(1))), e3.join(" ") + (t3 || Ni2("?!..."));
          }
          function Li2(e3) {
            return e3[0].toUpperCase() + e3.slice(1);
          }
          function Ht2(e3) {
            if (e3.length < 2) return e3;
            e3 = e3.slice();
            let t3 = e3.length, n3 = /,$/, r3 = 0;
            t3 > 3 && t3 <= 6 ? r3 = qe2(0, 1) : t3 > 6 && t3 <= 12 ? r3 = qe2(0, 2) : r3 = qe2(1, 4);
            for (let o3 = 0, l3; o3 < r3; o3++) l3 = qe2(0, t3 - 2), n3.test(e3[l3]) || (e3[l3] += ",");
            return e3;
          }
          function Yt2(e3, t3, n3) {
            let r3 = [], o3 = 0, l3;
            for (n3 && e3.common && (l3 = e3.common.slice(0, t3), o3 += l3.length, r3.push(Kt2(Ht2(l3), "."))); o3 < t3; ) l3 = Fi2(e3.words, Math.min(qe2(2, 30), t3 - o3)), o3 += l3.length, r3.push(Kt2(Ht2(l3)));
            return r3.join(" ");
          }
          function Pi2(e3) {
            for (; e3.parent; ) {
              if (e3.repeat && e3.repeat.value && e3.repeat.value > 1) return true;
              e3 = e3.parent;
            }
            return false;
          }
          let Qt = /^lorem([a-z]*)(\d*)$/i;
          function qi2(e3, t3) {
            let n3 = [
              ot2[e3] || ot2.html
            ];
            Array.isArray(t3) ? t3.forEach((o3) => {
              n3.push(typeof o3 == "string" ? ot2[o3] : o3);
            }) : typeof t3 == "object" && n3.push(t3);
            let r3 = new ye2(n3.filter(Boolean));
            return e3 !== "css" && r3.get(0).set(Qt, Bi2), r3;
          }
          function Bi2(e3) {
            let t3 = {}, n3 = e3.name.match(Qt);
            return n3[1] && (t3.lang = n3[1]), n3[2] && (t3.wordCount = +n3[2]), Ii2(e3, t3);
          }
          let Ui2 = {
            lang: "en",
            locale: "en-US",
            charset: "UTF-8"
          }, Ri2 = /* @__PURE__ */ new Set([
            "css",
            "sass",
            "scss",
            "less",
            "stylus",
            "sss"
          ]), Mi2 = {
            syntax: "html",
            field: (e3, t3) => t3 || "",
            text: null,
            profile: null,
            variables: {},
            snippets: {},
            addons: null,
            format: null
          };
          function Di2(e3, t3) {
            return t3 = at2(t3), De2(t3.syntax) ? $i2(e3, t3) : pr2(e3, t3);
          }
          function Wi2(e3, t3) {
            return t3 = at2(t3), De2(t3.syntax) ? Wt2(e3, t3) : jt2(e3, t3);
          }
          function Zt2(e3, t3) {
            return t3 instanceof ye2 ? t3 : qi2(De2(e3) ? "css" : e3, t3);
          }
          function at2(e3) {
            return typeof e3 == "string" && (e3 = {
              syntax: e3
            }), e3 = Object.assign({}, Mi2, e3), e3.format = Object.assign({
              field: e3.field
            }, e3.format), e3.profile = Gt2(e3), e3.variables = Object.assign({}, Ui2, e3.variables), e3.snippets = Zt2(De2(e3.syntax) ? "css" : e3.syntax, e3.snippets), e3;
          }
          function De2(e3) {
            return Ri2.has(e3);
          }
          function Gt2(e3) {
            return e3.profile instanceof K3 ? e3.profile : new K3(e3.profile);
          }
          L3.expand = Di2, L3.parse = Wi2, L3.createSnippetsRegistry = Zt2, L3.createOptions = at2, L3.isStylesheet = De2, L3.createProfile = Gt2, Object.defineProperty(L3, "__esModule", {
            value: true
          });
        });
      },
      87: function(U3) {
        U3.exports = Re$2("node:os");
      },
      104: function(U3, j3, L3) {
        L3.r(j3);
        var f3 = L3(183);
        L3.n(f3);
        for (var D3 in f3) D3 !== "default" && L3.d(j3, D3, (function(R3) {
          return f3[R3];
        }).bind(0, D3));
      },
      183: function(U3, j3, L3) {
        Object.defineProperty(j3, "__esModule", {
          value: true
        });
        let f3 = L3(280), K3 = L3(34), D3 = L3(234), R3 = L3(622), E3 = L3(747), ye2 = L3(762), Te2 = L3(87), me2 = L3(233), oe2 = /* @__PURE__ */ new Map(), he2, W3, ae2 = /* @__PURE__ */ new Map(), Ee2 = /^[a-z,A-Z,!,(,[,#,\.]/, Se2 = /^-?[a-z,A-Z,!,@,#]/, ge2 = /[a-z,A-Z\.]/, be2 = [
          "html",
          "pug",
          "slim",
          "haml",
          "xml",
          "xsl",
          "jsx",
          "css",
          "scss",
          "sass",
          "less",
          "stylus"
        ], ne2 = [
          ...me2.htmlData.tags,
          "lorem"
        ], ee2 = "bem", we2 = "|", fe2 = "t", ve2 = "c", c3 = 3, O3 = {
          w: "webkit",
          m: "moz",
          s: "ms",
          o: "o"
        }, p3 = {
          w: "animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, backface-visibility, background-clip, background-composite, background-origin, background-size, border-fit, border-horizontal-spacing, border-image, border-vertical-spacing, box-align, box-direction, box-flex, box-flex-group, box-lines, box-ordinal-group, box-orient, box-pack, box-reflect, box-shadow, color-correction, column-break-after, column-break-before, column-break-inside, column-count, column-gap, column-rule-color, column-rule-style, column-rule-width, column-span, column-width, dashboard-region, font-smoothing, highlight, hyphenate-character, hyphenate-limit-after, hyphenate-limit-before, hyphens, line-box-contain, line-break, line-clamp, locale, margin-before-collapse, margin-after-collapse, marquee-direction, marquee-increment, marquee-repetition, marquee-style, mask-attachment, mask-box-image, mask-box-image-outset, mask-box-image-repeat, mask-box-image-slice, mask-box-image-source, mask-box-image-width, mask-clip, mask-composite, mask-image, mask-origin, mask-position, mask-repeat, mask-size, nbsp-mode, perspective, perspective-origin, rtl-ordering, text-combine, text-decorations-in-effect, text-emphasis-color, text-emphasis-position, text-emphasis-style, text-fill-color, text-orientation, text-security, text-stroke-color, text-stroke-width, transform, transition, transform-origin, transform-style, transition-delay, transition-duration, transition-property, transition-timing-function, user-drag, user-modify, user-select, writing-mode, svg-shadow, box-sizing, border-radius",
          m: "animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, backface-visibility, background-inline-policy, binding, border-bottom-colors, border-image, border-left-colors, border-right-colors, border-top-colors, box-align, box-direction, box-flex, box-ordinal-group, box-orient, box-pack, box-shadow, box-sizing, column-count, column-gap, column-rule-color, column-rule-style, column-rule-width, column-width, float-edge, font-feature-settings, font-language-override, force-broken-image-icon, hyphens, image-region, orient, outline-radius-bottomleft, outline-radius-bottomright, outline-radius-topleft, outline-radius-topright, perspective, perspective-origin, stack-sizing, tab-size, text-blink, text-decoration-color, text-decoration-line, text-decoration-style, text-size-adjust, transform, transform-origin, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, user-focus, user-input, user-modify, user-select, window-shadow, background-clip, border-radius",
          s: "accelerator, backface-visibility, background-position-x, background-position-y, behavior, block-progression, box-align, box-direction, box-flex, box-line-progression, box-lines, box-ordinal-group, box-orient, box-pack, content-zoom-boundary, content-zoom-boundary-max, content-zoom-boundary-min, content-zoom-chaining, content-zoom-snap, content-zoom-snap-points, content-zoom-snap-type, content-zooming, filter, flow-from, flow-into, font-feature-settings, grid-column, grid-column-align, grid-column-span, grid-columns, grid-layer, grid-row, grid-row-align, grid-row-span, grid-rows, high-contrast-adjust, hyphenate-limit-chars, hyphenate-limit-lines, hyphenate-limit-zone, hyphens, ime-mode, interpolation-mode, layout-flow, layout-grid, layout-grid-char, layout-grid-line, layout-grid-mode, layout-grid-type, line-break, overflow-style, perspective, perspective-origin, perspective-origin-x, perspective-origin-y, scroll-boundary, scroll-boundary-bottom, scroll-boundary-left, scroll-boundary-right, scroll-boundary-top, scroll-chaining, scroll-rails, scroll-snap-points-x, scroll-snap-points-y, scroll-snap-type, scroll-snap-x, scroll-snap-y, scrollbar-arrow-color, scrollbar-base-color, scrollbar-darkshadow-color, scrollbar-face-color, scrollbar-highlight-color, scrollbar-shadow-color, scrollbar-track-color, text-align-last, text-autospace, text-justify, text-kashida-space, text-overflow, text-size-adjust, text-underline-position, touch-action, transform, transform-origin, transform-origin-x, transform-origin-y, transform-origin-z, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, user-select, word-break, wrap-flow, wrap-margin, wrap-through, writing-mode",
          o: "dashboard-region, animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, border-image, link, link-source, object-fit, object-position, tab-size, table-baseline, transform, transform-origin, transition, transition-delay, transition-duration, transition-property, transition-timing-function, accesskey, input-format, input-required, marquee-dir, marquee-loop, marquee-speed, marquee-style"
        };
        function x3(i3, a3, d3, y3) {
          if (y3.showExpandedAbbreviation === "never" || !g3(d3, y3.excludeLanguages)) return;
          if (!te2(d3)) {
            if (!oe2.has(d3) || !W3 || W3.length === 0) {
              let ce2 = Q3[d3] ? Q3[d3] : K3.createSnippetsRegistry(d3);
              oe2.has(d3) || oe2.set(d3, ce2.all({
                type: "string"
              }).map((X3) => X3.key)), W3 = ce2.all({
                type: "regexp"
              }).map((X3) => X3.key);
            }
            he2 = oe2.get(d3);
          }
          let k3 = G3(i3, a3, {
            syntax: d3,
            lookAhead: !te2(d3)
          });
          if (!k3) return;
          let { abbreviationRange: w3, abbreviation: C3, filter: F3 } = k3, N3 = M3(i3, a3).substr(0, a3.character);
          if (P3(N3) === C3 && N3.endsWith(`<${C3}`) && (d3 === "html" || d3 === "xml" || d3 === "xsl" || d3 === "jsx")) return;
          let J3 = xe2(d3, y3, F3), le2 = J3.preferences;
          delete J3.preferences;
          let re2, Y3, ie2 = [], Ce2 = (ce2, X3) => {
            if (T3(ce2, C3)) {
              try {
                re2 = K3.expand(X3, J3);
              } catch {
              }
              !re2 || B3(ce2, X3, re2) || (Y3 = f3.CompletionItem.create(X3), Y3.textEdit = f3.TextEdit.replace(w3, A3(z3(re2))), Y3.documentation = _3(re2), Y3.insertTextFormat = f3.InsertTextFormat.Snippet, Y3.detail = "Emmet Abbreviation", Y3.label = C3, Y3.label += F3 ? "|" + F3.replace(",", "|") : "", ie2 = [
                Y3
              ]);
            }
          };
          if (te2(d3)) {
            let { prefixOptions: ce2, abbreviationWithoutPrefix: X3 } = ue2(C3);
            if (Ce2(d3, X3), X3.length > 4 && me2.cssData.properties.find((Fe2) => Fe2.startsWith(X3))) return f3.CompletionList.create([], true);
            if (Y3) {
              let Fe2 = ke2(re2, ce2, le2);
              Y3.textEdit = f3.TextEdit.replace(w3, A3(z3(Fe2))), Y3.documentation = _3(Fe2), Y3.label = V3(re2), Y3.filterText = C3;
              let Pe2 = ae2.has(d3) ? ae2.get(d3) : ae2.get("css");
              if (ie2 = S3(Pe2, C3, C3, w3, J3, "Emmet Custom Snippet", false), !ie2.find((je2) => je2.textEdit.newText === Y3.textEdit.newText)) {
                let je2 = new RegExp(".*" + X3.split("").map((Ue2) => Ue2 === "$" || Ue2 === "+" ? "\\" + Ue2 : Ue2).join(".*") + ".*", "i");
                (/\d/.test(C3) || je2.test(Y3.label)) && ie2.push(Y3);
              }
            }
            if (!ie2.length && (C3 === "-" || /^-[wmso]{1,4}-?$/.test(C3))) return f3.CompletionList.create([], true);
          } else {
            Ce2(d3, C3);
            let ce2 = C3, X3 = C3.match(/(>|\+)([\w:-]+)$/);
            X3 && X3.length === 3 && (ce2 = X3[2]);
            let Fe2 = S3(ne2, ce2, C3, w3, J3, "Emmet Abbreviation");
            if (ie2 = ie2.concat(Fe2), y3.showAbbreviationSuggestions === true) {
              let Pe2 = S3(he2.filter((je2) => !ne2.includes(je2)), ce2, C3, w3, J3, "Emmet Abbreviation");
              Y3 && Pe2.length > 0 && ce2 !== C3 && (Y3.sortText = "0" + Y3.label, Pe2.forEach((je2) => {
                je2.filterText = C3, je2.sortText = "9" + C3;
              })), ie2 = ie2.concat(Pe2);
            }
          }
          return y3.showSuggestionsAsSnippets === true && ie2.forEach((ce2) => ce2.kind = f3.CompletionItemKind.Snippet), ie2.length ? f3.CompletionList.create(ie2, true) : void 0;
        }
        j3.doComplete = x3;
        function S3(i3, a3, d3, y3, k3, w3, C3 = true) {
          if (!a3 || !i3) return [];
          let F3 = [];
          return i3.forEach((N3) => {
            if (!N3.startsWith(a3.toLowerCase()) || C3 && N3 === a3.toLowerCase()) return;
            let H3 = d3 + N3.substr(a3.length), J3;
            try {
              J3 = K3.expand(H3, k3);
            } catch {
            }
            if (!J3) return;
            let le2 = f3.CompletionItem.create(a3 + N3.substr(a3.length));
            le2.documentation = _3(J3), le2.detail = w3, le2.textEdit = f3.TextEdit.replace(y3, A3(z3(J3))), le2.insertTextFormat = f3.InsertTextFormat.Snippet, F3.push(le2);
          }), F3;
        }
        function P3(i3) {
          if (i3) {
            let a3 = i3.match(/[\w,:,-,\.]*$/);
            if (a3) return a3[0];
          }
        }
        function _3(i3) {
          return i3.replace(/([^\\])\$\{\d+\}/g, "$1|").replace(/\$\{\d+:([^\}]+)\}/g, "$1");
        }
        function V3(i3) {
          return i3.replace(/([^\\])\$\{\d+\}/g, "$1").replace(/\$\{\d+:([^\}]+)\}/g, "$1");
        }
        function A3(i3) {
          return i3 && i3.replace(/([^\\])(\$)([^\{])/g, "$1\\$2$3");
        }
        function z3(i3) {
          if (!i3 || !i3.trim()) return i3;
          let a3 = -1, d3 = [], y3 = false, k3 = false, w3 = 0, C3 = i3.length;
          try {
            for (; w3 < C3 && !y3; ) {
              if (i3[w3++] != "$" || i3[w3++] != "{") continue;
              let F3 = -1, N3 = -1;
              for (; w3 < C3 && /\d/.test(i3[w3]); ) F3 = F3 < 0 ? w3 : F3, N3 = w3 + 1, w3++;
              if (F3 === -1 || N3 === -1 || w3 >= C3 || i3[w3] != "}" && i3[w3] != ":") continue;
              let H3 = i3.substring(F3, N3);
              if (y3 = H3 === "0", y3) break;
              let J3 = false;
              if (i3[w3++] == ":") for (; w3 < C3; ) {
                if (i3[w3] == "}") {
                  J3 = true;
                  break;
                }
                w3++;
              }
              Number(H3) > Number(a3) ? (a3 = H3, d3 = [
                {
                  numberStart: F3,
                  numberEnd: N3
                }
              ], k3 = !J3) : H3 == a3 && d3.push({
                numberStart: F3,
                numberEnd: N3
              });
            }
          } catch {
          }
          if (k3 && !y3) for (let F3 = 0; F3 < d3.length; F3++) {
            let N3 = d3[F3].numberStart, H3 = d3[F3].numberEnd;
            i3 = i3.substr(0, N3) + "0" + i3.substr(H3);
          }
          return i3;
        }
        function M3(i3, a3) {
          let d3 = i3.offsetAt(a3), y3 = i3.getText(), k3 = 0, w3 = y3.length;
          for (let C3 = d3 - 1; C3 >= 0; C3--) if (y3[C3] === `
`) {
            k3 = C3 + 1;
            break;
          }
          for (let C3 = d3; C3 < y3.length; C3++) if (y3[C3] === `
`) {
            w3 = C3;
            break;
          }
          return y3.substring(k3, w3);
        }
        let Q3 = {}, se2 = {}, de2 = {};
        j3.emmetSnippetField = (i3, a3) => `\${${i3}${a3 ? ":" + a3 : ""}}`;
        function te2(i3) {
          return [
            "css",
            "scss",
            "sass",
            "less",
            "stylus"
          ].indexOf(i3) > -1;
        }
        j3.isStyleSheet = te2;
        function I3(i3, a3) {
          let d3;
          for (let y3 = 0; y3 < c3; y3++) if (i3.endsWith(`${we2}${ee2}`, a3)) a3 -= ee2.length + 1, d3 = d3 ? ee2 + "," + d3 : ee2;
          else if (i3.endsWith(`${we2}${ve2}`, a3)) a3 -= ve2.length + 1, d3 = d3 ? ve2 + "," + d3 : ve2;
          else if (i3.endsWith(`${we2}${fe2}`, a3)) a3 -= fe2.length + 1, d3 = d3 ? fe2 + "," + d3 : fe2;
          else break;
          return {
            pos: a3,
            filter: d3
          };
        }
        function G3(i3, a3, d3) {
          let y3 = M3(i3, a3), k3 = y3.substr(0, a3.character), { pos: w3, filter: C3 } = I3(k3, a3.character), F3 = C3 ? C3.length + 1 : 0;
          try {
            let N3 = d3;
            typeof N3 != "boolean" && (N3 = N3 || {}, N3 = {
              syntax: te2(N3.syntax) || N3.syntax === "stylesheet" ? "stylesheet" : "markup",
              lookAhead: N3.lookAhead
            });
            let H3 = D3(y3, w3, N3);
            return {
              abbreviationRange: f3.Range.create(a3.line, H3.location, a3.line, H3.location + H3.abbreviation.length + F3),
              abbreviation: H3.abbreviation,
              filter: C3
            };
          } catch {
          }
        }
        j3.extractAbbreviation = G3;
        function h3(i3, a3) {
          if (!i3) return;
          let { pos: d3, filter: y3 } = I3(i3, i3.length);
          try {
            let k3 = te2(a3) || a3 === "stylesheet" ? {
              syntax: "stylesheet",
              lookAhead: false
            } : true;
            return {
              abbreviation: D3(i3, d3, k3).abbreviation,
              filter: y3
            };
          } catch {
          }
        }
        j3.extractAbbreviationFromText = h3;
        function T3(i3, a3) {
          if (!a3) return false;
          if (te2(i3)) return a3.endsWith(":") ? false : a3.indexOf("#") > -1 ? m3.test(a3) || s3.test(a3) : Se2.test(a3);
          if (a3.startsWith("!")) return !/[^!]/.test(a3);
          let d3 = a3.match(/\*(\d+)$/);
          return d3 ? parseInt(d3[1], 10) <= 100 : (/\(/.test(a3) || /\)/.test(a3)) && !/\{[^\}\{]*[\(\)]+[^\}\{]*\}(?:[>\+\*\^]|$)/.test(a3) && !/\(.*\)[>\+\*\^]/.test(a3) && !/[>\+\*\^]\(.*\)/.test(a3) ? false : Ee2.test(a3) && ge2.test(a3);
        }
        j3.isAbbreviationValid = T3;
        function B3(i3, a3, d3) {
          if (te2(i3)) {
            let k3 = i3 === "sass" || i3 === "stylus" ? "" : ";";
            return d3 === `${a3}: \${1}${k3}` || d3.replace(/\s/g, "") === a3.replace(/\s/g, "") + k3;
          }
          if (ne2.indexOf(a3.toLowerCase()) > -1 || he2.indexOf(a3) > -1 || /[-,:]/.test(a3) && !/--|::/.test(a3) && !a3.endsWith(":") || a3 === ".") return false;
          let y3 = a3.match(/^([a-z,A-Z,\d]*)\.$/);
          return y3 ? !(y3[1] && me2.htmlData.tags.includes(y3[1])) : d3.toLowerCase() === `<${a3.toLowerCase()}>\${1}</${a3.toLowerCase()}>`;
        }
        function xe2(i3, a3, d3) {
          a3 = a3 || {}, a3.preferences = a3.preferences || {};
          let y3 = te2(i3) ? "css" : "html";
          !Q3[i3] && Q3[y3] && (Q3[i3] = Q3[y3]);
          let k3 = Z3(i3, a3.syntaxProfiles), w3 = k3 && k3.filters ? k3.filters.split(",") : [];
          w3 = w3.map((H3) => H3.trim()), a3.preferences["format.noIndentTags"] && (Array.isArray(a3.preferences["format.noIndentTags"]) ? k3.formatSkip = a3.preferences["format.noIndentTags"] : typeof a3.preferences["format.noIndentTags"] == "string" && (k3.formatSkip = a3.preferences["format.noIndentTags"].split(","))), a3.preferences["format.forceIndentationForTags"] && (Array.isArray(a3.preferences["format.forceIndentationForTags"]) ? k3.formatForce = a3.preferences["format.forceIndentationForTags"] : typeof a3.preferences["format.forceIndentationForTags"] == "string" && (k3.formatForce = a3.preferences["format.forceIndentationForTags"].split(","))), a3.preferences["profile.allowCompactBoolean"] && typeof a3.preferences["profile.allowCompactBoolean"] == "boolean" && (k3.compactBooleanAttributes = a3.preferences["profile.allowCompactBoolean"]);
          let C3 = {};
          (d3 && d3.split(",").find((H3) => H3.trim() === "bem") || w3.indexOf("bem") > -1) && (C3.bem = {
            element: "__"
          }, a3.preferences["bem.elementSeparator"] && (C3.bem.element = a3.preferences["bem.elementSeparator"]), a3.preferences["bem.modifierSeparator"] && (C3.bem.modifier = a3.preferences["bem.modifierSeparator"])), i3 === "jsx" && (C3.jsx = true);
          let F3 = Oe2(i3, a3.preferences);
          (d3 && d3.split(",").find((H3) => H3.trim() === "c") || w3.indexOf("c") > -1) && (F3.comment ? F3.comment.enabled = true : F3.comment = {
            enabled: true
          });
          let N3 = a3.preferences;
          for (let H3 in O3) N3["css." + O3[H3] + "Properties"] == null && (N3["css." + O3[H3] + "Properties"] = p3[H3]);
          return {
            field: j3.emmetSnippetField,
            syntax: i3,
            profile: k3,
            addons: C3,
            variables: pe2(a3.variables),
            snippets: Q3[i3],
            format: F3,
            preferences: N3
          };
        }
        j3.getExpandOptions = xe2;
        function ue2(i3) {
          if (i3 = i3 || "", i3[0] != "-") return {
            prefixOptions: "",
            abbreviationWithoutPrefix: i3
          };
          {
            i3 = i3.substr(1);
            let a3 = "-";
            if (/^[wmso]*-./.test(i3)) {
              let d3 = i3.indexOf("-");
              d3 > -1 && (a3 += i3.substr(0, d3 + 1), i3 = i3.substr(d3 + 1));
            }
            return {
              prefixOptions: a3,
              abbreviationWithoutPrefix: i3
            };
          }
        }
        function ke2(i3, a3, d3) {
          if (d3 = d3 || {}, i3 = i3 || "", a3 = a3 || "", a3[0] !== "-") return i3;
          if (a3 == "-") {
            let k3 = "-", w3 = i3.substr(0, i3.indexOf(":"));
            if (!w3) return i3;
            for (let C3 in O3) {
              let F3 = d3["css." + O3[C3] + "Properties"];
              F3 && F3.split(",").find((N3) => N3.trim() === w3) && (k3 += C3);
            }
            a3 = k3 == "-" ? "-wmso" : k3, a3 += "-";
          }
          a3 = a3.substr(1);
          let y3 = "";
          for (let k3 = 0; k3 < a3.length - 1; k3++) y3 += "-" + O3[a3[k3]] + "-" + i3 + `
`;
          return y3 + i3;
        }
        function $e2(i3, a3) {
          return K3.parse(i3, a3);
        }
        j3.parseAbbreviation = $e2;
        function _e2(i3, a3) {
          let d3, y3 = a3.preferences;
          if (delete a3.preferences, te2(a3.syntax) && typeof i3 == "string") {
            let { prefixOptions: k3, abbreviationWithoutPrefix: w3 } = ue2(i3);
            d3 = K3.expand(w3, a3), d3 = ke2(d3, k3, y3);
          } else d3 = K3.expand(i3, a3);
          return A3(z3(d3));
        }
        j3.expandAbbreviation = _e2;
        function Z3(i3, a3) {
          a3 || (a3 = {});
          let y3 = Object.assign({}, de2, a3)[i3];
          if (!y3 || typeof y3 == "string") return y3 === "xhtml" ? {
            selfClosingStyle: "xhtml"
          } : {};
          let k3 = {};
          for (let w3 in y3) switch (w3) {
            case "tag_case":
              k3.tagCase = y3[w3] === "lower" || y3[w3] === "upper" ? y3[w3] : "";
              break;
            case "attr_case":
              k3.attributeCase = y3[w3] === "lower" || y3[w3] === "upper" ? y3[w3] : "";
              break;
            case "attr_quotes":
              k3.attributeQuotes = y3[w3];
              break;
            case "tag_nl":
              k3.format = y3[w3] === true || y3[w3] === false ? y3[w3] : true;
              break;
            case "inline_break":
              k3.inlineBreak = y3[w3];
              break;
            case "self_closing_tag":
              if (y3[w3] === true) {
                k3.selfClosingStyle = "xml";
                break;
              }
              if (y3[w3] === false) {
                k3.selfClosingStyle = "html";
                break;
              }
              k3.selfClosingStyle = y3[w3];
              break;
            case "compact_bool":
              k3.compactBooleanAttributes = y3[w3];
              break;
            default:
              k3[w3] = y3[w3];
              break;
          }
          return k3;
        }
        function pe2(i3) {
          return i3 ? Object.assign({}, se2, i3) : se2;
        }
        function Oe2(i3, a3) {
          if (!a3) return {};
          if (!te2(i3)) {
            let k3 = {};
            for (let w3 in a3) switch (w3) {
              case "filter.commentAfter":
                k3.after = a3[w3];
                break;
              case "filter.commentBefore":
                k3.before = a3[w3];
                break;
              case "filter.commentTrigger":
                k3.trigger = a3[w3];
                break;
            }
            return {
              comment: k3
            };
          }
          let d3 = typeof a3["css.fuzzySearchMinScore"] == "number" ? a3["css.fuzzySearchMinScore"] : 0.3;
          d3 > 1 ? d3 = 1 : d3 < 0 && (d3 = 0);
          let y3 = {
            fuzzySearchMinScore: d3
          };
          for (let k3 in a3) switch (k3) {
            case "css.floatUnit":
              y3.floatUnit = a3[k3];
              break;
            case "css.intUnit":
              y3.intUnit = a3[k3];
              break;
            case "css.unitAliases":
              let w3 = {};
              a3[k3].split(",").forEach((C3) => {
                if (!C3 || !C3.trim() || C3.indexOf(":") === -1) return;
                let F3 = C3.substr(0, C3.indexOf(":")), N3 = C3.substr(F3.length + 1);
                !F3.trim() || !N3 || (w3[F3.trim()] = N3);
              }), y3.unitAliases = w3;
              break;
            case `${i3}.valueSeparator`:
              y3.between = a3[k3];
              break;
            case `${i3}.propertyEnd`:
              y3.after = a3[k3];
              break;
          }
          return {
            stylesheet: y3
          };
        }
        function ze2(i3, a3) {
          if (!i3 || !i3.trim()) return Le2(), Promise.resolve();
          if (i3 = i3.trim(), a3 = a3 ? a3.trim() : "", i3[0] === "~" ? i3 = R3.join(Te2.homedir(), i3.substr(1)) : !R3.isAbsolute(i3) && a3 && (i3 = R3.join(a3, i3)), !R3.isAbsolute(i3)) return Le2(), Promise.reject("The path provided in emmet.extensionsPath setting should be absoulte path");
          if (!Be2(i3)) return Le2(), Promise.reject(`The directory ${i3} doesnt exist. Update emmet.extensionsPath setting`);
          let d3 = i3, y3 = R3.join(d3, "snippets.json"), k3 = R3.join(d3, "syntaxProfiles.json"), w3 = new Promise((F3, N3) => {
            E3.readFile(y3, (H3, J3) => {
              if (H3) return N3(`Error while fetching the file ${y3}`);
              try {
                let le2 = [], re2 = ye2.parse(J3.toString(), le2);
                if (le2.length > 0) return N3(`Found error ${ye2.ScanError[le2[0].error]} while parsing the file ${y3} at offset ${le2[0].offset}`);
                se2 = re2.variables, Q3 = {}, oe2.clear(), Object.keys(re2).forEach((Y3) => {
                  if (!re2[Y3].snippets) return;
                  let ie2 = te2(Y3) ? "css" : "html", Ce2 = re2[Y3].snippets;
                  if (re2[ie2] && re2[ie2].snippets && ie2 !== Y3 && (Ce2 = Object.assign({}, re2[ie2].snippets, re2[Y3].snippets)), te2(Y3)) ae2.set(Y3, Object.keys(Ce2));
                  else for (let X3 in Ce2) Ce2.hasOwnProperty(X3) && Ce2[X3].startsWith("<") && Ce2[X3].endsWith(">") && (Ce2[X3] = `{${Ce2[X3]}}`);
                  Q3[Y3] = K3.createSnippetsRegistry(Y3, Ce2);
                  let ce2 = Q3[Y3].all({
                    type: "string"
                  }).map((X3) => X3.key);
                  oe2.set(Y3, ce2);
                });
              } catch {
                return N3(`Error while parsing the file ${y3}`);
              }
              return F3();
            });
          });
          new Promise((F3, N3) => {
            E3.readFile(k3, (H3, J3) => {
              try {
                H3 || (de2 = JSON.parse(J3.toString()));
              } catch {
              }
              return F3();
            });
          });
          return Promise.all([
            w3,
            se2
          ]).then(() => Promise.resolve());
        }
        j3.updateExtensionsPath = ze2;
        function Be2(i3) {
          try {
            return E3.statSync(i3).isDirectory();
          } catch {
            return false;
          }
        }
        function Le2() {
          Q3 = {}, oe2.clear(), ae2.clear(), de2 = {}, se2 = {};
        }
        function g3(i3, a3 = []) {
          if (!(!i3 || a3.indexOf(i3) > -1)) {
            if (/\b(typescriptreact|javascriptreact|jsx-tags)\b/.test(i3)) return "jsx";
            if (i3 === "sass-indented") return "sass";
            if (i3 === "jade") return "pug";
            if (be2.indexOf(i3) > -1) return i3;
          }
        }
        j3.getEmmetMode = g3;
        let s3 = /^[a-zA-Z]+:?#[\d.a-fA-F]{0,6}$/, m3 = /^#[\d,a-f,A-F]{1,6}$/, v3 = /^[a-z,A-Z]+$/;
        function u3(i3, a3, d3, y3, k3) {
          return {
            getId: () => "emmet",
            onCssProperty: (w3) => {
              if (w3 && w3.propertyName) {
                let C3 = x3(i3, a3, d3, y3);
                k3 && C3 && (k3.items = C3.items, k3.isIncomplete = true);
              }
            },
            onCssPropertyValue: (w3) => {
              if (w3 && w3.propertyValue) {
                let C3 = G3(i3, a3, {
                  syntax: "css",
                  lookAhead: false
                });
                if (!C3) return;
                if (C3.abbreviation === `${w3.propertyName}:${w3.propertyValue}` && v3.test(w3.propertyValue) || m3.test(C3.abbreviation) || C3.abbreviation === "!") {
                  let N3 = x3(i3, a3, d3, y3);
                  k3 && N3 && (k3.items = N3.items, k3.isIncomplete = true);
                }
              }
            },
            onHtmlContent: () => {
              let w3 = x3(i3, a3, d3, y3);
              k3 && w3 && (k3.items = w3.items, k3.isIncomplete = true);
            }
          };
        }
        j3.getEmmetCompletionParticipants = u3;
      },
      233: function(U3, j3) {
        Object.defineProperty(j3, "__esModule", {
          value: true
        }), j3.cssData = {
          properties: [
            "additive-symbols",
            "align-content",
            "align-items",
            "justify-items",
            "justify-self",
            "justify-items",
            "align-self",
            "all",
            "alt",
            "animation",
            "animation-delay",
            "animation-direction",
            "animation-duration",
            "animation-fill-mode",
            "animation-iteration-count",
            "animation-name",
            "animation-play-state",
            "animation-timing-function",
            "backface-visibility",
            "background",
            "background-attachment",
            "background-blend-mode",
            "background-clip",
            "background-color",
            "background-image",
            "background-origin",
            "background-position",
            "background-position-x",
            "background-position-y",
            "background-repeat",
            "background-size",
            "behavior",
            "block-size",
            "border",
            "border-block-end",
            "border-block-start",
            "border-block-end-color",
            "border-block-start-color",
            "border-block-end-style",
            "border-block-start-style",
            "border-block-end-width",
            "border-block-start-width",
            "border-bottom",
            "border-bottom-color",
            "border-bottom-left-radius",
            "border-bottom-right-radius",
            "border-bottom-style",
            "border-bottom-width",
            "border-collapse",
            "border-color",
            "border-image",
            "border-image-outset",
            "border-image-repeat",
            "border-image-slice",
            "border-image-source",
            "border-image-width",
            "border-inline-end",
            "border-inline-start",
            "border-inline-end-color",
            "border-inline-start-color",
            "border-inline-end-style",
            "border-inline-start-style",
            "border-inline-end-width",
            "border-inline-start-width",
            "border-left",
            "border-left-color",
            "border-left-style",
            "border-left-width",
            "border-radius",
            "border-right",
            "border-right-color",
            "border-right-style",
            "border-right-width",
            "border-spacing",
            "border-style",
            "border-top",
            "border-top-color",
            "border-top-left-radius",
            "border-top-right-radius",
            "border-top-style",
            "border-top-width",
            "border-width",
            "bottom",
            "box-decoration-break",
            "box-shadow",
            "box-sizing",
            "break-after",
            "break-before",
            "break-inside",
            "caption-side",
            "caret-color",
            "clear",
            "clip",
            "clip-path",
            "clip-rule",
            "color",
            "color-interpolation-filters",
            "column-count",
            "column-fill",
            "column-gap",
            "column-rule",
            "column-rule-color",
            "column-rule-style",
            "column-rule-width",
            "columns",
            "column-span",
            "column-width",
            "contain",
            "content",
            "counter-increment",
            "counter-reset",
            "cursor",
            "direction",
            "display",
            "empty-cells",
            "enable-background",
            "fallback",
            "fill",
            "fill-opacity",
            "fill-rule",
            "filter",
            "flex",
            "flex-basis",
            "flex-direction",
            "flex-flow",
            "flex-grow",
            "flex-shrink",
            "flex-wrap",
            "float",
            "flood-color",
            "flood-opacity",
            "font",
            "font-family",
            "font-feature-settings",
            "font-kerning",
            "font-language-override",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-synthesis",
            "font-variant",
            "font-variant-alternates",
            "font-variant-caps",
            "font-variant-east-asian",
            "font-variant-ligatures",
            "font-variant-numeric",
            "font-variant-position",
            "font-weight",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "grid-area",
            "grid-auto-columns",
            "grid-auto-flow",
            "grid-auto-rows",
            "grid-column",
            "grid-column-end",
            "grid-column-gap",
            "grid-column-start",
            "grid-gap",
            "grid-row",
            "grid-row-end",
            "grid-row-gap",
            "grid-row-start",
            "grid-template",
            "grid-template-areas",
            "grid-template-columns",
            "grid-template-rows",
            "height",
            "hyphens",
            "image-orientation",
            "image-rendering",
            "ime-mode",
            "inline-size",
            "isolation",
            "justify-content",
            "kerning",
            "left",
            "letter-spacing",
            "lighting-color",
            "line-break",
            "line-height",
            "list-style",
            "list-style-image",
            "list-style-position",
            "list-style-type",
            "margin",
            "margin-block-end",
            "margin-block-start",
            "margin-bottom",
            "margin-inline-end",
            "margin-inline-start",
            "margin-left",
            "margin-right",
            "margin-top",
            "marker",
            "marker-end",
            "marker-mid",
            "marker-start",
            "mask-type",
            "max-block-size",
            "max-height",
            "max-inline-size",
            "max-width",
            "min-block-size",
            "min-height",
            "min-inline-size",
            "min-width",
            "mix-blend-mode",
            "motion",
            "motion-offset",
            "motion-path",
            "motion-rotation",
            "-moz-animation",
            "-moz-animation-delay",
            "-moz-animation-direction",
            "-moz-animation-duration",
            "-moz-animation-iteration-count",
            "-moz-animation-name",
            "-moz-animation-play-state",
            "-moz-animation-timing-function",
            "-moz-appearance",
            "-moz-backface-visibility",
            "-moz-background-clip",
            "-moz-background-inline-policy",
            "-moz-background-origin",
            "-moz-border-bottom-colors",
            "-moz-border-image",
            "-moz-border-left-colors",
            "-moz-border-right-colors",
            "-moz-border-top-colors",
            "-moz-box-align",
            "-moz-box-direction",
            "-moz-box-flex",
            "-moz-box-flexgroup",
            "-moz-box-ordinal-group",
            "-moz-box-orient",
            "-moz-box-pack",
            "-moz-box-sizing",
            "-moz-column-count",
            "-moz-column-gap",
            "-moz-column-rule",
            "-moz-column-rule-color",
            "-moz-column-rule-style",
            "-moz-column-rule-width",
            "-moz-columns",
            "-moz-column-width",
            "-moz-font-feature-settings",
            "-moz-hyphens",
            "-moz-perspective",
            "-moz-perspective-origin",
            "-moz-text-align-last",
            "-moz-text-decoration-color",
            "-moz-text-decoration-line",
            "-moz-text-decoration-style",
            "-moz-text-size-adjust",
            "-moz-transform",
            "-moz-transform-origin",
            "-moz-transition",
            "-moz-transition-delay",
            "-moz-transition-duration",
            "-moz-transition-property",
            "-moz-transition-timing-function",
            "-moz-user-focus",
            "-moz-user-select",
            "-ms-accelerator",
            "-ms-behavior",
            "-ms-block-progression",
            "-ms-content-zoom-chaining",
            "-ms-content-zooming",
            "-ms-content-zoom-limit",
            "-ms-content-zoom-limit-max",
            "-ms-content-zoom-limit-min",
            "-ms-content-zoom-snap",
            "-ms-content-zoom-snap-points",
            "-ms-content-zoom-snap-type",
            "-ms-filter",
            "-ms-flex",
            "-ms-flex-align",
            "-ms-flex-direction",
            "-ms-flex-flow",
            "-ms-flex-item-align",
            "-ms-flex-line-pack",
            "-ms-flex-order",
            "-ms-flex-pack",
            "-ms-flex-wrap",
            "-ms-flow-from",
            "-ms-flow-into",
            "-ms-grid-column",
            "-ms-grid-column-align",
            "-ms-grid-columns",
            "-ms-grid-column-span",
            "-ms-grid-layer",
            "-ms-grid-row",
            "-ms-grid-row-align",
            "-ms-grid-rows",
            "-ms-grid-row-span",
            "-ms-high-contrast-adjust",
            "-ms-hyphenate-limit-chars",
            "-ms-hyphenate-limit-lines",
            "-ms-hyphenate-limit-zone",
            "-ms-hyphens",
            "-ms-ime-mode",
            "-ms-interpolation-mode",
            "-ms-layout-grid",
            "-ms-layout-grid-char",
            "-ms-layout-grid-line",
            "-ms-layout-grid-mode",
            "-ms-layout-grid-type",
            "-ms-line-break",
            "-ms-overflow-style",
            "-ms-perspective",
            "-ms-perspective-origin",
            "-ms-perspective-origin-x",
            "-ms-perspective-origin-y",
            "-ms-progress-appearance",
            "-ms-scrollbar-3dlight-color",
            "-ms-scrollbar-arrow-color",
            "-ms-scrollbar-base-color",
            "-ms-scrollbar-darkshadow-color",
            "-ms-scrollbar-face-color",
            "-ms-scrollbar-highlight-color",
            "-ms-scrollbar-shadow-color",
            "-ms-scrollbar-track-color",
            "-ms-scroll-chaining",
            "-ms-scroll-limit",
            "-ms-scroll-limit-x-max",
            "-ms-scroll-limit-x-min",
            "-ms-scroll-limit-y-max",
            "-ms-scroll-limit-y-min",
            "-ms-scroll-rails",
            "-ms-scroll-snap-points-x",
            "-ms-scroll-snap-points-y",
            "-ms-scroll-snap-type",
            "-ms-scroll-snap-x",
            "-ms-scroll-snap-y",
            "-ms-scroll-translation",
            "-ms-text-align-last",
            "-ms-text-autospace",
            "-ms-text-combine-horizontal",
            "-ms-text-justify",
            "-ms-text-kashida-space",
            "-ms-text-overflow",
            "-ms-text-size-adjust",
            "-ms-text-underline-position",
            "-ms-touch-action",
            "-ms-touch-select",
            "-ms-transform",
            "-ms-transform-origin",
            "-ms-transform-origin-x",
            "-ms-transform-origin-y",
            "-ms-transform-origin-z",
            "-ms-user-select",
            "-ms-word-break",
            "-ms-word-wrap",
            "-ms-wrap-flow",
            "-ms-wrap-margin",
            "-ms-wrap-through",
            "-ms-writing-mode",
            "-ms-zoom",
            "-ms-zoom-animation",
            "nav-down",
            "nav-index",
            "nav-left",
            "nav-right",
            "nav-up",
            "negative",
            "-o-animation",
            "-o-animation-delay",
            "-o-animation-direction",
            "-o-animation-duration",
            "-o-animation-fill-mode",
            "-o-animation-iteration-count",
            "-o-animation-name",
            "-o-animation-play-state",
            "-o-animation-timing-function",
            "object-fit",
            "object-position",
            "-o-border-image",
            "-o-object-fit",
            "-o-object-position",
            "opacity",
            "order",
            "orphans",
            "-o-table-baseline",
            "-o-tab-size",
            "-o-text-overflow",
            "-o-transform",
            "-o-transform-origin",
            "-o-transition",
            "-o-transition-delay",
            "-o-transition-duration",
            "-o-transition-property",
            "-o-transition-timing-function",
            "offset-block-end",
            "offset-block-start",
            "offset-inline-end",
            "offset-inline-start",
            "outline",
            "outline-color",
            "outline-offset",
            "outline-style",
            "outline-width",
            "overflow",
            "overflow-wrap",
            "overflow-x",
            "overflow-y",
            "pad",
            "padding",
            "padding-bottom",
            "padding-block-end",
            "padding-block-start",
            "padding-inline-end",
            "padding-inline-start",
            "padding-left",
            "padding-right",
            "padding-top",
            "page-break-after",
            "page-break-before",
            "page-break-inside",
            "paint-order",
            "perspective",
            "perspective-origin",
            "pointer-events",
            "position",
            "prefix",
            "quotes",
            "range",
            "resize",
            "right",
            "ruby-align",
            "ruby-overhang",
            "ruby-position",
            "ruby-span",
            "scrollbar-3dlight-color",
            "scrollbar-arrow-color",
            "scrollbar-base-color",
            "scrollbar-darkshadow-color",
            "scrollbar-face-color",
            "scrollbar-highlight-color",
            "scrollbar-shadow-color",
            "scrollbar-track-color",
            "scroll-behavior",
            "scroll-snap-coordinate",
            "scroll-snap-destination",
            "scroll-snap-points-x",
            "scroll-snap-points-y",
            "scroll-snap-type",
            "shape-image-threshold",
            "shape-margin",
            "shape-outside",
            "shape-rendering",
            "size",
            "src",
            "stop-color",
            "stop-opacity",
            "stroke",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "suffix",
            "system",
            "symbols",
            "table-layout",
            "tab-size",
            "text-align",
            "text-align-last",
            "text-anchor",
            "text-decoration",
            "text-decoration-color",
            "text-decoration-line",
            "text-decoration-style",
            "text-indent",
            "text-justify",
            "text-orientation",
            "text-overflow",
            "text-rendering",
            "text-shadow",
            "text-transform",
            "text-underline-position",
            "top",
            "touch-action",
            "transform",
            "transform-origin",
            "transform-style",
            "transition",
            "transition-delay",
            "transition-duration",
            "transition-property",
            "transition-timing-function",
            "unicode-bidi",
            "unicode-range",
            "user-select",
            "vertical-align",
            "visibility",
            "-webkit-animation",
            "-webkit-animation-delay",
            "-webkit-animation-direction",
            "-webkit-animation-duration",
            "-webkit-animation-fill-mode",
            "-webkit-animation-iteration-count",
            "-webkit-animation-name",
            "-webkit-animation-play-state",
            "-webkit-animation-timing-function",
            "-webkit-appearance",
            "-webkit-backdrop-filter",
            "-webkit-backface-visibility",
            "-webkit-background-clip",
            "-webkit-background-composite",
            "-webkit-background-origin",
            "-webkit-border-image",
            "-webkit-box-align",
            "-webkit-box-direction",
            "-webkit-box-flex",
            "-webkit-box-flex-group",
            "-webkit-box-ordinal-group",
            "-webkit-box-orient",
            "-webkit-box-pack",
            "-webkit-box-reflect",
            "-webkit-box-sizing",
            "-webkit-break-after",
            "-webkit-break-before",
            "-webkit-break-inside",
            "-webkit-column-break-after",
            "-webkit-column-break-before",
            "-webkit-column-break-inside",
            "-webkit-column-count",
            "-webkit-column-gap",
            "-webkit-column-rule",
            "-webkit-column-rule-color",
            "-webkit-column-rule-style",
            "-webkit-column-rule-width",
            "-webkit-columns",
            "-webkit-column-span",
            "-webkit-column-width",
            "-webkit-filter",
            "-webkit-flow-from",
            "-webkit-flow-into",
            "-webkit-font-feature-settings",
            "-webkit-hyphens",
            "-webkit-line-break",
            "-webkit-margin-bottom-collapse",
            "-webkit-margin-collapse",
            "-webkit-margin-start",
            "-webkit-margin-top-collapse",
            "-webkit-mask-clip",
            "-webkit-mask-image",
            "-webkit-mask-origin",
            "-webkit-mask-repeat",
            "-webkit-mask-size",
            "-webkit-nbsp-mode",
            "-webkit-overflow-scrolling",
            "-webkit-padding-start",
            "-webkit-perspective",
            "-webkit-perspective-origin",
            "-webkit-region-fragment",
            "-webkit-tap-highlight-color",
            "-webkit-text-fill-color",
            "-webkit-text-size-adjust",
            "-webkit-text-stroke",
            "-webkit-text-stroke-color",
            "-webkit-text-stroke-width",
            "-webkit-touch-callout",
            "-webkit-transform",
            "-webkit-transform-origin",
            "-webkit-transform-origin-x",
            "-webkit-transform-origin-y",
            "-webkit-transform-origin-z",
            "-webkit-transform-style",
            "-webkit-transition",
            "-webkit-transition-delay",
            "-webkit-transition-duration",
            "-webkit-transition-property",
            "-webkit-transition-timing-function",
            "-webkit-user-drag",
            "-webkit-user-modify",
            "-webkit-user-select",
            "white-space",
            "widows",
            "width",
            "will-change",
            "word-break",
            "word-spacing",
            "word-wrap",
            "writing-mode",
            "z-index",
            "zoom"
          ]
        }, j3.htmlData = {
          tags: [
            "body",
            "head",
            "html",
            "address",
            "blockquote",
            "dd",
            "div",
            "section",
            "article",
            "aside",
            "header",
            "footer",
            "nav",
            "menu",
            "dl",
            "dt",
            "fieldset",
            "form",
            "frame",
            "frameset",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "iframe",
            "noframes",
            "object",
            "ol",
            "p",
            "ul",
            "applet",
            "center",
            "dir",
            "hr",
            "pre",
            "a",
            "abbr",
            "acronym",
            "area",
            "b",
            "base",
            "basefont",
            "bdo",
            "big",
            "br",
            "button",
            "caption",
            "cite",
            "code",
            "col",
            "colgroup",
            "del",
            "dfn",
            "em",
            "font",
            "head",
            "html",
            "i",
            "img",
            "input",
            "ins",
            "isindex",
            "kbd",
            "label",
            "legend",
            "li",
            "link",
            "map",
            "meta",
            "noscript",
            "optgroup",
            "option",
            "param",
            "q",
            "s",
            "samp",
            "script",
            "select",
            "small",
            "span",
            "strike",
            "strong",
            "style",
            "sub",
            "sup",
            "table",
            "tbody",
            "td",
            "textarea",
            "tfoot",
            "th",
            "thead",
            "title",
            "tr",
            "tt",
            "u",
            "var",
            "canvas",
            "main",
            "figure",
            "plaintext"
          ]
        };
      },
      234: function(U3) {
        class j3 {
          constructor(T3) {
            this.string = T3, this.pos = this.string.length;
          }
          sol() {
            return this.pos === 0;
          }
          peek(T3) {
            return this.string.charCodeAt(this.pos - 1 + (T3 || 0));
          }
          prev() {
            if (!this.sol()) return this.string.charCodeAt(--this.pos);
          }
          eat(T3) {
            let B3 = typeof T3 == "function" ? T3(this.peek()) : T3 === this.peek();
            return B3 && this.pos--, B3;
          }
          eatWhile(T3) {
            let B3 = this.pos;
            for (; this.eat(T3); ) ;
            return this.pos < B3;
          }
        }
        let L3 = 39, f3 = 34, K3 = 92;
        function D3(h3) {
          return h3 === L3 || h3 === f3;
        }
        function R3(h3) {
          let T3 = h3.pos, B3 = h3.prev();
          if (D3(B3)) {
            for (; !h3.sol(); ) if (h3.prev() === B3 && h3.peek() !== K3) return true;
          }
          return h3.pos = T3, false;
        }
        let E3 = 9, ye2 = 32, Te2 = 45, me2 = 47, oe2 = 58, he2 = 61, W3 = 60, ae2 = 62;
        var Ee2 = function(h3) {
          let T3 = h3.pos;
          if (!h3.eat(ae2)) return false;
          let B3 = false;
          for (h3.eat(me2); !h3.sol(); ) {
            if (h3.eatWhile(ve2), ne2(h3)) {
              if (h3.eat(me2)) {
                B3 = h3.eat(W3);
                break;
              } else if (h3.eat(W3)) {
                B3 = true;
                break;
              } else {
                if (h3.eat(ve2)) continue;
                if (h3.eat(he2)) {
                  if (ne2(h3)) continue;
                  break;
                } else if (be2(h3)) {
                  B3 = true;
                  break;
                }
              }
              break;
            }
            if (!Se2(h3)) break;
          }
          return h3.pos = T3, B3;
        };
        function Se2(h3) {
          return ge2(h3) || be2(h3);
        }
        function ge2(h3) {
          let T3 = h3.pos;
          return R3(h3) && h3.eat(he2) && ne2(h3) ? true : (h3.pos = T3, false);
        }
        function be2(h3) {
          let T3 = h3.pos;
          return h3.eatWhile(c3) && h3.eat(he2) && ne2(h3) ? true : (h3.pos = T3, false);
        }
        function ne2(h3) {
          return h3.eatWhile(ee2);
        }
        function ee2(h3) {
          return h3 === oe2 || h3 === Te2 || we2(h3) || fe2(h3);
        }
        function we2(h3) {
          return h3 &= -33, h3 >= 65 && h3 <= 90;
        }
        function fe2(h3) {
          return h3 > 47 && h3 < 58;
        }
        function ve2(h3) {
          return h3 === ye2 || h3 === E3;
        }
        function c3(h3) {
          return h3 && h3 !== he2 && !ve2(h3) && !D3(h3);
        }
        let O3 = (h3) => h3.charCodeAt(0), p3 = O3("["), x3 = O3("]"), S3 = O3("("), P3 = O3(")"), _3 = O3("{"), V3 = O3("}"), A3 = new Set("#.*:$-_!@%^+>/".split("").map(O3)), z3 = (/* @__PURE__ */ new Map()).set(p3, x3).set(S3, P3).set(_3, V3), M3 = {
          syntax: "markup",
          lookAhead: null
        };
        function Q3(h3, T3, B3) {
          T3 = Math.min(h3.length, Math.max(0, T3 ?? h3.length)), typeof B3 == "boolean" ? B3 = Object.assign(M3, {
            lookAhead: B3
          }) : B3 = Object.assign(M3, B3), (B3.lookAhead == null || B3.lookAhead === true) && (T3 = se2(h3, T3, B3));
          let xe2, ue2 = new j3(h3);
          ue2.pos = T3;
          let ke2 = [];
          for (; !ue2.sol(); ) {
            if (xe2 = ue2.peek(), G3(xe2, B3.syntax)) ke2.push(xe2);
            else if (I3(xe2, B3.syntax)) {
              if (ke2.pop() !== z3.get(xe2)) break;
            } else if (de2(ke2, x3) || de2(ke2, V3)) {
              ue2.pos--;
              continue;
            } else if (Ee2(ue2) || !te2(xe2)) break;
            ue2.pos--;
          }
          if (!ke2.length && ue2.pos !== T3) {
            let $e2 = h3.slice(ue2.pos, T3).replace(/^[*+>^]+/, "");
            return {
              abbreviation: $e2,
              location: T3 - $e2.length
            };
          }
        }
        function se2(h3, T3, B3) {
          for (D3(h3.charCodeAt(T3)) && T3++; G3(h3.charCodeAt(T3), B3.syntax); ) T3++;
          return T3;
        }
        function de2(h3, T3) {
          return h3.indexOf(T3) !== -1;
        }
        function te2(h3) {
          return h3 > 64 && h3 < 91 || h3 > 96 && h3 < 123 || h3 > 47 && h3 < 58 || A3.has(h3);
        }
        function I3(h3, T3) {
          return h3 === S3 || T3 === "markup" && (h3 === p3 || h3 === _3);
        }
        function G3(h3, T3) {
          return h3 === P3 || T3 === "markup" && (h3 === x3 || h3 === V3);
        }
        U3.exports = Q3;
      },
      280: function(U3, j3) {
        (function(L3) {
          if (typeof U3.exports == "object") {
            var f3 = L3(Re$2, j3);
            f3 !== void 0 && (U3.exports = f3);
          } else typeof define == "function" && define.amd && define([
            "require",
            "exports"
          ], L3);
        })(function(L3, f3) {
          Object.defineProperty(f3, "__esModule", {
            value: true
          });
          var K3;
          (function(s3) {
            function m3(u3, i3) {
              return {
                line: u3,
                character: i3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.objectLiteral(i3) && g3.number(i3.line) && g3.number(i3.character);
            }
            s3.is = v3;
          })(K3 = f3.Position || (f3.Position = {}));
          var D3;
          (function(s3) {
            function m3(u3, i3, a3, d3) {
              if (g3.number(u3) && g3.number(i3) && g3.number(a3) && g3.number(d3)) return {
                start: K3.create(u3, i3),
                end: K3.create(a3, d3)
              };
              if (K3.is(u3) && K3.is(i3)) return {
                start: u3,
                end: i3
              };
              throw new Error("Range#create called with invalid arguments[" + u3 + ", " + i3 + ", " + a3 + ", " + d3 + "]");
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.objectLiteral(i3) && K3.is(i3.start) && K3.is(i3.end);
            }
            s3.is = v3;
          })(D3 = f3.Range || (f3.Range = {}));
          var R3;
          (function(s3) {
            function m3(u3, i3) {
              return {
                uri: u3,
                range: i3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && D3.is(i3.range) && (g3.string(i3.uri) || g3.undefined(i3.uri));
            }
            s3.is = v3;
          })(R3 = f3.Location || (f3.Location = {}));
          (function(s3) {
            function m3(u3, i3, a3, d3) {
              return {
                targetUri: u3,
                targetRange: i3,
                targetSelectionRange: a3,
                originSelectionRange: d3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && D3.is(i3.targetRange) && g3.string(i3.targetUri) && (D3.is(i3.targetSelectionRange) || g3.undefined(i3.targetSelectionRange)) && (D3.is(i3.originSelectionRange) || g3.undefined(i3.originSelectionRange));
            }
            s3.is = v3;
          })(f3.LocationLink || (f3.LocationLink = {}));
          var ye2;
          (function(s3) {
            function m3(u3, i3, a3, d3) {
              return {
                red: u3,
                green: i3,
                blue: a3,
                alpha: d3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.number(i3.red) && g3.number(i3.green) && g3.number(i3.blue) && g3.number(i3.alpha);
            }
            s3.is = v3;
          })(ye2 = f3.Color || (f3.Color = {}));
          (function(s3) {
            function m3(u3, i3) {
              return {
                range: u3,
                color: i3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return D3.is(i3.range) && ye2.is(i3.color);
            }
            s3.is = v3;
          })(f3.ColorInformation || (f3.ColorInformation = {}));
          (function(s3) {
            function m3(u3, i3, a3) {
              return {
                label: u3,
                textEdit: i3,
                additionalTextEdits: a3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.string(i3.label) && (g3.undefined(i3.textEdit) || be2.is(i3)) && (g3.undefined(i3.additionalTextEdits) || g3.typedArray(i3.additionalTextEdits, be2.is));
            }
            s3.is = v3;
          })(f3.ColorPresentation || (f3.ColorPresentation = {}));
          (function(s3) {
            s3.Comment = "comment", s3.Imports = "imports", s3.Region = "region";
          })(f3.FoldingRangeKind || (f3.FoldingRangeKind = {}));
          (function(s3) {
            function m3(u3, i3, a3, d3, y3) {
              var k3 = {
                startLine: u3,
                endLine: i3
              };
              return g3.defined(a3) && (k3.startCharacter = a3), g3.defined(d3) && (k3.endCharacter = d3), g3.defined(y3) && (k3.kind = y3), k3;
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.number(i3.startLine) && g3.number(i3.startLine) && (g3.undefined(i3.startCharacter) || g3.number(i3.startCharacter)) && (g3.undefined(i3.endCharacter) || g3.number(i3.endCharacter)) && (g3.undefined(i3.kind) || g3.string(i3.kind));
            }
            s3.is = v3;
          })(f3.FoldingRange || (f3.FoldingRange = {}));
          var W3;
          (function(s3) {
            function m3(u3, i3) {
              return {
                location: u3,
                message: i3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && R3.is(i3.location) && g3.string(i3.message);
            }
            s3.is = v3;
          })(W3 = f3.DiagnosticRelatedInformation || (f3.DiagnosticRelatedInformation = {}));
          (function(s3) {
            s3.Error = 1, s3.Warning = 2, s3.Information = 3, s3.Hint = 4;
          })(f3.DiagnosticSeverity || (f3.DiagnosticSeverity = {}));
          (function(s3) {
            s3.Unnecessary = 1, s3.Deprecated = 2;
          })(f3.DiagnosticTag || (f3.DiagnosticTag = {}));
          var Se2;
          (function(s3) {
            function m3(u3, i3, a3, d3, y3, k3) {
              var w3 = {
                range: u3,
                message: i3
              };
              return g3.defined(a3) && (w3.severity = a3), g3.defined(d3) && (w3.code = d3), g3.defined(y3) && (w3.source = y3), g3.defined(k3) && (w3.relatedInformation = k3), w3;
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && D3.is(i3.range) && g3.string(i3.message) && (g3.number(i3.severity) || g3.undefined(i3.severity)) && (g3.number(i3.code) || g3.string(i3.code) || g3.undefined(i3.code)) && (g3.string(i3.source) || g3.undefined(i3.source)) && (g3.undefined(i3.relatedInformation) || g3.typedArray(i3.relatedInformation, W3.is));
            }
            s3.is = v3;
          })(Se2 = f3.Diagnostic || (f3.Diagnostic = {}));
          var ge2;
          (function(s3) {
            function m3(u3, i3) {
              for (var a3 = [], d3 = 2; d3 < arguments.length; d3++) a3[d3 - 2] = arguments[d3];
              var y3 = {
                title: u3,
                command: i3
              };
              return g3.defined(a3) && a3.length > 0 && (y3.arguments = a3), y3;
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && g3.string(i3.title) && g3.string(i3.command);
            }
            s3.is = v3;
          })(ge2 = f3.Command || (f3.Command = {}));
          var be2;
          (function(s3) {
            function m3(a3, d3) {
              return {
                range: a3,
                newText: d3
              };
            }
            s3.replace = m3;
            function v3(a3, d3) {
              return {
                range: {
                  start: a3,
                  end: a3
                },
                newText: d3
              };
            }
            s3.insert = v3;
            function u3(a3) {
              return {
                range: a3,
                newText: ""
              };
            }
            s3.del = u3;
            function i3(a3) {
              var d3 = a3;
              return g3.objectLiteral(d3) && g3.string(d3.newText) && D3.is(d3.range);
            }
            s3.is = i3;
          })(be2 = f3.TextEdit || (f3.TextEdit = {}));
          var ne2;
          (function(s3) {
            function m3(u3, i3) {
              return {
                textDocument: u3,
                edits: i3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && x3.is(i3.textDocument) && Array.isArray(i3.edits);
            }
            s3.is = v3;
          })(ne2 = f3.TextDocumentEdit || (f3.TextDocumentEdit = {}));
          var ee2;
          (function(s3) {
            function m3(u3, i3) {
              var a3 = {
                kind: "create",
                uri: u3
              };
              return i3 !== void 0 && (i3.overwrite !== void 0 || i3.ignoreIfExists !== void 0) && (a3.options = i3), a3;
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return i3 && i3.kind === "create" && g3.string(i3.uri) && (i3.options === void 0 || (i3.options.overwrite === void 0 || g3.boolean(i3.options.overwrite)) && (i3.options.ignoreIfExists === void 0 || g3.boolean(i3.options.ignoreIfExists)));
            }
            s3.is = v3;
          })(ee2 = f3.CreateFile || (f3.CreateFile = {}));
          var we2;
          (function(s3) {
            function m3(u3, i3, a3) {
              var d3 = {
                kind: "rename",
                oldUri: u3,
                newUri: i3
              };
              return a3 !== void 0 && (a3.overwrite !== void 0 || a3.ignoreIfExists !== void 0) && (d3.options = a3), d3;
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return i3 && i3.kind === "rename" && g3.string(i3.oldUri) && g3.string(i3.newUri) && (i3.options === void 0 || (i3.options.overwrite === void 0 || g3.boolean(i3.options.overwrite)) && (i3.options.ignoreIfExists === void 0 || g3.boolean(i3.options.ignoreIfExists)));
            }
            s3.is = v3;
          })(we2 = f3.RenameFile || (f3.RenameFile = {}));
          var fe2;
          (function(s3) {
            function m3(u3, i3) {
              var a3 = {
                kind: "delete",
                uri: u3
              };
              return i3 !== void 0 && (i3.recursive !== void 0 || i3.ignoreIfNotExists !== void 0) && (a3.options = i3), a3;
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return i3 && i3.kind === "delete" && g3.string(i3.uri) && (i3.options === void 0 || (i3.options.recursive === void 0 || g3.boolean(i3.options.recursive)) && (i3.options.ignoreIfNotExists === void 0 || g3.boolean(i3.options.ignoreIfNotExists)));
            }
            s3.is = v3;
          })(fe2 = f3.DeleteFile || (f3.DeleteFile = {}));
          var ve2;
          (function(s3) {
            function m3(v3) {
              var u3 = v3;
              return u3 && (u3.changes !== void 0 || u3.documentChanges !== void 0) && (u3.documentChanges === void 0 || u3.documentChanges.every(function(i3) {
                return g3.string(i3.kind) ? ee2.is(i3) || we2.is(i3) || fe2.is(i3) : ne2.is(i3);
              }));
            }
            s3.is = m3;
          })(ve2 = f3.WorkspaceEdit || (f3.WorkspaceEdit = {}));
          var c3 = function() {
            function s3(m3) {
              this.edits = m3;
            }
            return s3.prototype.insert = function(m3, v3) {
              this.edits.push(be2.insert(m3, v3));
            }, s3.prototype.replace = function(m3, v3) {
              this.edits.push(be2.replace(m3, v3));
            }, s3.prototype.delete = function(m3) {
              this.edits.push(be2.del(m3));
            }, s3.prototype.add = function(m3) {
              this.edits.push(m3);
            }, s3.prototype.all = function() {
              return this.edits;
            }, s3.prototype.clear = function() {
              this.edits.splice(0, this.edits.length);
            }, s3;
          }(), O3 = function() {
            function s3(m3) {
              var v3 = this;
              this._textEditChanges = /* @__PURE__ */ Object.create(null), m3 && (this._workspaceEdit = m3, m3.documentChanges ? m3.documentChanges.forEach(function(u3) {
                if (ne2.is(u3)) {
                  var i3 = new c3(u3.edits);
                  v3._textEditChanges[u3.textDocument.uri] = i3;
                }
              }) : m3.changes && Object.keys(m3.changes).forEach(function(u3) {
                var i3 = new c3(m3.changes[u3]);
                v3._textEditChanges[u3] = i3;
              }));
            }
            return Object.defineProperty(s3.prototype, "edit", {
              get: function() {
                return this._workspaceEdit;
              },
              enumerable: true,
              configurable: true
            }), s3.prototype.getTextEditChange = function(m3) {
              if (x3.is(m3)) {
                if (this._workspaceEdit || (this._workspaceEdit = {
                  documentChanges: []
                }), !this._workspaceEdit.documentChanges) throw new Error("Workspace edit is not configured for document changes.");
                var v3 = m3, u3 = this._textEditChanges[v3.uri];
                if (!u3) {
                  var i3 = [], a3 = {
                    textDocument: v3,
                    edits: i3
                  };
                  this._workspaceEdit.documentChanges.push(a3), u3 = new c3(i3), this._textEditChanges[v3.uri] = u3;
                }
                return u3;
              } else {
                if (this._workspaceEdit || (this._workspaceEdit = {
                  changes: /* @__PURE__ */ Object.create(null)
                }), !this._workspaceEdit.changes) throw new Error("Workspace edit is not configured for normal text edit changes.");
                var u3 = this._textEditChanges[m3];
                if (!u3) {
                  var i3 = [];
                  this._workspaceEdit.changes[m3] = i3, u3 = new c3(i3), this._textEditChanges[m3] = u3;
                }
                return u3;
              }
            }, s3.prototype.createFile = function(m3, v3) {
              this.checkDocumentChanges(), this._workspaceEdit.documentChanges.push(ee2.create(m3, v3));
            }, s3.prototype.renameFile = function(m3, v3, u3) {
              this.checkDocumentChanges(), this._workspaceEdit.documentChanges.push(we2.create(m3, v3, u3));
            }, s3.prototype.deleteFile = function(m3, v3) {
              this.checkDocumentChanges(), this._workspaceEdit.documentChanges.push(fe2.create(m3, v3));
            }, s3.prototype.checkDocumentChanges = function() {
              if (!this._workspaceEdit || !this._workspaceEdit.documentChanges) throw new Error("Workspace edit is not configured for document changes.");
            }, s3;
          }();
          f3.WorkspaceChange = O3;
          (function(s3) {
            function m3(u3) {
              return {
                uri: u3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && g3.string(i3.uri);
            }
            s3.is = v3;
          })(f3.TextDocumentIdentifier || (f3.TextDocumentIdentifier = {}));
          var x3;
          (function(s3) {
            function m3(u3, i3) {
              return {
                uri: u3,
                version: i3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && g3.string(i3.uri) && (i3.version === null || g3.number(i3.version));
            }
            s3.is = v3;
          })(x3 = f3.VersionedTextDocumentIdentifier || (f3.VersionedTextDocumentIdentifier = {}));
          (function(s3) {
            function m3(u3, i3, a3, d3) {
              return {
                uri: u3,
                languageId: i3,
                version: a3,
                text: d3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && g3.string(i3.uri) && g3.string(i3.languageId) && g3.number(i3.version) && g3.string(i3.text);
            }
            s3.is = v3;
          })(f3.TextDocumentItem || (f3.TextDocumentItem = {}));
          var P3;
          (function(s3) {
            s3.PlainText = "plaintext", s3.Markdown = "markdown";
          })(P3 = f3.MarkupKind || (f3.MarkupKind = {})), function(s3) {
            function m3(v3) {
              var u3 = v3;
              return u3 === s3.PlainText || u3 === s3.Markdown;
            }
            s3.is = m3;
          }(P3 = f3.MarkupKind || (f3.MarkupKind = {}));
          var _3;
          (function(s3) {
            function m3(v3) {
              var u3 = v3;
              return g3.objectLiteral(v3) && P3.is(u3.kind) && g3.string(u3.value);
            }
            s3.is = m3;
          })(_3 = f3.MarkupContent || (f3.MarkupContent = {}));
          (function(s3) {
            s3.Text = 1, s3.Method = 2, s3.Function = 3, s3.Constructor = 4, s3.Field = 5, s3.Variable = 6, s3.Class = 7, s3.Interface = 8, s3.Module = 9, s3.Property = 10, s3.Unit = 11, s3.Value = 12, s3.Enum = 13, s3.Keyword = 14, s3.Snippet = 15, s3.Color = 16, s3.File = 17, s3.Reference = 18, s3.Folder = 19, s3.EnumMember = 20, s3.Constant = 21, s3.Struct = 22, s3.Event = 23, s3.Operator = 24, s3.TypeParameter = 25;
          })(f3.CompletionItemKind || (f3.CompletionItemKind = {}));
          (function(s3) {
            s3.PlainText = 1, s3.Snippet = 2;
          })(f3.InsertTextFormat || (f3.InsertTextFormat = {}));
          (function(s3) {
            s3.Deprecated = 1;
          })(f3.CompletionItemTag || (f3.CompletionItemTag = {}));
          (function(s3) {
            function m3(v3) {
              return {
                label: v3
              };
            }
            s3.create = m3;
          })(f3.CompletionItem || (f3.CompletionItem = {}));
          (function(s3) {
            function m3(v3, u3) {
              return {
                items: v3 || [],
                isIncomplete: !!u3
              };
            }
            s3.create = m3;
          })(f3.CompletionList || (f3.CompletionList = {}));
          var se2;
          (function(s3) {
            function m3(u3) {
              return u3.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
            }
            s3.fromPlainText = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.string(i3) || g3.objectLiteral(i3) && g3.string(i3.language) && g3.string(i3.value);
            }
            s3.is = v3;
          })(se2 = f3.MarkedString || (f3.MarkedString = {}));
          (function(s3) {
            function m3(v3) {
              var u3 = v3;
              return !!u3 && g3.objectLiteral(u3) && (_3.is(u3.contents) || se2.is(u3.contents) || g3.typedArray(u3.contents, se2.is)) && (v3.range === void 0 || D3.is(v3.range));
            }
            s3.is = m3;
          })(f3.Hover || (f3.Hover = {}));
          (function(s3) {
            function m3(v3, u3) {
              return u3 ? {
                label: v3,
                documentation: u3
              } : {
                label: v3
              };
            }
            s3.create = m3;
          })(f3.ParameterInformation || (f3.ParameterInformation = {}));
          (function(s3) {
            function m3(v3, u3) {
              for (var i3 = [], a3 = 2; a3 < arguments.length; a3++) i3[a3 - 2] = arguments[a3];
              var d3 = {
                label: v3
              };
              return g3.defined(u3) && (d3.documentation = u3), g3.defined(i3) ? d3.parameters = i3 : d3.parameters = [], d3;
            }
            s3.create = m3;
          })(f3.SignatureInformation || (f3.SignatureInformation = {}));
          (function(s3) {
            s3.Text = 1, s3.Read = 2, s3.Write = 3;
          })(f3.DocumentHighlightKind || (f3.DocumentHighlightKind = {}));
          (function(s3) {
            function m3(v3, u3) {
              var i3 = {
                range: v3
              };
              return g3.number(u3) && (i3.kind = u3), i3;
            }
            s3.create = m3;
          })(f3.DocumentHighlight || (f3.DocumentHighlight = {}));
          (function(s3) {
            s3.File = 1, s3.Module = 2, s3.Namespace = 3, s3.Package = 4, s3.Class = 5, s3.Method = 6, s3.Property = 7, s3.Field = 8, s3.Constructor = 9, s3.Enum = 10, s3.Interface = 11, s3.Function = 12, s3.Variable = 13, s3.Constant = 14, s3.String = 15, s3.Number = 16, s3.Boolean = 17, s3.Array = 18, s3.Object = 19, s3.Key = 20, s3.Null = 21, s3.EnumMember = 22, s3.Struct = 23, s3.Event = 24, s3.Operator = 25, s3.TypeParameter = 26;
          })(f3.SymbolKind || (f3.SymbolKind = {}));
          (function(s3) {
            s3.Deprecated = 1;
          })(f3.SymbolTag || (f3.SymbolTag = {}));
          (function(s3) {
            function m3(v3, u3, i3, a3, d3) {
              var y3 = {
                name: v3,
                kind: u3,
                location: {
                  uri: a3,
                  range: i3
                }
              };
              return d3 && (y3.containerName = d3), y3;
            }
            s3.create = m3;
          })(f3.SymbolInformation || (f3.SymbolInformation = {}));
          (function(s3) {
            function m3(u3, i3, a3, d3, y3, k3) {
              var w3 = {
                name: u3,
                detail: i3,
                kind: a3,
                range: d3,
                selectionRange: y3
              };
              return k3 !== void 0 && (w3.children = k3), w3;
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return i3 && g3.string(i3.name) && g3.number(i3.kind) && D3.is(i3.range) && D3.is(i3.selectionRange) && (i3.detail === void 0 || g3.string(i3.detail)) && (i3.deprecated === void 0 || g3.boolean(i3.deprecated)) && (i3.children === void 0 || Array.isArray(i3.children));
            }
            s3.is = v3;
          })(f3.DocumentSymbol || (f3.DocumentSymbol = {}));
          (function(s3) {
            s3.Empty = "", s3.QuickFix = "quickfix", s3.Refactor = "refactor", s3.RefactorExtract = "refactor.extract", s3.RefactorInline = "refactor.inline", s3.RefactorRewrite = "refactor.rewrite", s3.Source = "source", s3.SourceOrganizeImports = "source.organizeImports", s3.SourceFixAll = "source.fixAll";
          })(f3.CodeActionKind || (f3.CodeActionKind = {}));
          (function(s3) {
            function m3(u3, i3) {
              var a3 = {
                diagnostics: u3
              };
              return i3 != null && (a3.only = i3), a3;
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && g3.typedArray(i3.diagnostics, Se2.is) && (i3.only === void 0 || g3.typedArray(i3.only, g3.string));
            }
            s3.is = v3;
          })(f3.CodeActionContext || (f3.CodeActionContext = {}));
          (function(s3) {
            function m3(u3, i3, a3) {
              var d3 = {
                title: u3
              };
              return ge2.is(i3) ? d3.command = i3 : d3.edit = i3, a3 !== void 0 && (d3.kind = a3), d3;
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return i3 && g3.string(i3.title) && (i3.diagnostics === void 0 || g3.typedArray(i3.diagnostics, Se2.is)) && (i3.kind === void 0 || g3.string(i3.kind)) && (i3.edit !== void 0 || i3.command !== void 0) && (i3.command === void 0 || ge2.is(i3.command)) && (i3.isPreferred === void 0 || g3.boolean(i3.isPreferred)) && (i3.edit === void 0 || ve2.is(i3.edit));
            }
            s3.is = v3;
          })(f3.CodeAction || (f3.CodeAction = {}));
          (function(s3) {
            function m3(u3, i3) {
              var a3 = {
                range: u3
              };
              return g3.defined(i3) && (a3.data = i3), a3;
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && D3.is(i3.range) && (g3.undefined(i3.command) || ge2.is(i3.command));
            }
            s3.is = v3;
          })(f3.CodeLens || (f3.CodeLens = {}));
          (function(s3) {
            function m3(u3, i3) {
              return {
                tabSize: u3,
                insertSpaces: i3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && g3.number(i3.tabSize) && g3.boolean(i3.insertSpaces);
            }
            s3.is = v3;
          })(f3.FormattingOptions || (f3.FormattingOptions = {}));
          (function(s3) {
            function m3(u3, i3, a3) {
              return {
                range: u3,
                target: i3,
                data: a3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return g3.defined(i3) && D3.is(i3.range) && (g3.undefined(i3.target) || g3.string(i3.target));
            }
            s3.is = v3;
          })(f3.DocumentLink || (f3.DocumentLink = {}));
          (function(s3) {
            function m3(u3, i3) {
              return {
                range: u3,
                parent: i3
              };
            }
            s3.create = m3;
            function v3(u3) {
              var i3 = u3;
              return i3 !== void 0 && D3.is(i3.range) && (i3.parent === void 0 || s3.is(i3.parent));
            }
            s3.is = v3;
          })(f3.SelectionRange || (f3.SelectionRange = {})), f3.EOL = [
            `
`,
            `\r
`,
            "\r"
          ];
          (function(s3) {
            function m3(a3, d3, y3, k3) {
              return new Le2(a3, d3, y3, k3);
            }
            s3.create = m3;
            function v3(a3) {
              var d3 = a3;
              return !!(g3.defined(d3) && g3.string(d3.uri) && (g3.undefined(d3.languageId) || g3.string(d3.languageId)) && g3.number(d3.lineCount) && g3.func(d3.getText) && g3.func(d3.positionAt) && g3.func(d3.offsetAt));
            }
            s3.is = v3;
            function u3(a3, d3) {
              for (var y3 = a3.getText(), k3 = i3(d3, function(J3, le2) {
                var re2 = J3.range.start.line - le2.range.start.line;
                return re2 === 0 ? J3.range.start.character - le2.range.start.character : re2;
              }), w3 = y3.length, C3 = k3.length - 1; C3 >= 0; C3--) {
                var F3 = k3[C3], N3 = a3.offsetAt(F3.range.start), H3 = a3.offsetAt(F3.range.end);
                if (H3 <= w3) y3 = y3.substring(0, N3) + F3.newText + y3.substring(H3, y3.length);
                else throw new Error("Overlapping edit");
                w3 = N3;
              }
              return y3;
            }
            s3.applyEdits = u3;
            function i3(a3, d3) {
              if (a3.length <= 1) return a3;
              var y3 = a3.length / 2 | 0, k3 = a3.slice(0, y3), w3 = a3.slice(y3);
              i3(k3, d3), i3(w3, d3);
              for (var C3 = 0, F3 = 0, N3 = 0; C3 < k3.length && F3 < w3.length; ) {
                var H3 = d3(k3[C3], w3[F3]);
                H3 <= 0 ? a3[N3++] = k3[C3++] : a3[N3++] = w3[F3++];
              }
              for (; C3 < k3.length; ) a3[N3++] = k3[C3++];
              for (; F3 < w3.length; ) a3[N3++] = w3[F3++];
              return a3;
            }
          })(f3.TextDocument || (f3.TextDocument = {}));
          var Le2 = function() {
            function s3(m3, v3, u3, i3) {
              this._uri = m3, this._languageId = v3, this._version = u3, this._content = i3, this._lineOffsets = void 0;
            }
            return Object.defineProperty(s3.prototype, "uri", {
              get: function() {
                return this._uri;
              },
              enumerable: true,
              configurable: true
            }), Object.defineProperty(s3.prototype, "languageId", {
              get: function() {
                return this._languageId;
              },
              enumerable: true,
              configurable: true
            }), Object.defineProperty(s3.prototype, "version", {
              get: function() {
                return this._version;
              },
              enumerable: true,
              configurable: true
            }), s3.prototype.getText = function(m3) {
              if (m3) {
                var v3 = this.offsetAt(m3.start), u3 = this.offsetAt(m3.end);
                return this._content.substring(v3, u3);
              }
              return this._content;
            }, s3.prototype.update = function(m3, v3) {
              this._content = m3.text, this._version = v3, this._lineOffsets = void 0;
            }, s3.prototype.getLineOffsets = function() {
              if (this._lineOffsets === void 0) {
                for (var m3 = [], v3 = this._content, u3 = true, i3 = 0; i3 < v3.length; i3++) {
                  u3 && (m3.push(i3), u3 = false);
                  var a3 = v3.charAt(i3);
                  u3 = a3 === "\r" || a3 === `
`, a3 === "\r" && i3 + 1 < v3.length && v3.charAt(i3 + 1) === `
` && i3++;
                }
                u3 && v3.length > 0 && m3.push(v3.length), this._lineOffsets = m3;
              }
              return this._lineOffsets;
            }, s3.prototype.positionAt = function(m3) {
              m3 = Math.max(Math.min(m3, this._content.length), 0);
              var v3 = this.getLineOffsets(), u3 = 0, i3 = v3.length;
              if (i3 === 0) return K3.create(0, m3);
              for (; u3 < i3; ) {
                var a3 = Math.floor((u3 + i3) / 2);
                v3[a3] > m3 ? i3 = a3 : u3 = a3 + 1;
              }
              var d3 = u3 - 1;
              return K3.create(d3, m3 - v3[d3]);
            }, s3.prototype.offsetAt = function(m3) {
              var v3 = this.getLineOffsets();
              if (m3.line >= v3.length) return this._content.length;
              if (m3.line < 0) return 0;
              var u3 = v3[m3.line], i3 = m3.line + 1 < v3.length ? v3[m3.line + 1] : this._content.length;
              return Math.max(Math.min(u3 + m3.character, i3), u3);
            }, Object.defineProperty(s3.prototype, "lineCount", {
              get: function() {
                return this.getLineOffsets().length;
              },
              enumerable: true,
              configurable: true
            }), s3;
          }(), g3;
          (function(s3) {
            var m3 = Object.prototype.toString;
            function v3(C3) {
              return typeof C3 < "u";
            }
            s3.defined = v3;
            function u3(C3) {
              return typeof C3 > "u";
            }
            s3.undefined = u3;
            function i3(C3) {
              return C3 === true || C3 === false;
            }
            s3.boolean = i3;
            function a3(C3) {
              return m3.call(C3) === "[object String]";
            }
            s3.string = a3;
            function d3(C3) {
              return m3.call(C3) === "[object Number]";
            }
            s3.number = d3;
            function y3(C3) {
              return m3.call(C3) === "[object Function]";
            }
            s3.func = y3;
            function k3(C3) {
              return C3 !== null && typeof C3 == "object";
            }
            s3.objectLiteral = k3;
            function w3(C3, F3) {
              return Array.isArray(C3) && C3.every(F3);
            }
            s3.typedArray = w3;
          })(g3 || (g3 = {}));
        });
      },
      622: function(U3) {
        U3.exports = Re$2("node:path");
      },
      747: function(U3) {
        U3.exports = Re$2("node:fs");
      },
      762: function(U3, j3) {
        (function(L3) {
          if (typeof U3.exports == "object") {
            var f3 = L3(Re$2, j3);
            f3 !== void 0 && (U3.exports = f3);
          } else typeof define == "function" && define.amd && define([
            "require",
            "exports",
            "./format",
            "./edit"
          ], L3);
        })(function(L3, f3) {
          Object.defineProperty(f3, "__esModule", {
            value: true
          });
          var K3 = void 0, D3 = void 0, R3;
          (function(c3) {
            c3[c3.None = 0] = "None", c3[c3.UnexpectedEndOfComment = 1] = "UnexpectedEndOfComment", c3[c3.UnexpectedEndOfString = 2] = "UnexpectedEndOfString", c3[c3.UnexpectedEndOfNumber = 3] = "UnexpectedEndOfNumber", c3[c3.InvalidUnicode = 4] = "InvalidUnicode", c3[c3.InvalidEscapeCharacter = 5] = "InvalidEscapeCharacter", c3[c3.InvalidCharacter = 6] = "InvalidCharacter";
          })(R3 = f3.ScanError || (f3.ScanError = {}));
          var E3;
          (function(c3) {
            c3[c3.Unknown = 0] = "Unknown", c3[c3.OpenBraceToken = 1] = "OpenBraceToken", c3[c3.CloseBraceToken = 2] = "CloseBraceToken", c3[c3.OpenBracketToken = 3] = "OpenBracketToken", c3[c3.CloseBracketToken = 4] = "CloseBracketToken", c3[c3.CommaToken = 5] = "CommaToken", c3[c3.ColonToken = 6] = "ColonToken", c3[c3.NullKeyword = 7] = "NullKeyword", c3[c3.TrueKeyword = 8] = "TrueKeyword", c3[c3.FalseKeyword = 9] = "FalseKeyword", c3[c3.StringLiteral = 10] = "StringLiteral", c3[c3.NumericLiteral = 11] = "NumericLiteral", c3[c3.LineCommentTrivia = 12] = "LineCommentTrivia", c3[c3.BlockCommentTrivia = 13] = "BlockCommentTrivia", c3[c3.LineBreakTrivia = 14] = "LineBreakTrivia", c3[c3.Trivia = 15] = "Trivia", c3[c3.EOF = 16] = "EOF";
          })(E3 = f3.SyntaxKind || (f3.SyntaxKind = {}));
          function ye2(c3, O3) {
            O3 === void 0 && (O3 = false);
            var p3 = 0, x3 = c3.length, S3 = "", P3 = 0, _3 = E3.Unknown, V3 = R3.None;
            function A3(I3, G3) {
              for (var h3 = 0, T3 = 0; h3 < I3 || false; ) {
                var B3 = c3.charCodeAt(p3);
                if (B3 >= 48 && B3 <= 57) T3 = T3 * 16 + B3 - 48;
                else if (B3 >= 65 && B3 <= 70) T3 = T3 * 16 + B3 - 65 + 10;
                else if (B3 >= 97 && B3 <= 102) T3 = T3 * 16 + B3 - 97 + 10;
                else break;
                p3++, h3++;
              }
              return h3 < I3 && (T3 = -1), T3;
            }
            function z3(I3) {
              p3 = I3, S3 = "", P3 = 0, _3 = E3.Unknown, V3 = R3.None;
            }
            function M3() {
              var I3 = p3;
              if (c3.charCodeAt(p3) === 48) p3++;
              else for (p3++; p3 < c3.length && oe2(c3.charCodeAt(p3)); ) p3++;
              if (p3 < c3.length && c3.charCodeAt(p3) === 46) if (p3++, p3 < c3.length && oe2(c3.charCodeAt(p3))) for (p3++; p3 < c3.length && oe2(c3.charCodeAt(p3)); ) p3++;
              else return V3 = R3.UnexpectedEndOfNumber, c3.substring(I3, p3);
              var G3 = p3;
              if (p3 < c3.length && (c3.charCodeAt(p3) === 69 || c3.charCodeAt(p3) === 101)) if (p3++, (p3 < c3.length && c3.charCodeAt(p3) === 43 || c3.charCodeAt(p3) === 45) && p3++, p3 < c3.length && oe2(c3.charCodeAt(p3))) {
                for (p3++; p3 < c3.length && oe2(c3.charCodeAt(p3)); ) p3++;
                G3 = p3;
              } else V3 = R3.UnexpectedEndOfNumber;
              return c3.substring(I3, G3);
            }
            function Q3() {
              for (var I3 = "", G3 = p3; ; ) {
                if (p3 >= x3) {
                  I3 += c3.substring(G3, p3), V3 = R3.UnexpectedEndOfString;
                  break;
                }
                var h3 = c3.charCodeAt(p3);
                if (h3 === 34) {
                  I3 += c3.substring(G3, p3), p3++;
                  break;
                }
                if (h3 === 92) {
                  if (I3 += c3.substring(G3, p3), p3++, p3 >= x3) {
                    V3 = R3.UnexpectedEndOfString;
                    break;
                  }
                  switch (h3 = c3.charCodeAt(p3++), h3) {
                    case 34:
                      I3 += '"';
                      break;
                    case 92:
                      I3 += "\\";
                      break;
                    case 47:
                      I3 += "/";
                      break;
                    case 98:
                      I3 += "\b";
                      break;
                    case 102:
                      I3 += "\f";
                      break;
                    case 110:
                      I3 += `
`;
                      break;
                    case 114:
                      I3 += "\r";
                      break;
                    case 116:
                      I3 += "	";
                      break;
                    case 117:
                      var T3 = A3(4);
                      T3 >= 0 ? I3 += String.fromCharCode(T3) : V3 = R3.InvalidUnicode;
                      break;
                    default:
                      V3 = R3.InvalidEscapeCharacter;
                  }
                  G3 = p3;
                  continue;
                }
                if (h3 >= 0 && h3 <= 31) if (me2(h3)) {
                  I3 += c3.substring(G3, p3), V3 = R3.UnexpectedEndOfString;
                  break;
                } else V3 = R3.InvalidCharacter;
                p3++;
              }
              return I3;
            }
            function se2() {
              if (S3 = "", V3 = R3.None, P3 = p3, p3 >= x3) return P3 = x3, _3 = E3.EOF;
              var I3 = c3.charCodeAt(p3);
              if (Te2(I3)) {
                do
                  p3++, S3 += String.fromCharCode(I3), I3 = c3.charCodeAt(p3);
                while (Te2(I3));
                return _3 = E3.Trivia;
              }
              if (me2(I3)) return p3++, S3 += String.fromCharCode(I3), I3 === 13 && c3.charCodeAt(p3) === 10 && (p3++, S3 += `
`), _3 = E3.LineBreakTrivia;
              switch (I3) {
                case 123:
                  return p3++, _3 = E3.OpenBraceToken;
                case 125:
                  return p3++, _3 = E3.CloseBraceToken;
                case 91:
                  return p3++, _3 = E3.OpenBracketToken;
                case 93:
                  return p3++, _3 = E3.CloseBracketToken;
                case 58:
                  return p3++, _3 = E3.ColonToken;
                case 44:
                  return p3++, _3 = E3.CommaToken;
                case 34:
                  return p3++, S3 = Q3(), _3 = E3.StringLiteral;
                case 47:
                  var G3 = p3 - 1;
                  if (c3.charCodeAt(p3 + 1) === 47) {
                    for (p3 += 2; p3 < x3 && !me2(c3.charCodeAt(p3)); ) p3++;
                    return S3 = c3.substring(G3, p3), _3 = E3.LineCommentTrivia;
                  }
                  if (c3.charCodeAt(p3 + 1) === 42) {
                    p3 += 2;
                    for (var h3 = false; p3 < x3; ) {
                      var T3 = c3.charCodeAt(p3);
                      if (T3 === 42 && p3 + 1 < x3 && c3.charCodeAt(p3 + 1) === 47) {
                        p3 += 2, h3 = true;
                        break;
                      }
                      p3++;
                    }
                    return h3 || (p3++, V3 = R3.UnexpectedEndOfComment), S3 = c3.substring(G3, p3), _3 = E3.BlockCommentTrivia;
                  }
                  return S3 += String.fromCharCode(I3), p3++, _3 = E3.Unknown;
                case 45:
                  if (S3 += String.fromCharCode(I3), p3++, p3 === x3 || !oe2(c3.charCodeAt(p3))) return _3 = E3.Unknown;
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                  return S3 += M3(), _3 = E3.NumericLiteral;
                default:
                  for (; p3 < x3 && de2(I3); ) p3++, I3 = c3.charCodeAt(p3);
                  if (P3 !== p3) {
                    switch (S3 = c3.substring(P3, p3), S3) {
                      case "true":
                        return _3 = E3.TrueKeyword;
                      case "false":
                        return _3 = E3.FalseKeyword;
                      case "null":
                        return _3 = E3.NullKeyword;
                    }
                    return _3 = E3.Unknown;
                  }
                  return S3 += String.fromCharCode(I3), p3++, _3 = E3.Unknown;
              }
            }
            function de2(I3) {
              if (Te2(I3) || me2(I3)) return false;
              switch (I3) {
                case 125:
                case 93:
                case 123:
                case 91:
                case 34:
                case 58:
                case 44:
                  return false;
              }
              return true;
            }
            function te2() {
              var I3;
              do
                I3 = se2();
              while (I3 >= E3.LineCommentTrivia && I3 <= E3.Trivia);
              return I3;
            }
            return {
              setPosition: z3,
              getPosition: function() {
                return p3;
              },
              scan: O3 ? te2 : se2,
              getToken: function() {
                return _3;
              },
              getTokenValue: function() {
                return S3;
              },
              getTokenOffset: function() {
                return P3;
              },
              getTokenLength: function() {
                return p3 - P3;
              },
              getTokenError: function() {
                return V3;
              }
            };
          }
          f3.createScanner = ye2;
          function Te2(c3) {
            return c3 === 32 || c3 === 9 || c3 === 11 || c3 === 12 || c3 === 160 || c3 === 5760 || c3 >= 8192 && c3 <= 8203 || c3 === 8239 || c3 === 8287 || c3 === 12288 || c3 === 65279;
          }
          function me2(c3) {
            return c3 === 10 || c3 === 13 || c3 === 8232 || c3 === 8233;
          }
          function oe2(c3) {
            return c3 >= 48 && c3 <= 57;
          }
          function he2(c3, O3) {
            var p3 = ye2(c3), x3 = [], S3, P3 = 0, _3;
            do
              switch (_3 = p3.getPosition(), S3 = p3.scan(), S3) {
                case E3.LineCommentTrivia:
                case E3.BlockCommentTrivia:
                case E3.EOF:
                  P3 !== _3 && x3.push(c3.substring(P3, _3)), O3 !== void 0 && x3.push(p3.getTokenValue().replace(/[^\r\n]/g, O3)), P3 = p3.getPosition();
                  break;
              }
            while (S3 !== E3.EOF);
            return x3.join("");
          }
          f3.stripComments = he2;
          var W3;
          (function(c3) {
            c3[c3.InvalidSymbol = 0] = "InvalidSymbol", c3[c3.InvalidNumberFormat = 1] = "InvalidNumberFormat", c3[c3.PropertyNameExpected = 2] = "PropertyNameExpected", c3[c3.ValueExpected = 3] = "ValueExpected", c3[c3.ColonExpected = 4] = "ColonExpected", c3[c3.CommaExpected = 5] = "CommaExpected", c3[c3.CloseBraceExpected = 6] = "CloseBraceExpected", c3[c3.CloseBracketExpected = 7] = "CloseBracketExpected", c3[c3.EndOfFileExpected = 8] = "EndOfFileExpected", c3[c3.InvalidCommentToken = 9] = "InvalidCommentToken", c3[c3.UnexpectedEndOfComment = 10] = "UnexpectedEndOfComment", c3[c3.UnexpectedEndOfString = 11] = "UnexpectedEndOfString", c3[c3.UnexpectedEndOfNumber = 12] = "UnexpectedEndOfNumber", c3[c3.InvalidUnicode = 13] = "InvalidUnicode", c3[c3.InvalidEscapeCharacter = 14] = "InvalidEscapeCharacter", c3[c3.InvalidCharacter = 15] = "InvalidCharacter";
          })(W3 = f3.ParseErrorCode || (f3.ParseErrorCode = {}));
          function ae2(c3) {
            switch (typeof c3) {
              case "boolean":
                return "boolean";
              case "number":
                return "number";
              case "string":
                return "string";
              default:
                return "null";
            }
          }
          function Ee2(c3, O3) {
            var p3 = [], x3 = new Object(), S3 = void 0, P3 = {
              value: {},
              offset: 0,
              length: 0,
              type: "object"
            }, _3 = false;
            function V3(A3, z3, M3, Q3) {
              P3.value = A3, P3.offset = z3, P3.length = M3, P3.type = Q3, P3.columnOffset = void 0, S3 = P3;
            }
            try {
              ee2(c3, {
                onObjectBegin: function(A3, z3) {
                  if (O3 <= A3) throw x3;
                  S3 = void 0, _3 = O3 > A3, p3.push("");
                },
                onObjectProperty: function(A3, z3, M3) {
                  if (O3 < z3 || (V3(A3, z3, M3, "property"), p3[p3.length - 1] = A3, O3 <= z3 + M3)) throw x3;
                },
                onObjectEnd: function(A3, z3) {
                  if (O3 <= A3) throw x3;
                  S3 = void 0, p3.pop();
                },
                onArrayBegin: function(A3, z3) {
                  if (O3 <= A3) throw x3;
                  S3 = void 0, p3.push(0);
                },
                onArrayEnd: function(A3, z3) {
                  if (O3 <= A3) throw x3;
                  S3 = void 0, p3.pop();
                },
                onLiteralValue: function(A3, z3, M3) {
                  if (O3 < z3 || (V3(A3, z3, M3, ae2(A3)), O3 <= z3 + M3)) throw x3;
                },
                onSeparator: function(A3, z3, M3) {
                  if (O3 <= z3) throw x3;
                  if (A3 === ":" && S3 && S3.type === "property") S3.columnOffset = z3, _3 = false, S3 = void 0;
                  else if (A3 === ",") {
                    var Q3 = p3[p3.length - 1];
                    typeof Q3 == "number" ? p3[p3.length - 1] = Q3 + 1 : (_3 = true, p3[p3.length - 1] = ""), S3 = void 0;
                  }
                }
              });
            } catch (A3) {
              if (A3 !== x3) throw A3;
            }
            return {
              path: p3,
              previousNode: S3,
              isAtPropertyKey: _3,
              matches: function(A3) {
                for (var z3 = 0, M3 = 0; z3 < A3.length && M3 < p3.length; M3++) if (A3[z3] === p3[M3] || A3[z3] === "*") z3++;
                else if (A3[z3] !== "**") return false;
                return z3 === A3.length;
              }
            };
          }
          f3.getLocation = Ee2;
          function Se2(c3, O3, p3) {
            O3 === void 0 && (O3 = []);
            var x3 = null, S3 = [], P3 = [];
            function _3(A3) {
              Array.isArray(S3) ? S3.push(A3) : x3 && (S3[x3] = A3);
            }
            var V3 = {
              onObjectBegin: function() {
                var A3 = {};
                _3(A3), P3.push(S3), S3 = A3, x3 = null;
              },
              onObjectProperty: function(A3) {
                x3 = A3;
              },
              onObjectEnd: function() {
                S3 = P3.pop();
              },
              onArrayBegin: function() {
                var A3 = [];
                _3(A3), P3.push(S3), S3 = A3, x3 = null;
              },
              onArrayEnd: function() {
                S3 = P3.pop();
              },
              onLiteralValue: _3,
              onError: function(A3, z3, M3) {
                O3.push({
                  error: A3,
                  offset: z3,
                  length: M3
                });
              }
            };
            return ee2(c3, V3, p3), S3[0];
          }
          f3.parse = Se2;
          function ge2(c3, O3, p3) {
            O3 === void 0 && (O3 = []);
            var x3 = {
              type: "array",
              offset: -1,
              length: -1,
              children: []
            };
            function S3(A3) {
              x3.type === "property" && (x3.length = A3 - x3.offset, x3 = x3.parent);
            }
            function P3(A3) {
              return x3.children.push(A3), A3;
            }
            var _3 = {
              onObjectBegin: function(A3) {
                x3 = P3({
                  type: "object",
                  offset: A3,
                  length: -1,
                  parent: x3,
                  children: []
                });
              },
              onObjectProperty: function(A3, z3, M3) {
                x3 = P3({
                  type: "property",
                  offset: z3,
                  length: -1,
                  parent: x3,
                  children: []
                }), x3.children.push({
                  type: "string",
                  value: A3,
                  offset: z3,
                  length: M3,
                  parent: x3
                });
              },
              onObjectEnd: function(A3, z3) {
                x3.length = A3 + z3 - x3.offset, x3 = x3.parent, S3(A3 + z3);
              },
              onArrayBegin: function(A3, z3) {
                x3 = P3({
                  type: "array",
                  offset: A3,
                  length: -1,
                  parent: x3,
                  children: []
                });
              },
              onArrayEnd: function(A3, z3) {
                x3.length = A3 + z3 - x3.offset, x3 = x3.parent, S3(A3 + z3);
              },
              onLiteralValue: function(A3, z3, M3) {
                P3({
                  type: ae2(A3),
                  offset: z3,
                  length: M3,
                  parent: x3,
                  value: A3
                }), S3(z3 + M3);
              },
              onSeparator: function(A3, z3, M3) {
                x3.type === "property" && (A3 === ":" ? x3.columnOffset = z3 : A3 === "," && S3(z3));
              },
              onError: function(A3, z3, M3) {
                O3.push({
                  error: A3,
                  offset: z3,
                  length: M3
                });
              }
            };
            ee2(c3, _3, p3);
            var V3 = x3.children[0];
            return V3 && delete V3.parent, V3;
          }
          f3.parseTree = ge2;
          function be2(c3, O3) {
            if (c3) {
              for (var p3 = c3, x3 = 0, S3 = O3; x3 < S3.length; x3++) {
                var P3 = S3[x3];
                if (typeof P3 == "string") {
                  if (p3.type !== "object" || !Array.isArray(p3.children)) return;
                  for (var _3 = false, V3 = 0, A3 = p3.children; V3 < A3.length; V3++) {
                    var z3 = A3[V3];
                    if (Array.isArray(z3.children) && z3.children[0].value === P3) {
                      p3 = z3.children[1], _3 = true;
                      break;
                    }
                  }
                  if (!_3) return;
                } else {
                  var M3 = P3;
                  if (p3.type !== "array" || M3 < 0 || !Array.isArray(p3.children) || M3 >= p3.children.length) return;
                  p3 = p3.children[M3];
                }
              }
              return p3;
            }
          }
          f3.findNodeAtLocation = be2;
          function ne2(c3) {
            if (c3.type === "array") return c3.children.map(ne2);
            if (c3.type === "object") {
              for (var O3 = /* @__PURE__ */ Object.create(null), p3 = 0, x3 = c3.children; p3 < x3.length; p3++) {
                var S3 = x3[p3];
                O3[S3.children[0].value] = ne2(S3.children[1]);
              }
              return O3;
            }
            return c3.value;
          }
          f3.getNodeValue = ne2;
          function ee2(c3, O3, p3) {
            var x3 = ye2(c3, false);
            function S3(Z3) {
              return Z3 ? function() {
                return Z3(x3.getTokenOffset(), x3.getTokenLength());
              } : function() {
                return true;
              };
            }
            function P3(Z3) {
              return Z3 ? function(pe2) {
                return Z3(pe2, x3.getTokenOffset(), x3.getTokenLength());
              } : function() {
                return true;
              };
            }
            var _3 = S3(O3.onObjectBegin), V3 = P3(O3.onObjectProperty), A3 = S3(O3.onObjectEnd), z3 = S3(O3.onArrayBegin), M3 = S3(O3.onArrayEnd), Q3 = P3(O3.onLiteralValue), se2 = P3(O3.onSeparator), de2 = S3(O3.onComment), te2 = P3(O3.onError), I3 = p3 && p3.disallowComments, G3 = p3 && p3.allowTrailingComma;
            function h3() {
              for (; ; ) {
                var Z3 = x3.scan();
                switch (x3.getTokenError()) {
                  case R3.InvalidUnicode:
                    T3(W3.InvalidUnicode);
                    break;
                  case R3.InvalidEscapeCharacter:
                    T3(W3.InvalidEscapeCharacter);
                    break;
                  case R3.UnexpectedEndOfNumber:
                    T3(W3.UnexpectedEndOfNumber);
                    break;
                  case R3.UnexpectedEndOfComment:
                    I3 || T3(W3.UnexpectedEndOfComment);
                    break;
                  case R3.UnexpectedEndOfString:
                    T3(W3.UnexpectedEndOfString);
                    break;
                  case R3.InvalidCharacter:
                    T3(W3.InvalidCharacter);
                    break;
                }
                switch (Z3) {
                  case E3.LineCommentTrivia:
                  case E3.BlockCommentTrivia:
                    I3 ? T3(W3.InvalidCommentToken) : de2();
                    break;
                  case E3.Unknown:
                    T3(W3.InvalidSymbol);
                    break;
                  case E3.Trivia:
                  case E3.LineBreakTrivia:
                    break;
                  default:
                    return Z3;
                }
              }
            }
            function T3(Z3, pe2, Oe2) {
              if (pe2 === void 0 && (pe2 = []), Oe2 === void 0 && (Oe2 = []), te2(Z3), pe2.length + Oe2.length > 0) for (var ze2 = x3.getToken(); ze2 !== E3.EOF; ) {
                if (pe2.indexOf(ze2) !== -1) {
                  h3();
                  break;
                } else if (Oe2.indexOf(ze2) !== -1) break;
                ze2 = h3();
              }
            }
            function B3(Z3) {
              var pe2 = x3.getTokenValue();
              return Z3 ? Q3(pe2) : V3(pe2), h3(), true;
            }
            function xe2() {
              switch (x3.getToken()) {
                case E3.NumericLiteral:
                  var Z3 = 0;
                  try {
                    Z3 = JSON.parse(x3.getTokenValue()), typeof Z3 != "number" && (T3(W3.InvalidNumberFormat), Z3 = 0);
                  } catch {
                    T3(W3.InvalidNumberFormat);
                  }
                  Q3(Z3);
                  break;
                case E3.NullKeyword:
                  Q3(null);
                  break;
                case E3.TrueKeyword:
                  Q3(true);
                  break;
                case E3.FalseKeyword:
                  Q3(false);
                  break;
                default:
                  return false;
              }
              return h3(), true;
            }
            function ue2() {
              return x3.getToken() !== E3.StringLiteral ? (T3(W3.PropertyNameExpected, [], [
                E3.CloseBraceToken,
                E3.CommaToken
              ]), false) : (B3(false), x3.getToken() === E3.ColonToken ? (se2(":"), h3(), _e2() || T3(W3.ValueExpected, [], [
                E3.CloseBraceToken,
                E3.CommaToken
              ])) : T3(W3.ColonExpected, [], [
                E3.CloseBraceToken,
                E3.CommaToken
              ]), true);
            }
            function ke2() {
              _3(), h3();
              for (var Z3 = false; x3.getToken() !== E3.CloseBraceToken && x3.getToken() !== E3.EOF; ) {
                if (x3.getToken() === E3.CommaToken) {
                  if (Z3 || T3(W3.ValueExpected, [], []), se2(","), h3(), x3.getToken() === E3.CloseBraceToken && G3) break;
                } else Z3 && T3(W3.CommaExpected, [], []);
                ue2() || T3(W3.ValueExpected, [], [
                  E3.CloseBraceToken,
                  E3.CommaToken
                ]), Z3 = true;
              }
              return A3(), x3.getToken() !== E3.CloseBraceToken ? T3(W3.CloseBraceExpected, [
                E3.CloseBraceToken
              ], []) : h3(), true;
            }
            function $e2() {
              z3(), h3();
              for (var Z3 = false; x3.getToken() !== E3.CloseBracketToken && x3.getToken() !== E3.EOF; ) {
                if (x3.getToken() === E3.CommaToken) {
                  if (Z3 || T3(W3.ValueExpected, [], []), se2(","), h3(), x3.getToken() === E3.CloseBracketToken && G3) break;
                } else Z3 && T3(W3.CommaExpected, [], []);
                _e2() || T3(W3.ValueExpected, [], [
                  E3.CloseBracketToken,
                  E3.CommaToken
                ]), Z3 = true;
              }
              return M3(), x3.getToken() !== E3.CloseBracketToken ? T3(W3.CloseBracketExpected, [
                E3.CloseBracketToken
              ], []) : h3(), true;
            }
            function _e2() {
              switch (x3.getToken()) {
                case E3.OpenBracketToken:
                  return $e2();
                case E3.OpenBraceToken:
                  return ke2();
                case E3.StringLiteral:
                  return B3(true);
                default:
                  return xe2();
              }
            }
            return h3(), x3.getToken() === E3.EOF ? true : _e2() ? (x3.getToken() !== E3.EOF && T3(W3.EndOfFileExpected, [], []), true) : (T3(W3.ValueExpected, [], []), false);
          }
          f3.visit = ee2;
          function we2(c3, O3, p3) {
            return K3.format(c3, O3, p3);
          }
          f3.format = we2;
          function fe2(c3, O3, p3, x3) {
            return D3.setProperty(c3, O3, p3, x3.formattingOptions, x3.getInsertionIndex);
          }
          f3.modify = fe2;
          function ve2(c3, O3) {
            for (var p3 = O3.length - 1; p3 >= 0; p3--) c3 = D3.applyEdit(c3, O3[p3]);
            return c3;
          }
          f3.applyEdits = ve2;
        });
      }
    }, function(U3) {
      (function() {
        U3.r = function(j3) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(j3, Symbol.toStringTag, {
            value: "Module"
          }), Object.defineProperty(j3, "__esModule", {
            value: true
          });
        };
      })(), function() {
        U3.n = function(j3) {
          var L3 = j3 && j3.__esModule ? function() {
            return j3.default;
          } : function() {
            return j3;
          };
          return U3.d(L3, "a", L3), L3;
        };
      }(), function() {
        var j3 = Object.prototype.hasOwnProperty;
        U3.d = function(L3, f3, K3) {
          j3.call(L3, f3) || Object.defineProperty(L3, f3, {
            enumerable: true,
            get: K3
          });
        };
      }();
    });
  });
  var ct$2 = Xi(en$1()), no = ct$2.default ?? ct$2;
  const __9$ = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: no
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var require = (n3) => {
    const e3 = (m3) => typeof m3.default < "u" ? m3.default : m3, c3 = (m3) => Object.assign({
      __esModule: true
    }, m3);
    switch (n3) {
      case "dlv":
        return c3(__0$$5);
      case "culori":
        return c3(__1$$3);
      case "color-name":
        return e3(__2$$1);
      case "line-column":
        return e3(__3$$1);
      case "moo":
        return e3(__4$);
      case "becke-ch--regex--s0-0-v1--base--pl--lib":
        return e3(__5$);
      case "tmp-cache":
        return e3(__6$);
      case "css.escape":
        return e3(__7$);
      case "stringify-object":
        return e3(__8$);
      case "vscode-emmet-helper-bundled":
        return e3(__9$);
      case "semver/functions/gte":
        return e3(__a$);
      case "semver/functions/lte":
        return e3(__b$);
      case "sift-string":
        return e3(__c$);
      case "detect-indent":
        return e3(__d$);
      case "dset":
        return c3(__e$);
      case "postcss-selector-parser":
        return e3(__f$);
      default:
        console.error('module "' + n3 + '" not found');
        return null;
    }
  };
  var Ue$2 = Object.create;
  var zt$2 = Object.defineProperty;
  var He$3 = Object.getOwnPropertyDescriptor;
  var Ye$3 = Object.getOwnPropertyNames;
  var Ge$3 = Object.getPrototypeOf, Je$3 = Object.prototype.hasOwnProperty;
  var I$2 = ((t3) => typeof require < "u" ? require : typeof Proxy < "u" ? new Proxy(t3, {
    get: (e3, r3) => (typeof require < "u" ? require : e3)[r3]
  }) : t3)(function(t3) {
    if (typeof require < "u") return require.apply(this, arguments);
    throw Error('Dynamic require of "' + t3 + '" is not supported');
  });
  var Ut$1 = (t3, e3) => () => (e3 || t3((e3 = {
    exports: {}
  }).exports, e3), e3.exports);
  var Qe$2 = (t3, e3, r3, a3) => {
    if (e3 && typeof e3 == "object" || typeof e3 == "function") for (let n3 of Ye$3(e3)) !Je$3.call(t3, n3) && n3 !== r3 && zt$2(t3, n3, {
      get: () => e3[n3],
      enumerable: !(a3 = He$3(e3, n3)) || a3.enumerable
    });
    return t3;
  };
  var Ze$1 = (t3, e3, r3) => (r3 = t3 != null ? Ue$2(Ge$3(t3)) : {}, Qe$2(!t3 || !t3.__esModule ? zt$2(r3, "default", {
    value: t3,
    enumerable: true
  }) : r3, t3));
  var qe$2 = Ut$1(($3) => {
    function K3(t3) {
      return t3 && typeof t3 == "object" && "default" in t3 ? t3.default : t3;
    }
    Object.defineProperty($3, "__esModule", {
      value: true
    });
    var j3 = K3(I$2("dlv")), H3 = I$2("culori"), we2 = K3(I$2("color-name")), be2 = K3(I$2("line-column")), dt2 = K3(I$2("moo")), yt2 = K3(I$2("becke-ch--regex--s0-0-v1--base--pl--lib")), Xe2 = K3(I$2("tmp-cache")), tn2 = K3(I$2("css.escape")), en2 = K3(I$2("stringify-object")), _t2 = I$2("vscode-emmet-helper-bundled"), nn2 = K3(I$2("semver/functions/gte"));
    I$2("semver/functions/lte");
    var Ht2 = K3(I$2("sift-string")), an2 = K3(I$2("detect-indent")), Yt2 = I$2("dset"), Gt2 = K3(I$2("postcss-selector-parser"));
    function R3(t3) {
      return Object.prototype.toString.call(t3) === "[object Object]";
    }
    function Z3(t3) {
      let e3 = {};
      for (let r3 in t3) r3.substr(0, 2) !== "__" && (e3[r3] = R3(t3[r3]) ? Z3(t3[r3]) : t3[r3]);
      return e3;
    }
    function xe2(t3, e3) {
      return t3.start.line === e3.start.line && t3.start.character === e3.start.character && t3.end.line === e3.end.line && t3.end.character === e3.end.character;
    }
    function Jt2(t3) {
      return t3.filter((e3, r3, a3) => a3.indexOf(e3) === r3);
    }
    function qt2(t3) {
      return t3.filter((e3, r3) => r3 === t3.findIndex((a3) => xe2(a3.range, e3.range)));
    }
    function $t2(t3) {
      return Array.isArray(t3) ? t3 : [
        t3
      ];
    }
    function ot2(t3) {
      return [].concat.apply([], t3);
    }
    function rt2(t3, e3) {
      if (t3 === e3) return true;
      if (t3.length !== e3.length) return false;
      let r3 = t3.concat().sort(), a3 = e3.concat().sort();
      for (let n3 = 0; n3 < r3.length; ++n3) if (r3[n3] !== a3[n3]) return false;
      return true;
    }
    function $e2(t3) {
      let e3 = function(r3, a3, n3) {
        if (r3 || a3) return a3 ? (e3(r3 + a3[0], a3.slice(1), n3), e3(r3, a3.slice(1), n3)) : n3.push(r3), n3;
      };
      return e3("", t3, []);
    }
    function ct2(t3, e3) {
      let r3 = t3.separator, a3 = (e3 = e3.replace(/^\./, "")).split(r3);
      return a3.length === 1 ? j3(t3.classNames.classNames, [
        e3,
        "__info",
        "__rule"
      ]) === true || Array.isArray(j3(t3.classNames.classNames, [
        e3,
        "__info"
      ])) ? [
        e3
      ] : null : [
        [
          e3
        ],
        ...$e2("123456789".substr(0, a3.length - 1)).map((n3) => n3.split("").map((l3) => parseInt(l3, 10))).map((n3) => {
          let l3 = [], i3 = 0;
          return n3.forEach((s3) => {
            l3.push(a3.slice(i3, s3).join("-")), i3 = s3;
          }), l3.push(a3.slice(i3).join("-")), l3;
        })
      ].find((n3) => !(j3(t3.classNames.classNames, [
        ...n3,
        "__info",
        "__rule"
      ]) !== true && !Array.isArray(j3(t3.classNames.classNames, [
        ...n3,
        "__info"
      ]))));
    }
    function wt2(t3, e3) {
      if (e3 === void 0 && (e3 = 16), /^-?[0-9.]+rem$/.test(t3)) {
        let r3 = parseFloat(t3.substr(0, t3.length - 3));
        if (!isNaN(r3)) return r3 * e3 + "px";
      }
    }
    function Se2(t3) {
      return (t3 > 0n) - (t3 < 0n);
    }
    function J3(t3, e3) {
      let r3 = t3.modules.jit.generateRules.module(new Set(e3), t3.jitContext).sort((l3, i3) => {
        let [s3] = l3, [c3] = i3;
        return Se2(s3 - c3);
      }), a3 = t3.modules.postcss.module.root({
        nodes: r3.map((l3) => {
          let [, i3] = l3;
          return i3;
        })
      });
      t3.modules.jit.expandApplyAtRules.module(t3.jitContext)(a3);
      let n3 = [];
      return a3.walkRules((l3) => {
        n3.push(l3);
      }), {
        root: a3,
        rules: n3
      };
    }
    async function Qt(t3, e3, r3) {
      let a3 = await t3.editor.getConfiguration(r3), n3 = e3.clone();
      return n3.walkAtRules("defaults", (l3) => {
        l3.remove();
      }), a3.tailwindCSS.showPixelEquivalents && n3.walkDecls((l3) => {
        let i3 = wt2(l3.value, a3.tailwindCSS.rootFontSize);
        i3 && (l3.value = `${l3.value}/* ${i3} */`);
      }), n3.toString().replace(/([^;{}\s])(\n\s*})/g, (l3, i3, s3) => `${i3};${s3}`).replace(/^(?:    )+/gm, (l3) => " ".repeat(l3.length / 4 * a3.editor.tabSize));
    }
    function rn(t3, e3, r3, a3) {
      return t3.modules.postcssSelectorParser.module((n3) => {
        n3.walkClasses((l3) => {
          l3.value === r3 && (l3.value = a3);
        });
      }).processSync(e3);
    }
    function Zt2(t3, e3, r3) {
      let a3 = [
        rn(t3, e3.selector, r3, "__placeholder__")
      ], n3 = e3;
      for (; n3.parent && n3.parent.type !== "root"; ) n3 = n3.parent, n3.type === "atrule" && a3.unshift(`@${n3.name} ${n3.params}`);
      return a3;
    }
    var sn2 = [
      "accent-color",
      "caret-color",
      "color",
      "column-rule-color",
      "background-color",
      "border-color",
      "border-top-color",
      "border-right-color",
      "border-bottom-color",
      "border-left-color",
      "fill",
      "outline-color",
      "stop-color",
      "stroke",
      "text-decoration-color"
    ];
    function ke2(t3) {
      if (typeof t3 != "string") return null;
      let e3 = t3.toLowerCase();
      return e3 === "transparent" ? "transparent" : e3 === "currentcolor" ? "currentColor" : null;
    }
    var ln2 = new RegExp(`(?:^|\\s|\\(|,)(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\(\\s*(-?[\\d.]+%?(\\s*[,/]\\s*|\\s+)+){2,3}\\s*([\\d.]+%?|var\\([^)]+\\))?\\)|transparent|currentColor|${Object.keys(we2).join("|")})(?:$|\\s|\\)|,)`, "gi");
    function on2(t3) {
      return /(?:box|drop)-shadow/.test(t3) ? [] : Array.from(function(e3) {
        return e3.replace(/((?:rgb|hsl)a?\(\s*)var\([^,]+,\s*([^)]+)\)/gi, "$1$2");
      }(t3).matchAll(ln2), (e3) => {
        var r3;
        let a3 = e3[1].replace(/var\([^)]+\)/, "1");
        return (r3 = ke2(a3)) != null ? r3 : H3.parse(a3);
      }).filter(Boolean);
    }
    function Tt2(t3) {
      let e3 = Object.keys(t3).filter((o3) => o3 !== "content" || t3[o3] !== '""' && t3[o3] !== "''" && t3[o3] !== "var(--tw-content)");
      if (e3.length === 0) return null;
      let r3 = e3.filter((o3) => !o3.startsWith("--")), a3 = r3.length === 0;
      if (!a3 && r3.some((o3) => !sn2.includes(o3))) return null;
      let n3 = (a3 ? e3 : r3).flatMap((o3) => $t2(t3[o3]).flatMap(on2)), l3 = Jt2(n3.map((o3) => typeof o3 == "string" ? o3 : H3.formatRgb({
        ...o3,
        alpha: void 0
      })));
      if (l3.length !== 1) return null;
      let i3 = ke2(l3[0]);
      if (i3) return i3;
      let s3 = n3.filter((o3) => typeof o3 != "string"), c3 = Jt2(s3.map((o3) => {
        var u3;
        return (u3 = o3.alpha) != null ? u3 : 1;
      }));
      return c3.length === 1 ? s3[0] : c3.length === 2 && c3.includes(0) ? s3.find((o3) => {
        var u3;
        return ((u3 = o3.alpha) != null ? u3 : 1) !== 0;
      }) : null;
    }
    function st2(t3, e3) {
      if (t3.jit) {
        if (t3.classNames) {
          let s3 = j3(t3.classNames.classNames, [
            e3,
            "__info"
          ]);
          if (s3 && s3.__rule) return Tt2(Z3(s3));
        }
        let { root: n3, rules: l3 } = J3(t3, [
          e3
        ]);
        if (l3.length === 0) return null;
        let i3 = {};
        return n3.walkDecls((s3) => {
          let c3 = i3[s3.prop];
          c3 ? Array.isArray(c3) ? c3.push(s3.value) : i3[s3.prop] = [
            c3,
            s3.value
          ] : i3[s3.prop] = s3.value;
        }), Tt2(i3);
      }
      let r3 = ct2(t3, e3);
      if (!r3) return null;
      let a3 = j3(t3.classNames.classNames, [
        ...r3,
        "__info"
      ]);
      return a3.__rule ? Tt2(Z3(a3)) : null;
    }
    function Et2(t3) {
      if (typeof t3 != "string") return null;
      let e3 = t3.trim();
      if (e3.toLowerCase() === "transparent") return "transparent";
      if (e3.toLowerCase() === "currentcolor") return "currentColor";
      if (!/^\s*(?:rgba?|hsla?)\s*\([^)]+\)\s*$/.test(e3) && !/^\s*#[0-9a-f]+\s*$/i.test(e3) && !Object.keys(we2).includes(e3)) return null;
      let r3 = H3.parse(e3);
      return r3 ?? null;
    }
    var cn2 = H3.converter("rgb");
    function Nt2(t3) {
      var e3;
      let r3 = cn2(t3);
      return {
        red: r3.r,
        green: r3.g,
        blue: r3.b,
        alpha: (e3 = r3.alpha) != null ? e3 : 1
      };
    }
    var Xt2 = [
      "aspnetcorerazor",
      "astro",
      "astro-markdown",
      "blade",
      "django-html",
      "edge",
      "ejs",
      "erb",
      "gohtml",
      "GoHTML",
      "gohtmltmpl",
      "haml",
      "handlebars",
      "hbs",
      "html",
      "HTML (Eex)",
      "HTML (EEx)",
      "html-eex",
      "htmldjango",
      "jade",
      "leaf",
      "liquid",
      "markdown",
      "mdx",
      "mustache",
      "njk",
      "nunjucks",
      "phoenix-heex",
      "php",
      "razor",
      "slim",
      "surface",
      "twig"
    ], te2 = [
      "css",
      "less",
      "postcss",
      "sass",
      "scss",
      "stylus",
      "sugarss",
      "tailwindcss"
    ], ee2 = [
      "javascript",
      "javascriptreact",
      "reason",
      "rescript",
      "typescript",
      "typescriptreact"
    ];
    function bt2(t3, e3) {
      let r3 = Object.keys(t3.editor.userLanguages).filter((a3) => ee2.includes(t3.editor.userLanguages[a3]));
      return [
        ...ee2,
        ...r3
      ].indexOf(e3.languageId) !== -1;
    }
    function It2(t3, e3, r3) {
      let a3 = e3.getText({
        start: {
          line: 0,
          character: 0
        },
        end: r3
      }), n3 = G3(t3, e3, a3);
      return !!n3 && n3[n3.length - 1].type === "jsx";
    }
    function X3(t3, e3) {
      let r3 = Object.keys(t3.editor.userLanguages).filter((a3) => te2.includes(t3.editor.userLanguages[a3]));
      return [
        ...te2,
        ...r3
      ].indexOf(e3.languageId) !== -1;
    }
    function q3(t3, e3, r3) {
      if (X3(t3, e3)) return true;
      if (Re2(t3, e3) || Le2(e3) || Be2(e3) || bt2(t3, e3)) {
        let a3 = e3.getText({
          start: {
            line: 0,
            character: 0
          },
          end: r3
        }), n3 = G3(t3, e3, a3);
        return !!n3 && n3[n3.length - 1].type === "css";
      }
      return false;
    }
    function ht2(t3, e3) {
      return t3.line === e3.start.line && t3.character >= e3.start.character ? !(t3.line === e3.end.line && t3.character > e3.end.character) : t3.line === e3.end.line && t3.character <= e3.end.character ? !(t3.line === e3.start.line && t3.character < e3.end.character) : t3.line > e3.start.line && t3.line < e3.end.line;
    }
    var De2 = (t3) => {
      let e3 = false, r3 = null, a3 = function() {
        return e3 || (r3 = t3.apply(this, arguments), e3 = true), r3;
      };
      return a3.isLazy = true, a3;
    }, Ce2 = () => ({
      doubleClassList: {
        arb: {
          match: new RegExp("(?<!\\\\)\\["),
          push: "arbitrary"
        },
        lbrace: {
          match: new RegExp("(?<!\\\\)\\{"),
          push: "interpBrace"
        },
        rbrace: {
          match: new RegExp("(?<!\\\\)\\}"),
          pop: 1
        },
        end: {
          match: new RegExp('(?<!\\\\)"'),
          pop: 1
        },
        classlist: {
          match: new RegExp("[\\s\\S]"),
          lineBreaks: true
        }
      },
      singleClassList: {
        lbrace: {
          match: new RegExp("(?<!\\\\)\\{"),
          push: "interpBrace"
        },
        rbrace: {
          match: new RegExp("(?<!\\\\)\\}"),
          pop: 1
        },
        end: {
          match: new RegExp("(?<!\\\\)'"),
          pop: 1
        },
        classlist: {
          match: new RegExp("[\\s\\S]"),
          lineBreaks: true
        }
      },
      tickClassList: {
        lbrace: {
          match: new RegExp("(?<=(?<!\\\\)\\$)\\{"),
          push: "interpBrace"
        },
        rbrace: {
          match: new RegExp("(?<!\\\\)\\}"),
          pop: 1
        },
        end: {
          match: new RegExp("(?<!\\\\)`"),
          pop: 1
        },
        classlist: {
          match: new RegExp("[\\s\\S]"),
          lineBreaks: true
        }
      },
      interpBrace: {
        startSingle: {
          match: new RegExp("(?<!\\\\)'"),
          push: "singleClassList"
        },
        startDouble: {
          match: new RegExp('(?<!\\\\)"'),
          push: "doubleClassList"
        },
        startTick: {
          match: new RegExp("(?<!\\\\)`"),
          push: "tickClassList"
        },
        lbrace: {
          match: new RegExp("(?<!\\\\)\\{"),
          push: "interpBrace"
        },
        rbrace: {
          match: new RegExp("(?<!\\\\)\\}"),
          pop: 1
        },
        text: {
          match: new RegExp("[\\s\\S]"),
          lineBreaks: true
        }
      },
      interpSingle: {
        startDouble: {
          match: new RegExp('(?<!\\\\)"'),
          push: "doubleClassList"
        },
        startTick: {
          match: new RegExp("(?<!\\\\)`"),
          push: "tickClassList"
        },
        single: {
          match: new RegExp("(?<!\\\\)'"),
          pop: 1
        },
        text: {
          match: new RegExp("[\\s\\S]"),
          lineBreaks: true
        }
      },
      interpDouble: {
        startSingle: {
          match: new RegExp("(?<!\\\\)'"),
          push: "singleClassList"
        },
        startTick: {
          match: new RegExp("(?<!\\\\)`"),
          push: "tickClassList"
        },
        double: {
          match: new RegExp('(?<!\\\\)"'),
          pop: 1
        },
        text: {
          match: new RegExp("[\\s\\S]"),
          lineBreaks: true
        }
      },
      arbitrary: {
        arb: {
          match: new RegExp("(?<!\\\\)\\]"),
          pop: 1
        },
        space: {
          match: /\s/,
          pop: 1,
          lineBreaks: true
        },
        arb2: {
          match: new RegExp("[\\s\\S]"),
          lineBreaks: true
        }
      }
    }), Ae2 = {
      main: {
        start: {
          match: '"',
          push: "doubleClassList"
        }
      },
      doubleClassList: {
        end: {
          match: '"',
          pop: 1
        },
        classlist: {
          match: /[\s\S]/,
          lineBreaks: true
        }
      }
    }, je2 = De2(() => {
      let t3 = true;
      try {
        new RegExp("(?<!)");
      } catch {
        t3 = false;
      }
      return dt2.states(t3 ? {
        main: {
          start1: {
            match: '"',
            push: "doubleClassList"
          },
          start2: {
            match: "'",
            push: "singleClassList"
          },
          start3: {
            match: "{",
            push: "interpBrace"
          }
        },
        ...Ce2()
      } : Ae2);
    }), _e2 = De2(() => {
      let t3 = true;
      try {
        new RegExp("(?<!)");
      } catch {
        t3 = false;
      }
      return dt2.states(t3 ? {
        main: {
          lbrace: {
            match: "{",
            push: "interpBrace"
          },
          single: {
            match: "'",
            push: "interpSingle"
          },
          double: {
            match: '"',
            push: "interpDouble"
          }
        },
        ...Ce2()
      } : Ae2);
    });
    function ne2(t3, e3) {
      return {
        start: {
          line: ((e3 == null ? void 0 : e3.start.line) || 0) + t3.start.line,
          character: (t3.end.line === 0 && (e3 == null ? void 0 : e3.start.character) || 0) + t3.start.character
        },
        end: {
          line: ((e3 == null ? void 0 : e3.start.line) || 0) + t3.end.line,
          character: (t3.end.line === 0 && (e3 == null ? void 0 : e3.start.character) || 0) + t3.end.character
        }
      };
    }
    function Y3(t3, e3, r3) {
      let a3 = typeof t3 == "string" ? t3 : t3.getText(r3);
      return e3 === "js" || e3 === "jsx" ? function(n3) {
        gt2 || (gt2 = dt2.states({
          main: {
            commentLine: /\/\/.*?$/,
            commentBlock: {
              match: /\/\*[^]*?\*\//,
              lineBreaks: true
            },
            stringDouble: /"(?:[^"\\]|\\.)*"/,
            stringSingle: /'(?:[^'\\]|\\.)*'/,
            stringBacktick: /`(?:[^`\\]|\\.)*`/,
            other: {
              match: /[^]/,
              lineBreaks: true
            }
          }
        }));
        let l3 = "";
        gt2.reset(n3);
        for (let i3 of gt2) l3 += i3.type === "commentLine" ? " ".repeat(i3.value.length) : i3.type === "commentBlock" ? i3.value.replace(/./g, " ") : i3.value;
        return l3;
      }(a3) : a3.replace(e3 === "css" ? /\/\*.*?\*\//gs : /<!--.*?-->/gs, un2);
    }
    function un2(t3) {
      return t3.replace(/./gs, (e3) => e3 === `
` ? `
` : " ");
    }
    var gt2;
    function tt2(t3, e3) {
      let r3, a3 = [];
      for (; (r3 = t3.exec(e3)) !== null; ) a3.push({
        ...r3
      });
      return a3;
    }
    function St2(t3) {
      let { classList: e3, range: r3, important: a3 } = t3, n3 = e3.split(/(\s+)/), l3 = [], i3 = 0;
      for (let s3 = 0; s3 < n3.length; s3++) {
        if (s3 % 2 == 0) {
          let c3 = T3(e3, i3), o3 = T3(e3, i3 + n3[s3].length);
          l3.push({
            className: n3[s3],
            classList: {
              classList: e3,
              range: r3,
              important: a3
            },
            relativeRange: {
              start: c3,
              end: o3
            },
            range: {
              start: {
                line: r3.start.line + c3.line,
                character: (o3.line === 0 ? r3.start.character : 0) + c3.character
              },
              end: {
                line: r3.start.line + o3.line,
                character: (o3.line === 0 ? r3.start.character : 0) + o3.character
              }
            }
          });
        }
        i3 += n3[s3].length;
      }
      return l3;
    }
    async function mt2(t3, e3, r3, a3, n3) {
      return n3 === void 0 && (n3 = true), ot2((await async function(l3, i3, s3, c3, o3) {
        let u3;
        return o3 === void 0 && (o3 = true), u3 = c3 === "css" ? Lt2(i3, s3) : await Ne2(l3, i3, c3, s3), qt2([
          ...u3,
          ...o3 ? await Te2(l3, i3, s3) : []
        ]);
      }(t3, e3, r3, a3, n3)).map(St2));
    }
    function Lt2(t3, e3) {
      let r3 = Y3(t3, "css", e3), a3 = tt2(/(@apply\s+)(?<classList>[^;}]+?)(?<important>\s*!important)?\s*[;}]/g, r3), n3 = e3 ? e3.start : {
        line: 0,
        character: 0
      };
      return a3.map((l3) => {
        let i3 = T3(r3, l3.index + l3[1].length), s3 = T3(r3, l3.index + l3[1].length + l3.groups.classList.length);
        return {
          classList: l3.groups.classList,
          important: !!l3.groups.important,
          range: {
            start: {
              line: n3.line + i3.line,
              character: (s3.line === 0 ? n3.character : 0) + i3.character
            },
            end: {
              line: n3.line + s3.line,
              character: (s3.line === 0 ? n3.character : 0) + s3.character
            }
          }
        };
      });
    }
    async function Te2(t3, e3, r3) {
      let a3 = (await t3.editor.getConfiguration(e3.uri)).tailwindCSS.experimental.classRegex;
      if (!Array.isArray(a3) || a3.length === 0) return [];
      let n3 = e3.getText(r3), l3 = [];
      for (let i3 = 0; i3 < a3.length; i3++) try {
        let s3, [c3, o3] = Array.isArray(a3[i3]) ? a3[i3] : [
          a3[i3]
        ], u3 = new yt2(c3, "g");
        for (; (s3 = u3.exec(n3)) !== null; ) {
          let p3 = e3.offsetAt((r3 == null ? void 0 : r3.start) || {
            line: 0,
            character: 0
          }) + s3.index[1], h3 = p3 + s3[1].length;
          if (o3) {
            let d3, m3 = new yt2(o3, "g");
            for (; (d3 = m3.exec(s3[1])) !== null; ) {
              let f3 = p3 + d3.index[1], v3 = f3 + d3[1].length;
              l3.push({
                classList: d3[1],
                range: {
                  start: e3.positionAt(f3),
                  end: e3.positionAt(v3)
                }
              });
            }
          } else l3.push({
            classList: s3[1],
            range: {
              start: e3.positionAt(p3),
              end: e3.positionAt(h3)
            }
          });
        }
      } catch {
      }
      return l3;
    }
    function Ee2(t3, e3) {
      let r3 = e3.filter((a3) => typeof a3 == "string").flatMap((a3) => [
        a3,
        `\\[${a3}\\]`
      ]);
      return tt2(new RegExp(/(?:\s|:|\()(ATTRS)\s*=\s*['"`{]/.source.replace("ATTRS", r3.join("|")), "gi"), t3);
    }
    async function Ne2(t3, e3, r3, a3) {
      let n3 = Y3(e3, r3, a3), l3 = Ee2(n3, (await t3.editor.getConfiguration(e3.uri)).tailwindCSS.classAttributes), i3 = [];
      return l3.forEach((s3) => {
        let c3 = n3.substr(s3.index + s3[0].length - 1), o3 = s3[0][0] === ":" || s3[1].startsWith("[") && s3[1].endsWith("]") ? _e2() : je2();
        o3.reset(c3);
        let u3, p3 = [];
        try {
          for (let h3 of o3) h3.type === "classlist" || h3.type.startsWith("arb") ? u3 ? u3.value += h3.value : u3 = {
            value: h3.value,
            offset: h3.offset
          } : (u3 && p3.push({
            value: u3.value,
            offset: u3.offset
          }), u3 = void 0);
        } catch {
        }
        u3 && p3.push({
          value: u3.value,
          offset: u3.offset
        }), i3.push(...p3.map((h3) => {
          let { value: d3, offset: m3 } = h3;
          if (d3.trim() === "") return null;
          let f3 = d3.match(/^\s*/), v3 = f3 === null ? 0 : f3[0].length, w3 = d3.match(/\s*$/), g3 = w3 === null ? 0 : -w3[0].length, y3 = T3(n3, s3.index + s3[0].length - 1 + m3 + v3), S3 = T3(n3, s3.index + s3[0].length - 1 + m3 + d3.length + g3);
          return {
            classList: d3.substr(v3, d3.length + g3),
            range: {
              start: {
                line: ((a3 == null ? void 0 : a3.start.line) || 0) + y3.line,
                character: (S3.line === 0 && (a3 == null ? void 0 : a3.start.character) || 0) + y3.character
              },
              end: {
                line: ((a3 == null ? void 0 : a3.start.line) || 0) + S3.line,
                character: (S3.line === 0 && (a3 == null ? void 0 : a3.start.character) || 0) + S3.character
              }
            }
          };
        }).filter((h3) => h3 !== null));
      }), i3;
    }
    async function Wt2(t3, e3) {
      if (X3(t3, e3)) return Lt2(e3);
      let r3 = G3(t3, e3);
      return r3 ? qt2(ot2([
        ...await Promise.all(r3.filter((a3) => a3.type === "html" || a3.type === "jsx").map((a3) => {
          let { type: n3, range: l3 } = a3;
          return Ne2(t3, e3, n3 === "html" ? "html" : "jsx", l3);
        })),
        ...r3.filter((a3) => a3.type === "css").map((a3) => {
          let { range: n3 } = a3;
          return Lt2(e3, n3);
        }),
        await Te2(t3, e3)
      ])) : [];
    }
    function Ie2(t3, e3) {
      if (X3(t3, e3)) return Bt2(e3);
      let r3 = G3(t3, e3);
      return r3 ? ot2(r3.filter((a3) => a3.type === "css").map((a3) => {
        let { range: n3 } = a3;
        return Bt2(e3, n3);
      })) : [];
    }
    function Bt2(t3, e3) {
      let r3 = Y3(t3, "css", e3);
      return tt2(/(?<prefix>[\s:;/*(){}])(?<helper>config|theme)(?<innerPrefix>\(\s*)(?<path>[^)]*?)\s*\)/g, r3).map((a3) => {
        let n3 = "", l3 = a3.groups.path.replace(/['"]+$/, "").replace(/^['"]+/, (c3) => (n3 = c3, "")), i3 = l3.match(/^([^\s]+)(?![^\[]*\])(?:\s*\/\s*([^\/\s]+))$/);
        i3 && (l3 = i3[1]), l3 = l3.replace(/['"]*\s*$/, "");
        let s3 = a3.index + a3.groups.prefix.length + a3.groups.helper.length + a3.groups.innerPrefix.length;
        return {
          helper: a3.groups.helper === "theme" ? "theme" : "config",
          path: l3,
          ranges: {
            full: ne2({
              start: T3(r3, s3),
              end: T3(r3, s3 + a3.groups.path.length)
            }, e3),
            path: ne2({
              start: T3(r3, s3 + n3.length),
              end: T3(r3, s3 + n3.length + l3.length)
            }, e3)
          }
        };
      });
    }
    function T3(t3, e3) {
      let { line: r3, col: a3 } = be2(t3 + `
`, e3);
      return {
        line: r3 - 1,
        character: a3 - 1
      };
    }
    var dn2 = [
      "text/html",
      "text/x-template",
      "text/x-handlebars-template"
    ], V3 = {
      text: {
        match: /[^]/,
        lineBreaks: true
      }
    }, Ot2 = {
      main: {
        cssBlockStart: {
          match: /<style(?=[>\s])/,
          push: "cssBlock"
        },
        jsBlockStart: {
          match: "<script",
          push: "jsBlock"
        },
        ...V3
      },
      cssBlock: {
        styleStart: {
          match: ">",
          next: "style"
        },
        cssBlockEnd: {
          match: "/>",
          pop: 1
        },
        attrStartDouble: {
          match: '"',
          push: "attrDouble"
        },
        attrStartSingle: {
          match: "'",
          push: "attrSingle"
        },
        interp: {
          match: "{",
          push: "interp"
        },
        ...V3
      },
      jsBlock: {
        scriptStart: {
          match: ">",
          next: "script"
        },
        jsBlockEnd: {
          match: "/>",
          pop: 1
        },
        langAttrStartDouble: {
          match: 'lang="',
          push: "langAttrDouble"
        },
        langAttrStartSingle: {
          match: "lang='",
          push: "langAttrSingle"
        },
        typeAttrStartDouble: {
          match: 'type="',
          push: "typeAttrDouble"
        },
        typeAttrStartSingle: {
          match: "type='",
          push: "typeAttrSingle"
        },
        attrStartDouble: {
          match: '"',
          push: "attrDouble"
        },
        attrStartSingle: {
          match: "'",
          push: "attrSingle"
        },
        interp: {
          match: "{",
          push: "interp"
        },
        ...V3
      },
      interp: {
        interp: {
          match: "{",
          push: "interp"
        },
        end: {
          match: "}",
          pop: 1
        },
        ...V3
      },
      langAttrDouble: {
        langAttrEnd: {
          match: '"',
          pop: 1
        },
        lang: {
          match: /[^"]+/,
          lineBreaks: true
        }
      },
      langAttrSingle: {
        langAttrEnd: {
          match: "'",
          pop: 1
        },
        lang: {
          match: /[^']+/,
          lineBreaks: true
        }
      },
      typeAttrDouble: {
        langAttrEnd: {
          match: '"',
          pop: 1
        },
        type: {
          match: /[^"]+/,
          lineBreaks: true
        }
      },
      typeAttrSingle: {
        langAttrEnd: {
          match: "'",
          pop: 1
        },
        type: {
          match: /[^']+/,
          lineBreaks: true
        }
      },
      attrDouble: {
        attrEnd: {
          match: '"',
          pop: 1
        },
        ...V3
      },
      attrSingle: {
        attrEnd: {
          match: "'",
          pop: 1
        },
        ...V3
      },
      style: {
        cssBlockEnd: {
          match: "</style>",
          pop: 1
        },
        ...V3
      },
      script: {
        jsBlockEnd: {
          match: "<\/script>",
          pop: 1
        },
        ...V3
      }
    }, pn2 = {
      ...Ot2,
      main: {
        htmlBlockStart: {
          match: "<template",
          push: "htmlBlock"
        },
        ...Ot2.main
      },
      htmlBlock: {
        htmlStart: {
          match: ">",
          next: "html"
        },
        htmlBlockEnd: {
          match: "/>",
          pop: 1
        },
        attrStartDouble: {
          match: '"',
          push: "attrDouble"
        },
        attrStartSingle: {
          match: "'",
          push: "attrSingle"
        },
        interp: {
          match: "{",
          push: "interp"
        },
        ...V3
      },
      html: {
        htmlBlockEnd: {
          match: "</template>",
          pop: 1
        },
        nestedBlockStart: {
          match: "<template",
          push: "nestedBlock"
        },
        ...V3
      },
      nestedBlock: {
        nestedStart: {
          match: ">",
          next: "nested"
        },
        nestedBlockEnd: {
          match: "/>",
          pop: 1
        },
        ...V3
      },
      nested: {
        nestedBlockEnd: {
          match: "</template>",
          pop: 1
        },
        nestedBlockStart: {
          match: "<template",
          push: "nestedBlock"
        },
        ...V3
      }
    }, hn2 = dt2.states(Ot2), gn2 = dt2.states(pn2), ft2 = new Xe2({
      max: 25,
      maxAge: 1e3
    });
    function G3(t3, e3, r3) {
      r3 === void 0 && (r3 = e3.getText());
      let a3 = `${e3.languageId}:${r3}`, n3 = ft2.get(a3);
      if (n3 !== void 0) return n3;
      let l3 = bt2(t3, e3), i3 = Le2(e3) ? "none" : Re2(t3, e3) || Be2(e3) ? "html" : l3 ? "jsx" : null;
      if (i3 === null) return ft2.set(a3, null), null;
      r3 = Y3(r3, l3 ? "js" : "html");
      let s3 = i3 === "none" ? gn2 : hn2;
      s3.reset(r3);
      let c3 = i3, o3 = [
        {
          type: i3,
          range: {
            start: {
              line: 0,
              character: 0
            },
            end: void 0
          }
        }
      ], u3 = 0;
      try {
        for (let p3 of s3) {
          if (!p3.type.startsWith("nested")) if (p3.type.endsWith("BlockStart")) {
            let h3 = T3(r3, u3);
            o3[o3.length - 1].range.end || (o3[o3.length - 1].range.end = h3), c3 = p3.type.replace(/BlockStart$/, ""), o3.push({
              type: c3,
              range: {
                start: h3,
                end: void 0
              }
            });
          } else if (p3.type.endsWith("BlockEnd")) {
            let h3 = T3(r3, u3);
            o3[o3.length - 1].range.end = h3, o3.push({
              type: i3,
              range: {
                start: h3,
                end: void 0
              }
            });
          } else p3.type === "lang" ? o3[o3.length - 1].type = p3.text : p3.type === "type" && dn2.includes(p3.text) && (o3[o3.length - 1].type = "html");
          u3 += p3.text.length;
        }
      } catch {
        return ft2.set(a3, null), null;
      }
      return o3[o3.length - 1].range.end || (o3[o3.length - 1].range.end = T3(r3, u3)), ft2.set(a3, o3), o3;
    }
    function Re2(t3, e3) {
      let r3 = Object.keys(t3.editor.userLanguages).filter((a3) => Xt2.includes(t3.editor.userLanguages[a3]));
      return [
        ...Xt2,
        ...r3
      ].indexOf(e3.languageId) !== -1;
    }
    function Le2(t3) {
      return t3.languageId === "vue";
    }
    function Be2(t3) {
      return t3.languageId === "svelte";
    }
    function Rt2(t3, e3, r3) {
      let a3 = e3.getText({
        start: {
          line: 0,
          character: 0
        },
        end: r3
      }), n3 = G3(t3, e3, a3);
      return !!n3 && n3[n3.length - 1].type === "html";
    }
    function ae2(t3) {
      return R3(t3) ? Object.keys(t3).length + " values" : typeof t3 == "function" ? "\u0192" : en2(t3, {
        inlineCharacterLimit: 1 / 0,
        singleQuotes: false,
        transform: (e3, r3, a3) => typeof e3[r3] == "function" ? "\u0192" : a3
      });
    }
    function Vt2(t3, e3, r3) {
      if (e3.__rule !== true && !Array.isArray(e3)) return null;
      if (Array.isArray(e3)) {
        let o3 = e3.map((u3) => Vt2(t3, u3, r3)).filter(Boolean);
        return o3.length === 0 ? null : o3.join(`

`);
      }
      let a3 = "", n3 = " ".repeat(r3.editor.tabSize), l3 = j3(e3, "__context", []), i3 = Object.keys(Z3(e3));
      if (i3.length === 0) return null;
      for (let o3 = 0; o3 < l3.length; o3++) a3 += `${n3.repeat(o3)}${l3[o3]} {
`;
      let s3 = n3.repeat(l3.length), c3 = i3.reduce((o3, u3, p3) => `${o3}${p3 === 0 ? "" : `
`}${$t2(e3[u3]).map((h3) => {
        let d3 = r3.tailwindCSS.showPixelEquivalents ? wt2(h3, r3.tailwindCSS.rootFontSize) : void 0;
        return `${s3 + n3}${u3}: ${h3}${d3 ? `/* ${d3} */` : ""};`;
      }).join(`
`)}`, "");
      a3 += `${s3}${function(o3, u3) {
        let p3 = u3.__pseudo.join("");
        return `${u3.__scope ? u3.__scope + " " : ""}.${tn2(o3)}${p3}`;
      }(t3, e3)} {
${c3}
${s3}}`;
      for (let o3 = l3.length - 1; o3 >= 0; o3--) a3 += n3.repeat(o3) + `
}`;
      return a3;
    }
    function F3(t3, e3) {
      let r3 = typeof e3 == "number" ? e3.toString().length : 8;
      return ("0".repeat(r3) + t3).slice(-r3);
    }
    function N3(t3, e3) {
      return !!t3.startsWith("0.0.0-insiders") || nn2(t3, e3);
    }
    function L3(t3, e3) {
      let r3 = 0, a3 = "https://tailwindcss-v0.netlify.app/docs/";
      return N3(t3, "0.99.0") && (r3 = 1, a3 = "https://v1.tailwindcss.com/docs/"), N3(t3, "1.99.0") && (r3 = 2, a3 = "https://tailwindcss.com/docs/"), `${a3}${Array.isArray(e3) ? e3[r3] || e3[e3.length - 1] : e3}`;
    }
    function xt2(t3, e3) {
      let r3 = Array.isArray(e3) ? e3 : ct2(t3, e3);
      if (!r3) return null;
      let a3 = j3(t3.classNames.classNames, [
        ...r3,
        "__info"
      ]);
      return Array.isArray(a3) ? a3.map((n3) => ({
        source: n3.__source,
        pseudo: n3.__pseudo,
        scope: n3.__scope,
        context: n3.__context
      })) : {
        source: a3.__source,
        pseudo: a3.__pseudo,
        scope: a3.__scope,
        context: a3.__context
      };
    }
    function Oe2(t3, e3) {
      return t3.featureFlags.future.includes(e3) ? t3.config.future === "all" || j3(t3.config, [
        "future",
        e3
      ], false) : !!t3.featureFlags.experimental.includes(e3) && (t3.config.experimental === "all" || j3(t3.config, [
        "experimental",
        e3
      ], false));
    }
    function vt2(t3, e3) {
      if (t3.jit) return {
        isApplyable: true
      };
      let r3 = xt2(t3, e3);
      if (!r3) return null;
      if (N3(t3.version, "2.0.0-alpha.1") || Oe2(t3, "applyComplexClasses")) return {
        isApplyable: true
      };
      let a3 = Array.isArray(e3) ? e3.join(t3.separator) : e3, n3;
      return Array.isArray(r3) ? n3 = `'@apply' cannot be used with '${a3}' because it is included in multiple rulesets.` : r3.source !== "utilities" ? n3 = `'@apply' cannot be used with '${a3}' because it is not a utility.` : r3.context && r3.context.length > 0 ? n3 = r3.context.length === 1 ? `'@apply' cannot be used with '${a3}' because it is nested inside of an at-rule ('${r3.context[0]}').` : `'@apply' cannot be used with '${a3}' because it is nested inside of at-rules (${r3.context.map((l3) => `'${l3}'`).join(", ")}).` : r3.pseudo && r3.pseudo.length > 0 && (n3 = r3.pseudo.length === 1 ? `'@apply' cannot be used with '${a3}' because its definition includes a pseudo-selector ('${r3.pseudo[0]}')` : `'@apply' cannot be used with '${a3}' because its definition includes pseudo-selectors (${r3.pseudo.map((l3) => `'${l3}'`).join(", ")}).`), n3 ? {
        isApplyable: false,
        reason: n3
      } : {
        isApplyable: true
      };
    }
    function Ve2(t3, e3) {
      let r3 = t3.variants.flatMap((i3) => i3.values.length ? i3.values.map((s3) => s3 === "DEFAULT" ? i3.name : `${i3.name}${i3.hasDash ? "-" : ""}${s3}`) : [
        i3.name
      ]), a3 = /* @__PURE__ */ new Set(), n3 = 0, l3 = function(i3, s3) {
        let c3 = [], o3 = [], u3 = 0;
        for (let p3 = 0; p3 < i3.length; p3++) {
          let h3 = i3[p3];
          c3.length === 0 && h3 === s3[0] && (s3.length !== 1 && i3.slice(p3, p3 + s3.length) !== s3 || (o3.push(i3.slice(u3, p3)), u3 = p3 + s3.length)), h3 === "(" || h3 === "[" || h3 === "{" ? c3.push(h3) : (h3 === ")" && c3[c3.length - 1] === "(" || h3 === "]" && c3[c3.length - 1] === "[" || h3 === "}" && c3[c3.length - 1] === "{") && c3.pop();
        }
        return o3.push(i3.slice(u3)), o3;
      }(e3, t3.separator);
      if (l3.length < 2) return {
        variants: Array.from(a3),
        offset: n3
      };
      l3 = l3.filter(Boolean);
      for (let i3 of l3) {
        if (!(r3.includes(i3) || t3.jit && (i3.includes("[") && i3.endsWith("]") || i3.includes("/")) && J3(t3, [
          `${i3}${t3.separator}[color:red]`
        ]).rules.length > 0)) break;
        a3.add(i3), n3 += i3.length + t3.separator.length;
      }
      return {
        variants: Array.from(a3),
        offset: n3
      };
    }
    function it2(t3, e3, r3, a3, n3) {
      var l3;
      let i3 = e3.split(/[\s+]/), s3 = i3[i3.length - 1], c3, o3 = t3.separator, u3 = s3.split(o3), p3 = [], h3 = false, d3 = {
        ...r3,
        start: {
          ...r3.start,
          character: r3.end.character - s3.length
        }
      };
      if (t3.jit) {
        var m3;
        let { variants: g3, offset: y3 } = Ve2(t3, s3);
        if (n3 && (n3.triggerKind === 1 || n3.triggerKind === 2 && n3.triggerCharacter === "/") && s3.includes("/")) {
          let k3, D3 = s3.split("/").slice(0, -1).join("/");
          if (t3.classListContainsMetadata) {
            var f3, v3;
            let x3 = D3.slice(y3);
            k3 = (f3 = t3.classList.find((A3) => Array.isArray(A3) && A3[0] === x3)) == null || (v3 = f3[1]) == null ? void 0 : v3.modifiers;
          } else {
            let x3 = D3 + "/[0]", { rules: A3 } = J3(t3, [
              x3
            ]);
            if (A3.length > 0) {
              let C3 = j3(t3.config, "theme.opacity", {});
              R3(C3) || (C3 = {}), k3 = Object.keys(C3);
            }
          }
          if (k3) return W3({
            isIncomplete: false,
            items: k3.map((x3, A3) => {
              let C3, _3 = `${D3}/${x3}`, E3 = 21, B3 = st2(t3, _3);
              var M3;
              return B3 !== null && (E3 = 16, typeof B3 != "string" && ((M3 = B3.alpha) != null ? M3 : 1) !== 0 && (C3 = H3.formatRgb(B3))), {
                label: _3,
                ...C3 ? {
                  documentation: C3
                } : {},
                kind: E3,
                sortText: F3(A3)
              };
            })
          }, {
            range: d3,
            data: t3.completionItemData
          }, t3.editor.capabilities.itemDefaults);
        }
        d3.start.character += y3;
        let S3 = s3.substr(y3).startsWith("!");
        S3 && (d3.start.character += 1);
        let b3 = [];
        if (!S3) {
          let D3 = function(x3) {
            var A3;
            return {
              kind: 9,
              data: {
                ...(A3 = t3.completionItemData) != null ? A3 : {},
                _type: "variant"
              },
              command: x3.insertTextFormat === 2 ? void 0 : {
                title: "",
                command: "editor.action.triggerSuggest"
              },
              sortText: "-" + F3(k3++),
              ...x3
            };
          }, k3 = 0;
          b3.push(...t3.variants.flatMap((x3) => {
            let A3 = [];
            if (x3.isArbitrary) A3.push(D3({
              label: `${x3.name}${x3.hasDash ? "-" : ""}[]${o3}`,
              insertTextFormat: 2,
              textEditText: `${x3.name}${x3.hasDash ? "-" : ""}[\${1}]${o3}\${0}`
            }));
            else if (!g3.includes(x3.name)) {
              let C3 = !N3(t3.version, "2.99.0"), _3 = [
                ...g3,
                x3.name
              ];
              if (C3) {
                let E3 = t3.variants.map((B3) => {
                  let { name: M3 } = B3;
                  return M3;
                });
                _3 = _3.sort((B3, M3) => E3.indexOf(M3) - E3.indexOf(B3));
              }
              A3.push(D3({
                label: `${x3.name}${o3}`,
                detail: x3.selectors().join(", "),
                textEditText: _3[_3.length - 1] + o3,
                additionalTextEdits: C3 && _3.length > 1 ? [
                  {
                    newText: _3.slice(0, _3.length - 1).join(o3) + o3,
                    range: {
                      start: {
                        ...r3.start,
                        character: r3.end.character - s3.length
                      },
                      end: {
                        ...d3.start,
                        character: d3.start.character
                      }
                    }
                  }
                ] : []
              }));
            }
            return x3.values.length && A3.push(...x3.values.filter((C3) => !g3.includes(`${x3.name}-${C3}`)).map((C3) => D3({
              label: C3 === "DEFAULT" ? `${x3.name}${o3}` : `${x3.name}${x3.hasDash ? "-" : ""}${C3}${o3}`,
              detail: x3.selectors({
                value: C3
              }).join(", ")
            }))), A3;
          }));
        }
        var w3;
        return t3.classList ? W3({
          isIncomplete: false,
          items: b3.concat(t3.classList.map((k3, D3) => {
            let x3, [A3, { color: C3 }] = k3, _3 = C3 ? 16 : 21;
            return C3 && typeof C3 != "string" && (x3 = H3.formatRgb(C3)), {
              label: A3,
              kind: _3,
              ...x3 ? {
                documentation: x3
              } : {},
              sortText: F3(D3, t3.classList.length)
            };
          }))
        }, {
          data: {
            ...(w3 = t3.completionItemData) != null ? w3 : {},
            ...S3 ? {
              important: S3
            } : {},
            variants: g3
          },
          range: d3
        }, t3.editor.capabilities.itemDefaults) : W3({
          isIncomplete: false,
          items: b3.concat(Object.keys(t3.classNames.classNames).filter((k3) => {
            let D3 = t3.classNames.classNames[k3];
            return g3.length === 0 ? D3.__info : D3.__info && ((x3) => Array.isArray(x3.__info) ? x3.__info.some((A3) => A3.__source === "utilities") : x3.__info.__source === "utilities")(D3);
          }).map((k3, D3, x3) => {
            let A3, C3 = 21, _3 = st2(t3, k3);
            var E3;
            return _3 !== null && (C3 = 16, typeof _3 != "string" && ((E3 = _3.alpha) != null ? E3 : 1) !== 0 && (A3 = H3.formatRgb(_3))), {
              label: k3,
              kind: C3,
              ...A3 ? {
                documentation: A3
              } : {},
              sortText: F3(D3, x3.length)
            };
          })).filter((k3) => k3 !== null && !(a3 && !a3(k3)))
        }, {
          range: d3,
          data: {
            ...(m3 = t3.completionItemData) != null ? m3 : {},
            variants: g3,
            ...S3 ? {
              important: S3
            } : {}
          }
        }, t3.editor.capabilities.itemDefaults);
      }
      for (let g3 = u3.length - 1; g3 > 0; g3--) {
        let y3 = u3.slice(0, g3).filter(Boolean);
        if (c3 = j3(t3.classNames.classNames, y3), c3 !== void 0 && j3(c3, [
          "__info",
          "__rule"
        ]) === void 0) {
          h3 = true, p3 = y3, d3 = {
            ...d3,
            start: {
              ...d3.start,
              character: d3.start.character + y3.join(o3).length + o3.length
            }
          };
          break;
        }
      }
      return W3({
        isIncomplete: false,
        items: Object.keys(h3 ? c3 : t3.classNames.classNames).filter((g3) => g3 !== "__info").filter((g3) => function(y3, S3) {
          let b3 = j3(y3.classNames.classNames, [
            S3
          ]);
          return !!R3(b3) && !!y3.classNames.context[S3[S3.length - 1]] && (Object.keys(b3).filter((k3) => k3 !== "__info").length > 0 || R3(b3.__info) && !b3.__info.__rule);
        }(t3, [
          ...p3,
          g3
        ])).map((g3, y3, S3) => {
          var b3;
          return {
            label: g3 + o3,
            kind: 9,
            command: {
              title: "",
              command: "editor.action.triggerSuggest"
            },
            sortText: "-" + F3(y3, S3.length),
            data: {
              ...(b3 = t3.completionItemData) != null ? b3 : {},
              className: g3,
              variants: p3
            }
          };
        }).concat(Object.keys(h3 ? c3 : t3.classNames.classNames).filter((g3) => j3(t3.classNames.classNames, [
          ...p3,
          g3,
          "__info"
        ])).map((g3, y3, S3) => {
          let b3, k3 = 21, D3 = st2(t3, g3);
          var x3;
          return D3 !== null && (k3 = 16, typeof D3 != "string" && ((x3 = D3.alpha) != null ? x3 : 1) !== 0 && (b3 = H3.formatRgb(D3))), {
            label: g3,
            kind: k3,
            ...b3 ? {
              documentation: b3
            } : {},
            sortText: F3(y3, S3.length)
          };
        })).filter((g3) => g3 !== null && !(a3 && !a3(g3)))
      }, {
        range: d3,
        data: {
          ...(l3 = t3.completionItemData) != null ? l3 : {},
          variants: p3
        }
      }, t3.editor.capabilities.itemDefaults);
    }
    var fn2 = /^(\d+\.?|\d*\.\d+)$/;
    function re2(t3) {
      return fn2.test(t3);
    }
    function W3(t3, e3, r3) {
      let a3 = r3.includes("data"), n3 = r3.includes("editRange");
      return {
        ...t3,
        ...a3 || n3 ? {
          itemDefaults: {
            ...a3 && e3.data ? {
              data: e3.data
            } : {},
            ...n3 && e3.range ? {
              editRange: e3.range
            } : {}
          }
        } : {},
        items: a3 && n3 ? t3.items : t3.items.map((l3) => {
          let { textEditText: i3, ...s3 } = l3;
          return {
            ...s3,
            ...a3 || !e3.data || s3.data ? {} : {
              data: e3.data
            },
            ...n3 || !e3.range ? i3 ? {
              textEditText: i3
            } : {} : {
              textEdit: {
                newText: i3 ?? s3.label,
                range: e3.range
              }
            }
          };
        })
      };
    }
    var Q3;
    function ie2(t3) {
      return t3.code === $3.DiagnosticKind.CssConflict;
    }
    function se2(t3) {
      return t3.code === $3.DiagnosticKind.InvalidApply;
    }
    function le2(t3) {
      return t3.code === $3.DiagnosticKind.InvalidScreen;
    }
    function oe2(t3) {
      return t3.code === $3.DiagnosticKind.InvalidVariant;
    }
    function ce2(t3) {
      return t3.code === $3.DiagnosticKind.InvalidConfigPath;
    }
    function ue2(t3) {
      return t3.code === $3.DiagnosticKind.InvalidTailwindDirective;
    }
    function de2(t3) {
      return t3.code === $3.DiagnosticKind.RecommendedVariantOrder;
    }
    function Kt2(t3) {
      return t3.reduce((e3, r3, a3) => a3 === 0 ? r3 : t3.length > 1 && a3 === t3.length - 1 ? `${e3} and ${r3}` : `${e3}, ${r3}`, "");
    }
    function pe2(t3, e3) {
      let r3 = ct2(t3, e3);
      if (!r3) return null;
      let a3 = j3(t3.classNames.classNames, [
        ...r3,
        "__info"
      ]);
      return Array.isArray(a3) ? a3.map(Z3) : Z3(a3);
    }
    async function mn2(t3, e3, r3) {
      let a3 = r3.tailwindCSS.lint.cssConflict;
      if (a3 === "ignore") return [];
      let n3 = [];
      return (await Wt2(t3, e3)).forEach((l3) => {
        let i3 = St2(l3);
        i3.forEach((s3, c3) => {
          if (t3.jit) {
            let { rules: d3 } = J3(t3, [
              s3.className
            ]);
            if (d3.length === 0) return;
            let m3 = d3.map((v3) => {
              let w3 = [];
              return v3.walkDecls((g3) => {
                let { prop: y3 } = g3;
                w3.push(y3);
              }), {
                context: Zt2(t3, v3, s3.className),
                properties: w3
              };
            }), f3 = i3.filter((v3, w3) => w3 !== c3).filter((v3) => {
              let { rules: w3 } = J3(t3, [
                v3.className
              ]);
              if (w3.length !== d3.length) return false;
              for (let g3 = 0; g3 < w3.length; g3++) {
                let y3 = w3[g3], S3 = [];
                if (y3.walkDecls((k3) => {
                  let { prop: D3 } = k3;
                  S3.push(D3);
                }), !rt2(m3[g3].properties, S3)) return false;
                let b3 = Zt2(t3, y3, v3.className);
                if (!rt2(m3[g3].context, b3)) return false;
              }
              return true;
            });
            return f3.length === 0 ? void 0 : void n3.push({
              code: $3.DiagnosticKind.CssConflict,
              className: s3,
              otherClassNames: f3,
              range: s3.range,
              severity: a3 === "error" ? 1 : 2,
              message: `'${s3.className}' applies the same CSS properties as ${Kt2(f3.map((v3) => `'${v3.className}'`))}.`,
              relatedInformation: f3.map((v3) => ({
                message: v3.className,
                location: {
                  uri: e3.uri,
                  range: v3.range
                }
              }))
            });
          }
          let o3 = pe2(t3, s3.className);
          if (!o3) return;
          let u3 = Object.keys(o3), p3 = xt2(t3, s3.className), h3 = i3.filter((d3, m3) => m3 !== c3).filter((d3) => {
            let m3 = pe2(t3, d3.className);
            if (!m3) return false;
            let f3 = xt2(t3, d3.className);
            return rt2(u3, Object.keys(m3)) && !Array.isArray(p3) && !Array.isArray(f3) && rt2(p3.context, f3.context) && rt2(p3.pseudo, f3.pseudo) && p3.scope === f3.scope;
          });
          h3.length !== 0 && n3.push({
            code: $3.DiagnosticKind.CssConflict,
            className: s3,
            otherClassNames: h3,
            range: s3.range,
            severity: a3 === "error" ? 1 : 2,
            message: `'${s3.className}' applies the same CSS ${u3.length === 1 ? "property" : "properties"} as ${Kt2(h3.map((d3) => `'${d3.className}'`))}.`,
            relatedInformation: h3.map((d3) => ({
              message: d3.className,
              location: {
                uri: e3.uri,
                range: d3.range
              }
            }))
          });
        });
      }), n3;
    }
    async function vn2(t3, e3, r3) {
      let a3 = r3.tailwindCSS.lint.invalidApply;
      return a3 === "ignore" ? [] : (await mt2(t3, e3, void 0, "css", false)).map((n3) => {
        let l3 = vt2(t3, n3.className);
        return l3 === null || l3.isApplyable === true ? null : {
          code: $3.DiagnosticKind.InvalidApply,
          severity: a3 === "error" ? 1 : 2,
          range: n3.range,
          message: l3.reason,
          className: n3
        };
      }).filter(Boolean);
    }
    function kt2(t3, e3) {
      return e3.concat([]).sort((r3, a3) => Ht2(t3, r3) - Ht2(t3, a3))[0];
    }
    function ut2(t3, e3) {
      return {
        start: {
          line: ((e3 == null ? void 0 : e3.start.line) || 0) + t3.start.line,
          character: (t3.end.line === 0 && (e3 == null ? void 0 : e3.start.character) || 0) + t3.start.character
        },
        end: {
          line: ((e3 == null ? void 0 : e3.start.line) || 0) + t3.end.line,
          character: (t3.end.line === 0 && (e3 == null ? void 0 : e3.start.character) || 0) + t3.end.character
        }
      };
    }
    function yn2(t3, e3, r3) {
      let a3 = r3.tailwindCSS.lint.invalidScreen;
      if (a3 === "ignore") return [];
      let n3 = [], l3 = [];
      if (X3(t3, e3)) l3.push(void 0);
      else {
        let i3 = G3(t3, e3);
        if (!i3) return [];
        l3.push(...i3.filter((s3) => s3.type === "css").map((s3) => {
          let { range: c3 } = s3;
          return c3;
        }));
      }
      return l3.forEach((i3) => {
        let s3 = Y3(e3, "css", i3);
        tt2(/(?:\s|^)@screen\s+(?<screen>[^\s{]+)/g, s3).forEach((c3) => {
          if (t3.screens.includes(c3.groups.screen)) return null;
          let o3 = `The screen '${c3.groups.screen}' does not exist in your theme config.`, u3 = [], p3 = kt2(c3.groups.screen, t3.screens);
          p3 && (u3.push(p3), o3 += ` Did you mean '${p3}'?`), n3.push({
            code: $3.DiagnosticKind.InvalidScreen,
            range: ut2({
              start: T3(s3, c3.index + c3[0].length - c3.groups.screen.length),
              end: T3(s3, c3.index + c3[0].length)
            }, i3),
            severity: a3 === "error" ? 1 : 2,
            message: o3,
            suggestions: u3
          });
        });
      }), n3;
    }
    function wn2(t3, e3, r3) {
      let a3 = r3.tailwindCSS.lint.invalidVariant;
      if (a3 === "ignore") return [];
      if (N3(t3.version, "2.99.0")) return [];
      let n3 = [], l3 = [];
      if (X3(t3, e3)) l3.push(void 0);
      else {
        let s3 = G3(t3, e3);
        if (!s3) return [];
        l3.push(...s3.filter((c3) => c3.type === "css").map((c3) => {
          let { range: o3 } = c3;
          return o3;
        }));
      }
      let i3 = t3.variants.flatMap((s3) => s3.values.length ? s3.values.map((c3) => c3 === "DEFAULT" ? s3.name : `${s3.name}${s3.hasDash ? "-" : ""}${c3}`) : [
        s3.name
      ]);
      return t3.jit && (i3.unshift("responsive"), i3 = i3.filter((s3) => !t3.screens.includes(s3))), l3.forEach((s3) => {
        let c3 = Y3(e3, "css", s3);
        tt2(/(?:\s|^)@variants\s+(?<variants>[^{]+)/g, c3).forEach((o3) => {
          let u3 = o3.groups.variants.split(/(\s*,\s*)/), p3 = o3.index + o3[0].length - o3.groups.variants.length;
          for (let h3 = 0; h3 < u3.length; h3 += 2) {
            let d3 = u3[h3].trim();
            if (i3.includes(d3)) continue;
            let m3 = `The variant '${d3}' does not exist.`, f3 = [], v3 = kt2(d3, i3);
            v3 && (f3.push(v3), m3 += ` Did you mean '${v3}'?`);
            let w3 = p3 + u3.slice(0, h3).join("").length;
            n3.push({
              code: $3.DiagnosticKind.InvalidVariant,
              range: ut2({
                start: T3(c3, w3),
                end: T3(c3, w3 + d3.length)
              }, s3),
              severity: a3 === "error" ? 1 : 2,
              message: m3,
              suggestions: f3
            });
          }
        });
      }), n3;
    }
    (Q3 = $3.DiagnosticKind || ($3.DiagnosticKind = {})).CssConflict = "cssConflict", Q3.InvalidApply = "invalidApply", Q3.InvalidScreen = "invalidScreen", Q3.InvalidVariant = "invalidVariant", Q3.InvalidConfigPath = "invalidConfigPath", Q3.InvalidTailwindDirective = "invalidTailwindDirective", Q3.RecommendedVariantOrder = "recommendedVariantOrder";
    var bn2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, xn = /\\(\\)?/g;
    function Ke2(t3) {
      let e3 = [];
      return t3.charCodeAt(0) === 46 && e3.push(""), t3.replace(bn2, (r3, a3, n3, l3) => {
        e3.push(n3 ? l3.replace(xn, "$1") : a3 || r3);
      }), e3;
    }
    function U3(t3) {
      return typeof t3 == "string" ? t3 : t3.reduce((e3, r3, a3) => a3 === 0 ? r3 : r3.includes(".") ? `${e3}[${r3}]` : `${e3}.${r3}`, "");
    }
    function lt2(t3, e3, r3) {
      r3 === void 0 && (r3 = []);
      let a3 = Array.isArray(e3) ? e3 : Ke2(e3), n3 = j3(t3.config, [
        ...r3,
        ...a3
      ]), l3 = [];
      function i3() {
        return $e2("123456789".substr(0, a3.length - 1)).map((c3) => c3.split("").map((o3) => parseInt(o3, 10))).map((c3) => {
          let o3 = [], u3 = 0;
          return c3.forEach((p3) => {
            o3.push(a3.slice(u3, p3).join(".")), u3 = p3;
          }), o3.push(a3.slice(u3).join(".")), o3;
        }).slice(1).find((c3) => lt2(t3, c3, r3).isValid);
      }
      if (n3 === void 0) {
        let c3 = `'${U3(e3)}' does not exist in your theme config.`, o3 = [
          ...r3,
          ...a3.slice(0, a3.length - 1)
        ], u3 = j3(t3.config, o3);
        if (R3(u3)) {
          let p3 = kt2(a3[a3.length - 1], Object.keys(u3).filter((h3) => lt2(t3, [
            ...o3,
            h3
          ]).isValid));
          p3 && (l3.push(U3([
            ...a3.slice(0, a3.length - 1),
            p3
          ])), c3 += ` Did you mean '${l3[0]}'?`);
        } else {
          let p3 = i3();
          if (p3) return {
            isValid: false,
            reason: `${c3} Did you mean '${U3(p3)}'?`,
            suggestions: [
              U3(p3)
            ]
          };
        }
        return {
          isValid: false,
          reason: c3,
          suggestions: l3
        };
      }
      if (!(typeof n3 == "string" || typeof n3 == "number" || n3 instanceof String || n3 instanceof Number || Array.isArray(n3) || typeof n3 == "function")) {
        let c3 = `'${U3(e3)}' was found but does not resolve to a valid theme value.`;
        if (R3(n3)) {
          let o3 = Object.keys(n3).filter((u3) => lt2(t3, [
            ...a3,
            u3
          ], r3).isValid);
          o3.length && (l3.push(...o3.map((u3) => U3([
            ...a3,
            u3
          ]))), c3 += ` Did you mean something like '${l3[0]}'?`);
        }
        return {
          isValid: false,
          reason: c3,
          suggestions: l3
        };
      }
      let s3 = true;
      for (let c3 = a3.length - 1; c3 >= 0; c3--) {
        let o3 = a3[c3], u3 = j3(t3.config, [
          ...r3,
          ...a3.slice(0, c3)
        ]);
        if (/^[0-9]+$/.test(o3)) {
          if (!R3(u3) && !Array.isArray(u3)) {
            s3 = false;
            break;
          }
        } else if (!R3(u3)) {
          s3 = false;
          break;
        }
      }
      if (!s3) {
        let c3 = `'${U3(e3)}' does not exist in your theme config.`, o3 = i3();
        return o3 ? {
          isValid: false,
          reason: `${c3} Did you mean '${U3(o3)}'?`,
          suggestions: [
            U3(o3)
          ]
        } : {
          isValid: false,
          reason: c3,
          suggestions: []
        };
      }
      return {
        isValid: true,
        value: n3
      };
    }
    function $n2(t3, e3, r3) {
      let a3 = r3.tailwindCSS.lint.invalidConfigPath;
      if (a3 === "ignore") return [];
      let n3 = [];
      return Ie2(t3, e3).forEach((l3) => {
        let i3 = lt2(t3, l3.path, l3.helper === "theme" ? [
          "theme"
        ] : []);
        i3.isValid !== true && n3.push({
          code: $3.DiagnosticKind.InvalidConfigPath,
          range: l3.ranges.path,
          severity: a3 === "error" ? 1 : 2,
          message: i3.reason,
          suggestions: i3.suggestions
        });
      }), n3;
    }
    function Sn2(t3, e3, r3) {
      let a3 = r3.tailwindCSS.lint.invalidTailwindDirective;
      if (a3 === "ignore") return [];
      let n3 = [], l3 = [];
      if (X3(t3, e3)) l3.push(void 0);
      else {
        let o3 = G3(t3, e3);
        if (!o3) return [];
        l3.push(...o3.filter((u3) => u3.type === "css").map((u3) => {
          let { range: p3 } = u3;
          return p3;
        }));
      }
      let i3, s3 = [
        "sass",
        "sugarss",
        "stylus"
      ];
      i3 = s3.includes(e3.languageId) || t3.editor && s3.includes(t3.editor.userLanguages[e3.languageId]) ? /(?:\s|^)@tailwind\s+(?<value>[^\r\n]+)/g : /(?:\s|^)@tailwind\s+(?<value>[^;]+)/g;
      let c3 = t3.jit && N3(t3.version, "2.1.99");
      return l3.forEach((o3) => {
        let u3 = Y3(e3, "css", o3), p3 = tt2(i3, u3), h3 = [
          "utilities",
          "components",
          "screens",
          N3(t3.version, "1.0.0-beta.1") ? "base" : "preflight",
          c3 && "variants"
        ].filter(Boolean), d3 = h3;
        c3 && (d3 = d3.filter((m3) => m3 !== "screens")), p3.forEach((m3) => {
          if (h3.includes(m3.groups.value)) return null;
          let f3 = `'${m3.groups.value}' is not a valid value.`, v3 = [];
          if (m3.groups.value === "preflight") v3.push("base"), f3 += " Did you mean 'base'?";
          else {
            let w3 = kt2(m3.groups.value, d3);
            w3 && (v3.push(w3), f3 += ` Did you mean '${w3}'?`);
          }
          n3.push({
            code: $3.DiagnosticKind.InvalidTailwindDirective,
            range: ut2({
              start: T3(u3, m3.index + m3[0].length - m3.groups.value.length),
              end: T3(u3, m3.index + m3[0].length)
            }, o3),
            severity: a3 === "error" ? 1 : 2,
            message: f3,
            suggestions: v3
          });
        });
      }), n3;
    }
    async function kn(t3, e3, r3) {
      if (!t3.jit) return [];
      if (N3(t3.version, "2.99.0")) return [];
      let a3 = r3.tailwindCSS.lint.recommendedVariantOrder;
      if (a3 === "ignore") return [];
      let n3 = [];
      return (await Wt2(t3, e3)).forEach((l3) => {
        St2(l3).forEach((i3) => {
          let { rules: s3 } = J3(t3, [
            i3.className
          ]);
          if (s3.length === 0) return;
          let { variants: c3, offset: o3 } = Ve2(t3, i3.className), u3 = [
            ...c3
          ].sort((p3, h3) => Se2(t3.jitContext.variantOrder.get(h3) - t3.jitContext.variantOrder.get(p3)));
          (function(p3, h3) {
            if (p3 === h3) return true;
            if (p3.length !== h3.length) return false;
            for (let d3 = 0; d3 < p3.length; ++d3) if (p3[d3] !== h3[d3]) return false;
            return true;
          })(c3, u3) || n3.push({
            code: $3.DiagnosticKind.RecommendedVariantOrder,
            suggestions: [
              [
                ...u3,
                i3.className.substr(o3)
              ].join(t3.separator)
            ],
            range: i3.range,
            severity: a3 === "error" ? 1 : 2,
            message: "Variants are not in the recommended order, which may cause unexpected CSS output."
          });
        });
      }), n3;
    }
    async function he2(t3, e3, r3) {
      r3 === void 0 && (r3 = [
        $3.DiagnosticKind.CssConflict,
        $3.DiagnosticKind.InvalidApply,
        $3.DiagnosticKind.InvalidScreen,
        $3.DiagnosticKind.InvalidVariant,
        $3.DiagnosticKind.InvalidConfigPath,
        $3.DiagnosticKind.InvalidTailwindDirective,
        $3.DiagnosticKind.RecommendedVariantOrder
      ]);
      let a3 = await t3.editor.getConfiguration(e3.uri);
      return a3.tailwindCSS.validate ? [
        ...r3.includes($3.DiagnosticKind.CssConflict) ? await mn2(t3, e3, a3) : [],
        ...r3.includes($3.DiagnosticKind.InvalidApply) ? await vn2(t3, e3, a3) : [],
        ...r3.includes($3.DiagnosticKind.InvalidScreen) ? yn2(t3, e3, a3) : [],
        ...r3.includes($3.DiagnosticKind.InvalidVariant) ? wn2(t3, e3, a3) : [],
        ...r3.includes($3.DiagnosticKind.InvalidConfigPath) ? $n2(t3, e3, a3) : [],
        ...r3.includes($3.DiagnosticKind.InvalidTailwindDirective) ? Sn2(t3, e3, a3) : [],
        ...r3.includes($3.DiagnosticKind.RecommendedVariantOrder) ? await kn(t3, e3, a3) : []
      ] : [];
    }
    function ge2(t3, e3) {
      let r3 = $t2(e3), a3 = be2(t3 + `
`, {
        origin: 0
      }), n3 = [];
      r3.forEach((s3) => {
        let c3 = a3.toIndex(s3.start.line, s3.start.character), o3 = a3.toIndex(s3.end.line, s3.end.character);
        for (let u3 = c3 - 1; u3 >= 0 && /\s/.test(t3.charAt(u3)); u3--) c3 = u3;
        n3.push({
          start: c3,
          end: o3
        });
      }), n3.sort((s3, c3) => s3.start - c3.start);
      let l3 = "", i3 = 0;
      return n3.forEach((s3) => {
        l3 += t3.substring(i3, s3.start), i3 = s3.end;
      }), l3 += t3.substring(i3), l3.trim();
    }
    var fe2 = /\s*!important\s*$/i, Dn2 = {
      "box-flex": true,
      "box-flex-group": true,
      "column-count": true,
      flex: true,
      "flex-grow": true,
      "flex-positive": true,
      "flex-shrink": true,
      "flex-negative": true,
      "font-weight": true,
      "line-clamp": true,
      "line-height": true,
      opacity: true,
      order: true,
      orphans: true,
      "tab-size": true,
      widows: true,
      "z-index": true,
      zoom: true,
      "fill-opacity": true,
      "stroke-dashoffset": true,
      "stroke-opacity": true,
      "stroke-width": true
    };
    function me2(t3, e3, r3, a3) {
      r3 !== false && r3 !== null && (e3 = e3.replace(/([A-Z])/g, "-$1").replace(/^ms-/, "-ms-").toLowerCase(), typeof r3 == "number" && (r3 = r3 === 0 || Dn2[e3] ? r3.toString() : r3.toString() + "px"), e3 === "css-float" && (e3 = "float"), fe2.test(r3) ? (r3 = r3.replace(fe2, ""), t3.push(a3.decl({
        prop: e3,
        value: r3,
        important: true
      }))) : t3.push(a3.decl({
        prop: e3,
        value: r3
      })));
    }
    function ve2(t3, e3, r3, a3) {
      var n3 = a3.atRule({
        name: e3[1],
        params: e3[3] || ""
      });
      typeof r3 == "object" && (n3.nodes = [], Pt2(r3, n3, a3)), t3.push(n3);
    }
    function Pt2(t3, e3, r3) {
      var a3, n3, l3, i3;
      for (a3 in t3) if (t3.hasOwnProperty(a3)) {
        if ((n3 = t3[a3]) == null) continue;
        if (a3[0] === "@") {
          var s3 = a3.match(/@([^\s]+)(\s+([\w\W]*)\s*)?/);
          if (Array.isArray(n3)) for (i3 = 0; i3 < n3.length; i3++) ve2(e3, s3, n3[i3], r3);
          else ve2(e3, s3, n3, r3);
        } else if (Array.isArray(n3)) for (i3 = 0; i3 < n3.length; i3++) me2(e3, a3, n3[i3], r3);
        else typeof n3 == "object" ? (Pt2(n3, l3 = r3.rule({
          selector: a3
        }), r3), e3.push(l3)) : me2(e3, a3, n3, r3);
      }
    }
    function ye2(t3) {
      return {
        start: {
          line: t3.start.line - 1,
          character: t3.start.column - 1
        },
        end: {
          line: t3.end.line - 1,
          character: t3.end.column
        }
      };
    }
    $3.completionsFromClassList = it2, $3.culoriColorToVscodeColor = Nt2, $3.doCodeActions = async function(t3, e3) {
      if (!t3.enabled) return [];
      let r3 = await async function(a3, n3, l3) {
        let i3 = a3.editor.documents.get(n3.textDocument.uri);
        if (!i3) return [];
        let s3 = await he2(a3, i3, l3);
        return n3.context.diagnostics.map((c3) => s3.find((o3) => o3.code === c3.code && o3.message === c3.message && xe2(o3.range, c3.range))).filter(Boolean);
      }(t3, e3, e3.context.diagnostics.map((a3) => a3.code).filter(Boolean));
      return Promise.all(r3.map((a3) => se2(a3) ? async function(n3, l3, i3) {
        let s3 = n3.editor.documents.get(l3.textDocument.uri);
        if (!s3) return [];
        let c3, o3 = Y3(s3, "css"), { postcss: u3 } = n3.modules, p3 = [], h3 = i3.className.classList.classList.split(/\s+/).length, d3 = ct2(n3, i3.className.className), m3 = j3(n3.classNames.classNames, d3);
        if (Array.isArray(m3)) return [];
        if (!X3(n3, s3)) {
          var f3;
          let v3 = G3(n3, s3);
          if (!v3) return [];
          if (c3 = (f3 = v3.filter((w3) => w3.type === "css").find((w3) => {
            let { range: g3 } = w3;
            return ht2(i3.range.start, g3);
          })) == null ? void 0 : f3.range, !c3) return [];
          o3 = Y3(s3, "css", c3);
        }
        try {
          await u3.module([
            u3.module.plugin("", function(v3) {
              return v3 === void 0 && (v3 = {}), (w3) => {
                w3.walkRules((g3) => {
                  if (p3.length) return false;
                  g3.walkAtRules("apply", (y3) => {
                    let S3 = ye2(y3.source);
                    if (c3 && (S3 = ut2(S3, c3)), !ht2(i3.range.start, S3)) return;
                    let b3 = function(C3, _3, E3, B3) {
                      B3 === void 0 && (B3 = false);
                      let M3 = _3[_3.length - 1], Ft2 = vt2(C3, [
                        M3
                      ]);
                      if (Ft2 === null || Ft2.isApplyable === false) return null;
                      let Ct2 = xt2(C3, _3);
                      if (Array.isArray(Ct2)) return null;
                      let At2 = Ct2.context, Fe2 = Ct2.pseudo, Me2 = C3.classNames.context, et = [];
                      for (let O3 = 0; O3 < _3.length - 1; O3++) {
                        let P3 = _3[O3], z3 = Me2[P3];
                        if (!z3) return null;
                        C3.screens.includes(P3) && (et.push("@screen " + P3), At2 = At2.filter((jt2) => !z3.includes(jt2)));
                      }
                      et.push(...At2);
                      let pt2 = {};
                      for (let O3 = 1; O3 <= et.length; O3++) Yt2.dset(pt2, et.slice(0, O3), {});
                      if ((E3 = function(O3, P3) {
                        if (P3.length === 0) return O3;
                        let z3 = true, jt2 = Gt2((ze2) => {
                          ot2(ze2.split((at2) => true)).forEach((at2) => {
                            for (let nt2 = at2.nodes.length - 1; nt2 >= 0 && at2.nodes[nt2].type === "pseudo"; nt2--) if (P3.includes(at2.nodes[nt2].value)) {
                              z3 = false;
                              break;
                            }
                            z3 && P3.forEach((nt2) => {
                              at2.append(Gt2.pseudo({
                                value: nt2
                              }));
                            });
                          });
                        }).processSync(O3);
                        return z3 ? jt2 : null;
                      }(E3, Fe2)) === null) return null;
                      let Mt2 = {
                        [E3]: {
                          [`@apply ${M3}${B3 ? " !important" : ""}`]: ""
                        }
                      };
                      return et.length ? Yt2.dset(pt2, et, Mt2) : pt2 = Mt2, function(O3, P3) {
                        var z3 = P3.root();
                        return Pt2(O3, z3, P3), z3;
                      }(pt2, C3.modules.postcss);
                    }(n3, d3, g3.selector, i3.className.classList.important);
                    if (!b3) return false;
                    g3.after(b3.nodes);
                    let k3 = g3.next();
                    if (!k3) return false;
                    h3 === 1 ? y3.remove() : p3.push({
                      range: i3.className.classList.range,
                      newText: ge2(i3.className.classList.classList, i3.className.relativeRange)
                    });
                    let D3, x3 = ye2(g3.source);
                    c3 && (x3 = ut2(x3, c3));
                    let A3 = an2(o3);
                    return p3.push({
                      range: x3,
                      newText: g3.toString() + (k3.raws.before || `

`) + k3.toString().replace(/\n\s*\n/g, `
`).replace(/(@apply [^;\n]+)$/gm, "$1;").replace(/([^\s^]){$/gm, "$1 {").replace(/^\s+/gm, (C3) => (D3 === void 0 && (D3 = C3), C3.replace(new RegExp(D3, "g"), A3.indent))).replace(/^(\s+)(.*?[^{}]\n)([^\s}])/gm, "$1$2$1$3")
                    }), false;
                  });
                });
              };
            })
          ]).process(o3, {
            from: void 0
          });
        } catch {
          return [];
        }
        return p3.length ? [
          {
            title: "Extract to new rule",
            kind: "quickfix",
            diagnostics: [
              i3
            ],
            edit: {
              changes: {
                [l3.textDocument.uri]: p3
              }
            }
          }
        ] : [];
      }(t3, e3, a3) : ie2(a3) ? async function(n3, l3, i3) {
        return [
          {
            title: "Delete " + Kt2(i3.otherClassNames.map((s3) => `'${s3.className}'`)),
            kind: "quickfix",
            diagnostics: [
              i3
            ],
            edit: {
              changes: {
                [l3.textDocument.uri]: [
                  {
                    range: i3.className.classList.range,
                    newText: ge2(i3.className.classList.classList, i3.otherClassNames.map((s3) => s3.relativeRange))
                  }
                ]
              }
            }
          }
        ];
      }(0, e3, a3) : ce2(a3) || ue2(a3) || le2(a3) || oe2(a3) || de2(a3) ? function(n3, l3, i3) {
        return i3.suggestions.map((s3) => ({
          title: `Replace with '${s3}'`,
          kind: "quickfix",
          diagnostics: [
            i3
          ],
          edit: {
            changes: {
              [l3.textDocument.uri]: [
                {
                  range: i3.range,
                  newText: s3
                }
              ]
            }
          }
        }));
      }(0, e3, a3) : [])).then(ot2).then((a3) => {
        return n3 = (l3) => JSON.stringify(l3.edit), a3.filter((l3, i3, s3) => s3.map(n3).indexOf(n3(l3)) === i3);
        var n3;
      });
    }, $3.doComplete = async function(t3, e3, r3, a3) {
      return t3 === null ? {
        items: [],
        isIncomplete: false
      } : await async function(n3, l3, i3, s3) {
        return q3(n3, l3, i3) ? function(c3, o3, u3, p3) {
          let h3 = function(m3, f3) {
            let v3 = tt2(/@apply\s+(?<classList>[^;}]*)$/gi, f3);
            return v3.length === 0 ? null : v3[v3.length - 1];
          }(0, o3.getText({
            start: {
              line: Math.max(u3.line - 30, 0),
              character: 0
            },
            end: u3
          }));
          if (h3 === null) return null;
          let d3 = h3.groups.classList;
          return it2(c3, d3, {
            start: {
              line: u3.line,
              character: u3.character - d3.length
            },
            end: u3
          }, (m3) => {
            var f3, v3, w3, g3;
            if (m3.kind === 9) return N3(c3.version, "2.0.0-alpha.1") || Oe2(c3, "applyComplexClasses");
            let y3 = (f3 = (v3 = m3.data) == null ? void 0 : v3.variants) != null ? f3 : [], S3 = (w3 = (g3 = m3.data) == null ? void 0 : g3.className) != null ? w3 : m3.label, b3 = vt2(c3, [
              ...y3,
              S3
            ]);
            return b3 !== null && b3.isApplyable === true;
          }, p3);
        }(n3, l3, i3, s3) : Rt2(n3, l3, i3) || It2(n3, l3, i3) ? async function(c3, o3, u3, p3) {
          let h3 = o3.getText({
            start: o3.positionAt(Math.max(0, o3.offsetAt(u3) - 1e3)),
            end: u3
          }), d3 = Ee2(h3, (await c3.editor.getConfiguration(o3.uri)).tailwindCSS.classAttributes);
          if (d3.length === 0) return null;
          let m3 = d3[d3.length - 1], f3 = m3[0][0] === ":" || m3[1].startsWith("[") && m3[1].endsWith("]") ? _e2() : je2();
          f3.reset(h3.substr(m3.index + m3[0].length - 1));
          try {
            let v3 = Array.from(f3), w3 = v3[v3.length - 1];
            if (w3.type.startsWith("start") || w3.type === "classlist" || w3.type.startsWith("arb")) {
              let g3 = "";
              for (let y3 = v3.length - 1; y3 >= 0 && (v3[y3].type === "classlist" || v3[y3].type.startsWith("arb")); y3--) g3 = v3[y3].value + g3;
              return it2(c3, g3, {
                start: {
                  line: u3.line,
                  character: u3.character - g3.length
                },
                end: u3
              }, void 0, p3);
            }
          } catch {
          }
          return null;
        }(n3, l3, i3, s3) : null;
      }(t3, e3, r3, a3) || function(n3, l3, i3) {
        var s3;
        if (!q3(n3, l3, i3)) return null;
        let c3 = l3.getText({
          start: {
            line: i3.line,
            character: 0
          },
          end: {
            line: i3.line,
            character: i3.character + 1
          }
        }), o3 = c3.substr(0, c3.length - 1).match(/[\s:;/*(){}](?<helper>config|theme)\(\s*['"]?(?<path>[^)'"]*)$/);
        if (o3 === null) return null;
        let u3, p3 = o3.groups.path.replace(/^['"]+/g, ""), h3 = p3.match(/^([^\s]+)(?![^\[]*\])(?:\s*\/\s*([^\/\s]*))$/);
        if (h3 && (p3 = h3[1], u3 = h3[2]), u3 !== void 0) return null;
        let d3, m3 = o3.groups.helper === "config" ? n3.config : j3(n3.config, "theme", {}), f3 = p3.split(/([\[\].]+)/), v3 = f3.filter((b3, k3) => k3 % 2 == 0), w3 = f3.filter((b3, k3) => k3 % 2 != 0), g3 = v3[v3.length - 1].length, y3 = w3.length ? w3[w3.length - 1] : null;
        if (v3.length === 1) d3 = m3;
        else for (let b3 = v3.length - 1; b3 > 0; b3--) {
          let k3 = j3(m3, v3.slice(0, b3));
          if (R3(k3)) {
            d3 = k3, g3 = f3.slice(2 * b3).reduce((D3, x3) => D3 + x3.length, 0), y3 = w3[b3 - 1];
            break;
          }
        }
        if (!d3) return null;
        let S3 = {
          start: {
            line: i3.line,
            character: i3.character - g3
          },
          end: i3
        };
        return W3({
          isIncomplete: false,
          items: Object.keys(d3).sort((b3, k3) => {
            let D3 = re2(b3), x3 = re2(k3);
            return D3 && !x3 ? -1 : !D3 && x3 ? 1 : D3 && x3 ? parseFloat(b3) - parseFloat(k3) : 0;
          }).map((b3, k3, D3) => {
            var x3;
            let A3 = Et2(d3[b3]), C3 = b3.indexOf(".") !== -1 && y3 && y3.endsWith("."), _3 = c3.charAt(c3.length - 1) !== "]" && (C3 || y3 && y3.endsWith("[")), E3 = ae2(d3[b3]);
            return {
              label: b3,
              sortText: F3(k3, D3.length),
              commitCharacters: [
                !b3.includes(".") && ".",
                !b3.includes("[") && "["
              ].filter(Boolean),
              kind: A3 ? 16 : R3(d3[b3]) ? 9 : 10,
              detail: E3 === "0" || E3 === "transparent" ? E3 + " " : E3,
              ...A3 && typeof A3 != "string" && ((x3 = A3.alpha) != null ? x3 : 1) !== 0 ? {
                documentation: H3.formatRgb(A3)
              } : {},
              ..._3 ? {
                textEditText: b3 + "]"
              } : {},
              additionalTextEdits: C3 ? [
                {
                  newText: "[",
                  range: {
                    start: {
                      ...S3.start,
                      character: S3.start.character - 1
                    },
                    end: S3.start
                  }
                }
              ] : []
            };
          })
        }, {
          range: S3,
          data: {
            ...(s3 = n3.completionItemData) != null ? s3 : {},
            _type: "helper"
          }
        }, n3.editor.capabilities.itemDefaults);
      }(t3, e3, r3) || function(n3, l3, i3) {
        var s3;
        if (!q3(n3, l3, i3)) return null;
        let c3 = l3.getText({
          start: {
            line: i3.line,
            character: 0
          },
          end: i3
        }).match(/^\s*@(?<partial>[a-z]*)$/i);
        return c3 === null ? null : W3({
          isIncomplete: false,
          items: [
            {
              label: "@tailwind",
              documentation: {
                kind: "markdown",
                value: `Use the \`@tailwind\` directive to insert Tailwind\u2019s \`base\`, \`components\`, \`utilities\` and \`${n3.jit && N3(n3.version, "2.1.99") ? "variants" : "screens"}\` styles into your CSS.

[Tailwind CSS Documentation](${L3(n3.version, "functions-and-directives/#tailwind")})`
              }
            },
            {
              label: "@screen",
              documentation: {
                kind: "markdown",
                value: `The \`@screen\` directive allows you to create media queries that reference your breakpoints by name instead of duplicating their values in your own CSS.

[Tailwind CSS Documentation](${L3(n3.version, "functions-and-directives/#screen")})`
              }
            },
            {
              label: "@apply",
              documentation: {
                kind: "markdown",
                value: `Use \`@apply\` to inline any existing utility classes into your own custom CSS.

[Tailwind CSS Documentation](${L3(n3.version, "functions-and-directives/#apply")})`
              }
            },
            ...N3(n3.version, "1.8.0") ? [
              {
                label: "@layer",
                documentation: {
                  kind: "markdown",
                  value: `Use the \`@layer\` directive to tell Tailwind which "bucket" a set of custom styles belong to. Valid layers are \`base\`, \`components\`, and \`utilities\`.

[Tailwind CSS Documentation](${L3(n3.version, "functions-and-directives/#layer")})`
                }
              }
            ] : [],
            ...N3(n3.version, "2.99.0") ? [] : [
              {
                label: "@variants",
                documentation: {
                  kind: "markdown",
                  value: `You can generate \`responsive\`, \`hover\`, \`focus\`, \`active\`, and other variants of your own utilities by wrapping their definitions in the \`@variants\` directive.

[Tailwind CSS Documentation](${L3(n3.version, "functions-and-directives/#variants")})`
                }
              },
              {
                label: "@responsive",
                documentation: {
                  kind: "markdown",
                  value: `You can generate responsive variants of your own classes by wrapping their definitions in the \`@responsive\` directive.

[Tailwind CSS Documentation](${L3(n3.version, "functions-and-directives/#responsive")})`
                }
              }
            ],
            ...N3(n3.version, "3.2.0") ? [
              {
                label: "@config",
                documentation: {
                  kind: "markdown",
                  value: `Use the \`@config\` directive to specify which config file Tailwind should use when compiling that CSS file.

[Tailwind CSS Documentation](${L3(n3.version, "functions-and-directives/#config")})`
                }
              }
            ] : []
          ].map((o3) => ({
            ...o3,
            kind: 14
          }))
        }, {
          data: {
            ...(s3 = n3.completionItemData) != null ? s3 : {},
            _type: "directive"
          },
          range: {
            start: {
              line: i3.line,
              character: i3.character - c3.groups.partial.length - 1
            },
            end: i3
          }
        }, n3.editor.capabilities.itemDefaults);
      }(t3, e3, r3) || function(n3, l3, i3) {
        var s3;
        if (!q3(n3, l3, i3)) return null;
        let c3 = l3.getText({
          start: {
            line: i3.line,
            character: 0
          },
          end: i3
        }).match(/^\s*@screen\s+(?<partial>[^\s]*)$/i);
        if (c3 === null) return null;
        let o3 = j3(n3.config, [
          "screens"
        ], j3(n3.config, [
          "theme",
          "screens"
        ], {}));
        return R3(o3) ? W3({
          isIncomplete: false,
          items: Object.keys(o3).map((u3, p3) => ({
            label: u3,
            kind: 21,
            sortText: F3(p3)
          }))
        }, {
          data: {
            ...(s3 = n3.completionItemData) != null ? s3 : {},
            _type: "screen"
          },
          range: {
            start: {
              line: i3.line,
              character: i3.character - c3.groups.partial.length
            },
            end: i3
          }
        }, n3.editor.capabilities.itemDefaults) : null;
      }(t3, e3, r3) || function(n3, l3, i3) {
        var s3;
        if (!q3(n3, l3, i3) || N3(n3.version, "2.99.0")) return null;
        let c3 = l3.getText({
          start: {
            line: i3.line,
            character: 0
          },
          end: i3
        }).match(/^\s*@variants\s+(?<partial>[^}]*)$/i);
        if (c3 === null) return null;
        let o3 = c3.groups.partial.split(/\s*,\s*/);
        if (/\s+/.test(o3[o3.length - 1])) return null;
        let u3 = n3.variants.flatMap((h3) => h3.values.length ? h3.values.map((d3) => d3 === "DEFAULT" ? h3.name : `${h3.name}${h3.hasDash ? "-" : ""}${d3}`) : [
          h3.name
        ]), p3 = o3.slice(0, o3.length - 1);
        return n3.jit && (u3.unshift("responsive"), u3 = u3.filter((h3) => !n3.screens.includes(h3))), W3({
          isIncomplete: false,
          items: u3.filter((h3) => p3.indexOf(h3) === -1).map((h3, d3, m3) => ({
            label: h3,
            kind: 21,
            sortText: F3(d3, m3.length)
          }))
        }, {
          data: {
            ...(s3 = n3.completionItemData) != null ? s3 : {},
            _type: "variant"
          },
          range: {
            start: {
              line: i3.line,
              character: i3.character - o3[o3.length - 1].length
            },
            end: i3
          }
        }, n3.editor.capabilities.itemDefaults);
      }(t3, e3, r3) || function(n3, l3, i3) {
        var s3;
        if (!q3(n3, l3, i3)) return null;
        let c3 = l3.getText({
          start: {
            line: i3.line,
            character: 0
          },
          end: i3
        }).match(/^\s*@tailwind\s+(?<partial>[^\s]*)$/i);
        return c3 === null ? null : W3({
          isIncomplete: false,
          items: [
            N3(n3.version, "1.0.0-beta.1") ? {
              label: "base",
              documentation: {
                kind: "markdown",
                value: `This injects Tailwind\u2019s base styles and any base styles registered by plugins.

[Tailwind CSS Documentation](${L3(n3.version, "functions-and-directives/#tailwind")})`
              }
            } : {
              label: "preflight",
              documentation: {
                kind: "markdown",
                value: `This injects Tailwind\u2019s base styles, which is a combination of Normalize.css and some additional base styles.

[Tailwind CSS Documentation](${L3(n3.version, "functions-and-directives/#tailwind")})`
              }
            },
            {
              label: "components",
              documentation: {
                kind: "markdown",
                value: `This injects Tailwind\u2019s component classes and any component classes registered by plugins.

[Tailwind CSS Documentation](${L3(n3.version, "functions-and-directives/#tailwind")})`
              }
            },
            {
              label: "utilities",
              documentation: {
                kind: "markdown",
                value: `This injects Tailwind\u2019s utility classes and any utility classes registered by plugins.

[Tailwind CSS Documentation](${L3(n3.version, "functions-and-directives/#tailwind")})`
              }
            },
            n3.jit && N3(n3.version, "2.1.99") ? {
              label: "variants",
              documentation: {
                kind: "markdown",
                value: `Use this directive to control where Tailwind injects the utility variants.

This directive is considered an advanced escape hatch and it is recommended to omit it whenever possible. If omitted, Tailwind will append these classes to the very end of your stylesheet by default.

[Tailwind CSS Documentation](${L3(n3.version, "just-in-time-mode#variants-are-inserted-at-tailwind-variants")})`
              }
            } : {
              label: "screens",
              documentation: {
                kind: "markdown",
                value: `Use this directive to control where Tailwind injects the responsive variations of each utility.

If omitted, Tailwind will append these classes to the very end of your stylesheet by default.

[Tailwind CSS Documentation](${L3(n3.version, "functions-and-directives/#tailwind")})`
              }
            }
          ].map((o3) => ({
            ...o3,
            kind: 21
          }))
        }, {
          data: {
            ...(s3 = n3.completionItemData) != null ? s3 : {},
            _type: "@tailwind"
          },
          range: {
            start: {
              line: i3.line,
              character: i3.character - c3.groups.partial.length
            },
            end: i3
          }
        }, n3.editor.capabilities.itemDefaults);
      }(t3, e3, r3) || function(n3, l3, i3) {
        var s3;
        if (!q3(n3, l3, i3)) return null;
        let c3 = l3.getText({
          start: {
            line: i3.line,
            character: 0
          },
          end: i3
        }).match(/^\s*@layer\s+(?<partial>[^\s]*)$/i);
        return c3 === null ? null : W3({
          isIncomplete: false,
          items: [
            "base",
            "components",
            "utilities"
          ].map((o3, u3, p3) => ({
            label: o3,
            kind: 21,
            sortText: F3(u3, p3.length)
          }))
        }, {
          data: {
            ...(s3 = n3.completionItemData) != null ? s3 : {},
            _type: "layer"
          },
          range: {
            start: {
              line: i3.line,
              character: i3.character - c3.groups.partial.length
            },
            end: i3
          }
        }, n3.editor.capabilities.itemDefaults);
      }(t3, e3, r3) || await async function(n3, l3, i3) {
        var s3;
        if (!q3(n3, l3, i3) || !N3(n3.version, "3.2.0")) return null;
        let c3 = l3.getText({
          start: {
            line: i3.line,
            character: 0
          },
          end: i3
        }).match(/@config\s*(?<partial>'[^']*|"[^"]*)$/);
        if (!c3) return null;
        let o3 = c3.groups.partial.slice(1), u3 = o3.substring(0, o3.lastIndexOf("/")), p3 = o3.substring(o3.lastIndexOf("/") + 1);
        return W3({
          isIncomplete: false,
          items: (await n3.editor.readDirectory(l3, u3 || ".")).filter((h3) => {
            let [d3, m3] = h3;
            return m3.isDirectory || /\.c?js$/.test(d3);
          }).map((h3) => {
            let [d3, m3] = h3;
            return {
              label: m3.isDirectory ? d3 + "/" : d3,
              kind: m3.isDirectory ? 19 : 17,
              command: m3.isDirectory ? {
                command: "editor.action.triggerSuggest",
                title: ""
              } : void 0
            };
          })
        }, {
          data: {
            ...(s3 = n3.completionItemData) != null ? s3 : {},
            _type: "filesystem"
          },
          range: {
            start: {
              line: i3.line,
              character: i3.character - p3.length
            },
            end: i3
          }
        }, n3.editor.capabilities.itemDefaults);
      }(t3, e3, r3) || await async function(n3, l3, i3, s3) {
        let c3 = (await n3.editor.getConfiguration(l3.uri)).tailwindCSS.experimental.classRegex;
        if (c3.length === 0) return null;
        let o3 = l3.offsetAt(i3), u3 = {
          start: l3.positionAt(Math.max(0, o3 - 1e3)),
          end: l3.positionAt(o3 + 1e3)
        }, p3 = l3.getText(u3);
        for (let h3 = 0; h3 < c3.length; h3++) try {
          let d3, [m3, f3] = Array.isArray(c3[h3]) ? c3[h3] : [
            c3[h3]
          ], v3 = new yt2(m3, "g");
          for (; (d3 = v3.exec(p3)) !== null; ) {
            let w3 = l3.offsetAt(u3.start) + d3.index[1], g3 = w3 + d3[1].length, y3 = l3.offsetAt(i3);
            if (y3 >= w3 && y3 <= g3) {
              let S3;
              if (f3) {
                let b3, k3 = new yt2(f3, "g");
                for (; (b3 = k3.exec(d3[1])) !== null; ) {
                  let D3 = w3 + b3.index[1], x3 = D3 + b3[1].length;
                  y3 >= D3 && y3 <= x3 && (S3 = b3[1].substr(0, y3 - D3));
                }
                if (S3 === void 0) throw Error();
              } else S3 = d3[1].substr(0, y3 - w3);
              return it2(n3, S3, {
                start: {
                  line: i3.line,
                  character: i3.character - S3.length
                },
                end: i3
              }, void 0, s3);
            }
          }
        } catch {
        }
        return null;
      }(t3, e3, r3, a3) || async function(n3, l3, i3) {
        if ((await n3.editor.getConfiguration(l3.uri)).tailwindCSS.emmetCompletions !== true) return null;
        let s3 = !bt2(n3, l3) && Rt2(n3, l3, i3), c3 = bt2(n3, l3) || It2(n3, l3, i3), o3 = s3 ? "html" : c3 ? "jsx" : null;
        if (o3 === null) return null;
        let u3 = _t2.extractAbbreviation(l3, i3, true);
        if (!u3 || !_t2.isAbbreviationValid(o3, u3.abbreviation) || !function(d3, m3) {
          let f3 = d3.getText({
            start: {
              line: 0,
              character: 0
            },
            end: {
              line: m3.start.line,
              character: m3.start.character
            }
          });
          if (f3.length > 500 && (f3 = f3.substr(f3.length - 500)), !f3.trim()) return true;
          let v3 = true, w3 = false, g3 = f3.length - 1;
          if (f3[g3] === "<") return false;
          for (; g3 >= 0; ) {
            let y3 = f3[g3];
            if (g3--, w3 || !/\s/.test(y3)) if (y3 !== "?" || f3[g3] !== "<") {
              if (/\s/.test(y3) && f3[g3] === "<") g3--;
              else if (y3 === "<" || y3 === ">") if (g3 >= 0 && f3[g3] === "\\") g3--;
              else {
                if (y3 === ">") {
                  if (g3 >= 0 && f3[g3] === "=") continue;
                  break;
                }
                if (y3 === "<") {
                  v3 = !w3;
                  break;
                }
              }
            } else g3--;
            else w3 = true;
          }
          return v3;
        }(l3, u3.abbreviationRange)) return null;
        if (c3) {
          let d3 = u3.abbreviation;
          if (d3.startsWith("this.")) return null;
          let m3 = await n3.editor.getDocumentSymbols(l3.uri);
          if (m3 && m3.find((f3) => d3 === f3.name || d3.startsWith(f3.name + ".") && !/>|\*|\+/.test(d3))) return null;
        }
        let p3 = _t2.doComplete(l3, i3, o3, {});
        if (!p3 || !p3.items || p3.items.length !== 1 || p3.items[0].label === "widows: ;") return null;
        let h3 = p3.items[0].label.split(".");
        return h3.length < 2 ? null : it2(n3, h3[h3.length - 1], {
          start: {
            line: i3.line,
            character: i3.character - h3[h3.length - 1].length
          },
          end: i3
        });
      }(t3, e3, r3);
    }, $3.doHover = async function(t3, e3, r3) {
      return await async function(a3, n3, l3) {
        let i3 = await async function(u3, p3, h3) {
          let d3 = [], m3 = p3.offsetAt(h3), f3 = {
            start: p3.positionAt(Math.max(0, m3 - 1e3)),
            end: p3.positionAt(m3 + 1e3)
          };
          return q3(u3, p3, h3) ? d3 = await mt2(u3, p3, f3, "css") : Rt2(u3, p3, h3) ? d3 = await mt2(u3, p3, f3, "html") : It2(u3, p3, h3) && (d3 = await mt2(u3, p3, f3, "jsx")), d3.length === 0 ? null : d3.find((v3) => {
            let { range: w3 } = v3;
            return ht2(h3, w3);
          }) || null;
        }(a3, n3, l3);
        if (i3 === null) return null;
        if (a3.jit) {
          let { root: u3, rules: p3 } = J3(a3, [
            i3.className
          ]);
          return p3.length === 0 ? null : {
            contents: {
              language: "css",
              value: await Qt(a3, u3, n3.uri)
            },
            range: i3.range
          };
        }
        let s3 = ct2(a3, i3.className);
        if (!s3) return null;
        if (q3(a3, n3, l3)) {
          let u3 = vt2(a3, s3);
          if (u3 === null || u3.isApplyable === false) return null;
        }
        let c3 = await a3.editor.getConfiguration(n3.uri), o3 = Vt2(i3.className, j3(a3.classNames.classNames, [
          ...s3,
          "__info"
        ]), c3);
        return o3 ? {
          contents: {
            language: "css",
            value: o3
          },
          range: i3.range
        } : null;
      }(t3, e3, r3) || function(a3, n3, l3) {
        if (!q3(a3, n3, l3)) return null;
        let i3 = Bt2(n3, {
          start: {
            line: l3.line,
            character: 0
          },
          end: {
            line: l3.line + 1,
            character: 0
          }
        });
        for (let s3 of i3) if (ht2(l3, s3.ranges.path)) {
          let c3 = lt2(a3, s3.path, s3.helper === "theme" ? [
            "theme"
          ] : []), o3 = c3.isValid ? ae2(c3.value) : null;
          return o3 === null ? null : {
            contents: {
              kind: "markdown",
              value: [
                "```plaintext",
                o3,
                "```"
              ].join(`
`)
            },
            range: s3.ranges.path
          };
        }
        return null;
      }(t3, e3, r3);
    }, $3.doValidate = he2, $3.getColor = st2, $3.getColorFromValue = Et2, $3.getDocumentColors = async function(t3, e3) {
      let r3 = [];
      return t3.enabled ? (await t3.editor.getConfiguration(e3.uri)).tailwindCSS.colorDecorators === false ? r3 : ((await Wt2(t3, e3)).forEach((a3) => {
        St2(a3).forEach((n3) => {
          var l3;
          let i3 = st2(t3, n3.className);
          i3 !== null && typeof i3 != "string" && ((l3 = i3.alpha) != null ? l3 : 1) !== 0 && r3.push({
            range: n3.range,
            color: Nt2(i3)
          });
        });
      }), Ie2(t3, e3).forEach((a3) => {
        var n3;
        let l3 = Ke2(a3.path), i3 = Et2(j3(t3.config, [
          ...a3.helper === "theme" ? [
            "theme"
          ] : [],
          ...l3
        ]));
        i3 && typeof i3 != "string" && ((n3 = i3.alpha) != null ? n3 : 1) !== 0 && r3.push({
          range: a3.ranges.path,
          color: Nt2(i3)
        });
      }), qt2(r3)) : r3;
    }, $3.isCssConflictDiagnostic = ie2, $3.isInvalidApplyDiagnostic = se2, $3.isInvalidConfigPathDiagnostic = ce2, $3.isInvalidScreenDiagnostic = le2, $3.isInvalidTailwindDirectiveDiagnostic = ue2, $3.isInvalidVariantDiagnostic = oe2, $3.isRecommendedVariantOrderDiagnostic = de2, $3.resolveCompletionItem = async function(t3, e3) {
      var r3, a3, n3, l3, i3, s3, c3;
      if ([
        "helper",
        "directive",
        "variant",
        "layer",
        "@tailwind",
        "filesystem"
      ].includes((r3 = e3.data) == null ? void 0 : r3._type)) return e3;
      if (((a3 = e3.data) == null ? void 0 : a3._type) === "screen") {
        let h3 = j3(t3.config, [
          "theme",
          "screens"
        ], j3(t3.config, [
          "screens"
        ], {}));
        return R3(h3) || (h3 = {}), e3.detail = function(d3) {
          if (!d3) return;
          if (typeof d3 == "string") return `@media (min-width: ${d3})`;
          if (function(f3) {
            return R3(f3) && f3.raw !== void 0;
          }(d3)) return "@media " + d3.raw;
          let m3 = (Array.isArray(d3) ? d3 : [
            d3
          ]).map((f3) => [
            typeof f3.min == "string" ? `(min-width: ${f3.min})` : null,
            typeof f3.max == "string" ? `(max-width: ${f3.max})` : null
          ].filter(Boolean).join(" and ")).join(", ");
          return m3 ? "@media " + m3 : void 0;
        }(h3[e3.label]), e3;
      }
      let o3 = (n3 = (l3 = e3.data) == null ? void 0 : l3.className) != null ? n3 : e3.label;
      (i3 = e3.data) != null && i3.important && (o3 = "!" + o3);
      let u3 = (s3 = (c3 = e3.data) == null ? void 0 : c3.variants) != null ? s3 : [];
      if (t3.jit) {
        if (e3.kind === 9 || e3.detail && e3.documentation) return e3;
        let { root: h3, rules: d3 } = J3(t3, [
          [
            ...u3,
            o3
          ].join(t3.separator)
        ]);
        return d3.length === 0 || (e3.detail || (e3.detail = d3.length === 1 ? await async function(m3, f3, v3) {
          let w3 = await m3.editor.getConfiguration(void 0), g3 = [];
          return f3.walkDecls((y3) => {
            let { prop: S3, value: b3 } = y3, k3 = w3.tailwindCSS.showPixelEquivalents ? wt2(b3, w3.tailwindCSS.rootFontSize) : void 0;
            g3.push(`${S3}: ${b3}${k3 ? `/* ${k3} */` : ""};`);
          }), g3.join(" ");
        }(t3, d3[0]) : d3.length + " rules"), e3.documentation || (e3.documentation = {
          kind: "markdown",
          value: [
            "```css",
            await Qt(t3, h3),
            "```"
          ].join(`
`)
        })), e3;
      }
      let p3 = j3(t3.classNames.classNames, [
        ...u3,
        o3,
        "__info"
      ]);
      if (e3.kind === 9) e3.detail = t3.classNames.context[o3].join(", ");
      else if (e3.detail = await async function(h3, d3) {
        if (Array.isArray(d3)) return d3.length + " rules";
        if (d3.__rule === true) {
          let m3 = await h3.editor.getConfiguration();
          return function(f3, v3) {
            let w3 = Object.keys(f3), g3 = w3.filter((y3) => !y3.startsWith("--"));
            return w3.length !== g3.length && g3.length !== 0 && (w3 = g3), w3.map((y3) => $t2(f3[y3]).map((S3) => {
              let b3 = v3.tailwindCSS.showPixelEquivalents ? wt2(S3, v3.tailwindCSS.rootFontSize) : void 0;
              return `${y3}: ${S3}${b3 ? `/* ${b3} */` : ""};`;
            }).join(" ")).join(" ");
          }(Z3(d3), m3);
        }
        return null;
      }(t3, p3), !e3.documentation) {
        let h3 = await t3.editor.getConfiguration(), d3 = Vt2([
          ...u3,
          o3
        ].join(":"), p3, h3);
        d3 && (e3.documentation = {
          kind: "markdown",
          value: [
            "```css",
            d3,
            "```"
          ].join(`
`)
        });
      }
      return e3;
    };
  });
  var Pe$2 = Ut$1((jn2, We2) => {
    We2.exports = qe$2();
  });
  var Dt$3 = Ze$1(Pe$2()), { __esModule: _n, completionsFromClassList: Tn$1, culoriColorToVscodeColor: En$1, doCodeActions: Nn$1, doComplete: In$1, doHover: Rn$1, doValidate: Ln, getColor: Bn, getColorFromValue: On, getDocumentColors: Vn$1, isCssConflictDiagnostic: Kn, isInvalidApplyDiagnostic: qn, isInvalidConfigPathDiagnostic: Wn, isInvalidScreenDiagnostic: Pn$1, isInvalidTailwindDirectiveDiagnostic: Fn, isInvalidVariantDiagnostic: Mn$1, isRecommendedVariantOrderDiagnostic: zn, resolveCompletionItem: Un } = Dt$3;
  Dt$3.default ?? Dt$3;
  var distExports$1 = requireDist();
  const postcssSelectorParser = getDefaultExportFromCjs(distExports$1);
  function U$1(e3) {
    if (Object.prototype.toString.call(e3) !== "[object Object]") return false;
    let t3 = Object.getPrototypeOf(e3);
    return t3 === null || Object.getPrototypeOf(t3) === null;
  }
  function Z$2(e3) {
    return [
      "fontSize",
      "outline"
    ].includes(e3) ? (t3) => (typeof t3 == "function" && (t3 = t3({})), Array.isArray(t3) && (t3 = t3[0]), t3) : e3 === "fontFamily" ? (t3) => {
      typeof t3 == "function" && (t3 = t3({}));
      let r3 = Array.isArray(t3) && U$1(t3[1]) ? t3[0] : t3;
      return Array.isArray(r3) ? r3.join(", ") : r3;
    } : [
      "boxShadow",
      "transitionProperty",
      "transitionDuration",
      "transitionDelay",
      "transitionTimingFunction",
      "backgroundImage",
      "backgroundSize",
      "backgroundColor",
      "cursor",
      "animation"
    ].includes(e3) ? (t3) => (typeof t3 == "function" && (t3 = t3({})), Array.isArray(t3) && (t3 = t3.join(", ")), t3) : [
      "gridTemplateColumns",
      "gridTemplateRows",
      "objectPosition"
    ].includes(e3) ? (t3) => (typeof t3 == "function" && (t3 = t3({})), typeof t3 == "string" && (t3 = F$8.list.comma(t3).join(" ")), t3) : (t3, r3 = {}) => (typeof t3 == "function" && (t3 = t3(r3)), t3);
  }
  function ne$1(e3) {
    return Array.isArray(e3) ? e3.flatMap((t3) => F$8([
      V$9({
        bubble: [
          "screen"
        ]
      })
    ]).process(t3, {
      parser: w$6
    }).root.nodes) : ne$1([
      e3
    ]);
  }
  function ae$2(e3, t3, r3 = false) {
    if (e3 === "") return t3;
    let n3 = typeof t3 == "string" ? Pu().astSync(t3) : t3;
    return n3.walkClasses((a3) => {
      let o3 = a3.value, i3 = r3 && o3.startsWith("-");
      a3.value = i3 ? `-${e3}${o3.slice(1)}` : `${e3}${o3}`;
    }), typeof t3 == "string" ? n3.toString() : n3;
  }
  function ee$2(e3) {
    return e3.replace(/\\,/g, "\\2c ");
  }
  function R$1(e3) {
    var _a;
    let t3 = Pu.className();
    return t3.value = e3, ee$2(((_a = t3 == null ? void 0 : t3.raws) == null ? void 0 : _a.value) ?? t3.value);
  }
  function We$1(e3) {
    return ee$2(`.${R$1(e3)}`);
  }
  function Se$2(e3, t3) {
    return We$1(pe$2(e3, t3));
  }
  function pe$2(e3, t3) {
    return t3 === "DEFAULT" ? e3 : t3 === "-" || t3 === "-DEFAULT" ? `-${e3}` : t3.startsWith("-") ? `-${e3}${t3}` : t3.startsWith("/") ? `${e3}${t3}` : `${e3}-${t3}`;
  }
  var Le$2 = {
    aliceblue: [
      240,
      248,
      255
    ],
    antiquewhite: [
      250,
      235,
      215
    ],
    aqua: [
      0,
      255,
      255
    ],
    aquamarine: [
      127,
      255,
      212
    ],
    azure: [
      240,
      255,
      255
    ],
    beige: [
      245,
      245,
      220
    ],
    bisque: [
      255,
      228,
      196
    ],
    black: [
      0,
      0,
      0
    ],
    blanchedalmond: [
      255,
      235,
      205
    ],
    blue: [
      0,
      0,
      255
    ],
    blueviolet: [
      138,
      43,
      226
    ],
    brown: [
      165,
      42,
      42
    ],
    burlywood: [
      222,
      184,
      135
    ],
    cadetblue: [
      95,
      158,
      160
    ],
    chartreuse: [
      127,
      255,
      0
    ],
    chocolate: [
      210,
      105,
      30
    ],
    coral: [
      255,
      127,
      80
    ],
    cornflowerblue: [
      100,
      149,
      237
    ],
    cornsilk: [
      255,
      248,
      220
    ],
    crimson: [
      220,
      20,
      60
    ],
    cyan: [
      0,
      255,
      255
    ],
    darkblue: [
      0,
      0,
      139
    ],
    darkcyan: [
      0,
      139,
      139
    ],
    darkgoldenrod: [
      184,
      134,
      11
    ],
    darkgray: [
      169,
      169,
      169
    ],
    darkgreen: [
      0,
      100,
      0
    ],
    darkgrey: [
      169,
      169,
      169
    ],
    darkkhaki: [
      189,
      183,
      107
    ],
    darkmagenta: [
      139,
      0,
      139
    ],
    darkolivegreen: [
      85,
      107,
      47
    ],
    darkorange: [
      255,
      140,
      0
    ],
    darkorchid: [
      153,
      50,
      204
    ],
    darkred: [
      139,
      0,
      0
    ],
    darksalmon: [
      233,
      150,
      122
    ],
    darkseagreen: [
      143,
      188,
      143
    ],
    darkslateblue: [
      72,
      61,
      139
    ],
    darkslategray: [
      47,
      79,
      79
    ],
    darkslategrey: [
      47,
      79,
      79
    ],
    darkturquoise: [
      0,
      206,
      209
    ],
    darkviolet: [
      148,
      0,
      211
    ],
    deeppink: [
      255,
      20,
      147
    ],
    deepskyblue: [
      0,
      191,
      255
    ],
    dimgray: [
      105,
      105,
      105
    ],
    dimgrey: [
      105,
      105,
      105
    ],
    dodgerblue: [
      30,
      144,
      255
    ],
    firebrick: [
      178,
      34,
      34
    ],
    floralwhite: [
      255,
      250,
      240
    ],
    forestgreen: [
      34,
      139,
      34
    ],
    fuchsia: [
      255,
      0,
      255
    ],
    gainsboro: [
      220,
      220,
      220
    ],
    ghostwhite: [
      248,
      248,
      255
    ],
    gold: [
      255,
      215,
      0
    ],
    goldenrod: [
      218,
      165,
      32
    ],
    gray: [
      128,
      128,
      128
    ],
    green: [
      0,
      128,
      0
    ],
    greenyellow: [
      173,
      255,
      47
    ],
    grey: [
      128,
      128,
      128
    ],
    honeydew: [
      240,
      255,
      240
    ],
    hotpink: [
      255,
      105,
      180
    ],
    indianred: [
      205,
      92,
      92
    ],
    indigo: [
      75,
      0,
      130
    ],
    ivory: [
      255,
      255,
      240
    ],
    khaki: [
      240,
      230,
      140
    ],
    lavender: [
      230,
      230,
      250
    ],
    lavenderblush: [
      255,
      240,
      245
    ],
    lawngreen: [
      124,
      252,
      0
    ],
    lemonchiffon: [
      255,
      250,
      205
    ],
    lightblue: [
      173,
      216,
      230
    ],
    lightcoral: [
      240,
      128,
      128
    ],
    lightcyan: [
      224,
      255,
      255
    ],
    lightgoldenrodyellow: [
      250,
      250,
      210
    ],
    lightgray: [
      211,
      211,
      211
    ],
    lightgreen: [
      144,
      238,
      144
    ],
    lightgrey: [
      211,
      211,
      211
    ],
    lightpink: [
      255,
      182,
      193
    ],
    lightsalmon: [
      255,
      160,
      122
    ],
    lightseagreen: [
      32,
      178,
      170
    ],
    lightskyblue: [
      135,
      206,
      250
    ],
    lightslategray: [
      119,
      136,
      153
    ],
    lightslategrey: [
      119,
      136,
      153
    ],
    lightsteelblue: [
      176,
      196,
      222
    ],
    lightyellow: [
      255,
      255,
      224
    ],
    lime: [
      0,
      255,
      0
    ],
    limegreen: [
      50,
      205,
      50
    ],
    linen: [
      250,
      240,
      230
    ],
    magenta: [
      255,
      0,
      255
    ],
    maroon: [
      128,
      0,
      0
    ],
    mediumaquamarine: [
      102,
      205,
      170
    ],
    mediumblue: [
      0,
      0,
      205
    ],
    mediumorchid: [
      186,
      85,
      211
    ],
    mediumpurple: [
      147,
      112,
      219
    ],
    mediumseagreen: [
      60,
      179,
      113
    ],
    mediumslateblue: [
      123,
      104,
      238
    ],
    mediumspringgreen: [
      0,
      250,
      154
    ],
    mediumturquoise: [
      72,
      209,
      204
    ],
    mediumvioletred: [
      199,
      21,
      133
    ],
    midnightblue: [
      25,
      25,
      112
    ],
    mintcream: [
      245,
      255,
      250
    ],
    mistyrose: [
      255,
      228,
      225
    ],
    moccasin: [
      255,
      228,
      181
    ],
    navajowhite: [
      255,
      222,
      173
    ],
    navy: [
      0,
      0,
      128
    ],
    oldlace: [
      253,
      245,
      230
    ],
    olive: [
      128,
      128,
      0
    ],
    olivedrab: [
      107,
      142,
      35
    ],
    orange: [
      255,
      165,
      0
    ],
    orangered: [
      255,
      69,
      0
    ],
    orchid: [
      218,
      112,
      214
    ],
    palegoldenrod: [
      238,
      232,
      170
    ],
    palegreen: [
      152,
      251,
      152
    ],
    paleturquoise: [
      175,
      238,
      238
    ],
    palevioletred: [
      219,
      112,
      147
    ],
    papayawhip: [
      255,
      239,
      213
    ],
    peachpuff: [
      255,
      218,
      185
    ],
    peru: [
      205,
      133,
      63
    ],
    pink: [
      255,
      192,
      203
    ],
    plum: [
      221,
      160,
      221
    ],
    powderblue: [
      176,
      224,
      230
    ],
    purple: [
      128,
      0,
      128
    ],
    rebeccapurple: [
      102,
      51,
      153
    ],
    red: [
      255,
      0,
      0
    ],
    rosybrown: [
      188,
      143,
      143
    ],
    royalblue: [
      65,
      105,
      225
    ],
    saddlebrown: [
      139,
      69,
      19
    ],
    salmon: [
      250,
      128,
      114
    ],
    sandybrown: [
      244,
      164,
      96
    ],
    seagreen: [
      46,
      139,
      87
    ],
    seashell: [
      255,
      245,
      238
    ],
    sienna: [
      160,
      82,
      45
    ],
    silver: [
      192,
      192,
      192
    ],
    skyblue: [
      135,
      206,
      235
    ],
    slateblue: [
      106,
      90,
      205
    ],
    slategray: [
      112,
      128,
      144
    ],
    slategrey: [
      112,
      128,
      144
    ],
    snow: [
      255,
      250,
      250
    ],
    springgreen: [
      0,
      255,
      127
    ],
    steelblue: [
      70,
      130,
      180
    ],
    tan: [
      210,
      180,
      140
    ],
    teal: [
      0,
      128,
      128
    ],
    thistle: [
      216,
      191,
      216
    ],
    tomato: [
      255,
      99,
      71
    ],
    turquoise: [
      64,
      224,
      208
    ],
    violet: [
      238,
      130,
      238
    ],
    wheat: [
      245,
      222,
      179
    ],
    white: [
      255,
      255,
      255
    ],
    whitesmoke: [
      245,
      245,
      245
    ],
    yellow: [
      255,
      255,
      0
    ],
    yellowgreen: [
      154,
      205,
      50
    ]
  };
  var wr$1 = /^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i, vr$1 = /^#([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i, Y$1 = /(?:\d+|\d*\.\d+)%?/, Ce$2 = /(?:\s*,\s*|\s+)/, mt$1 = /\s*[,/]\s*/, q$1 = /var\(--(?:[^ )]*?)(?:,(?:[^ )]*?|var\(--[^ )]*?\)))?\)/, xr$1 = new RegExp(`^(rgba?)\\(\\s*(${Y$1.source}|${q$1.source})(?:${Ce$2.source}(${Y$1.source}|${q$1.source}))?(?:${Ce$2.source}(${Y$1.source}|${q$1.source}))?(?:${mt$1.source}(${Y$1.source}|${q$1.source}))?\\s*\\)$`), kr$1 = new RegExp(`^(hsla?)\\(\\s*((?:${Y$1.source})(?:deg|rad|grad|turn)?|${q$1.source})(?:${Ce$2.source}(${Y$1.source}|${q$1.source}))?(?:${Ce$2.source}(${Y$1.source}|${q$1.source}))?(?:${mt$1.source}(${Y$1.source}|${q$1.source}))?\\s*\\)$`);
  function me$1(e3, { loose: t3 = false } = {}) {
    var _a, _b;
    if (typeof e3 != "string") return null;
    if (e3 = e3.trim(), e3 === "transparent") return {
      mode: "rgb",
      color: [
        "0",
        "0",
        "0"
      ],
      alpha: "0"
    };
    if (e3 in Le$2) return {
      mode: "rgb",
      color: Le$2[e3].map((o3) => o3.toString())
    };
    let r3 = e3.replace(vr$1, (o3, i3, l3, f3, m3) => [
      "#",
      i3,
      i3,
      l3,
      l3,
      f3,
      f3,
      m3 ? m3 + m3 : ""
    ].join("")).match(wr$1);
    if (r3 !== null) return {
      mode: "rgb",
      color: [
        parseInt(r3[1], 16),
        parseInt(r3[2], 16),
        parseInt(r3[3], 16)
      ].map((o3) => o3.toString()),
      alpha: r3[4] ? (parseInt(r3[4], 16) / 255).toString() : void 0
    };
    let n3 = e3.match(xr$1) ?? e3.match(kr$1);
    if (n3 === null) return null;
    let a3 = [
      n3[2],
      n3[3],
      n3[4]
    ].filter(Boolean).map((o3) => o3.toString());
    return a3.length === 2 && a3[0].startsWith("var(") ? {
      mode: n3[1],
      color: [
        a3[0]
      ],
      alpha: a3[1]
    } : !t3 && a3.length !== 3 || a3.length < 3 && !a3.some((o3) => /^var\(.*?\)$/.test(o3)) ? null : {
      mode: n3[1],
      color: a3,
      alpha: (_b = (_a = n3[5]) == null ? void 0 : _a.toString) == null ? void 0 : _b.call(_a)
    };
  }
  function Ue$1({ mode: e3, color: t3, alpha: r3 }) {
    let n3 = r3 !== void 0;
    return e3 === "rgba" || e3 === "hsla" ? `${e3}(${t3.join(", ")}${n3 ? `, ${r3}` : ""})` : `${e3}(${t3.join(" ")}${n3 ? ` / ${r3}` : ""})`;
  }
  function ie$1(e3, t3, r3) {
    if (typeof e3 == "function") return e3({
      opacityValue: t3
    });
    let n3 = me$1(e3, {
      loose: true
    });
    return n3 === null ? r3 : Ue$1({
      ...n3,
      alpha: t3
    });
  }
  function E({ color: e3, property: t3, variable: r3 }) {
    let n3 = [].concat(t3);
    if (typeof e3 == "function") return {
      [r3]: "1",
      ...Object.fromEntries(n3.map((o3) => [
        o3,
        e3({
          opacityVariable: r3,
          opacityValue: `var(${r3}, 1)`
        })
      ]))
    };
    let a3 = me$1(e3);
    return a3 === null ? Object.fromEntries(n3.map((o3) => [
      o3,
      e3
    ])) : a3.alpha !== void 0 ? Object.fromEntries(n3.map((o3) => [
      o3,
      e3
    ])) : {
      [r3]: "1",
      ...Object.fromEntries(n3.map((o3) => [
        o3,
        Ue$1({
          ...a3,
          alpha: `var(${r3}, 1)`
        })
      ]))
    };
  }
  function T(e3, t3) {
    let r3 = [], n3 = [], a3 = 0, o3 = false;
    for (let i3 = 0; i3 < e3.length; i3++) {
      let l3 = e3[i3];
      r3.length === 0 && l3 === t3[0] && !o3 && (t3.length === 1 || e3.slice(i3, i3 + t3.length) === t3) && (n3.push(e3.slice(a3, i3)), a3 = i3 + t3.length), o3 = o3 ? false : l3 === "\\", l3 === "(" || l3 === "[" || l3 === "{" ? r3.push(l3) : (l3 === ")" && r3[r3.length - 1] === "(" || l3 === "]" && r3[r3.length - 1] === "[" || l3 === "}" && r3[r3.length - 1] === "{") && r3.pop();
    }
    return n3.push(e3.slice(a3)), n3;
  }
  var Sr$1 = /* @__PURE__ */ new Set([
    "inset",
    "inherit",
    "initial",
    "revert",
    "unset"
  ]), Cr$1 = /\ +(?![^(]*\))/g, gt = /^-?(\d+|\.\d+)(.*?)$/g;
  function Ae(e3) {
    return T(e3, ",").map((r3) => {
      let n3 = r3.trim(), a3 = {
        raw: n3
      }, o3 = n3.split(Cr$1), i3 = /* @__PURE__ */ new Set();
      for (let l3 of o3) gt.lastIndex = 0, !i3.has("KEYWORD") && Sr$1.has(l3) ? (a3.keyword = l3, i3.add("KEYWORD")) : gt.test(l3) ? i3.has("X") ? i3.has("Y") ? i3.has("BLUR") ? i3.has("SPREAD") || (a3.spread = l3, i3.add("SPREAD")) : (a3.blur = l3, i3.add("BLUR")) : (a3.y = l3, i3.add("Y")) : (a3.x = l3, i3.add("X")) : a3.color ? (a3.unknown || (a3.unknown = []), a3.unknown.push(l3)) : a3.color = l3;
      return a3.valid = a3.x !== void 0 && a3.y !== void 0, a3;
    });
  }
  function ht(e3) {
    return e3.map((t3) => t3.valid ? [
      t3.keyword,
      t3.x,
      t3.y,
      t3.blur,
      t3.spread,
      t3.color
    ].filter(Boolean).join(" ") : t3.raw).join(", ");
  }
  var Ar$1 = [
    "min",
    "max",
    "clamp",
    "calc"
  ];
  function Be$2(e3) {
    return Ar$1.some((t3) => new RegExp(`^${t3}\\(.*\\)`).test(e3));
  }
  var Or$1 = /* @__PURE__ */ new Set([
    "scroll-timeline-name",
    "timeline-scope",
    "view-timeline-name",
    "font-palette",
    "anchor-name",
    "anchor-scope",
    "position-anchor",
    "position-try-options",
    "scroll-timeline",
    "animation-timeline",
    "view-timeline",
    "position-try"
  ]);
  function A(e3, t3 = null, r3 = true) {
    let n3 = t3 && Or$1.has(t3.property);
    return e3.startsWith("--") && !n3 ? `var(${e3})` : e3.includes("url(") ? e3.split(/(url\(.*?\))/g).filter(Boolean).map((a3) => /^url\(.*?\)$/.test(a3) ? a3 : A(a3, t3, false)).join("") : (e3 = e3.replace(/([^\\])_+/g, (a3, o3) => o3 + " ".repeat(a3.length - 1)).replace(/^_/g, " ").replace(/\\_/g, "_"), r3 && (e3 = e3.trim()), e3 = $r$1(e3), e3);
  }
  function _$1(e3) {
    return e3.includes("=") && (e3 = e3.replace(/(=.*)/g, (t3, r3) => {
      if (r3[1] === "'" || r3[1] === '"') return r3;
      if (r3.length > 2) {
        let n3 = r3[r3.length - 1];
        if (r3[r3.length - 2] === " " && (n3 === "i" || n3 === "I" || n3 === "s" || n3 === "S")) return `="${r3.slice(1, -2)}" ${r3[r3.length - 1]}`;
      }
      return `="${r3.slice(1)}"`;
    })), e3;
  }
  function $r$1(e3) {
    let t3 = [
      "theme"
    ], r3 = [
      "min-content",
      "max-content",
      "fit-content",
      "safe-area-inset-top",
      "safe-area-inset-right",
      "safe-area-inset-bottom",
      "safe-area-inset-left",
      "titlebar-area-x",
      "titlebar-area-y",
      "titlebar-area-width",
      "titlebar-area-height",
      "keyboard-inset-top",
      "keyboard-inset-right",
      "keyboard-inset-bottom",
      "keyboard-inset-left",
      "keyboard-inset-width",
      "keyboard-inset-height",
      "radial-gradient",
      "linear-gradient",
      "conic-gradient",
      "repeating-radial-gradient",
      "repeating-linear-gradient",
      "repeating-conic-gradient",
      "anchor-size"
    ];
    return e3.replace(/(calc|min|max|clamp)\(.+\)/g, (n3) => {
      let a3 = "";
      function o3() {
        let i3 = a3.trimEnd();
        return i3[i3.length - 1];
      }
      for (let i3 = 0; i3 < n3.length; i3++) {
        let l3 = function(c3) {
          return c3.split("").every((w3, s3) => n3[i3 + s3] === w3);
        }, f3 = function(c3) {
          let w3 = 1 / 0;
          for (let u3 of c3) {
            let g3 = n3.indexOf(u3, i3);
            g3 !== -1 && g3 < w3 && (w3 = g3);
          }
          let s3 = n3.slice(i3, w3);
          return i3 += s3.length - 1, s3;
        }, m3 = n3[i3];
        if (l3("var")) a3 += f3([
          ")",
          ","
        ]);
        else if (r3.some((c3) => l3(c3))) {
          let c3 = r3.find((w3) => l3(w3));
          a3 += c3, i3 += c3.length - 1;
        } else t3.some((c3) => l3(c3)) ? a3 += f3([
          ")"
        ]) : l3("[") ? a3 += f3([
          "]"
        ]) : [
          "+",
          "-",
          "*",
          "/"
        ].includes(m3) && ![
          "(",
          "+",
          "-",
          "*",
          "/",
          ","
        ].includes(o3()) ? a3 += ` ${m3} ` : a3 += m3;
      }
      return a3.replace(/\s+/g, " ");
    });
  }
  function He$2(e3) {
    return e3.startsWith("url(");
  }
  function Ge$2(e3) {
    return !isNaN(Number(e3)) || Be$2(e3);
  }
  function ge$1(e3) {
    return e3.endsWith("%") && Ge$2(e3.slice(0, -1)) || Be$2(e3);
  }
  var jr = [
    "cm",
    "mm",
    "Q",
    "in",
    "pc",
    "pt",
    "px",
    "em",
    "ex",
    "ch",
    "rem",
    "lh",
    "rlh",
    "vw",
    "vh",
    "vmin",
    "vmax",
    "vb",
    "vi",
    "svw",
    "svh",
    "lvw",
    "lvh",
    "dvw",
    "dvh",
    "cqw",
    "cqh",
    "cqi",
    "cqb",
    "cqmin",
    "cqmax"
  ], Mr = `(?:${jr.join("|")})`;
  function he$1(e3) {
    return e3 === "0" || new RegExp(`^[+-]?[0-9]*.?[0-9]+(?:[eE][+-]?[0-9]+)?${Mr}$`).test(e3) || Be$2(e3);
  }
  var Vr = /* @__PURE__ */ new Set([
    "thin",
    "medium",
    "thick"
  ]);
  function bt(e3) {
    return Vr.has(e3);
  }
  function yt(e3) {
    let t3 = Ae(A(e3));
    for (let r3 of t3) if (!r3.valid) return false;
    return true;
  }
  function wt(e3) {
    let t3 = 0;
    return T(e3, "_").every((n3) => (n3 = A(n3), n3.startsWith("var(") ? true : me$1(n3, {
      loose: true
    }) !== null ? (t3++, true) : false)) ? t3 > 0 : false;
  }
  function vt(e3) {
    let t3 = 0;
    return T(e3, ",").every((n3) => (n3 = A(n3), n3.startsWith("var(") ? true : He$2(n3) || Tr$1(n3) || [
      "element(",
      "image(",
      "cross-fade(",
      "image-set("
    ].some((a3) => n3.startsWith(a3)) ? (t3++, true) : false)) ? t3 > 0 : false;
  }
  var Er = /* @__PURE__ */ new Set([
    "conic-gradient",
    "linear-gradient",
    "radial-gradient",
    "repeating-conic-gradient",
    "repeating-linear-gradient",
    "repeating-radial-gradient"
  ]);
  function Tr$1(e3) {
    e3 = A(e3);
    for (let t3 of Er) if (e3.startsWith(`${t3}(`)) return true;
    return false;
  }
  var Ir = /* @__PURE__ */ new Set([
    "center",
    "top",
    "right",
    "bottom",
    "left"
  ]);
  function xt$1(e3) {
    let t3 = 0;
    return T(e3, "_").every((n3) => (n3 = A(n3), n3.startsWith("var(") ? true : Ir.has(n3) || he$1(n3) || ge$1(n3) ? (t3++, true) : false)) ? t3 > 0 : false;
  }
  function kt$1(e3) {
    let t3 = 0;
    return T(e3, ",").every((n3) => (n3 = A(n3), n3.startsWith("var(") ? true : n3.includes(" ") && !/(['"])([^"']+)\1/g.test(n3) || /^\d/g.test(n3) ? false : (t3++, true))) ? t3 > 0 : false;
  }
  var Nr = /* @__PURE__ */ new Set([
    "serif",
    "sans-serif",
    "monospace",
    "cursive",
    "fantasy",
    "system-ui",
    "ui-serif",
    "ui-sans-serif",
    "ui-monospace",
    "ui-rounded",
    "math",
    "emoji",
    "fangsong"
  ]);
  function St$1(e3) {
    return Nr.has(e3);
  }
  var Pr = /* @__PURE__ */ new Set([
    "xx-small",
    "x-small",
    "small",
    "medium",
    "large",
    "x-large",
    "xx-large",
    "xxx-large"
  ]);
  function Ct$1(e3) {
    return Pr.has(e3);
  }
  var Dr = /* @__PURE__ */ new Set([
    "larger",
    "smaller"
  ]);
  function At$1(e3) {
    return Dr.has(e3);
  }
  function oe$1(e3) {
    if (e3 = `${e3}`, e3 === "0") return "0";
    if (/^[+-]?(\d+|\d*\.\d+)(e[+-]?\d+)?(%|\w+)?$/.test(e3)) return e3.replace(/^[+-]?/, (r3) => r3 === "-" ? "" : "-");
    let t3 = [
      "var",
      "calc",
      "min",
      "max",
      "clamp"
    ];
    for (let r3 of t3) if (e3.includes(`${r3}(`)) return `calc(${e3} * -1)`;
  }
  function Ot$1(e3) {
    let t3 = [
      "cover",
      "contain"
    ];
    return T(e3, ",").every((r3) => {
      let n3 = T(r3, "_").filter(Boolean);
      return n3.length === 1 && t3.includes(n3[0]) ? true : n3.length !== 1 && n3.length !== 2 ? false : n3.every((a3) => he$1(a3) || ge$1(a3) || a3 === "auto");
    });
  }
  var $t$1 = /* @__PURE__ */ new Set();
  function Ye$2(e3, t3, r3) {
    typeof xs < "u" && xs.env.JEST_WORKER_ID || r3 && $t$1.has(r3) || (r3 && $t$1.add(r3), console.warn(""), t3.forEach((n3) => console.warn(e3, "-", n3)));
  }
  var V$1 = {
    info(e3, t3) {
      Ye$2(ne$5.bold(ne$5.cyan("info")), ...Array.isArray(e3) ? [
        e3
      ] : [
        t3,
        e3
      ]);
    },
    warn(e3, t3) {
      Ye$2(ne$5.bold(ne$5.yellow("warn")), ...Array.isArray(e3) ? [
        e3
      ] : [
        t3,
        e3
      ]);
    },
    risk(e3, t3) {
      Ye$2(ne$5.bold(ne$5.magenta("risk")), ...Array.isArray(e3) ? [
        e3
      ] : [
        t3,
        e3
      ]);
    }
  };
  var jt$1 = {
    optimizeUniversalDefaults: false,
    generalizedModifiers: true,
    disableColorOpacityUtilitiesByDefault: false,
    relativeContentPathsByDefault: false
  }, Mt$1 = {
    future: [
      "hoverOnlyWhenSupported",
      "respectDefaultRingColorOpacity",
      "disableColorOpacityUtilitiesByDefault",
      "relativeContentPathsByDefault"
    ],
    experimental: [
      "optimizeUniversalDefaults",
      "generalizedModifiers"
    ]
  };
  function F$1(e3, t3) {
    var _a, _b;
    return Mt$1.future.includes(t3) ? e3.future === "all" || (((_a = e3 == null ? void 0 : e3.future) == null ? void 0 : _a[t3]) ?? jt$1[t3] ?? false) : Mt$1.experimental.includes(t3) ? e3.experimental === "all" || (((_b = e3 == null ? void 0 : e3.experimental) == null ? void 0 : _b[t3]) ?? jt$1[t3] ?? false) : false;
  }
  function Tt$1(e3, t3) {
    e3.walkClasses((r3) => {
      r3.value = t3(r3.value), r3.raws && r3.raws.value && (r3.raws.value = ee$2(r3.raws.value));
    });
  }
  function It$1(e3, t3) {
    if (!X$1(e3)) return;
    let r3 = e3.slice(1, -1);
    if (t3(r3)) return A(r3);
  }
  function Rr$1(e3, t3 = {}, r3) {
    let n3 = t3[e3];
    if (n3 !== void 0) return oe$1(n3);
    if (X$1(e3)) {
      let a3 = It$1(e3, r3);
      return a3 === void 0 ? void 0 : oe$1(a3);
    }
  }
  function Oe$1(e3, t3 = {}, { validate: r3 = () => true } = {}) {
    var _a;
    let n3 = (_a = t3.values) == null ? void 0 : _a[e3];
    return n3 !== void 0 ? n3 : t3.supportsNegativeValues && e3.startsWith("-") ? Rr$1(e3.slice(1), t3.values, r3) : It$1(e3, r3);
  }
  function X$1(e3) {
    return e3.startsWith("[") && e3.endsWith("]");
  }
  function Nt$1(e3) {
    let t3 = e3.lastIndexOf("/"), r3 = e3.lastIndexOf("[", t3), n3 = e3.indexOf("]", t3);
    return e3[t3 - 1] === "]" || e3[t3 + 1] === "[" || r3 !== -1 && n3 !== -1 && r3 < t3 && t3 < n3 && (t3 = e3.lastIndexOf("/", r3)), t3 === -1 || t3 === e3.length - 1 ? [
      e3,
      void 0
    ] : X$1(e3) && !e3.includes("]/[") ? [
      e3,
      void 0
    ] : [
      e3.slice(0, t3),
      e3.slice(t3 + 1)
    ];
  }
  function Vt$1(e3) {
    if (typeof e3 == "string" && e3.includes("<alpha-value>")) {
      let t3 = e3;
      return ({ opacityValue: r3 = 1 }) => t3.replace(/<alpha-value>/g, r3);
    }
    return e3;
  }
  function Pt$1(e3) {
    return A(e3.slice(1, -1));
  }
  function Fr$1(e3, t3 = {}, { tailwindConfig: r3 = {} } = {}) {
    var _a, _b, _c, _d, _e2;
    if (((_a = t3.values) == null ? void 0 : _a[e3]) !== void 0) return Vt$1((_b = t3.values) == null ? void 0 : _b[e3]);
    let [n3, a3] = Nt$1(e3);
    if (a3 !== void 0) {
      let o3 = ((_c = t3.values) == null ? void 0 : _c[n3]) ?? (X$1(n3) ? n3.slice(1, -1) : void 0);
      return o3 === void 0 ? void 0 : (o3 = Vt$1(o3), X$1(a3) ? ie$1(o3, Pt$1(a3)) : ((_e2 = (_d = r3.theme) == null ? void 0 : _d.opacity) == null ? void 0 : _e2[a3]) === void 0 ? void 0 : ie$1(o3, r3.theme.opacity[a3]));
    }
    return Oe$1(e3, t3, {
      validate: wt
    });
  }
  function zr$1(e3, t3 = {}) {
    var _a;
    return (_a = t3.values) == null ? void 0 : _a[e3];
  }
  function D(e3) {
    return (t3, r3) => Oe$1(t3, r3, {
      validate: e3
    });
  }
  var qe$1 = {
    any: Oe$1,
    color: Fr$1,
    url: D(He$2),
    image: D(vt),
    length: D(he$1),
    percentage: D(ge$1),
    position: D(xt$1),
    lookup: zr$1,
    "generic-name": D(St$1),
    "family-name": D(kt$1),
    number: D(Ge$2),
    "line-width": D(bt),
    "absolute-size": D(Ct$1),
    "relative-size": D(At$1),
    shadow: D(yt),
    size: D(Ot$1)
  }, Et$1 = Object.keys(qe$1);
  function _r(e3, t3) {
    let r3 = e3.indexOf(t3);
    return r3 === -1 ? [
      void 0,
      e3
    ] : [
      e3.slice(0, r3),
      e3.slice(r3 + 1)
    ];
  }
  function Xe$2(e3, t3, r3, n3) {
    if (r3.values && t3 in r3.values) for (let { type: o3 } of e3 ?? []) {
      let i3 = qe$1[o3](t3, r3, {
        tailwindConfig: n3
      });
      if (i3 !== void 0) return [
        i3,
        o3,
        null
      ];
    }
    if (X$1(t3)) {
      let o3 = t3.slice(1, -1), [i3, l3] = _r(o3, ":");
      if (!/^[\w-_]+$/g.test(i3)) l3 = o3;
      else if (i3 !== void 0 && !Et$1.includes(i3)) return [];
      if (l3.length > 0 && Et$1.includes(i3)) return [
        Oe$1(`[${l3}]`, r3),
        i3,
        null
      ];
    }
    let a3 = Je$2(e3, t3, r3, n3);
    for (let o3 of a3) return o3;
    return [];
  }
  function* Je$2(e3, t3, r3, n3) {
    var _a;
    let a3 = F$1(n3, "generalizedModifiers"), [o3, i3] = Nt$1(t3);
    if (a3 && r3.modifiers != null && (r3.modifiers === "any" || typeof r3.modifiers == "object" && (i3 && X$1(i3) || i3 in r3.modifiers)) || (o3 = t3, i3 = void 0), i3 !== void 0 && o3 === "" && (o3 = "DEFAULT"), i3 !== void 0 && typeof r3.modifiers == "object") {
      let f3 = ((_a = r3.modifiers) == null ? void 0 : _a[i3]) ?? null;
      f3 !== null ? i3 = f3 : X$1(i3) && (i3 = Pt$1(i3));
    }
    for (let { type: f3 } of e3 ?? []) {
      let m3 = qe$1[f3](o3, r3, {
        tailwindConfig: n3
      });
      m3 !== void 0 && (yield [
        m3,
        f3,
        i3 ?? null
      ]);
    }
  }
  function b$1(e3, t3 = [
    [
      e3,
      [
        e3
      ]
    ]
  ], { filterDefault: r3 = false, ...n3 } = {}) {
    let a3 = Z$2(e3);
    return function({ matchUtilities: o3, theme: i3 }) {
      for (let l3 of t3) {
        let f3 = Array.isArray(l3[0]) ? l3 : [
          l3
        ];
        o3(f3.reduce((m3, [c3, w3]) => Object.assign(m3, {
          [c3]: (s3) => w3.reduce((u3, g3) => Array.isArray(g3) ? Object.assign(u3, {
            [g3[0]]: g3[1]
          }) : Object.assign(u3, {
            [g3]: a3(s3)
          }), {})
        }), {}), {
          ...n3,
          values: r3 ? Object.fromEntries(Object.entries(i3(e3) ?? {}).filter(([m3]) => m3 !== "DEFAULT")) : i3(e3)
        });
      }
    };
  }
  function $e$1(e3) {
    return e3 = Array.isArray(e3) ? e3 : [
      e3
    ], e3.map((t3) => {
      let r3 = t3.values.map((n3) => n3.raw !== void 0 ? n3.raw : [
        n3.min && `(min-width: ${n3.min})`,
        n3.max && `(max-width: ${n3.max})`
      ].filter(Boolean).join(" and "));
      return t3.not ? `not all and ${r3}` : r3;
    }).join(", ");
  }
  var Wr = /* @__PURE__ */ new Set([
    "normal",
    "reverse",
    "alternate",
    "alternate-reverse"
  ]), Lr = /* @__PURE__ */ new Set([
    "running",
    "paused"
  ]), Ur$1 = /* @__PURE__ */ new Set([
    "none",
    "forwards",
    "backwards",
    "both"
  ]), Br = /* @__PURE__ */ new Set([
    "infinite"
  ]), Hr = /* @__PURE__ */ new Set([
    "linear",
    "ease",
    "ease-in",
    "ease-out",
    "ease-in-out",
    "step-start",
    "step-end"
  ]), Gr = [
    "cubic-bezier",
    "steps"
  ], Yr = /\,(?![^(]*\))/g, qr$1 = /\ +(?![^(]*\))/g, Dt$2 = /^(-?[\d.]+m?s)$/, Xr = /^(\d+)$/;
  function Ke$2(e3) {
    return e3.split(Yr).map((r3) => {
      let n3 = r3.trim(), a3 = {
        value: n3
      }, o3 = n3.split(qr$1), i3 = /* @__PURE__ */ new Set();
      for (let l3 of o3) !i3.has("DIRECTIONS") && Wr.has(l3) ? (a3.direction = l3, i3.add("DIRECTIONS")) : !i3.has("PLAY_STATES") && Lr.has(l3) ? (a3.playState = l3, i3.add("PLAY_STATES")) : !i3.has("FILL_MODES") && Ur$1.has(l3) ? (a3.fillMode = l3, i3.add("FILL_MODES")) : !i3.has("ITERATION_COUNTS") && (Br.has(l3) || Xr.test(l3)) ? (a3.iterationCount = l3, i3.add("ITERATION_COUNTS")) : !i3.has("TIMING_FUNCTION") && Hr.has(l3) || !i3.has("TIMING_FUNCTION") && Gr.some((f3) => l3.startsWith(`${f3}(`)) ? (a3.timingFunction = l3, i3.add("TIMING_FUNCTION")) : !i3.has("DURATION") && Dt$2.test(l3) ? (a3.duration = l3, i3.add("DURATION")) : !i3.has("DELAY") && Dt$2.test(l3) ? (a3.delay = l3, i3.add("DELAY")) : i3.has("NAME") ? (a3.unknown || (a3.unknown = []), a3.unknown.push(l3)) : (a3.name = l3, i3.add("NAME"));
      return a3;
    });
  }
  var Rt$1 = (e3) => Object.assign({}, ...Object.entries(e3 ?? {}).flatMap(([t3, r3]) => typeof r3 == "object" ? Object.entries(Rt$1(r3)).map(([n3, a3]) => ({
    [t3 + (n3 === "DEFAULT" ? "" : `-${n3}`)]: a3
  })) : [
    {
      [`${t3}`]: r3
    }
  ])), M$2 = Rt$1;
  function O$2(e3) {
    return typeof e3 == "function" ? e3({}) : e3;
  }
  var Ft$1 = "3.4.17";
  function Ve$1(e3, t3 = true) {
    return Array.isArray(e3) ? e3.map((r3) => {
      if (t3 && Array.isArray(r3)) throw new Error("The tuple syntax is not supported for `screens`.");
      if (typeof r3 == "string") return {
        name: r3.toString(),
        not: false,
        values: [
          {
            min: r3,
            max: void 0
          }
        ]
      };
      let [n3, a3] = r3;
      return n3 = n3.toString(), typeof a3 == "string" ? {
        name: n3,
        not: false,
        values: [
          {
            min: a3,
            max: void 0
          }
        ]
      } : Array.isArray(a3) ? {
        name: n3,
        not: false,
        values: a3.map((o3) => zt$1(o3))
      } : {
        name: n3,
        not: false,
        values: [
          zt$1(a3)
        ]
      };
    }) : Ve$1(Object.entries(e3 ?? {}), false);
  }
  function je$1(e3) {
    return e3.values.length !== 1 ? {
      result: false,
      reason: "multiple-values"
    } : e3.values[0].raw !== void 0 ? {
      result: false,
      reason: "raw-values"
    } : e3.values[0].min !== void 0 && e3.values[0].max !== void 0 ? {
      result: false,
      reason: "min-and-max"
    } : {
      result: true,
      reason: null
    };
  }
  function _t$1(e3, t3, r3) {
    let n3 = Me$1(t3, e3), a3 = Me$1(r3, e3), o3 = je$1(n3), i3 = je$1(a3);
    if (o3.reason === "multiple-values" || i3.reason === "multiple-values") throw new Error("Attempted to sort a screen with multiple values. This should never happen. Please open a bug report.");
    if (o3.reason === "raw-values" || i3.reason === "raw-values") throw new Error("Attempted to sort a screen with raw values. This should never happen. Please open a bug report.");
    if (o3.reason === "min-and-max" || i3.reason === "min-and-max") throw new Error("Attempted to sort a screen with both min and max values. This should never happen. Please open a bug report.");
    let { min: l3, max: f3 } = n3.values[0], { min: m3, max: c3 } = a3.values[0];
    t3.not && ([l3, f3] = [
      f3,
      l3
    ]), r3.not && ([m3, c3] = [
      c3,
      m3
    ]), l3 = l3 === void 0 ? l3 : parseFloat(l3), f3 = f3 === void 0 ? f3 : parseFloat(f3), m3 = m3 === void 0 ? m3 : parseFloat(m3), c3 = c3 === void 0 ? c3 : parseFloat(c3);
    let [w3, s3] = e3 === "min" ? [
      l3,
      m3
    ] : [
      c3,
      f3
    ];
    return w3 - s3;
  }
  function Me$1(e3, t3) {
    return typeof e3 == "object" ? e3 : {
      name: "arbitrary-screen",
      values: [
        {
          [t3]: e3
        }
      ]
    };
  }
  function zt$1({ "min-width": e3, min: t3 = e3, max: r3, raw: n3 } = {}) {
    return {
      min: t3,
      max: r3,
      raw: n3
    };
  }
  function Ee$2(e3, t3) {
    e3.walkDecls((r3) => {
      if (t3.includes(r3.prop)) {
        r3.remove();
        return;
      }
      for (let n3 of t3) r3.value.includes(`/ var(${n3})`) ? r3.value = r3.value.replace(`/ var(${n3})`, "") : r3.value.includes(`/ var(${n3}, 1)`) && (r3.value = r3.value.replace(`/ var(${n3}, 1)`, ""));
    });
  }
  var $ = {
    childVariant: ({ addVariant: e3 }) => {
      e3("*", "& > *");
    },
    pseudoElementVariants: ({ addVariant: e3 }) => {
      e3("first-letter", "&::first-letter"), e3("first-line", "&::first-line"), e3("marker", [
        ({ container: t3 }) => (Ee$2(t3, [
          "--tw-text-opacity"
        ]), "& *::marker"),
        ({ container: t3 }) => (Ee$2(t3, [
          "--tw-text-opacity"
        ]), "&::marker")
      ]), e3("selection", [
        "& *::selection",
        "&::selection"
      ]), e3("file", "&::file-selector-button"), e3("placeholder", "&::placeholder"), e3("backdrop", "&::backdrop"), e3("before", ({ container: t3 }) => (t3.walkRules((r3) => {
        let n3 = false;
        r3.walkDecls("content", () => {
          n3 = true;
        }), n3 || r3.prepend(F$8.decl({
          prop: "content",
          value: "var(--tw-content)"
        }));
      }), "&::before")), e3("after", ({ container: t3 }) => (t3.walkRules((r3) => {
        let n3 = false;
        r3.walkDecls("content", () => {
          n3 = true;
        }), n3 || r3.prepend(F$8.decl({
          prop: "content",
          value: "var(--tw-content)"
        }));
      }), "&::after"));
    },
    pseudoClassVariants: ({ addVariant: e3, matchVariant: t3, config: r3, prefix: n3 }) => {
      let a3 = [
        [
          "first",
          "&:first-child"
        ],
        [
          "last",
          "&:last-child"
        ],
        [
          "only",
          "&:only-child"
        ],
        [
          "odd",
          "&:nth-child(odd)"
        ],
        [
          "even",
          "&:nth-child(even)"
        ],
        "first-of-type",
        "last-of-type",
        "only-of-type",
        [
          "visited",
          ({ container: i3 }) => (Ee$2(i3, [
            "--tw-text-opacity",
            "--tw-border-opacity",
            "--tw-bg-opacity"
          ]), "&:visited")
        ],
        "target",
        [
          "open",
          "&[open]"
        ],
        "default",
        "checked",
        "indeterminate",
        "placeholder-shown",
        "autofill",
        "optional",
        "required",
        "valid",
        "invalid",
        "in-range",
        "out-of-range",
        "read-only",
        "empty",
        "focus-within",
        [
          "hover",
          F$1(r3(), "hoverOnlyWhenSupported") ? "@media (hover: hover) and (pointer: fine) { &:hover }" : "&:hover"
        ],
        "focus",
        "focus-visible",
        "active",
        "enabled",
        "disabled"
      ].map((i3) => Array.isArray(i3) ? i3 : [
        i3,
        `&:${i3}`
      ]);
      for (let [i3, l3] of a3) e3(i3, (f3) => typeof l3 == "function" ? l3(f3) : l3);
      let o3 = {
        group: (i3, { modifier: l3 }) => l3 ? [
          `:merge(${n3(".group")}\\/${R$1(l3)})`,
          " &"
        ] : [
          `:merge(${n3(".group")})`,
          " &"
        ],
        peer: (i3, { modifier: l3 }) => l3 ? [
          `:merge(${n3(".peer")}\\/${R$1(l3)})`,
          " ~ &"
        ] : [
          `:merge(${n3(".peer")})`,
          " ~ &"
        ]
      };
      for (let [i3, l3] of Object.entries(o3)) t3(i3, (f3 = "", m3) => {
        let c3 = A(typeof f3 == "function" ? f3(m3) : f3);
        c3.includes("&") || (c3 = "&" + c3);
        let [w3, s3] = l3("", m3), u3 = null, g3 = null, h3 = 0;
        for (let p3 = 0; p3 < c3.length; ++p3) {
          let d3 = c3[p3];
          d3 === "&" ? u3 = p3 : d3 === "'" || d3 === '"' ? h3 += 1 : u3 !== null && d3 === " " && !h3 && (g3 = p3);
        }
        return u3 !== null && g3 === null && (g3 = c3.length), c3.slice(0, u3) + w3 + c3.slice(u3 + 1, g3) + s3 + c3.slice(g3);
      }, {
        values: Object.fromEntries(a3),
        [J$1]: {
          respectPrefix: false
        }
      });
    },
    directionVariants: ({ addVariant: e3 }) => {
      e3("ltr", '&:where([dir="ltr"], [dir="ltr"] *)'), e3("rtl", '&:where([dir="rtl"], [dir="rtl"] *)');
    },
    reducedMotionVariants: ({ addVariant: e3 }) => {
      e3("motion-safe", "@media (prefers-reduced-motion: no-preference)"), e3("motion-reduce", "@media (prefers-reduced-motion: reduce)");
    },
    darkVariants: ({ config: e3, addVariant: t3 }) => {
      let [r3, n3 = ".dark"] = [].concat(e3("darkMode", "media"));
      if (r3 === false && (r3 = "media", V$1.warn("darkmode-false", [
        "The `darkMode` option in your Tailwind CSS configuration is set to `false`, which now behaves the same as `media`.",
        "Change `darkMode` to `media` or remove it entirely.",
        "https://tailwindcss.com/docs/upgrade-guide#remove-dark-mode-configuration"
      ])), r3 === "variant") {
        let a3;
        if (Array.isArray(n3) || typeof n3 == "function" ? a3 = n3 : typeof n3 == "string" && (a3 = [
          n3
        ]), Array.isArray(a3)) for (let o3 of a3) o3 === ".dark" ? (r3 = false, V$1.warn("darkmode-variant-without-selector", [
          "When using `variant` for `darkMode`, you must provide a selector.",
          'Example: `darkMode: ["variant", ".your-selector &"]`'
        ])) : o3.includes("&") || (r3 = false, V$1.warn("darkmode-variant-without-ampersand", [
          "When using `variant` for `darkMode`, your selector must contain `&`.",
          'Example `darkMode: ["variant", ".your-selector &"]`'
        ]));
        n3 = a3;
      }
      r3 === "selector" ? t3("dark", `&:where(${n3}, ${n3} *)`) : r3 === "media" ? t3("dark", "@media (prefers-color-scheme: dark)") : r3 === "variant" ? t3("dark", n3) : r3 === "class" && t3("dark", `&:is(${n3} *)`);
    },
    printVariant: ({ addVariant: e3 }) => {
      e3("print", "@media print");
    },
    screenVariants: ({ theme: e3, addVariant: t3, matchVariant: r3 }) => {
      let n3 = e3("screens") ?? {}, a3 = Object.values(n3).every((d3) => typeof d3 == "string"), o3 = Ve$1(e3("screens")), i3 = /* @__PURE__ */ new Set([]);
      function l3(d3) {
        var _a;
        return ((_a = d3.match(/(\D+)$/)) == null ? void 0 : _a[1]) ?? "(none)";
      }
      function f3(d3) {
        d3 !== void 0 && i3.add(l3(d3));
      }
      function m3(d3) {
        return f3(d3), i3.size === 1;
      }
      for (let d3 of o3) for (let v3 of d3.values) f3(v3.min), f3(v3.max);
      let c3 = i3.size <= 1;
      function w3(d3) {
        return Object.fromEntries(o3.filter((v3) => je$1(v3).result).map((v3) => {
          let { min: y3, max: k3 } = v3.values[0];
          if (k3 !== void 0) return v3;
          if (y3 !== void 0) return {
            ...v3,
            not: !v3.not
          };
        }).map((v3) => [
          v3.name,
          v3
        ]));
      }
      function s3(d3) {
        return (v3, y3) => _t$1(d3, v3.value, y3.value);
      }
      let u3 = s3("max"), g3 = s3("min");
      function h3(d3) {
        return (v3) => {
          if (a3) if (c3) {
            if (typeof v3 == "string" && !m3(v3)) return V$1.warn("minmax-have-mixed-units", [
              "The `min-*` and `max-*` variants are not supported with a `screens` configuration containing mixed units."
            ]), [];
          } else return V$1.warn("mixed-screen-units", [
            "The `min-*` and `max-*` variants are not supported with a `screens` configuration containing mixed units."
          ]), [];
          else return V$1.warn("complex-screen-config", [
            "The `min-*` and `max-*` variants are not supported with a `screens` configuration containing objects."
          ]), [];
          return [
            `@media ${$e$1(Me$1(v3, d3))}`
          ];
        };
      }
      r3("max", h3("max"), {
        sort: u3,
        values: a3 ? w3() : {}
      });
      let p3 = "min-screens";
      for (let d3 of o3) t3(d3.name, `@media ${$e$1(d3)}`, {
        id: p3,
        sort: a3 && c3 ? g3 : void 0,
        value: d3
      });
      r3("min", h3("min"), {
        id: p3,
        sort: g3
      });
    },
    supportsVariants: ({ matchVariant: e3, theme: t3 }) => {
      e3("supports", (r3 = "") => {
        let n3 = A(r3), a3 = /^\w*\s*\(/.test(n3);
        return n3 = a3 ? n3.replace(/\b(and|or|not)\b/g, " $1 ") : n3, a3 ? `@supports ${n3}` : (n3.includes(":") || (n3 = `${n3}: var(--tw)`), n3.startsWith("(") && n3.endsWith(")") || (n3 = `(${n3})`), `@supports ${n3}`);
      }, {
        values: t3("supports") ?? {}
      });
    },
    hasVariants: ({ matchVariant: e3, prefix: t3 }) => {
      e3("has", (r3) => `&:has(${A(r3)})`, {
        values: {},
        [J$1]: {
          respectPrefix: false
        }
      }), e3("group-has", (r3, { modifier: n3 }) => n3 ? `:merge(${t3(".group")}\\/${n3}):has(${A(r3)}) &` : `:merge(${t3(".group")}):has(${A(r3)}) &`, {
        values: {},
        [J$1]: {
          respectPrefix: false
        }
      }), e3("peer-has", (r3, { modifier: n3 }) => n3 ? `:merge(${t3(".peer")}\\/${n3}):has(${A(r3)}) ~ &` : `:merge(${t3(".peer")}):has(${A(r3)}) ~ &`, {
        values: {},
        [J$1]: {
          respectPrefix: false
        }
      });
    },
    ariaVariants: ({ matchVariant: e3, theme: t3 }) => {
      e3("aria", (r3) => `&[aria-${_$1(A(r3))}]`, {
        values: t3("aria") ?? {}
      }), e3("group-aria", (r3, { modifier: n3 }) => n3 ? `:merge(.group\\/${n3})[aria-${_$1(A(r3))}] &` : `:merge(.group)[aria-${_$1(A(r3))}] &`, {
        values: t3("aria") ?? {}
      }), e3("peer-aria", (r3, { modifier: n3 }) => n3 ? `:merge(.peer\\/${n3})[aria-${_$1(A(r3))}] ~ &` : `:merge(.peer)[aria-${_$1(A(r3))}] ~ &`, {
        values: t3("aria") ?? {}
      });
    },
    dataVariants: ({ matchVariant: e3, theme: t3 }) => {
      e3("data", (r3) => `&[data-${_$1(A(r3))}]`, {
        values: t3("data") ?? {}
      }), e3("group-data", (r3, { modifier: n3 }) => n3 ? `:merge(.group\\/${n3})[data-${_$1(A(r3))}] &` : `:merge(.group)[data-${_$1(A(r3))}] &`, {
        values: t3("data") ?? {}
      }), e3("peer-data", (r3, { modifier: n3 }) => n3 ? `:merge(.peer\\/${n3})[data-${_$1(A(r3))}] ~ &` : `:merge(.peer)[data-${_$1(A(r3))}] ~ &`, {
        values: t3("data") ?? {}
      });
    },
    orientationVariants: ({ addVariant: e3 }) => {
      e3("portrait", "@media (orientation: portrait)"), e3("landscape", "@media (orientation: landscape)");
    },
    prefersContrastVariants: ({ addVariant: e3 }) => {
      e3("contrast-more", "@media (prefers-contrast: more)"), e3("contrast-less", "@media (prefers-contrast: less)");
    },
    forcedColorsVariants: ({ addVariant: e3 }) => {
      e3("forced-colors", "@media (forced-colors: active)");
    }
  }, W$2 = [
    "translate(var(--tw-translate-x), var(--tw-translate-y))",
    "rotate(var(--tw-rotate))",
    "skewX(var(--tw-skew-x))",
    "skewY(var(--tw-skew-y))",
    "scaleX(var(--tw-scale-x))",
    "scaleY(var(--tw-scale-y))"
  ].join(" "), B$2 = [
    "var(--tw-blur)",
    "var(--tw-brightness)",
    "var(--tw-contrast)",
    "var(--tw-grayscale)",
    "var(--tw-hue-rotate)",
    "var(--tw-invert)",
    "var(--tw-saturate)",
    "var(--tw-sepia)",
    "var(--tw-drop-shadow)"
  ].join(" "), j$1 = [
    "var(--tw-backdrop-blur)",
    "var(--tw-backdrop-brightness)",
    "var(--tw-backdrop-contrast)",
    "var(--tw-backdrop-grayscale)",
    "var(--tw-backdrop-hue-rotate)",
    "var(--tw-backdrop-invert)",
    "var(--tw-backdrop-opacity)",
    "var(--tw-backdrop-saturate)",
    "var(--tw-backdrop-sepia)"
  ].join(" "), Lt = {
    preflight: ({ addBase: e3 }) => {
      let t3 = F$8.parse("/*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: theme('borderColor.DEFAULT', currentColor); /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n5. Use the user's configured `sans` font-feature-settings by default.\n6. Use the user's configured `sans` font-variation-settings by default.\n7. Disable tap highlights on iOS\n*/\n\nhtml,\n:host {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  tab-size: 4; /* 3 */\n  font-family: theme('fontFamily.sans', ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"); /* 4 */\n  font-feature-settings: theme('fontFamily.sans[1].fontFeatureSettings', normal); /* 5 */\n  font-variation-settings: theme('fontFamily.sans[1].fontVariationSettings', normal); /* 6 */\n  -webkit-tap-highlight-color: transparent; /* 7 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font-family by default.\n2. Use the user's configured `mono` font-feature-settings by default.\n3. Use the user's configured `mono` font-variation-settings by default.\n4. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: theme('fontFamily.mono', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace); /* 1 */\n  font-feature-settings: theme('fontFamily.mono[1].fontFeatureSettings', normal); /* 2 */\n  font-variation-settings: theme('fontFamily.mono[1].fontVariationSettings', normal); /* 3 */\n  font-size: 1em; /* 4 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-feature-settings: inherit; /* 1 */\n  font-variation-settings: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  letter-spacing: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\ninput:where([type='button']),\ninput:where([type='reset']),\ninput:where([type='submit']) {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nReset default styling for dialogs.\n*/\ndialog {\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: theme('colors.gray.400', #9ca3af); /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden]:where(:not([hidden=\"until-found\"])) {\n  display: none;\n}\n");
      e3([
        F$8.comment({
          text: `! tailwindcss v${Ft$1} | MIT License | https://tailwindcss.com`
        }),
        ...t3.nodes
      ]);
    },
    container: /* @__PURE__ */ (() => {
      function e3(r3 = []) {
        return r3.flatMap((n3) => n3.values.map((a3) => a3.min)).filter((n3) => n3 !== void 0);
      }
      function t3(r3, n3, a3) {
        if (typeof a3 > "u") return [];
        if (!(typeof a3 == "object" && a3 !== null)) return [
          {
            screen: "DEFAULT",
            minWidth: 0,
            padding: a3
          }
        ];
        let o3 = [];
        a3.DEFAULT && o3.push({
          screen: "DEFAULT",
          minWidth: 0,
          padding: a3.DEFAULT
        });
        for (let i3 of r3) for (let l3 of n3) for (let { min: f3 } of l3.values) f3 === i3 && o3.push({
          minWidth: i3,
          padding: a3[l3.name]
        });
        return o3;
      }
      return function({ addComponents: r3, theme: n3 }) {
        let a3 = Ve$1(n3("container.screens", n3("screens"))), o3 = e3(a3), i3 = t3(o3, a3, n3("container.padding")), l3 = (m3) => {
          let c3 = i3.find((w3) => w3.minWidth === m3);
          return c3 ? {
            paddingRight: c3.padding,
            paddingLeft: c3.padding
          } : {};
        }, f3 = Array.from(new Set(o3.slice().sort((m3, c3) => parseInt(m3) - parseInt(c3)))).map((m3) => ({
          [`@media (min-width: ${m3})`]: {
            ".container": {
              "max-width": m3,
              ...l3(m3)
            }
          }
        }));
        r3([
          {
            ".container": Object.assign({
              width: "100%"
            }, n3("container.center", false) ? {
              marginRight: "auto",
              marginLeft: "auto"
            } : {}, l3(0))
          },
          ...f3
        ]);
      };
    })(),
    accessibility: ({ addUtilities: e3 }) => {
      e3({
        ".sr-only": {
          position: "absolute",
          width: "1px",
          height: "1px",
          padding: "0",
          margin: "-1px",
          overflow: "hidden",
          clip: "rect(0, 0, 0, 0)",
          whiteSpace: "nowrap",
          borderWidth: "0"
        },
        ".not-sr-only": {
          position: "static",
          width: "auto",
          height: "auto",
          padding: "0",
          margin: "0",
          overflow: "visible",
          clip: "auto",
          whiteSpace: "normal"
        }
      });
    },
    pointerEvents: ({ addUtilities: e3 }) => {
      e3({
        ".pointer-events-none": {
          "pointer-events": "none"
        },
        ".pointer-events-auto": {
          "pointer-events": "auto"
        }
      });
    },
    visibility: ({ addUtilities: e3 }) => {
      e3({
        ".visible": {
          visibility: "visible"
        },
        ".invisible": {
          visibility: "hidden"
        },
        ".collapse": {
          visibility: "collapse"
        }
      });
    },
    position: ({ addUtilities: e3 }) => {
      e3({
        ".static": {
          position: "static"
        },
        ".fixed": {
          position: "fixed"
        },
        ".absolute": {
          position: "absolute"
        },
        ".relative": {
          position: "relative"
        },
        ".sticky": {
          position: "sticky"
        }
      });
    },
    inset: b$1("inset", [
      [
        "inset",
        [
          "inset"
        ]
      ],
      [
        [
          "inset-x",
          [
            "left",
            "right"
          ]
        ],
        [
          "inset-y",
          [
            "top",
            "bottom"
          ]
        ]
      ],
      [
        [
          "start",
          [
            "inset-inline-start"
          ]
        ],
        [
          "end",
          [
            "inset-inline-end"
          ]
        ],
        [
          "top",
          [
            "top"
          ]
        ],
        [
          "right",
          [
            "right"
          ]
        ],
        [
          "bottom",
          [
            "bottom"
          ]
        ],
        [
          "left",
          [
            "left"
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    isolation: ({ addUtilities: e3 }) => {
      e3({
        ".isolate": {
          isolation: "isolate"
        },
        ".isolation-auto": {
          isolation: "auto"
        }
      });
    },
    zIndex: b$1("zIndex", [
      [
        "z",
        [
          "zIndex"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    order: b$1("order", void 0, {
      supportsNegativeValues: true
    }),
    gridColumn: b$1("gridColumn", [
      [
        "col",
        [
          "gridColumn"
        ]
      ]
    ]),
    gridColumnStart: b$1("gridColumnStart", [
      [
        "col-start",
        [
          "gridColumnStart"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    gridColumnEnd: b$1("gridColumnEnd", [
      [
        "col-end",
        [
          "gridColumnEnd"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    gridRow: b$1("gridRow", [
      [
        "row",
        [
          "gridRow"
        ]
      ]
    ]),
    gridRowStart: b$1("gridRowStart", [
      [
        "row-start",
        [
          "gridRowStart"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    gridRowEnd: b$1("gridRowEnd", [
      [
        "row-end",
        [
          "gridRowEnd"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    float: ({ addUtilities: e3 }) => {
      e3({
        ".float-start": {
          float: "inline-start"
        },
        ".float-end": {
          float: "inline-end"
        },
        ".float-right": {
          float: "right"
        },
        ".float-left": {
          float: "left"
        },
        ".float-none": {
          float: "none"
        }
      });
    },
    clear: ({ addUtilities: e3 }) => {
      e3({
        ".clear-start": {
          clear: "inline-start"
        },
        ".clear-end": {
          clear: "inline-end"
        },
        ".clear-left": {
          clear: "left"
        },
        ".clear-right": {
          clear: "right"
        },
        ".clear-both": {
          clear: "both"
        },
        ".clear-none": {
          clear: "none"
        }
      });
    },
    margin: b$1("margin", [
      [
        "m",
        [
          "margin"
        ]
      ],
      [
        [
          "mx",
          [
            "margin-left",
            "margin-right"
          ]
        ],
        [
          "my",
          [
            "margin-top",
            "margin-bottom"
          ]
        ]
      ],
      [
        [
          "ms",
          [
            "margin-inline-start"
          ]
        ],
        [
          "me",
          [
            "margin-inline-end"
          ]
        ],
        [
          "mt",
          [
            "margin-top"
          ]
        ],
        [
          "mr",
          [
            "margin-right"
          ]
        ],
        [
          "mb",
          [
            "margin-bottom"
          ]
        ],
        [
          "ml",
          [
            "margin-left"
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    boxSizing: ({ addUtilities: e3 }) => {
      e3({
        ".box-border": {
          "box-sizing": "border-box"
        },
        ".box-content": {
          "box-sizing": "content-box"
        }
      });
    },
    lineClamp: ({ matchUtilities: e3, addUtilities: t3, theme: r3 }) => {
      e3({
        "line-clamp": (n3) => ({
          overflow: "hidden",
          display: "-webkit-box",
          "-webkit-box-orient": "vertical",
          "-webkit-line-clamp": `${n3}`
        })
      }, {
        values: r3("lineClamp")
      }), t3({
        ".line-clamp-none": {
          overflow: "visible",
          display: "block",
          "-webkit-box-orient": "horizontal",
          "-webkit-line-clamp": "none"
        }
      });
    },
    display: ({ addUtilities: e3 }) => {
      e3({
        ".block": {
          display: "block"
        },
        ".inline-block": {
          display: "inline-block"
        },
        ".inline": {
          display: "inline"
        },
        ".flex": {
          display: "flex"
        },
        ".inline-flex": {
          display: "inline-flex"
        },
        ".table": {
          display: "table"
        },
        ".inline-table": {
          display: "inline-table"
        },
        ".table-caption": {
          display: "table-caption"
        },
        ".table-cell": {
          display: "table-cell"
        },
        ".table-column": {
          display: "table-column"
        },
        ".table-column-group": {
          display: "table-column-group"
        },
        ".table-footer-group": {
          display: "table-footer-group"
        },
        ".table-header-group": {
          display: "table-header-group"
        },
        ".table-row-group": {
          display: "table-row-group"
        },
        ".table-row": {
          display: "table-row"
        },
        ".flow-root": {
          display: "flow-root"
        },
        ".grid": {
          display: "grid"
        },
        ".inline-grid": {
          display: "inline-grid"
        },
        ".contents": {
          display: "contents"
        },
        ".list-item": {
          display: "list-item"
        },
        ".hidden": {
          display: "none"
        }
      });
    },
    aspectRatio: b$1("aspectRatio", [
      [
        "aspect",
        [
          "aspect-ratio"
        ]
      ]
    ]),
    size: b$1("size", [
      [
        "size",
        [
          "width",
          "height"
        ]
      ]
    ]),
    height: b$1("height", [
      [
        "h",
        [
          "height"
        ]
      ]
    ]),
    maxHeight: b$1("maxHeight", [
      [
        "max-h",
        [
          "maxHeight"
        ]
      ]
    ]),
    minHeight: b$1("minHeight", [
      [
        "min-h",
        [
          "minHeight"
        ]
      ]
    ]),
    width: b$1("width", [
      [
        "w",
        [
          "width"
        ]
      ]
    ]),
    minWidth: b$1("minWidth", [
      [
        "min-w",
        [
          "minWidth"
        ]
      ]
    ]),
    maxWidth: b$1("maxWidth", [
      [
        "max-w",
        [
          "maxWidth"
        ]
      ]
    ]),
    flex: b$1("flex"),
    flexShrink: b$1("flexShrink", [
      [
        "flex-shrink",
        [
          "flex-shrink"
        ]
      ],
      [
        "shrink",
        [
          "flex-shrink"
        ]
      ]
    ]),
    flexGrow: b$1("flexGrow", [
      [
        "flex-grow",
        [
          "flex-grow"
        ]
      ],
      [
        "grow",
        [
          "flex-grow"
        ]
      ]
    ]),
    flexBasis: b$1("flexBasis", [
      [
        "basis",
        [
          "flex-basis"
        ]
      ]
    ]),
    tableLayout: ({ addUtilities: e3 }) => {
      e3({
        ".table-auto": {
          "table-layout": "auto"
        },
        ".table-fixed": {
          "table-layout": "fixed"
        }
      });
    },
    captionSide: ({ addUtilities: e3 }) => {
      e3({
        ".caption-top": {
          "caption-side": "top"
        },
        ".caption-bottom": {
          "caption-side": "bottom"
        }
      });
    },
    borderCollapse: ({ addUtilities: e3 }) => {
      e3({
        ".border-collapse": {
          "border-collapse": "collapse"
        },
        ".border-separate": {
          "border-collapse": "separate"
        }
      });
    },
    borderSpacing: ({ addDefaults: e3, matchUtilities: t3, theme: r3 }) => {
      e3("border-spacing", {
        "--tw-border-spacing-x": 0,
        "--tw-border-spacing-y": 0
      }), t3({
        "border-spacing": (n3) => ({
          "--tw-border-spacing-x": n3,
          "--tw-border-spacing-y": n3,
          "@defaults border-spacing": {},
          "border-spacing": "var(--tw-border-spacing-x) var(--tw-border-spacing-y)"
        }),
        "border-spacing-x": (n3) => ({
          "--tw-border-spacing-x": n3,
          "@defaults border-spacing": {},
          "border-spacing": "var(--tw-border-spacing-x) var(--tw-border-spacing-y)"
        }),
        "border-spacing-y": (n3) => ({
          "--tw-border-spacing-y": n3,
          "@defaults border-spacing": {},
          "border-spacing": "var(--tw-border-spacing-x) var(--tw-border-spacing-y)"
        })
      }, {
        values: r3("borderSpacing")
      });
    },
    transformOrigin: b$1("transformOrigin", [
      [
        "origin",
        [
          "transformOrigin"
        ]
      ]
    ]),
    translate: b$1("translate", [
      [
        [
          "translate-x",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-translate-x",
            [
              "transform",
              W$2
            ]
          ]
        ],
        [
          "translate-y",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-translate-y",
            [
              "transform",
              W$2
            ]
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    rotate: b$1("rotate", [
      [
        "rotate",
        [
          [
            "@defaults transform",
            {}
          ],
          "--tw-rotate",
          [
            "transform",
            W$2
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    skew: b$1("skew", [
      [
        [
          "skew-x",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-skew-x",
            [
              "transform",
              W$2
            ]
          ]
        ],
        [
          "skew-y",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-skew-y",
            [
              "transform",
              W$2
            ]
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    scale: b$1("scale", [
      [
        "scale",
        [
          [
            "@defaults transform",
            {}
          ],
          "--tw-scale-x",
          "--tw-scale-y",
          [
            "transform",
            W$2
          ]
        ]
      ],
      [
        [
          "scale-x",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-scale-x",
            [
              "transform",
              W$2
            ]
          ]
        ],
        [
          "scale-y",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-scale-y",
            [
              "transform",
              W$2
            ]
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    transform: ({ addDefaults: e3, addUtilities: t3 }) => {
      e3("transform", {
        "--tw-translate-x": "0",
        "--tw-translate-y": "0",
        "--tw-rotate": "0",
        "--tw-skew-x": "0",
        "--tw-skew-y": "0",
        "--tw-scale-x": "1",
        "--tw-scale-y": "1"
      }), t3({
        ".transform": {
          "@defaults transform": {},
          transform: W$2
        },
        ".transform-cpu": {
          transform: W$2
        },
        ".transform-gpu": {
          transform: W$2.replace("translate(var(--tw-translate-x), var(--tw-translate-y))", "translate3d(var(--tw-translate-x), var(--tw-translate-y), 0)")
        },
        ".transform-none": {
          transform: "none"
        }
      });
    },
    animation: ({ matchUtilities: e3, theme: t3, config: r3 }) => {
      let n3 = (o3) => R$1(r3("prefix") + o3), a3 = Object.fromEntries(Object.entries(t3("keyframes") ?? {}).map(([o3, i3]) => [
        o3,
        {
          [`@keyframes ${n3(o3)}`]: i3
        }
      ]));
      e3({
        animate: (o3) => {
          let i3 = Ke$2(o3);
          return [
            ...i3.flatMap((l3) => a3[l3.name]),
            {
              animation: i3.map(({ name: l3, value: f3 }) => l3 === void 0 || a3[l3] === void 0 ? f3 : f3.replace(l3, n3(l3))).join(", ")
            }
          ];
        }
      }, {
        values: t3("animation")
      });
    },
    cursor: b$1("cursor"),
    touchAction: ({ addDefaults: e3, addUtilities: t3 }) => {
      e3("touch-action", {
        "--tw-pan-x": " ",
        "--tw-pan-y": " ",
        "--tw-pinch-zoom": " "
      });
      let r3 = "var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom)";
      t3({
        ".touch-auto": {
          "touch-action": "auto"
        },
        ".touch-none": {
          "touch-action": "none"
        },
        ".touch-pan-x": {
          "@defaults touch-action": {},
          "--tw-pan-x": "pan-x",
          "touch-action": r3
        },
        ".touch-pan-left": {
          "@defaults touch-action": {},
          "--tw-pan-x": "pan-left",
          "touch-action": r3
        },
        ".touch-pan-right": {
          "@defaults touch-action": {},
          "--tw-pan-x": "pan-right",
          "touch-action": r3
        },
        ".touch-pan-y": {
          "@defaults touch-action": {},
          "--tw-pan-y": "pan-y",
          "touch-action": r3
        },
        ".touch-pan-up": {
          "@defaults touch-action": {},
          "--tw-pan-y": "pan-up",
          "touch-action": r3
        },
        ".touch-pan-down": {
          "@defaults touch-action": {},
          "--tw-pan-y": "pan-down",
          "touch-action": r3
        },
        ".touch-pinch-zoom": {
          "@defaults touch-action": {},
          "--tw-pinch-zoom": "pinch-zoom",
          "touch-action": r3
        },
        ".touch-manipulation": {
          "touch-action": "manipulation"
        }
      });
    },
    userSelect: ({ addUtilities: e3 }) => {
      e3({
        ".select-none": {
          "user-select": "none"
        },
        ".select-text": {
          "user-select": "text"
        },
        ".select-all": {
          "user-select": "all"
        },
        ".select-auto": {
          "user-select": "auto"
        }
      });
    },
    resize: ({ addUtilities: e3 }) => {
      e3({
        ".resize-none": {
          resize: "none"
        },
        ".resize-y": {
          resize: "vertical"
        },
        ".resize-x": {
          resize: "horizontal"
        },
        ".resize": {
          resize: "both"
        }
      });
    },
    scrollSnapType: ({ addDefaults: e3, addUtilities: t3 }) => {
      e3("scroll-snap-type", {
        "--tw-scroll-snap-strictness": "proximity"
      }), t3({
        ".snap-none": {
          "scroll-snap-type": "none"
        },
        ".snap-x": {
          "@defaults scroll-snap-type": {},
          "scroll-snap-type": "x var(--tw-scroll-snap-strictness)"
        },
        ".snap-y": {
          "@defaults scroll-snap-type": {},
          "scroll-snap-type": "y var(--tw-scroll-snap-strictness)"
        },
        ".snap-both": {
          "@defaults scroll-snap-type": {},
          "scroll-snap-type": "both var(--tw-scroll-snap-strictness)"
        },
        ".snap-mandatory": {
          "--tw-scroll-snap-strictness": "mandatory"
        },
        ".snap-proximity": {
          "--tw-scroll-snap-strictness": "proximity"
        }
      });
    },
    scrollSnapAlign: ({ addUtilities: e3 }) => {
      e3({
        ".snap-start": {
          "scroll-snap-align": "start"
        },
        ".snap-end": {
          "scroll-snap-align": "end"
        },
        ".snap-center": {
          "scroll-snap-align": "center"
        },
        ".snap-align-none": {
          "scroll-snap-align": "none"
        }
      });
    },
    scrollSnapStop: ({ addUtilities: e3 }) => {
      e3({
        ".snap-normal": {
          "scroll-snap-stop": "normal"
        },
        ".snap-always": {
          "scroll-snap-stop": "always"
        }
      });
    },
    scrollMargin: b$1("scrollMargin", [
      [
        "scroll-m",
        [
          "scroll-margin"
        ]
      ],
      [
        [
          "scroll-mx",
          [
            "scroll-margin-left",
            "scroll-margin-right"
          ]
        ],
        [
          "scroll-my",
          [
            "scroll-margin-top",
            "scroll-margin-bottom"
          ]
        ]
      ],
      [
        [
          "scroll-ms",
          [
            "scroll-margin-inline-start"
          ]
        ],
        [
          "scroll-me",
          [
            "scroll-margin-inline-end"
          ]
        ],
        [
          "scroll-mt",
          [
            "scroll-margin-top"
          ]
        ],
        [
          "scroll-mr",
          [
            "scroll-margin-right"
          ]
        ],
        [
          "scroll-mb",
          [
            "scroll-margin-bottom"
          ]
        ],
        [
          "scroll-ml",
          [
            "scroll-margin-left"
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    scrollPadding: b$1("scrollPadding", [
      [
        "scroll-p",
        [
          "scroll-padding"
        ]
      ],
      [
        [
          "scroll-px",
          [
            "scroll-padding-left",
            "scroll-padding-right"
          ]
        ],
        [
          "scroll-py",
          [
            "scroll-padding-top",
            "scroll-padding-bottom"
          ]
        ]
      ],
      [
        [
          "scroll-ps",
          [
            "scroll-padding-inline-start"
          ]
        ],
        [
          "scroll-pe",
          [
            "scroll-padding-inline-end"
          ]
        ],
        [
          "scroll-pt",
          [
            "scroll-padding-top"
          ]
        ],
        [
          "scroll-pr",
          [
            "scroll-padding-right"
          ]
        ],
        [
          "scroll-pb",
          [
            "scroll-padding-bottom"
          ]
        ],
        [
          "scroll-pl",
          [
            "scroll-padding-left"
          ]
        ]
      ]
    ]),
    listStylePosition: ({ addUtilities: e3 }) => {
      e3({
        ".list-inside": {
          "list-style-position": "inside"
        },
        ".list-outside": {
          "list-style-position": "outside"
        }
      });
    },
    listStyleType: b$1("listStyleType", [
      [
        "list",
        [
          "listStyleType"
        ]
      ]
    ]),
    listStyleImage: b$1("listStyleImage", [
      [
        "list-image",
        [
          "listStyleImage"
        ]
      ]
    ]),
    appearance: ({ addUtilities: e3 }) => {
      e3({
        ".appearance-none": {
          appearance: "none"
        },
        ".appearance-auto": {
          appearance: "auto"
        }
      });
    },
    columns: b$1("columns", [
      [
        "columns",
        [
          "columns"
        ]
      ]
    ]),
    breakBefore: ({ addUtilities: e3 }) => {
      e3({
        ".break-before-auto": {
          "break-before": "auto"
        },
        ".break-before-avoid": {
          "break-before": "avoid"
        },
        ".break-before-all": {
          "break-before": "all"
        },
        ".break-before-avoid-page": {
          "break-before": "avoid-page"
        },
        ".break-before-page": {
          "break-before": "page"
        },
        ".break-before-left": {
          "break-before": "left"
        },
        ".break-before-right": {
          "break-before": "right"
        },
        ".break-before-column": {
          "break-before": "column"
        }
      });
    },
    breakInside: ({ addUtilities: e3 }) => {
      e3({
        ".break-inside-auto": {
          "break-inside": "auto"
        },
        ".break-inside-avoid": {
          "break-inside": "avoid"
        },
        ".break-inside-avoid-page": {
          "break-inside": "avoid-page"
        },
        ".break-inside-avoid-column": {
          "break-inside": "avoid-column"
        }
      });
    },
    breakAfter: ({ addUtilities: e3 }) => {
      e3({
        ".break-after-auto": {
          "break-after": "auto"
        },
        ".break-after-avoid": {
          "break-after": "avoid"
        },
        ".break-after-all": {
          "break-after": "all"
        },
        ".break-after-avoid-page": {
          "break-after": "avoid-page"
        },
        ".break-after-page": {
          "break-after": "page"
        },
        ".break-after-left": {
          "break-after": "left"
        },
        ".break-after-right": {
          "break-after": "right"
        },
        ".break-after-column": {
          "break-after": "column"
        }
      });
    },
    gridAutoColumns: b$1("gridAutoColumns", [
      [
        "auto-cols",
        [
          "gridAutoColumns"
        ]
      ]
    ]),
    gridAutoFlow: ({ addUtilities: e3 }) => {
      e3({
        ".grid-flow-row": {
          gridAutoFlow: "row"
        },
        ".grid-flow-col": {
          gridAutoFlow: "column"
        },
        ".grid-flow-dense": {
          gridAutoFlow: "dense"
        },
        ".grid-flow-row-dense": {
          gridAutoFlow: "row dense"
        },
        ".grid-flow-col-dense": {
          gridAutoFlow: "column dense"
        }
      });
    },
    gridAutoRows: b$1("gridAutoRows", [
      [
        "auto-rows",
        [
          "gridAutoRows"
        ]
      ]
    ]),
    gridTemplateColumns: b$1("gridTemplateColumns", [
      [
        "grid-cols",
        [
          "gridTemplateColumns"
        ]
      ]
    ]),
    gridTemplateRows: b$1("gridTemplateRows", [
      [
        "grid-rows",
        [
          "gridTemplateRows"
        ]
      ]
    ]),
    flexDirection: ({ addUtilities: e3 }) => {
      e3({
        ".flex-row": {
          "flex-direction": "row"
        },
        ".flex-row-reverse": {
          "flex-direction": "row-reverse"
        },
        ".flex-col": {
          "flex-direction": "column"
        },
        ".flex-col-reverse": {
          "flex-direction": "column-reverse"
        }
      });
    },
    flexWrap: ({ addUtilities: e3 }) => {
      e3({
        ".flex-wrap": {
          "flex-wrap": "wrap"
        },
        ".flex-wrap-reverse": {
          "flex-wrap": "wrap-reverse"
        },
        ".flex-nowrap": {
          "flex-wrap": "nowrap"
        }
      });
    },
    placeContent: ({ addUtilities: e3 }) => {
      e3({
        ".place-content-center": {
          "place-content": "center"
        },
        ".place-content-start": {
          "place-content": "start"
        },
        ".place-content-end": {
          "place-content": "end"
        },
        ".place-content-between": {
          "place-content": "space-between"
        },
        ".place-content-around": {
          "place-content": "space-around"
        },
        ".place-content-evenly": {
          "place-content": "space-evenly"
        },
        ".place-content-baseline": {
          "place-content": "baseline"
        },
        ".place-content-stretch": {
          "place-content": "stretch"
        }
      });
    },
    placeItems: ({ addUtilities: e3 }) => {
      e3({
        ".place-items-start": {
          "place-items": "start"
        },
        ".place-items-end": {
          "place-items": "end"
        },
        ".place-items-center": {
          "place-items": "center"
        },
        ".place-items-baseline": {
          "place-items": "baseline"
        },
        ".place-items-stretch": {
          "place-items": "stretch"
        }
      });
    },
    alignContent: ({ addUtilities: e3 }) => {
      e3({
        ".content-normal": {
          "align-content": "normal"
        },
        ".content-center": {
          "align-content": "center"
        },
        ".content-start": {
          "align-content": "flex-start"
        },
        ".content-end": {
          "align-content": "flex-end"
        },
        ".content-between": {
          "align-content": "space-between"
        },
        ".content-around": {
          "align-content": "space-around"
        },
        ".content-evenly": {
          "align-content": "space-evenly"
        },
        ".content-baseline": {
          "align-content": "baseline"
        },
        ".content-stretch": {
          "align-content": "stretch"
        }
      });
    },
    alignItems: ({ addUtilities: e3 }) => {
      e3({
        ".items-start": {
          "align-items": "flex-start"
        },
        ".items-end": {
          "align-items": "flex-end"
        },
        ".items-center": {
          "align-items": "center"
        },
        ".items-baseline": {
          "align-items": "baseline"
        },
        ".items-stretch": {
          "align-items": "stretch"
        }
      });
    },
    justifyContent: ({ addUtilities: e3 }) => {
      e3({
        ".justify-normal": {
          "justify-content": "normal"
        },
        ".justify-start": {
          "justify-content": "flex-start"
        },
        ".justify-end": {
          "justify-content": "flex-end"
        },
        ".justify-center": {
          "justify-content": "center"
        },
        ".justify-between": {
          "justify-content": "space-between"
        },
        ".justify-around": {
          "justify-content": "space-around"
        },
        ".justify-evenly": {
          "justify-content": "space-evenly"
        },
        ".justify-stretch": {
          "justify-content": "stretch"
        }
      });
    },
    justifyItems: ({ addUtilities: e3 }) => {
      e3({
        ".justify-items-start": {
          "justify-items": "start"
        },
        ".justify-items-end": {
          "justify-items": "end"
        },
        ".justify-items-center": {
          "justify-items": "center"
        },
        ".justify-items-stretch": {
          "justify-items": "stretch"
        }
      });
    },
    gap: b$1("gap", [
      [
        "gap",
        [
          "gap"
        ]
      ],
      [
        [
          "gap-x",
          [
            "columnGap"
          ]
        ],
        [
          "gap-y",
          [
            "rowGap"
          ]
        ]
      ]
    ]),
    space: ({ matchUtilities: e3, addUtilities: t3, theme: r3 }) => {
      e3({
        "space-x": (n3) => (n3 = n3 === "0" ? "0px" : n3, {
          "& > :not([hidden]) ~ :not([hidden])": {
            "--tw-space-x-reverse": "0",
            "margin-right": `calc(${n3} * var(--tw-space-x-reverse))`,
            "margin-left": `calc(${n3} * calc(1 - var(--tw-space-x-reverse)))`
          }
        }),
        "space-y": (n3) => (n3 = n3 === "0" ? "0px" : n3, {
          "& > :not([hidden]) ~ :not([hidden])": {
            "--tw-space-y-reverse": "0",
            "margin-top": `calc(${n3} * calc(1 - var(--tw-space-y-reverse)))`,
            "margin-bottom": `calc(${n3} * var(--tw-space-y-reverse))`
          }
        })
      }, {
        values: r3("space"),
        supportsNegativeValues: true
      }), t3({
        ".space-y-reverse > :not([hidden]) ~ :not([hidden])": {
          "--tw-space-y-reverse": "1"
        },
        ".space-x-reverse > :not([hidden]) ~ :not([hidden])": {
          "--tw-space-x-reverse": "1"
        }
      });
    },
    divideWidth: ({ matchUtilities: e3, addUtilities: t3, theme: r3 }) => {
      e3({
        "divide-x": (n3) => (n3 = n3 === "0" ? "0px" : n3, {
          "& > :not([hidden]) ~ :not([hidden])": {
            "@defaults border-width": {},
            "--tw-divide-x-reverse": "0",
            "border-right-width": `calc(${n3} * var(--tw-divide-x-reverse))`,
            "border-left-width": `calc(${n3} * calc(1 - var(--tw-divide-x-reverse)))`
          }
        }),
        "divide-y": (n3) => (n3 = n3 === "0" ? "0px" : n3, {
          "& > :not([hidden]) ~ :not([hidden])": {
            "@defaults border-width": {},
            "--tw-divide-y-reverse": "0",
            "border-top-width": `calc(${n3} * calc(1 - var(--tw-divide-y-reverse)))`,
            "border-bottom-width": `calc(${n3} * var(--tw-divide-y-reverse))`
          }
        })
      }, {
        values: r3("divideWidth"),
        type: [
          "line-width",
          "length",
          "any"
        ]
      }), t3({
        ".divide-y-reverse > :not([hidden]) ~ :not([hidden])": {
          "@defaults border-width": {},
          "--tw-divide-y-reverse": "1"
        },
        ".divide-x-reverse > :not([hidden]) ~ :not([hidden])": {
          "@defaults border-width": {},
          "--tw-divide-x-reverse": "1"
        }
      });
    },
    divideStyle: ({ addUtilities: e3 }) => {
      e3({
        ".divide-solid > :not([hidden]) ~ :not([hidden])": {
          "border-style": "solid"
        },
        ".divide-dashed > :not([hidden]) ~ :not([hidden])": {
          "border-style": "dashed"
        },
        ".divide-dotted > :not([hidden]) ~ :not([hidden])": {
          "border-style": "dotted"
        },
        ".divide-double > :not([hidden]) ~ :not([hidden])": {
          "border-style": "double"
        },
        ".divide-none > :not([hidden]) ~ :not([hidden])": {
          "border-style": "none"
        }
      });
    },
    divideColor: ({ matchUtilities: e3, theme: t3, corePlugins: r3 }) => {
      e3({
        divide: (n3) => r3("divideOpacity") ? {
          "& > :not([hidden]) ~ :not([hidden])": E({
            color: n3,
            property: "border-color",
            variable: "--tw-divide-opacity"
          })
        } : {
          "& > :not([hidden]) ~ :not([hidden])": {
            "border-color": O$2(n3)
          }
        }
      }, {
        values: (({ DEFAULT: n3, ...a3 }) => a3)(M$2(t3("divideColor"))),
        type: [
          "color",
          "any"
        ]
      });
    },
    divideOpacity: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "divide-opacity": (r3) => ({
          "& > :not([hidden]) ~ :not([hidden])": {
            "--tw-divide-opacity": r3
          }
        })
      }, {
        values: t3("divideOpacity")
      });
    },
    placeSelf: ({ addUtilities: e3 }) => {
      e3({
        ".place-self-auto": {
          "place-self": "auto"
        },
        ".place-self-start": {
          "place-self": "start"
        },
        ".place-self-end": {
          "place-self": "end"
        },
        ".place-self-center": {
          "place-self": "center"
        },
        ".place-self-stretch": {
          "place-self": "stretch"
        }
      });
    },
    alignSelf: ({ addUtilities: e3 }) => {
      e3({
        ".self-auto": {
          "align-self": "auto"
        },
        ".self-start": {
          "align-self": "flex-start"
        },
        ".self-end": {
          "align-self": "flex-end"
        },
        ".self-center": {
          "align-self": "center"
        },
        ".self-stretch": {
          "align-self": "stretch"
        },
        ".self-baseline": {
          "align-self": "baseline"
        }
      });
    },
    justifySelf: ({ addUtilities: e3 }) => {
      e3({
        ".justify-self-auto": {
          "justify-self": "auto"
        },
        ".justify-self-start": {
          "justify-self": "start"
        },
        ".justify-self-end": {
          "justify-self": "end"
        },
        ".justify-self-center": {
          "justify-self": "center"
        },
        ".justify-self-stretch": {
          "justify-self": "stretch"
        }
      });
    },
    overflow: ({ addUtilities: e3 }) => {
      e3({
        ".overflow-auto": {
          overflow: "auto"
        },
        ".overflow-hidden": {
          overflow: "hidden"
        },
        ".overflow-clip": {
          overflow: "clip"
        },
        ".overflow-visible": {
          overflow: "visible"
        },
        ".overflow-scroll": {
          overflow: "scroll"
        },
        ".overflow-x-auto": {
          "overflow-x": "auto"
        },
        ".overflow-y-auto": {
          "overflow-y": "auto"
        },
        ".overflow-x-hidden": {
          "overflow-x": "hidden"
        },
        ".overflow-y-hidden": {
          "overflow-y": "hidden"
        },
        ".overflow-x-clip": {
          "overflow-x": "clip"
        },
        ".overflow-y-clip": {
          "overflow-y": "clip"
        },
        ".overflow-x-visible": {
          "overflow-x": "visible"
        },
        ".overflow-y-visible": {
          "overflow-y": "visible"
        },
        ".overflow-x-scroll": {
          "overflow-x": "scroll"
        },
        ".overflow-y-scroll": {
          "overflow-y": "scroll"
        }
      });
    },
    overscrollBehavior: ({ addUtilities: e3 }) => {
      e3({
        ".overscroll-auto": {
          "overscroll-behavior": "auto"
        },
        ".overscroll-contain": {
          "overscroll-behavior": "contain"
        },
        ".overscroll-none": {
          "overscroll-behavior": "none"
        },
        ".overscroll-y-auto": {
          "overscroll-behavior-y": "auto"
        },
        ".overscroll-y-contain": {
          "overscroll-behavior-y": "contain"
        },
        ".overscroll-y-none": {
          "overscroll-behavior-y": "none"
        },
        ".overscroll-x-auto": {
          "overscroll-behavior-x": "auto"
        },
        ".overscroll-x-contain": {
          "overscroll-behavior-x": "contain"
        },
        ".overscroll-x-none": {
          "overscroll-behavior-x": "none"
        }
      });
    },
    scrollBehavior: ({ addUtilities: e3 }) => {
      e3({
        ".scroll-auto": {
          "scroll-behavior": "auto"
        },
        ".scroll-smooth": {
          "scroll-behavior": "smooth"
        }
      });
    },
    textOverflow: ({ addUtilities: e3 }) => {
      e3({
        ".truncate": {
          overflow: "hidden",
          "text-overflow": "ellipsis",
          "white-space": "nowrap"
        },
        ".overflow-ellipsis": {
          "text-overflow": "ellipsis"
        },
        ".text-ellipsis": {
          "text-overflow": "ellipsis"
        },
        ".text-clip": {
          "text-overflow": "clip"
        }
      });
    },
    hyphens: ({ addUtilities: e3 }) => {
      e3({
        ".hyphens-none": {
          hyphens: "none"
        },
        ".hyphens-manual": {
          hyphens: "manual"
        },
        ".hyphens-auto": {
          hyphens: "auto"
        }
      });
    },
    whitespace: ({ addUtilities: e3 }) => {
      e3({
        ".whitespace-normal": {
          "white-space": "normal"
        },
        ".whitespace-nowrap": {
          "white-space": "nowrap"
        },
        ".whitespace-pre": {
          "white-space": "pre"
        },
        ".whitespace-pre-line": {
          "white-space": "pre-line"
        },
        ".whitespace-pre-wrap": {
          "white-space": "pre-wrap"
        },
        ".whitespace-break-spaces": {
          "white-space": "break-spaces"
        }
      });
    },
    textWrap: ({ addUtilities: e3 }) => {
      e3({
        ".text-wrap": {
          "text-wrap": "wrap"
        },
        ".text-nowrap": {
          "text-wrap": "nowrap"
        },
        ".text-balance": {
          "text-wrap": "balance"
        },
        ".text-pretty": {
          "text-wrap": "pretty"
        }
      });
    },
    wordBreak: ({ addUtilities: e3 }) => {
      e3({
        ".break-normal": {
          "overflow-wrap": "normal",
          "word-break": "normal"
        },
        ".break-words": {
          "overflow-wrap": "break-word"
        },
        ".break-all": {
          "word-break": "break-all"
        },
        ".break-keep": {
          "word-break": "keep-all"
        }
      });
    },
    borderRadius: b$1("borderRadius", [
      [
        "rounded",
        [
          "border-radius"
        ]
      ],
      [
        [
          "rounded-s",
          [
            "border-start-start-radius",
            "border-end-start-radius"
          ]
        ],
        [
          "rounded-e",
          [
            "border-start-end-radius",
            "border-end-end-radius"
          ]
        ],
        [
          "rounded-t",
          [
            "border-top-left-radius",
            "border-top-right-radius"
          ]
        ],
        [
          "rounded-r",
          [
            "border-top-right-radius",
            "border-bottom-right-radius"
          ]
        ],
        [
          "rounded-b",
          [
            "border-bottom-right-radius",
            "border-bottom-left-radius"
          ]
        ],
        [
          "rounded-l",
          [
            "border-top-left-radius",
            "border-bottom-left-radius"
          ]
        ]
      ],
      [
        [
          "rounded-ss",
          [
            "border-start-start-radius"
          ]
        ],
        [
          "rounded-se",
          [
            "border-start-end-radius"
          ]
        ],
        [
          "rounded-ee",
          [
            "border-end-end-radius"
          ]
        ],
        [
          "rounded-es",
          [
            "border-end-start-radius"
          ]
        ],
        [
          "rounded-tl",
          [
            "border-top-left-radius"
          ]
        ],
        [
          "rounded-tr",
          [
            "border-top-right-radius"
          ]
        ],
        [
          "rounded-br",
          [
            "border-bottom-right-radius"
          ]
        ],
        [
          "rounded-bl",
          [
            "border-bottom-left-radius"
          ]
        ]
      ]
    ]),
    borderWidth: b$1("borderWidth", [
      [
        "border",
        [
          [
            "@defaults border-width",
            {}
          ],
          "border-width"
        ]
      ],
      [
        [
          "border-x",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-left-width",
            "border-right-width"
          ]
        ],
        [
          "border-y",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-top-width",
            "border-bottom-width"
          ]
        ]
      ],
      [
        [
          "border-s",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-inline-start-width"
          ]
        ],
        [
          "border-e",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-inline-end-width"
          ]
        ],
        [
          "border-t",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-top-width"
          ]
        ],
        [
          "border-r",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-right-width"
          ]
        ],
        [
          "border-b",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-bottom-width"
          ]
        ],
        [
          "border-l",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-left-width"
          ]
        ]
      ]
    ], {
      type: [
        "line-width",
        "length"
      ]
    }),
    borderStyle: ({ addUtilities: e3 }) => {
      e3({
        ".border-solid": {
          "border-style": "solid"
        },
        ".border-dashed": {
          "border-style": "dashed"
        },
        ".border-dotted": {
          "border-style": "dotted"
        },
        ".border-double": {
          "border-style": "double"
        },
        ".border-hidden": {
          "border-style": "hidden"
        },
        ".border-none": {
          "border-style": "none"
        }
      });
    },
    borderColor: ({ matchUtilities: e3, theme: t3, corePlugins: r3 }) => {
      e3({
        border: (n3) => r3("borderOpacity") ? E({
          color: n3,
          property: "border-color",
          variable: "--tw-border-opacity"
        }) : {
          "border-color": O$2(n3)
        }
      }, {
        values: (({ DEFAULT: n3, ...a3 }) => a3)(M$2(t3("borderColor"))),
        type: [
          "color",
          "any"
        ]
      }), e3({
        "border-x": (n3) => r3("borderOpacity") ? E({
          color: n3,
          property: [
            "border-left-color",
            "border-right-color"
          ],
          variable: "--tw-border-opacity"
        }) : {
          "border-left-color": O$2(n3),
          "border-right-color": O$2(n3)
        },
        "border-y": (n3) => r3("borderOpacity") ? E({
          color: n3,
          property: [
            "border-top-color",
            "border-bottom-color"
          ],
          variable: "--tw-border-opacity"
        }) : {
          "border-top-color": O$2(n3),
          "border-bottom-color": O$2(n3)
        }
      }, {
        values: (({ DEFAULT: n3, ...a3 }) => a3)(M$2(t3("borderColor"))),
        type: [
          "color",
          "any"
        ]
      }), e3({
        "border-s": (n3) => r3("borderOpacity") ? E({
          color: n3,
          property: "border-inline-start-color",
          variable: "--tw-border-opacity"
        }) : {
          "border-inline-start-color": O$2(n3)
        },
        "border-e": (n3) => r3("borderOpacity") ? E({
          color: n3,
          property: "border-inline-end-color",
          variable: "--tw-border-opacity"
        }) : {
          "border-inline-end-color": O$2(n3)
        },
        "border-t": (n3) => r3("borderOpacity") ? E({
          color: n3,
          property: "border-top-color",
          variable: "--tw-border-opacity"
        }) : {
          "border-top-color": O$2(n3)
        },
        "border-r": (n3) => r3("borderOpacity") ? E({
          color: n3,
          property: "border-right-color",
          variable: "--tw-border-opacity"
        }) : {
          "border-right-color": O$2(n3)
        },
        "border-b": (n3) => r3("borderOpacity") ? E({
          color: n3,
          property: "border-bottom-color",
          variable: "--tw-border-opacity"
        }) : {
          "border-bottom-color": O$2(n3)
        },
        "border-l": (n3) => r3("borderOpacity") ? E({
          color: n3,
          property: "border-left-color",
          variable: "--tw-border-opacity"
        }) : {
          "border-left-color": O$2(n3)
        }
      }, {
        values: (({ DEFAULT: n3, ...a3 }) => a3)(M$2(t3("borderColor"))),
        type: [
          "color",
          "any"
        ]
      });
    },
    borderOpacity: b$1("borderOpacity", [
      [
        "border-opacity",
        [
          "--tw-border-opacity"
        ]
      ]
    ]),
    backgroundColor: ({ matchUtilities: e3, theme: t3, corePlugins: r3 }) => {
      e3({
        bg: (n3) => r3("backgroundOpacity") ? E({
          color: n3,
          property: "background-color",
          variable: "--tw-bg-opacity"
        }) : {
          "background-color": O$2(n3)
        }
      }, {
        values: M$2(t3("backgroundColor")),
        type: [
          "color",
          "any"
        ]
      });
    },
    backgroundOpacity: b$1("backgroundOpacity", [
      [
        "bg-opacity",
        [
          "--tw-bg-opacity"
        ]
      ]
    ]),
    backgroundImage: b$1("backgroundImage", [
      [
        "bg",
        [
          "background-image"
        ]
      ]
    ], {
      type: [
        "lookup",
        "image",
        "url"
      ]
    }),
    gradientColorStops: /* @__PURE__ */ (() => {
      function e3(t3) {
        return ie$1(t3, 0, "rgb(255 255 255 / 0)");
      }
      return function({ matchUtilities: t3, theme: r3, addDefaults: n3 }) {
        n3("gradient-color-stops", {
          "--tw-gradient-from-position": " ",
          "--tw-gradient-via-position": " ",
          "--tw-gradient-to-position": " "
        });
        let a3 = {
          values: M$2(r3("gradientColorStops")),
          type: [
            "color",
            "any"
          ]
        }, o3 = {
          values: r3("gradientColorStopPositions"),
          type: [
            "length",
            "percentage"
          ]
        };
        t3({
          from: (i3) => {
            let l3 = e3(i3);
            return {
              "@defaults gradient-color-stops": {},
              "--tw-gradient-from": `${O$2(i3)} var(--tw-gradient-from-position)`,
              "--tw-gradient-to": `${l3} var(--tw-gradient-to-position)`,
              "--tw-gradient-stops": "var(--tw-gradient-from), var(--tw-gradient-to)"
            };
          }
        }, a3), t3({
          from: (i3) => ({
            "--tw-gradient-from-position": i3
          })
        }, o3), t3({
          via: (i3) => {
            let l3 = e3(i3);
            return {
              "@defaults gradient-color-stops": {},
              "--tw-gradient-to": `${l3}  var(--tw-gradient-to-position)`,
              "--tw-gradient-stops": `var(--tw-gradient-from), ${O$2(i3)} var(--tw-gradient-via-position), var(--tw-gradient-to)`
            };
          }
        }, a3), t3({
          via: (i3) => ({
            "--tw-gradient-via-position": i3
          })
        }, o3), t3({
          to: (i3) => ({
            "@defaults gradient-color-stops": {},
            "--tw-gradient-to": `${O$2(i3)} var(--tw-gradient-to-position)`
          })
        }, a3), t3({
          to: (i3) => ({
            "--tw-gradient-to-position": i3
          })
        }, o3);
      };
    })(),
    boxDecorationBreak: ({ addUtilities: e3 }) => {
      e3({
        ".decoration-slice": {
          "box-decoration-break": "slice"
        },
        ".decoration-clone": {
          "box-decoration-break": "clone"
        },
        ".box-decoration-slice": {
          "box-decoration-break": "slice"
        },
        ".box-decoration-clone": {
          "box-decoration-break": "clone"
        }
      });
    },
    backgroundSize: b$1("backgroundSize", [
      [
        "bg",
        [
          "background-size"
        ]
      ]
    ], {
      type: [
        "lookup",
        "length",
        "percentage",
        "size"
      ]
    }),
    backgroundAttachment: ({ addUtilities: e3 }) => {
      e3({
        ".bg-fixed": {
          "background-attachment": "fixed"
        },
        ".bg-local": {
          "background-attachment": "local"
        },
        ".bg-scroll": {
          "background-attachment": "scroll"
        }
      });
    },
    backgroundClip: ({ addUtilities: e3 }) => {
      e3({
        ".bg-clip-border": {
          "background-clip": "border-box"
        },
        ".bg-clip-padding": {
          "background-clip": "padding-box"
        },
        ".bg-clip-content": {
          "background-clip": "content-box"
        },
        ".bg-clip-text": {
          "background-clip": "text"
        }
      });
    },
    backgroundPosition: b$1("backgroundPosition", [
      [
        "bg",
        [
          "background-position"
        ]
      ]
    ], {
      type: [
        "lookup",
        [
          "position",
          {
            preferOnConflict: true
          }
        ]
      ]
    }),
    backgroundRepeat: ({ addUtilities: e3 }) => {
      e3({
        ".bg-repeat": {
          "background-repeat": "repeat"
        },
        ".bg-no-repeat": {
          "background-repeat": "no-repeat"
        },
        ".bg-repeat-x": {
          "background-repeat": "repeat-x"
        },
        ".bg-repeat-y": {
          "background-repeat": "repeat-y"
        },
        ".bg-repeat-round": {
          "background-repeat": "round"
        },
        ".bg-repeat-space": {
          "background-repeat": "space"
        }
      });
    },
    backgroundOrigin: ({ addUtilities: e3 }) => {
      e3({
        ".bg-origin-border": {
          "background-origin": "border-box"
        },
        ".bg-origin-padding": {
          "background-origin": "padding-box"
        },
        ".bg-origin-content": {
          "background-origin": "content-box"
        }
      });
    },
    fill: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        fill: (r3) => ({
          fill: O$2(r3)
        })
      }, {
        values: M$2(t3("fill")),
        type: [
          "color",
          "any"
        ]
      });
    },
    stroke: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        stroke: (r3) => ({
          stroke: O$2(r3)
        })
      }, {
        values: M$2(t3("stroke")),
        type: [
          "color",
          "url",
          "any"
        ]
      });
    },
    strokeWidth: b$1("strokeWidth", [
      [
        "stroke",
        [
          "stroke-width"
        ]
      ]
    ], {
      type: [
        "length",
        "number",
        "percentage"
      ]
    }),
    objectFit: ({ addUtilities: e3 }) => {
      e3({
        ".object-contain": {
          "object-fit": "contain"
        },
        ".object-cover": {
          "object-fit": "cover"
        },
        ".object-fill": {
          "object-fit": "fill"
        },
        ".object-none": {
          "object-fit": "none"
        },
        ".object-scale-down": {
          "object-fit": "scale-down"
        }
      });
    },
    objectPosition: b$1("objectPosition", [
      [
        "object",
        [
          "object-position"
        ]
      ]
    ]),
    padding: b$1("padding", [
      [
        "p",
        [
          "padding"
        ]
      ],
      [
        [
          "px",
          [
            "padding-left",
            "padding-right"
          ]
        ],
        [
          "py",
          [
            "padding-top",
            "padding-bottom"
          ]
        ]
      ],
      [
        [
          "ps",
          [
            "padding-inline-start"
          ]
        ],
        [
          "pe",
          [
            "padding-inline-end"
          ]
        ],
        [
          "pt",
          [
            "padding-top"
          ]
        ],
        [
          "pr",
          [
            "padding-right"
          ]
        ],
        [
          "pb",
          [
            "padding-bottom"
          ]
        ],
        [
          "pl",
          [
            "padding-left"
          ]
        ]
      ]
    ]),
    textAlign: ({ addUtilities: e3 }) => {
      e3({
        ".text-left": {
          "text-align": "left"
        },
        ".text-center": {
          "text-align": "center"
        },
        ".text-right": {
          "text-align": "right"
        },
        ".text-justify": {
          "text-align": "justify"
        },
        ".text-start": {
          "text-align": "start"
        },
        ".text-end": {
          "text-align": "end"
        }
      });
    },
    textIndent: b$1("textIndent", [
      [
        "indent",
        [
          "text-indent"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    verticalAlign: ({ addUtilities: e3, matchUtilities: t3 }) => {
      e3({
        ".align-baseline": {
          "vertical-align": "baseline"
        },
        ".align-top": {
          "vertical-align": "top"
        },
        ".align-middle": {
          "vertical-align": "middle"
        },
        ".align-bottom": {
          "vertical-align": "bottom"
        },
        ".align-text-top": {
          "vertical-align": "text-top"
        },
        ".align-text-bottom": {
          "vertical-align": "text-bottom"
        },
        ".align-sub": {
          "vertical-align": "sub"
        },
        ".align-super": {
          "vertical-align": "super"
        }
      }), t3({
        align: (r3) => ({
          "vertical-align": r3
        })
      });
    },
    fontFamily: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        font: (r3) => {
          let [n3, a3 = {}] = Array.isArray(r3) && U$1(r3[1]) ? r3 : [
            r3
          ], { fontFeatureSettings: o3, fontVariationSettings: i3 } = a3;
          return {
            "font-family": Array.isArray(n3) ? n3.join(", ") : n3,
            ...o3 === void 0 ? {} : {
              "font-feature-settings": o3
            },
            ...i3 === void 0 ? {} : {
              "font-variation-settings": i3
            }
          };
        }
      }, {
        values: t3("fontFamily"),
        type: [
          "lookup",
          "generic-name",
          "family-name"
        ]
      });
    },
    fontSize: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        text: (r3, { modifier: n3 }) => {
          let [a3, o3] = Array.isArray(r3) ? r3 : [
            r3
          ];
          if (n3) return {
            "font-size": a3,
            "line-height": n3
          };
          let { lineHeight: i3, letterSpacing: l3, fontWeight: f3 } = U$1(o3) ? o3 : {
            lineHeight: o3
          };
          return {
            "font-size": a3,
            ...i3 === void 0 ? {} : {
              "line-height": i3
            },
            ...l3 === void 0 ? {} : {
              "letter-spacing": l3
            },
            ...f3 === void 0 ? {} : {
              "font-weight": f3
            }
          };
        }
      }, {
        values: t3("fontSize"),
        modifiers: t3("lineHeight"),
        type: [
          "absolute-size",
          "relative-size",
          "length",
          "percentage"
        ]
      });
    },
    fontWeight: b$1("fontWeight", [
      [
        "font",
        [
          "fontWeight"
        ]
      ]
    ], {
      type: [
        "lookup",
        "number",
        "any"
      ]
    }),
    textTransform: ({ addUtilities: e3 }) => {
      e3({
        ".uppercase": {
          "text-transform": "uppercase"
        },
        ".lowercase": {
          "text-transform": "lowercase"
        },
        ".capitalize": {
          "text-transform": "capitalize"
        },
        ".normal-case": {
          "text-transform": "none"
        }
      });
    },
    fontStyle: ({ addUtilities: e3 }) => {
      e3({
        ".italic": {
          "font-style": "italic"
        },
        ".not-italic": {
          "font-style": "normal"
        }
      });
    },
    fontVariantNumeric: ({ addDefaults: e3, addUtilities: t3 }) => {
      let r3 = "var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction)";
      e3("font-variant-numeric", {
        "--tw-ordinal": " ",
        "--tw-slashed-zero": " ",
        "--tw-numeric-figure": " ",
        "--tw-numeric-spacing": " ",
        "--tw-numeric-fraction": " "
      }), t3({
        ".normal-nums": {
          "font-variant-numeric": "normal"
        },
        ".ordinal": {
          "@defaults font-variant-numeric": {},
          "--tw-ordinal": "ordinal",
          "font-variant-numeric": r3
        },
        ".slashed-zero": {
          "@defaults font-variant-numeric": {},
          "--tw-slashed-zero": "slashed-zero",
          "font-variant-numeric": r3
        },
        ".lining-nums": {
          "@defaults font-variant-numeric": {},
          "--tw-numeric-figure": "lining-nums",
          "font-variant-numeric": r3
        },
        ".oldstyle-nums": {
          "@defaults font-variant-numeric": {},
          "--tw-numeric-figure": "oldstyle-nums",
          "font-variant-numeric": r3
        },
        ".proportional-nums": {
          "@defaults font-variant-numeric": {},
          "--tw-numeric-spacing": "proportional-nums",
          "font-variant-numeric": r3
        },
        ".tabular-nums": {
          "@defaults font-variant-numeric": {},
          "--tw-numeric-spacing": "tabular-nums",
          "font-variant-numeric": r3
        },
        ".diagonal-fractions": {
          "@defaults font-variant-numeric": {},
          "--tw-numeric-fraction": "diagonal-fractions",
          "font-variant-numeric": r3
        },
        ".stacked-fractions": {
          "@defaults font-variant-numeric": {},
          "--tw-numeric-fraction": "stacked-fractions",
          "font-variant-numeric": r3
        }
      });
    },
    lineHeight: b$1("lineHeight", [
      [
        "leading",
        [
          "lineHeight"
        ]
      ]
    ]),
    letterSpacing: b$1("letterSpacing", [
      [
        "tracking",
        [
          "letterSpacing"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    textColor: ({ matchUtilities: e3, theme: t3, corePlugins: r3 }) => {
      e3({
        text: (n3) => r3("textOpacity") ? E({
          color: n3,
          property: "color",
          variable: "--tw-text-opacity"
        }) : {
          color: O$2(n3)
        }
      }, {
        values: M$2(t3("textColor")),
        type: [
          "color",
          "any"
        ]
      });
    },
    textOpacity: b$1("textOpacity", [
      [
        "text-opacity",
        [
          "--tw-text-opacity"
        ]
      ]
    ]),
    textDecoration: ({ addUtilities: e3 }) => {
      e3({
        ".underline": {
          "text-decoration-line": "underline"
        },
        ".overline": {
          "text-decoration-line": "overline"
        },
        ".line-through": {
          "text-decoration-line": "line-through"
        },
        ".no-underline": {
          "text-decoration-line": "none"
        }
      });
    },
    textDecorationColor: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        decoration: (r3) => ({
          "text-decoration-color": O$2(r3)
        })
      }, {
        values: M$2(t3("textDecorationColor")),
        type: [
          "color",
          "any"
        ]
      });
    },
    textDecorationStyle: ({ addUtilities: e3 }) => {
      e3({
        ".decoration-solid": {
          "text-decoration-style": "solid"
        },
        ".decoration-double": {
          "text-decoration-style": "double"
        },
        ".decoration-dotted": {
          "text-decoration-style": "dotted"
        },
        ".decoration-dashed": {
          "text-decoration-style": "dashed"
        },
        ".decoration-wavy": {
          "text-decoration-style": "wavy"
        }
      });
    },
    textDecorationThickness: b$1("textDecorationThickness", [
      [
        "decoration",
        [
          "text-decoration-thickness"
        ]
      ]
    ], {
      type: [
        "length",
        "percentage"
      ]
    }),
    textUnderlineOffset: b$1("textUnderlineOffset", [
      [
        "underline-offset",
        [
          "text-underline-offset"
        ]
      ]
    ], {
      type: [
        "length",
        "percentage",
        "any"
      ]
    }),
    fontSmoothing: ({ addUtilities: e3 }) => {
      e3({
        ".antialiased": {
          "-webkit-font-smoothing": "antialiased",
          "-moz-osx-font-smoothing": "grayscale"
        },
        ".subpixel-antialiased": {
          "-webkit-font-smoothing": "auto",
          "-moz-osx-font-smoothing": "auto"
        }
      });
    },
    placeholderColor: ({ matchUtilities: e3, theme: t3, corePlugins: r3 }) => {
      e3({
        placeholder: (n3) => r3("placeholderOpacity") ? {
          "&::placeholder": E({
            color: n3,
            property: "color",
            variable: "--tw-placeholder-opacity"
          })
        } : {
          "&::placeholder": {
            color: O$2(n3)
          }
        }
      }, {
        values: M$2(t3("placeholderColor")),
        type: [
          "color",
          "any"
        ]
      });
    },
    placeholderOpacity: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "placeholder-opacity": (r3) => ({
          "&::placeholder": {
            "--tw-placeholder-opacity": r3
          }
        })
      }, {
        values: t3("placeholderOpacity")
      });
    },
    caretColor: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        caret: (r3) => ({
          "caret-color": O$2(r3)
        })
      }, {
        values: M$2(t3("caretColor")),
        type: [
          "color",
          "any"
        ]
      });
    },
    accentColor: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        accent: (r3) => ({
          "accent-color": O$2(r3)
        })
      }, {
        values: M$2(t3("accentColor")),
        type: [
          "color",
          "any"
        ]
      });
    },
    opacity: b$1("opacity", [
      [
        "opacity",
        [
          "opacity"
        ]
      ]
    ]),
    backgroundBlendMode: ({ addUtilities: e3 }) => {
      e3({
        ".bg-blend-normal": {
          "background-blend-mode": "normal"
        },
        ".bg-blend-multiply": {
          "background-blend-mode": "multiply"
        },
        ".bg-blend-screen": {
          "background-blend-mode": "screen"
        },
        ".bg-blend-overlay": {
          "background-blend-mode": "overlay"
        },
        ".bg-blend-darken": {
          "background-blend-mode": "darken"
        },
        ".bg-blend-lighten": {
          "background-blend-mode": "lighten"
        },
        ".bg-blend-color-dodge": {
          "background-blend-mode": "color-dodge"
        },
        ".bg-blend-color-burn": {
          "background-blend-mode": "color-burn"
        },
        ".bg-blend-hard-light": {
          "background-blend-mode": "hard-light"
        },
        ".bg-blend-soft-light": {
          "background-blend-mode": "soft-light"
        },
        ".bg-blend-difference": {
          "background-blend-mode": "difference"
        },
        ".bg-blend-exclusion": {
          "background-blend-mode": "exclusion"
        },
        ".bg-blend-hue": {
          "background-blend-mode": "hue"
        },
        ".bg-blend-saturation": {
          "background-blend-mode": "saturation"
        },
        ".bg-blend-color": {
          "background-blend-mode": "color"
        },
        ".bg-blend-luminosity": {
          "background-blend-mode": "luminosity"
        }
      });
    },
    mixBlendMode: ({ addUtilities: e3 }) => {
      e3({
        ".mix-blend-normal": {
          "mix-blend-mode": "normal"
        },
        ".mix-blend-multiply": {
          "mix-blend-mode": "multiply"
        },
        ".mix-blend-screen": {
          "mix-blend-mode": "screen"
        },
        ".mix-blend-overlay": {
          "mix-blend-mode": "overlay"
        },
        ".mix-blend-darken": {
          "mix-blend-mode": "darken"
        },
        ".mix-blend-lighten": {
          "mix-blend-mode": "lighten"
        },
        ".mix-blend-color-dodge": {
          "mix-blend-mode": "color-dodge"
        },
        ".mix-blend-color-burn": {
          "mix-blend-mode": "color-burn"
        },
        ".mix-blend-hard-light": {
          "mix-blend-mode": "hard-light"
        },
        ".mix-blend-soft-light": {
          "mix-blend-mode": "soft-light"
        },
        ".mix-blend-difference": {
          "mix-blend-mode": "difference"
        },
        ".mix-blend-exclusion": {
          "mix-blend-mode": "exclusion"
        },
        ".mix-blend-hue": {
          "mix-blend-mode": "hue"
        },
        ".mix-blend-saturation": {
          "mix-blend-mode": "saturation"
        },
        ".mix-blend-color": {
          "mix-blend-mode": "color"
        },
        ".mix-blend-luminosity": {
          "mix-blend-mode": "luminosity"
        },
        ".mix-blend-plus-darker": {
          "mix-blend-mode": "plus-darker"
        },
        ".mix-blend-plus-lighter": {
          "mix-blend-mode": "plus-lighter"
        }
      });
    },
    boxShadow: (() => {
      let e3 = Z$2("boxShadow"), t3 = [
        "var(--tw-ring-offset-shadow, 0 0 #0000)",
        "var(--tw-ring-shadow, 0 0 #0000)",
        "var(--tw-shadow)"
      ].join(", ");
      return function({ matchUtilities: r3, addDefaults: n3, theme: a3 }) {
        n3("box-shadow", {
          "--tw-ring-offset-shadow": "0 0 #0000",
          "--tw-ring-shadow": "0 0 #0000",
          "--tw-shadow": "0 0 #0000",
          "--tw-shadow-colored": "0 0 #0000"
        }), r3({
          shadow: (o3) => {
            o3 = e3(o3);
            let i3 = Ae(o3);
            for (let l3 of i3) l3.valid && (l3.color = "var(--tw-shadow-color)");
            return {
              "@defaults box-shadow": {},
              "--tw-shadow": o3 === "none" ? "0 0 #0000" : o3,
              "--tw-shadow-colored": o3 === "none" ? "0 0 #0000" : ht(i3),
              "box-shadow": t3
            };
          }
        }, {
          values: a3("boxShadow"),
          type: [
            "shadow"
          ]
        });
      };
    })(),
    boxShadowColor: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        shadow: (r3) => ({
          "--tw-shadow-color": O$2(r3),
          "--tw-shadow": "var(--tw-shadow-colored)"
        })
      }, {
        values: M$2(t3("boxShadowColor")),
        type: [
          "color",
          "any"
        ]
      });
    },
    outlineStyle: ({ addUtilities: e3 }) => {
      e3({
        ".outline-none": {
          outline: "2px solid transparent",
          "outline-offset": "2px"
        },
        ".outline": {
          "outline-style": "solid"
        },
        ".outline-dashed": {
          "outline-style": "dashed"
        },
        ".outline-dotted": {
          "outline-style": "dotted"
        },
        ".outline-double": {
          "outline-style": "double"
        }
      });
    },
    outlineWidth: b$1("outlineWidth", [
      [
        "outline",
        [
          "outline-width"
        ]
      ]
    ], {
      type: [
        "length",
        "number",
        "percentage"
      ]
    }),
    outlineOffset: b$1("outlineOffset", [
      [
        "outline-offset",
        [
          "outline-offset"
        ]
      ]
    ], {
      type: [
        "length",
        "number",
        "percentage",
        "any"
      ],
      supportsNegativeValues: true
    }),
    outlineColor: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        outline: (r3) => ({
          "outline-color": O$2(r3)
        })
      }, {
        values: M$2(t3("outlineColor")),
        type: [
          "color",
          "any"
        ]
      });
    },
    ringWidth: ({ matchUtilities: e3, addDefaults: t3, addUtilities: r3, theme: n3, config: a3 }) => {
      let o3 = (() => {
        var _a, _b;
        if (F$1(a3(), "respectDefaultRingColorOpacity")) return n3("ringColor.DEFAULT");
        let i3 = n3("ringOpacity.DEFAULT", "0.5");
        return ((_a = n3("ringColor")) == null ? void 0 : _a.DEFAULT) ? ie$1((_b = n3("ringColor")) == null ? void 0 : _b.DEFAULT, i3, `rgb(147 197 253 / ${i3})`) : `rgb(147 197 253 / ${i3})`;
      })();
      t3("ring-width", {
        "--tw-ring-inset": " ",
        "--tw-ring-offset-width": n3("ringOffsetWidth.DEFAULT", "0px"),
        "--tw-ring-offset-color": n3("ringOffsetColor.DEFAULT", "#fff"),
        "--tw-ring-color": o3,
        "--tw-ring-offset-shadow": "0 0 #0000",
        "--tw-ring-shadow": "0 0 #0000",
        "--tw-shadow": "0 0 #0000",
        "--tw-shadow-colored": "0 0 #0000"
      }), e3({
        ring: (i3) => ({
          "@defaults ring-width": {},
          "--tw-ring-offset-shadow": "var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)",
          "--tw-ring-shadow": `var(--tw-ring-inset) 0 0 0 calc(${i3} + var(--tw-ring-offset-width)) var(--tw-ring-color)`,
          "box-shadow": [
            "var(--tw-ring-offset-shadow)",
            "var(--tw-ring-shadow)",
            "var(--tw-shadow, 0 0 #0000)"
          ].join(", ")
        })
      }, {
        values: n3("ringWidth"),
        type: "length"
      }), r3({
        ".ring-inset": {
          "@defaults ring-width": {},
          "--tw-ring-inset": "inset"
        }
      });
    },
    ringColor: ({ matchUtilities: e3, theme: t3, corePlugins: r3 }) => {
      e3({
        ring: (n3) => r3("ringOpacity") ? E({
          color: n3,
          property: "--tw-ring-color",
          variable: "--tw-ring-opacity"
        }) : {
          "--tw-ring-color": O$2(n3)
        }
      }, {
        values: Object.fromEntries(Object.entries(M$2(t3("ringColor"))).filter(([n3]) => n3 !== "DEFAULT")),
        type: [
          "color",
          "any"
        ]
      });
    },
    ringOpacity: (e3) => {
      let { config: t3 } = e3;
      return b$1("ringOpacity", [
        [
          "ring-opacity",
          [
            "--tw-ring-opacity"
          ]
        ]
      ], {
        filterDefault: !F$1(t3(), "respectDefaultRingColorOpacity")
      })(e3);
    },
    ringOffsetWidth: b$1("ringOffsetWidth", [
      [
        "ring-offset",
        [
          "--tw-ring-offset-width"
        ]
      ]
    ], {
      type: "length"
    }),
    ringOffsetColor: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "ring-offset": (r3) => ({
          "--tw-ring-offset-color": O$2(r3)
        })
      }, {
        values: M$2(t3("ringOffsetColor")),
        type: [
          "color",
          "any"
        ]
      });
    },
    blur: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        blur: (r3) => ({
          "--tw-blur": r3.trim() === "" ? " " : `blur(${r3})`,
          "@defaults filter": {},
          filter: B$2
        })
      }, {
        values: t3("blur")
      });
    },
    brightness: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        brightness: (r3) => ({
          "--tw-brightness": `brightness(${r3})`,
          "@defaults filter": {},
          filter: B$2
        })
      }, {
        values: t3("brightness")
      });
    },
    contrast: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        contrast: (r3) => ({
          "--tw-contrast": `contrast(${r3})`,
          "@defaults filter": {},
          filter: B$2
        })
      }, {
        values: t3("contrast")
      });
    },
    dropShadow: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "drop-shadow": (r3) => ({
          "--tw-drop-shadow": Array.isArray(r3) ? r3.map((n3) => `drop-shadow(${n3})`).join(" ") : `drop-shadow(${r3})`,
          "@defaults filter": {},
          filter: B$2
        })
      }, {
        values: t3("dropShadow")
      });
    },
    grayscale: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        grayscale: (r3) => ({
          "--tw-grayscale": `grayscale(${r3})`,
          "@defaults filter": {},
          filter: B$2
        })
      }, {
        values: t3("grayscale")
      });
    },
    hueRotate: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "hue-rotate": (r3) => ({
          "--tw-hue-rotate": `hue-rotate(${r3})`,
          "@defaults filter": {},
          filter: B$2
        })
      }, {
        values: t3("hueRotate"),
        supportsNegativeValues: true
      });
    },
    invert: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        invert: (r3) => ({
          "--tw-invert": `invert(${r3})`,
          "@defaults filter": {},
          filter: B$2
        })
      }, {
        values: t3("invert")
      });
    },
    saturate: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        saturate: (r3) => ({
          "--tw-saturate": `saturate(${r3})`,
          "@defaults filter": {},
          filter: B$2
        })
      }, {
        values: t3("saturate")
      });
    },
    sepia: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        sepia: (r3) => ({
          "--tw-sepia": `sepia(${r3})`,
          "@defaults filter": {},
          filter: B$2
        })
      }, {
        values: t3("sepia")
      });
    },
    filter: ({ addDefaults: e3, addUtilities: t3 }) => {
      e3("filter", {
        "--tw-blur": " ",
        "--tw-brightness": " ",
        "--tw-contrast": " ",
        "--tw-grayscale": " ",
        "--tw-hue-rotate": " ",
        "--tw-invert": " ",
        "--tw-saturate": " ",
        "--tw-sepia": " ",
        "--tw-drop-shadow": " "
      }), t3({
        ".filter": {
          "@defaults filter": {},
          filter: B$2
        },
        ".filter-none": {
          filter: "none"
        }
      });
    },
    backdropBlur: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "backdrop-blur": (r3) => ({
          "--tw-backdrop-blur": r3.trim() === "" ? " " : `blur(${r3})`,
          "@defaults backdrop-filter": {},
          "-webkit-backdrop-filter": j$1,
          "backdrop-filter": j$1
        })
      }, {
        values: t3("backdropBlur")
      });
    },
    backdropBrightness: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "backdrop-brightness": (r3) => ({
          "--tw-backdrop-brightness": `brightness(${r3})`,
          "@defaults backdrop-filter": {},
          "-webkit-backdrop-filter": j$1,
          "backdrop-filter": j$1
        })
      }, {
        values: t3("backdropBrightness")
      });
    },
    backdropContrast: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "backdrop-contrast": (r3) => ({
          "--tw-backdrop-contrast": `contrast(${r3})`,
          "@defaults backdrop-filter": {},
          "-webkit-backdrop-filter": j$1,
          "backdrop-filter": j$1
        })
      }, {
        values: t3("backdropContrast")
      });
    },
    backdropGrayscale: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "backdrop-grayscale": (r3) => ({
          "--tw-backdrop-grayscale": `grayscale(${r3})`,
          "@defaults backdrop-filter": {},
          "-webkit-backdrop-filter": j$1,
          "backdrop-filter": j$1
        })
      }, {
        values: t3("backdropGrayscale")
      });
    },
    backdropHueRotate: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "backdrop-hue-rotate": (r3) => ({
          "--tw-backdrop-hue-rotate": `hue-rotate(${r3})`,
          "@defaults backdrop-filter": {},
          "-webkit-backdrop-filter": j$1,
          "backdrop-filter": j$1
        })
      }, {
        values: t3("backdropHueRotate"),
        supportsNegativeValues: true
      });
    },
    backdropInvert: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "backdrop-invert": (r3) => ({
          "--tw-backdrop-invert": `invert(${r3})`,
          "@defaults backdrop-filter": {},
          "-webkit-backdrop-filter": j$1,
          "backdrop-filter": j$1
        })
      }, {
        values: t3("backdropInvert")
      });
    },
    backdropOpacity: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "backdrop-opacity": (r3) => ({
          "--tw-backdrop-opacity": `opacity(${r3})`,
          "@defaults backdrop-filter": {},
          "-webkit-backdrop-filter": j$1,
          "backdrop-filter": j$1
        })
      }, {
        values: t3("backdropOpacity")
      });
    },
    backdropSaturate: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "backdrop-saturate": (r3) => ({
          "--tw-backdrop-saturate": `saturate(${r3})`,
          "@defaults backdrop-filter": {},
          "-webkit-backdrop-filter": j$1,
          "backdrop-filter": j$1
        })
      }, {
        values: t3("backdropSaturate")
      });
    },
    backdropSepia: ({ matchUtilities: e3, theme: t3 }) => {
      e3({
        "backdrop-sepia": (r3) => ({
          "--tw-backdrop-sepia": `sepia(${r3})`,
          "@defaults backdrop-filter": {},
          "-webkit-backdrop-filter": j$1,
          "backdrop-filter": j$1
        })
      }, {
        values: t3("backdropSepia")
      });
    },
    backdropFilter: ({ addDefaults: e3, addUtilities: t3 }) => {
      e3("backdrop-filter", {
        "--tw-backdrop-blur": " ",
        "--tw-backdrop-brightness": " ",
        "--tw-backdrop-contrast": " ",
        "--tw-backdrop-grayscale": " ",
        "--tw-backdrop-hue-rotate": " ",
        "--tw-backdrop-invert": " ",
        "--tw-backdrop-opacity": " ",
        "--tw-backdrop-saturate": " ",
        "--tw-backdrop-sepia": " "
      }), t3({
        ".backdrop-filter": {
          "@defaults backdrop-filter": {},
          "-webkit-backdrop-filter": j$1,
          "backdrop-filter": j$1
        },
        ".backdrop-filter-none": {
          "-webkit-backdrop-filter": "none",
          "backdrop-filter": "none"
        }
      });
    },
    transitionProperty: ({ matchUtilities: e3, theme: t3 }) => {
      let r3 = t3("transitionTimingFunction.DEFAULT"), n3 = t3("transitionDuration.DEFAULT");
      e3({
        transition: (a3) => ({
          "transition-property": a3,
          ...a3 === "none" ? {} : {
            "transition-timing-function": r3,
            "transition-duration": n3
          }
        })
      }, {
        values: t3("transitionProperty")
      });
    },
    transitionDelay: b$1("transitionDelay", [
      [
        "delay",
        [
          "transitionDelay"
        ]
      ]
    ]),
    transitionDuration: b$1("transitionDuration", [
      [
        "duration",
        [
          "transitionDuration"
        ]
      ]
    ], {
      filterDefault: true
    }),
    transitionTimingFunction: b$1("transitionTimingFunction", [
      [
        "ease",
        [
          "transitionTimingFunction"
        ]
      ]
    ], {
      filterDefault: true
    }),
    willChange: b$1("willChange", [
      [
        "will-change",
        [
          "will-change"
        ]
      ]
    ]),
    contain: ({ addDefaults: e3, addUtilities: t3 }) => {
      let r3 = "var(--tw-contain-size) var(--tw-contain-layout) var(--tw-contain-paint) var(--tw-contain-style)";
      e3("contain", {
        "--tw-contain-size": " ",
        "--tw-contain-layout": " ",
        "--tw-contain-paint": " ",
        "--tw-contain-style": " "
      }), t3({
        ".contain-none": {
          contain: "none"
        },
        ".contain-content": {
          contain: "content"
        },
        ".contain-strict": {
          contain: "strict"
        },
        ".contain-size": {
          "@defaults contain": {},
          "--tw-contain-size": "size",
          contain: r3
        },
        ".contain-inline-size": {
          "@defaults contain": {},
          "--tw-contain-size": "inline-size",
          contain: r3
        },
        ".contain-layout": {
          "@defaults contain": {},
          "--tw-contain-layout": "layout",
          contain: r3
        },
        ".contain-paint": {
          "@defaults contain": {},
          "--tw-contain-paint": "paint",
          contain: r3
        },
        ".contain-style": {
          "@defaults contain": {},
          "--tw-contain-style": "style",
          contain: r3
        }
      });
    },
    content: b$1("content", [
      [
        "content",
        [
          "--tw-content",
          [
            "content",
            "var(--tw-content)"
          ]
        ]
      ]
    ]),
    forcedColorAdjust: ({ addUtilities: e3 }) => {
      e3({
        ".forced-color-adjust-auto": {
          "forced-color-adjust": "auto"
        },
        ".forced-color-adjust-none": {
          "forced-color-adjust": "none"
        }
      });
    }
  };
  typeof xs < "u" ? {
    DEBUG: Qr(xs.env.DEBUG)
  } : {};
  var te$1 = new String("*"), be$1 = Symbol("__NONE__");
  function Qr(e3) {
    if (e3 === void 0) return false;
    if (e3 === "true" || e3 === "1") return true;
    if (e3 === "false" || e3 === "0") return false;
    if (e3 === "*") return true;
    let t3 = e3.split(",").map((r3) => r3.split(":")[0]);
    return t3.includes("-tailwindcss") ? false : !!t3.includes("tailwindcss");
  }
  function Gt$1(e3) {
    if (Array.isArray(e3)) return e3;
    let t3 = e3.split("[").length - 1, r3 = e3.split("]").length - 1;
    if (t3 !== r3) throw new Error(`Path is invalid. Has unbalanced brackets: ${e3}`);
    return e3.split(/\.(?![^\[]*\])|[\[\]]/g).filter(Boolean);
  }
  var qt$1 = /* @__PURE__ */ new Map([
    [
      "{",
      "}"
    ],
    [
      "[",
      "]"
    ],
    [
      "(",
      ")"
    ]
  ]), Yt = new Map(Array.from(qt$1.entries()).map(([e3, t3]) => [
    t3,
    e3
  ])), Zr = /* @__PURE__ */ new Set([
    '"',
    "'",
    "`"
  ]);
  function se$2(e3) {
    let t3 = [], r3 = false;
    for (let n3 = 0; n3 < e3.length; n3++) {
      let a3 = e3[n3];
      if (a3 === ":" && !r3 && t3.length === 0) return false;
      if (Zr.has(a3) && e3[n3 - 1] !== "\\" && (r3 = !r3), !r3 && e3[n3 - 1] !== "\\") {
        if (qt$1.has(a3)) t3.push(a3);
        else if (Yt.has(a3)) {
          let o3 = Yt.get(a3);
          if (t3.length <= 0 || t3.pop() !== o3) return false;
        }
      }
    }
    return !(t3.length > 0);
  }
  var tt = {
    "::after": [
      "terminal",
      "jumpable"
    ],
    "::backdrop": [
      "terminal",
      "jumpable"
    ],
    "::before": [
      "terminal",
      "jumpable"
    ],
    "::cue": [
      "terminal"
    ],
    "::cue-region": [
      "terminal"
    ],
    "::first-letter": [
      "terminal",
      "jumpable"
    ],
    "::first-line": [
      "terminal",
      "jumpable"
    ],
    "::grammar-error": [
      "terminal"
    ],
    "::marker": [
      "terminal",
      "jumpable"
    ],
    "::part": [
      "terminal",
      "actionable"
    ],
    "::placeholder": [
      "terminal",
      "jumpable"
    ],
    "::selection": [
      "terminal",
      "jumpable"
    ],
    "::slotted": [
      "terminal"
    ],
    "::spelling-error": [
      "terminal"
    ],
    "::target-text": [
      "terminal"
    ],
    "::file-selector-button": [
      "terminal",
      "actionable"
    ],
    "::deep": [
      "actionable"
    ],
    "::v-deep": [
      "actionable"
    ],
    "::ng-deep": [
      "actionable"
    ],
    ":after": [
      "terminal",
      "jumpable"
    ],
    ":before": [
      "terminal",
      "jumpable"
    ],
    ":first-letter": [
      "terminal",
      "jumpable"
    ],
    ":first-line": [
      "terminal",
      "jumpable"
    ],
    ":where": [],
    ":is": [],
    ":has": [],
    __default__: [
      "terminal",
      "actionable"
    ]
  };
  function Ie$1(e3) {
    let [t3] = Xt$1(e3);
    return t3.forEach(([r3, n3]) => r3.removeChild(n3)), e3.nodes.push(...t3.map(([, r3]) => r3)), e3;
  }
  function Xt$1(e3) {
    let t3 = [], r3 = null;
    for (let n3 of e3.nodes) if (n3.type === "combinator") t3 = t3.filter(([, a3]) => rt(a3).includes("jumpable")), r3 = null;
    else if (n3.type === "pseudo") {
      en(n3) ? (r3 = n3, t3.push([
        e3,
        n3,
        null
      ])) : r3 && tn(n3, r3) ? t3.push([
        e3,
        n3,
        r3
      ]) : r3 = null;
      for (let a3 of n3.nodes ?? []) {
        let [o3, i3] = Xt$1(a3);
        r3 = i3 || r3, t3.push(...o3);
      }
    }
    return [
      t3,
      r3
    ];
  }
  function Jt(e3) {
    return e3.value.startsWith("::") || tt[e3.value] !== void 0;
  }
  function en(e3) {
    return Jt(e3) && rt(e3).includes("terminal");
  }
  function tn(e3, t3) {
    return e3.type !== "pseudo" || Jt(e3) ? false : rt(t3).includes("actionable");
  }
  function rt(e3) {
    return tt[e3.value] ?? tt.__default__;
  }
  var nt = ":merge";
  function de$2(e3, { context: t3, candidate: r3 }) {
    let n3 = (t3 == null ? void 0 : t3.tailwindConfig.prefix) ?? "", a3 = e3.map((i3) => {
      let l3 = Pu().astSync(i3.format);
      return {
        ...i3,
        ast: i3.respectPrefix ? ae$2(n3, l3) : l3
      };
    }), o3 = Pu.root({
      nodes: [
        Pu.selector({
          nodes: [
            Pu.className({
              value: R$1(r3)
            })
          ]
        })
      ]
    });
    for (let { ast: i3 } of a3) [o3, i3] = an(o3, i3), i3.walkNesting((l3) => l3.replaceWith(...o3.nodes[0].nodes)), o3 = i3;
    return o3;
  }
  function Kt(e3) {
    let t3 = [];
    for (; e3.prev() && e3.prev().type !== "combinator"; ) e3 = e3.prev();
    for (; e3 && e3.type !== "combinator"; ) t3.push(e3), e3 = e3.next();
    return t3;
  }
  function nn(e3) {
    return e3.sort((t3, r3) => t3.type === "tag" && r3.type === "class" ? -1 : t3.type === "class" && r3.type === "tag" ? 1 : t3.type === "class" && r3.type === "pseudo" && r3.value.startsWith("::") ? -1 : t3.type === "pseudo" && t3.value.startsWith("::") && r3.type === "class" ? 1 : e3.index(t3) - e3.index(r3)), e3;
  }
  function at(e3, t3) {
    let r3 = false;
    e3.walk((n3) => {
      if (n3.type === "class" && n3.value === t3) return r3 = true, false;
    }), r3 || e3.remove();
  }
  function Ne$2(e3, t3, { context: r3, candidate: n3, base: a3 }) {
    var _a;
    let o3 = ((_a = r3 == null ? void 0 : r3.tailwindConfig) == null ? void 0 : _a.separator) ?? ":";
    a3 = a3 ?? T(n3, o3).pop();
    let i3 = Pu().astSync(e3);
    if (i3.walkClasses((c3) => {
      c3.raws && c3.value.includes(a3) && (c3.raws.value = R$1(_$c(c3.raws.value)));
    }), i3.each((c3) => at(c3, a3)), i3.length === 0) return null;
    let l3 = Array.isArray(t3) ? de$2(t3, {
      context: r3,
      candidate: n3
    }) : t3;
    if (l3 === null) return i3.toString();
    let f3 = Pu.comment({
      value: "/*__simple__*/"
    }), m3 = Pu.comment({
      value: "/*__simple__*/"
    });
    return i3.walkClasses((c3) => {
      if (c3.value !== a3) return;
      let w3 = c3.parent, s3 = l3.nodes[0].nodes;
      if (w3.nodes.length === 1) {
        c3.replaceWith(...s3);
        return;
      }
      let u3 = Kt(c3);
      w3.insertBefore(u3[0], f3), w3.insertAfter(u3[u3.length - 1], m3);
      for (let h3 of s3) w3.insertBefore(u3[0], h3.clone());
      c3.remove(), u3 = Kt(f3);
      let g3 = w3.index(f3);
      w3.nodes.splice(g3, u3.length, ...nn(Pu.selector({
        nodes: u3
      })).nodes), f3.remove(), m3.remove();
    }), i3.walkPseudos((c3) => {
      c3.value === nt && c3.replaceWith(c3.nodes);
    }), i3.each((c3) => Ie$1(c3)), i3.toString();
  }
  function an(e3, t3) {
    let r3 = [];
    return e3.walkPseudos((n3) => {
      n3.value === nt && r3.push({
        pseudo: n3,
        value: n3.nodes[0].toString()
      });
    }), t3.walkPseudos((n3) => {
      if (n3.value !== nt) return;
      let a3 = n3.nodes[0].toString(), o3 = r3.find((m3) => m3.value === a3);
      if (!o3) return;
      let i3 = [], l3 = n3.next();
      for (; l3 && l3.type !== "combinator"; ) i3.push(l3), l3 = l3.next();
      let f3 = l3;
      o3.pseudo.parent.insertAfter(o3.pseudo, Pu.selector({
        nodes: i3.map((m3) => m3.clone())
      })), n3.remove(), i3.forEach((m3) => m3.remove()), f3 && f3.type === "combinator" && f3.remove();
    }), [
      e3,
      t3
    ];
  }
  function Zt(e3, t3) {
    let r3 = Pu().astSync(e3);
    return r3.each((n3) => {
      n3.nodes.some((o3) => o3.type === "combinator") && (n3.nodes = [
        Pu.pseudo({
          value: ":is",
          nodes: [
            n3.clone()
          ]
        })
      ]), Ie$1(n3);
    }), `${t3} ${r3.toString()}`;
  }
  var on = Pu((e3) => e3.first.filter(({ type: t3 }) => t3 === "class").pop().value);
  function st$1(e3) {
    return on.transformSync(e3);
  }
  function* ln(e3) {
    let t3 = 1 / 0;
    for (; t3 >= 0; ) {
      let r3, n3 = false;
      if (t3 === 1 / 0 && e3.endsWith("]")) {
        let i3 = e3.indexOf("[");
        e3[i3 - 1] === "-" ? r3 = i3 - 1 : e3[i3 - 1] === "/" ? (r3 = i3 - 1, n3 = true) : r3 = -1;
      } else t3 === 1 / 0 && e3.includes("/") ? (r3 = e3.lastIndexOf("/"), n3 = true) : r3 = e3.lastIndexOf("-", t3);
      if (r3 < 0) break;
      let a3 = e3.slice(0, r3), o3 = e3.slice(n3 ? r3 : r3 + 1);
      t3 = r3 - 1, !(a3 === "" || o3 === "/") && (yield [
        a3,
        o3
      ]);
    }
  }
  function sn(e3, t3) {
    if (e3.length === 0 || t3.tailwindConfig.prefix === "") return e3;
    for (let r3 of e3) {
      let [n3] = r3;
      if (n3.options.respectPrefix) {
        let a3 = F$8.root({
          nodes: [
            r3[1].clone()
          ]
        }), o3 = r3[1].raws.tailwind.classCandidate;
        a3.walkRules((i3) => {
          let l3 = o3.startsWith("-");
          i3.selector = ae$2(t3.tailwindConfig.prefix, i3.selector, l3);
        }), r3[1] = a3.nodes[0];
      }
    }
    return e3;
  }
  function dn(e3, t3) {
    if (e3.length === 0) return e3;
    let r3 = [];
    function n3(a3) {
      return a3.parent && a3.parent.type === "atrule" && a3.parent.name === "keyframes";
    }
    for (let [a3, o3] of e3) {
      let i3 = F$8.root({
        nodes: [
          o3.clone()
        ]
      });
      i3.walkRules((l3) => {
        if (n3(l3)) return;
        let f3 = Pu().astSync(l3.selector);
        f3.each((m3) => at(m3, t3)), Tt$1(f3, (m3) => m3 === t3 ? `!${m3}` : m3), l3.selector = f3.toString(), l3.walkDecls((m3) => m3.important = true);
      }), r3.push([
        {
          ...a3,
          important: true
        },
        i3.nodes[0]
      ]);
    }
    return r3;
  }
  function un(e3, t3, r3) {
    var _a;
    if (t3.length === 0) return t3;
    let n3 = {
      modifier: null,
      value: be$1
    };
    {
      let [a3, ...o3] = T(e3, "/");
      if (o3.length > 1 && (a3 = a3 + "/" + o3.slice(0, -1).join("/"), o3 = o3.slice(-1)), o3.length && !r3.variantMap.has(e3) && (e3 = a3, n3.modifier = o3[0], !F$1(r3.tailwindConfig, "generalizedModifiers"))) return [];
    }
    if (e3.endsWith("]") && !e3.startsWith("[")) {
      let a3 = /(.)(-?)\[(.*)\]/g.exec(e3);
      if (a3) {
        let [, o3, i3, l3] = a3;
        if (o3 === "@" && i3 === "-") return [];
        if (o3 !== "@" && i3 === "") return [];
        e3 = e3.replace(`${i3}[${l3}]`, ""), n3.value = l3;
      }
    }
    if (ot$1(e3) && !r3.variantMap.has(e3)) {
      let a3 = r3.offsets.recordVariant(e3), o3 = A(e3.slice(1, -1)), i3 = T(o3, ",");
      if (i3.length > 1) return [];
      if (!i3.every(De$1)) return [];
      let l3 = i3.map((f3, m3) => [
        r3.offsets.applyParallelOffset(a3, m3),
        ye$1(f3.trim())
      ]);
      r3.variantMap.set(e3, l3);
    }
    if (r3.variantMap.has(e3)) {
      let a3 = ot$1(e3), o3 = ((_a = r3.variantOptions.get(e3)) == null ? void 0 : _a[J$1]) ?? {}, i3 = r3.variantMap.get(e3).slice(), l3 = [], f3 = !(a3 || o3.respectPrefix === false);
      for (let [m3, c3] of t3) {
        if (m3.layer === "user") continue;
        let w3 = F$8.root({
          nodes: [
            c3.clone()
          ]
        });
        for (let [s3, u3, g3] of i3) {
          let d3 = function() {
            h3.raws.neededBackup || (h3.raws.neededBackup = true, h3.walkRules((x3) => x3.raws.originalSelector = x3.selector));
          }, v3 = function(x3) {
            return d3(), h3.each((S3) => {
              S3.type === "rule" && (S3.selectors = S3.selectors.map((C3) => x3({
                get className() {
                  return st$1(C3);
                },
                selector: C3
              })));
            }), h3;
          }, h3 = (g3 ?? w3).clone(), p3 = [], y3 = u3({
            get container() {
              return d3(), h3;
            },
            separator: r3.tailwindConfig.separator,
            modifySelectors: v3,
            wrap(x3) {
              let S3 = h3.nodes;
              h3.removeAll(), x3.append(S3), h3.append(x3);
            },
            format(x3) {
              p3.push({
                format: x3,
                respectPrefix: f3
              });
            },
            args: n3
          });
          if (Array.isArray(y3)) {
            for (let [x3, S3] of y3.entries()) i3.push([
              r3.offsets.applyParallelOffset(s3, x3),
              S3,
              h3.clone()
            ]);
            continue;
          }
          if (typeof y3 == "string" && p3.push({
            format: y3,
            respectPrefix: f3
          }), y3 === null) continue;
          h3.raws.neededBackup && (delete h3.raws.neededBackup, h3.walkRules((x3) => {
            let S3 = x3.raws.originalSelector;
            if (!S3 || (delete x3.raws.originalSelector, S3 === x3.selector)) return;
            let C3 = x3.selector, I3 = Pu((Q3) => {
              Q3.walkClasses((G3) => {
                G3.value = `${e3}${r3.tailwindConfig.separator}${G3.value}`;
              });
            }).processSync(S3);
            p3.push({
              format: C3.replace(I3, "&"),
              respectPrefix: f3
            }), x3.selector = S3;
          })), h3.nodes[0].raws.tailwind = {
            ...h3.nodes[0].raws.tailwind,
            parentLayer: m3.layer
          };
          let k3 = [
            {
              ...m3,
              sort: r3.offsets.applyVariantOffset(m3.sort, s3, Object.assign(n3, r3.variantOptions.get(e3))),
              collectedFormats: (m3.collectedFormats ?? []).concat(p3)
            },
            h3.nodes[0]
          ];
          l3.push(k3);
        }
      }
      return l3;
    }
    return [];
  }
  function it(e3, t3, r3 = {}) {
    return !U$1(e3) && !Array.isArray(e3) ? [
      [
        e3
      ],
      r3
    ] : Array.isArray(e3) ? it(e3[0], t3, e3[1]) : (t3.has(e3) || t3.set(e3, ne$1(e3)), [
      t3.get(e3),
      r3
    ]);
  }
  var fn = /^[a-z_-]/;
  function cn(e3) {
    return fn.test(e3);
  }
  function pn(e3) {
    if (!e3.includes("://")) return false;
    try {
      let t3 = new URL(e3);
      return t3.scheme !== "" && t3.host !== "";
    } catch {
      return false;
    }
  }
  function er(e3) {
    let t3 = true;
    return e3.walkDecls((r3) => {
      if (!tr(r3.prop, r3.value)) return t3 = false, false;
    }), t3;
  }
  function tr(e3, t3) {
    if (pn(`${e3}:${t3}`)) return false;
    try {
      return F$8.parse(`a{${e3}:${t3}}`).toResult(), true;
    } catch {
      return false;
    }
  }
  function mn(e3, t3) {
    let [, r3, n3] = e3.match(/^\[([a-zA-Z0-9-_]+):(\S+)\]$/) ?? [];
    if (n3 === void 0 || !cn(r3) || !se$2(n3)) return null;
    let a3 = A(n3, {
      property: r3
    });
    return tr(r3, a3) ? [
      [
        {
          sort: t3.offsets.arbitraryProperty(e3),
          layer: "utilities",
          options: {
            respectImportant: true
          }
        },
        () => ({
          [We$1(e3)]: {
            [r3]: a3
          }
        })
      ]
    ] : null;
  }
  function* gn(e3, t3) {
    t3.candidateRuleMap.has(e3) && (yield [
      t3.candidateRuleMap.get(e3),
      "DEFAULT"
    ]), yield* function* (l3) {
      l3 !== null && (yield [
        l3,
        "DEFAULT"
      ]);
    }(mn(e3, t3));
    let r3 = e3, n3 = false, a3 = t3.tailwindConfig.prefix, o3 = a3.length, i3 = r3.startsWith(a3) || r3.startsWith(`-${a3}`);
    r3[o3] === "-" && i3 && (n3 = true, r3 = a3 + r3.slice(o3 + 1)), n3 && t3.candidateRuleMap.has(r3) && (yield [
      t3.candidateRuleMap.get(r3),
      "-DEFAULT"
    ]);
    for (let [l3, f3] of ln(r3)) t3.candidateRuleMap.has(l3) && (yield [
      t3.candidateRuleMap.get(l3),
      n3 ? `-${f3}` : f3
    ]);
  }
  function hn(e3, t3) {
    return e3 === te$1 ? [
      te$1
    ] : T(e3, t3);
  }
  function* bn$4(e3, t3) {
    var _a;
    for (let r3 of e3) r3[1].raws.tailwind = {
      ...r3[1].raws.tailwind,
      classCandidate: t3,
      preserveSource: ((_a = r3[0].options) == null ? void 0 : _a.preserveSource) ?? false
    }, yield r3;
  }
  function* yn(e3, t3) {
    var _a;
    let r3 = t3.tailwindConfig.separator, [n3, ...a3] = hn(e3, r3).reverse(), o3 = false;
    n3.startsWith("!") && (o3 = true, n3 = n3.slice(1));
    for (let i3 of gn(n3, t3)) {
      let l3 = [], f3 = /* @__PURE__ */ new Map(), [m3, c3] = i3, w3 = m3.length === 1;
      for (let [s3, u3] of m3) {
        let g3 = [];
        if (typeof u3 == "function") for (let h3 of [].concat(u3(c3, {
          isOnlyPlugin: w3
        }))) {
          let [p3, d3] = it(h3, t3.postCssNodeCache);
          for (let v3 of p3) g3.push([
            {
              ...s3,
              options: {
                ...s3.options,
                ...d3
              }
            },
            v3
          ]);
        }
        else if (c3 === "DEFAULT" || c3 === "-DEFAULT") {
          let h3 = u3, [p3, d3] = it(h3, t3.postCssNodeCache);
          for (let v3 of p3) g3.push([
            {
              ...s3,
              options: {
                ...s3.options,
                ...d3
              }
            },
            v3
          ]);
        }
        if (g3.length > 0) {
          let h3 = Array.from(Je$2(((_a = s3.options) == null ? void 0 : _a.types) ?? [], c3, s3.options ?? {}, t3.tailwindConfig)).map(([p3, d3]) => d3);
          h3.length > 0 && f3.set(g3, h3), l3.push(g3);
        }
      }
      if (ot$1(c3)) {
        if (l3.length > 1) {
          let g3 = function(p3) {
            return p3.length === 1 ? p3[0] : p3.find((d3) => {
              let v3 = f3.get(d3);
              return d3.some(([{ options: y3 }, k3]) => er(k3) ? y3.types.some(({ type: x3, preferOnConflict: S3 }) => v3.includes(x3) && S3) : false);
            });
          }, [s3, u3] = l3.reduce((p3, d3) => (d3.some(([{ options: y3 }]) => y3.types.some(({ type: k3 }) => k3 === "any")) ? p3[0].push(d3) : p3[1].push(d3), p3), [
            [],
            []
          ]), h3 = g3(u3) ?? g3(s3);
          if (h3) l3 = [
            h3
          ];
          else {
            let p3 = l3.map((v3) => /* @__PURE__ */ new Set([
              ...f3.get(v3) ?? []
            ]));
            for (let v3 of p3) for (let y3 of v3) {
              let k3 = false;
              for (let x3 of p3) v3 !== x3 && x3.has(y3) && (x3.delete(y3), k3 = true);
              k3 && v3.delete(y3);
            }
            let d3 = [];
            for (let [v3, y3] of p3.entries()) for (let k3 of y3) {
              let x3 = l3[v3].map(([, S3]) => S3).flat().map((S3) => S3.toString().split(`
`).slice(1, -1).map((C3) => C3.trim()).map((C3) => `      ${C3}`).join(`
`)).join(`

`);
              d3.push(`  Use \`${e3.replace("[", `[${k3}:`)}\` for \`${x3.trim()}\``);
              break;
            }
            V$1.warn([
              `The class \`${e3}\` is ambiguous and matches multiple utilities.`,
              ...d3,
              `If this is content and not a class, replace it with \`${e3.replace("[", "&lsqb;").replace("]", "&rsqb;")}\` to silence this warning.`
            ]);
            continue;
          }
        }
        l3 = l3.map((s3) => s3.filter((u3) => er(u3[1])));
      }
      l3 = l3.flat(), l3 = Array.from(bn$4(l3, n3)), l3 = sn(l3, t3), o3 && (l3 = dn(l3, n3));
      for (let s3 of a3) l3 = un(s3, l3, t3);
      for (let s3 of l3) s3[1].raws.tailwind = {
        ...s3[1].raws.tailwind,
        candidate: e3
      }, s3 = wn(s3, {
        context: t3,
        candidate: e3
      }), s3 !== null && (yield s3);
    }
  }
  function wn(e3, { context: t3, candidate: r3 }) {
    if (!e3[0].collectedFormats) return e3;
    let n3 = true, a3;
    try {
      a3 = de$2(e3[0].collectedFormats, {
        context: t3,
        candidate: r3
      });
    } catch {
      return null;
    }
    let o3 = F$8.root({
      nodes: [
        e3[1].clone()
      ]
    });
    return o3.walkRules((i3) => {
      if (!Pe$1(i3)) try {
        let l3 = Ne$2(i3.selector, a3, {
          candidate: r3,
          context: t3
        });
        if (l3 === null) {
          i3.remove();
          return;
        }
        i3.selector = l3;
      } catch {
        return n3 = false, false;
      }
    }), !n3 || o3.nodes.length === 0 ? null : (e3[1] = o3.nodes[0], e3);
  }
  function Pe$1(e3) {
    return e3.parent && e3.parent.type === "atrule" && e3.parent.name === "keyframes";
  }
  function vn(e3) {
    if (e3 === true) return (t3) => {
      Pe$1(t3) || t3.walkDecls((r3) => {
        r3.parent.type === "rule" && !Pe$1(r3.parent) && (r3.important = true);
      });
    };
    if (typeof e3 == "string") return (t3) => {
      Pe$1(t3) || (t3.selectors = t3.selectors.map((r3) => Zt(r3, e3)));
    };
  }
  function rr(e3, t3, r3 = false) {
    let n3 = [], a3 = vn(t3.tailwindConfig.important);
    for (let o3 of e3) {
      if (t3.notClassCache.has(o3)) continue;
      if (t3.candidateRuleCache.has(o3)) {
        n3 = n3.concat(Array.from(t3.candidateRuleCache.get(o3)));
        continue;
      }
      let i3 = Array.from(yn(o3, t3));
      if (i3.length === 0) {
        t3.notClassCache.add(o3);
        continue;
      }
      t3.classCache.set(o3, i3);
      let l3 = t3.candidateRuleCache.get(o3) ?? /* @__PURE__ */ new Set();
      t3.candidateRuleCache.set(o3, l3);
      for (let f3 of i3) {
        let [{ sort: m3, options: c3 }, w3] = f3;
        if (c3.respectImportant && a3) {
          let u3 = F$8.root({
            nodes: [
              w3.clone()
            ]
          });
          u3.walkRules(a3), w3 = u3.nodes[0];
        }
        let s3 = [
          m3,
          r3 ? w3.clone() : w3
        ];
        l3.add(s3), t3.ruleCache.add(s3), n3.push(s3);
      }
    }
    return n3;
  }
  function ot$1(e3) {
    return e3.startsWith("[") && e3.endsWith("]");
  }
  function Re$1(e3) {
    return (e3 > 0n) - (e3 < 0n);
  }
  function ar(e3, t3) {
    let r3 = 0n, n3 = 0n;
    for (let [a3, o3] of t3) e3 & a3 && (r3 = r3 | a3, n3 = n3 | o3);
    return e3 & ~r3 | n3;
  }
  var Fe$1 = class Fe {
    constructor() {
      this.offsets = {
        defaults: 0n,
        base: 0n,
        components: 0n,
        utilities: 0n,
        variants: 0n,
        user: 0n
      }, this.layerPositions = {
        defaults: 0n,
        base: 1n,
        components: 2n,
        utilities: 3n,
        user: 4n,
        variants: 5n
      }, this.reservedVariantBits = 0n, this.variantOffsets = /* @__PURE__ */ new Map();
    }
    create(t3) {
      return {
        layer: t3,
        parentLayer: t3,
        arbitrary: 0n,
        variants: 0n,
        parallelIndex: 0n,
        index: this.offsets[t3]++,
        propertyOffset: 0n,
        property: "",
        options: []
      };
    }
    arbitraryProperty(t3) {
      return {
        ...this.create("utilities"),
        arbitrary: 1n,
        property: t3
      };
    }
    forVariant(t3, r3 = 0) {
      let n3 = this.variantOffsets.get(t3);
      if (n3 === void 0) throw new Error(`Cannot find offset for unknown variant ${t3}`);
      return {
        ...this.create("variants"),
        variants: n3 << BigInt(r3)
      };
    }
    applyVariantOffset(t3, r3, n3) {
      return n3.variant = r3.variants, {
        ...t3,
        layer: "variants",
        parentLayer: t3.layer === "variants" ? t3.parentLayer : t3.layer,
        variants: t3.variants | r3.variants,
        options: n3.sort ? [].concat(n3, t3.options) : t3.options,
        parallelIndex: ir([
          t3.parallelIndex,
          r3.parallelIndex
        ])
      };
    }
    applyParallelOffset(t3, r3) {
      return {
        ...t3,
        parallelIndex: BigInt(r3)
      };
    }
    recordVariants(t3, r3) {
      for (let n3 of t3) this.recordVariant(n3, r3(n3));
    }
    recordVariant(t3, r3 = 1) {
      return this.variantOffsets.set(t3, 1n << this.reservedVariantBits), this.reservedVariantBits += BigInt(r3), {
        ...this.create("variants"),
        variants: this.variantOffsets.get(t3)
      };
    }
    compare(t3, r3) {
      if (t3.layer !== r3.layer) return this.layerPositions[t3.layer] - this.layerPositions[r3.layer];
      if (t3.parentLayer !== r3.parentLayer) return this.layerPositions[t3.parentLayer] - this.layerPositions[r3.parentLayer];
      for (let n3 of t3.options) for (let a3 of r3.options) {
        if (n3.id !== a3.id || !n3.sort || !a3.sort) continue;
        let o3 = ir([
          n3.variant,
          a3.variant
        ]) ?? 0n, i3 = ~(o3 | o3 - 1n), l3 = t3.variants & i3, f3 = r3.variants & i3;
        if (l3 !== f3) continue;
        let m3 = n3.sort({
          value: n3.value,
          modifier: n3.modifier
        }, {
          value: a3.value,
          modifier: a3.modifier
        });
        if (m3 !== 0) return m3;
      }
      return t3.variants !== r3.variants ? t3.variants - r3.variants : t3.parallelIndex !== r3.parallelIndex ? t3.parallelIndex - r3.parallelIndex : t3.arbitrary !== r3.arbitrary ? t3.arbitrary - r3.arbitrary : t3.propertyOffset !== r3.propertyOffset ? t3.propertyOffset - r3.propertyOffset : t3.index - r3.index;
    }
    recalculateVariantOffsets() {
      let t3 = Array.from(this.variantOffsets.entries()).filter(([a3]) => a3.startsWith("[")).sort(([a3], [o3]) => Sn(a3, o3)), r3 = t3.map(([, a3]) => a3).sort((a3, o3) => Re$1(a3 - o3));
      return t3.map(([, a3], o3) => [
        a3,
        r3[o3]
      ]).filter(([a3, o3]) => a3 !== o3);
    }
    remapArbitraryVariantOffsets(t3) {
      let r3 = this.recalculateVariantOffsets();
      return r3.length === 0 ? t3 : t3.map((n3) => {
        let [a3, o3] = n3;
        return a3 = {
          ...a3,
          variants: ar(a3.variants, r3)
        }, [
          a3,
          o3
        ];
      });
    }
    sortArbitraryProperties(t3) {
      let r3 = /* @__PURE__ */ new Set();
      for (let [i3] of t3) i3.arbitrary === 1n && r3.add(i3.property);
      if (r3.size === 0) return t3;
      let n3 = Array.from(r3).sort(), a3 = /* @__PURE__ */ new Map(), o3 = 1n;
      for (let i3 of n3) a3.set(i3, o3++);
      return t3.map((i3) => {
        let [l3, f3] = i3;
        return l3 = {
          ...l3,
          propertyOffset: a3.get(l3.property) ?? 0n
        }, [
          l3,
          f3
        ];
      });
    }
    sort(t3) {
      return t3 = this.remapArbitraryVariantOffsets(t3), t3 = this.sortArbitraryProperties(t3), t3.sort(([r3], [n3]) => Re$1(this.compare(r3, n3)));
    }
  };
  function ir(e3) {
    let t3 = null;
    for (let r3 of e3) t3 = t3 ?? r3, t3 = t3 > r3 ? t3 : r3;
    return t3;
  }
  function Sn(e3, t3) {
    let r3 = e3.length, n3 = t3.length, a3 = r3 < n3 ? r3 : n3;
    for (let o3 = 0; o3 < a3; o3++) {
      let i3 = e3.charCodeAt(o3) - t3.charCodeAt(o3);
      if (i3 !== 0) return i3;
    }
    return r3 - n3;
  }
  var J$1 = Symbol(), dt$1 = {
    MatchVariant: Symbol.for("MATCH_VARIANT")
  }, ct$1 = {
    Base: 1,
    Dynamic: 2
  };
  function ut$1(e3, t3) {
    let r3 = e3.tailwindConfig.prefix;
    return typeof r3 == "function" ? r3(t3) : r3 + t3;
  }
  function or({ type: e3 = "any", ...t3 }) {
    let r3 = [].concat(e3);
    return {
      ...t3,
      types: r3.map((n3) => Array.isArray(n3) ? {
        type: n3[0],
        ...n3[1]
      } : {
        type: n3,
        preferOnConflict: false
      })
    };
  }
  function $n(e3) {
    let t3 = [], r3 = "", n3 = 0;
    for (let a3 = 0; a3 < e3.length; a3++) {
      let o3 = e3[a3];
      if (o3 === "\\") r3 += "\\" + e3[++a3];
      else if (o3 === "{") ++n3, t3.push(r3.trim()), r3 = "";
      else if (o3 === "}") {
        if (--n3 < 0) throw new Error("Your { and } are unbalanced.");
        t3.push(r3.trim()), r3 = "";
      } else r3 += o3;
    }
    return r3.length > 0 && t3.push(r3.trim()), t3 = t3.filter((a3) => a3 !== ""), t3;
  }
  function jn(e3, t3, { before: r3 = [] } = {}) {
    if (r3 = [].concat(r3), r3.length <= 0) {
      e3.push(t3);
      return;
    }
    let n3 = e3.length - 1;
    for (let a3 of r3) {
      let o3 = e3.indexOf(a3);
      o3 !== -1 && (n3 = Math.min(n3, o3));
    }
    e3.splice(n3, 0, t3);
  }
  function ur$1(e3) {
    return Array.isArray(e3) ? e3.flatMap((t3) => !Array.isArray(t3) && !U$1(t3) ? t3 : ne$1(t3)) : ur$1([
      e3
    ]);
  }
  function Mn(e3, t3) {
    return Pu((n3) => {
      let a3 = [];
      return t3 && t3(n3), n3.walkClasses((o3) => {
        a3.push(o3.value);
      }), a3;
    }).transformSync(e3);
  }
  function Vn(e3) {
    e3.walkPseudos((t3) => {
      t3.value === ":not" && t3.remove();
    });
  }
  function En(e3, t3 = {
    containsNonOnDemandable: false
  }, r3 = 0) {
    let n3 = [], a3 = [];
    e3.type === "rule" ? a3.push(...e3.selectors) : e3.type === "atrule" && e3.walkRules((o3) => a3.push(...o3.selectors));
    for (let o3 of a3) {
      let i3 = Mn(o3, Vn);
      i3.length === 0 && (t3.containsNonOnDemandable = true);
      for (let l3 of i3) n3.push(l3);
    }
    return r3 === 0 ? [
      t3.containsNonOnDemandable || n3.length === 0,
      n3
    ] : n3;
  }
  function ze$1(e3) {
    return ur$1(e3).flatMap((t3) => {
      let r3 = /* @__PURE__ */ new Map(), [n3, a3] = En(t3);
      return n3 && a3.unshift(te$1), a3.map((o3) => (r3.has(t3) || r3.set(t3, t3), [
        o3,
        r3.get(t3)
      ]));
    });
  }
  function De$1(e3) {
    return e3.startsWith("@") || e3.includes("&");
  }
  function ye$1(e3) {
    e3 = e3.replace(/\n+/g, "").replace(/\s{1,}/g, " ").trim();
    let t3 = $n(e3).map((r3) => {
      if (!r3.startsWith("@")) return ({ format: o3 }) => o3(r3);
      let [, n3, a3] = /@(\S*)( .+|[({].*)?/g.exec(r3);
      return ({ wrap: o3 }) => o3(F$8.atRule({
        name: n3,
        params: (a3 == null ? void 0 : a3.trim()) ?? ""
      }));
    }).reverse();
    return (r3) => {
      for (let n3 of t3) n3(r3);
    };
  }
  function Tn(e3, t3, { variantList: r3, variantMap: n3, offsets: a3, classList: o3 }) {
    function i3(s3, u3) {
      return s3 ? x$h(e3, s3, u3) : e3;
    }
    function l3(s3) {
      return ae$2(e3.prefix, s3);
    }
    function f3(s3, u3) {
      return s3 === te$1 ? te$1 : u3.respectPrefix ? t3.tailwindConfig.prefix + s3 : s3;
    }
    function m3(s3, u3, g3 = {}) {
      let h3 = Gt$1(s3), p3 = i3([
        "theme",
        ...h3
      ], u3);
      return Z$2(h3[0])(p3, g3);
    }
    let c3 = 0, w3 = {
      postcss: F$8,
      prefix: l3,
      e: R$1,
      config: i3,
      theme: m3,
      corePlugins: (s3) => Array.isArray(e3.corePlugins) ? e3.corePlugins.includes(s3) : i3([
        "corePlugins",
        s3
      ], true),
      variants: () => [],
      addBase(s3) {
        for (let [u3, g3] of ze$1(s3)) {
          let h3 = f3(u3, {}), p3 = a3.create("base");
          t3.candidateRuleMap.has(h3) || t3.candidateRuleMap.set(h3, []), t3.candidateRuleMap.get(h3).push([
            {
              sort: p3,
              layer: "base"
            },
            g3
          ]);
        }
      },
      addDefaults(s3, u3) {
        let g3 = {
          [`@defaults ${s3}`]: u3
        };
        for (let [h3, p3] of ze$1(g3)) {
          let d3 = f3(h3, {});
          t3.candidateRuleMap.has(d3) || t3.candidateRuleMap.set(d3, []), t3.candidateRuleMap.get(d3).push([
            {
              sort: a3.create("defaults"),
              layer: "defaults"
            },
            p3
          ]);
        }
      },
      addComponents(s3, u3) {
        u3 = Object.assign({}, {
          preserveSource: false,
          respectPrefix: true,
          respectImportant: false
        }, Array.isArray(u3) ? {} : u3);
        for (let [h3, p3] of ze$1(s3)) {
          let d3 = f3(h3, u3);
          o3.add(d3), t3.candidateRuleMap.has(d3) || t3.candidateRuleMap.set(d3, []), t3.candidateRuleMap.get(d3).push([
            {
              sort: a3.create("components"),
              layer: "components",
              options: u3
            },
            p3
          ]);
        }
      },
      addUtilities(s3, u3) {
        u3 = Object.assign({}, {
          preserveSource: false,
          respectPrefix: true,
          respectImportant: true
        }, Array.isArray(u3) ? {} : u3);
        for (let [h3, p3] of ze$1(s3)) {
          let d3 = f3(h3, u3);
          o3.add(d3), t3.candidateRuleMap.has(d3) || t3.candidateRuleMap.set(d3, []), t3.candidateRuleMap.get(d3).push([
            {
              sort: a3.create("utilities"),
              layer: "utilities",
              options: u3
            },
            p3
          ]);
        }
      },
      matchUtilities: function(s3, u3) {
        u3 = or({
          ...{
            respectPrefix: true,
            respectImportant: true,
            modifiers: false
          },
          ...u3
        });
        let h3 = a3.create("utilities");
        for (let p3 in s3) {
          let y3 = function(x3, { isOnlyPlugin: S3 }) {
            let [C3, I3, Q3] = Xe$2(u3.types, x3, u3, e3);
            if (C3 === void 0) return [];
            if (!u3.types.some(({ type: L3 }) => L3 === I3)) if (S3) V$1.warn([
              `Unnecessary typehint \`${I3}\` in \`${p3}-${x3}\`.`,
              `You can safely update it to \`${p3}-${x3.replace(I3 + ":", "")}\`.`
            ]);
            else return [];
            if (!se$2(C3)) return [];
            let G3 = {
              get modifier() {
                return u3.modifiers || V$1.warn(`modifier-used-without-options-for-${p3}`, [
                  "Your plugin must set `modifiers: true` in its options to support modifiers."
                ]), Q3;
              }
            }, re2 = F$1(e3, "generalizedModifiers");
            return [].concat(re2 ? v3(C3, G3) : v3(C3)).filter(Boolean).map((L3) => ({
              [Se$2(p3, x3)]: L3
            }));
          }, d3 = f3(p3, u3), v3 = s3[p3];
          o3.add([
            d3,
            u3
          ]);
          let k3 = [
            {
              sort: h3,
              layer: "utilities",
              options: u3
            },
            y3
          ];
          t3.candidateRuleMap.has(d3) || t3.candidateRuleMap.set(d3, []), t3.candidateRuleMap.get(d3).push(k3);
        }
      },
      matchComponents: function(s3, u3) {
        u3 = or({
          ...{
            respectPrefix: true,
            respectImportant: false,
            modifiers: false
          },
          ...u3
        });
        let h3 = a3.create("components");
        for (let p3 in s3) {
          let y3 = function(x3, { isOnlyPlugin: S3 }) {
            let [C3, I3, Q3] = Xe$2(u3.types, x3, u3, e3);
            if (C3 === void 0) return [];
            if (!u3.types.some(({ type: L3 }) => L3 === I3)) if (S3) V$1.warn([
              `Unnecessary typehint \`${I3}\` in \`${p3}-${x3}\`.`,
              `You can safely update it to \`${p3}-${x3.replace(I3 + ":", "")}\`.`
            ]);
            else return [];
            if (!se$2(C3)) return [];
            let G3 = {
              get modifier() {
                return u3.modifiers || V$1.warn(`modifier-used-without-options-for-${p3}`, [
                  "Your plugin must set `modifiers: true` in its options to support modifiers."
                ]), Q3;
              }
            }, re2 = F$1(e3, "generalizedModifiers");
            return [].concat(re2 ? v3(C3, G3) : v3(C3)).filter(Boolean).map((L3) => ({
              [Se$2(p3, x3)]: L3
            }));
          }, d3 = f3(p3, u3), v3 = s3[p3];
          o3.add([
            d3,
            u3
          ]);
          let k3 = [
            {
              sort: h3,
              layer: "components",
              options: u3
            },
            y3
          ];
          t3.candidateRuleMap.has(d3) || t3.candidateRuleMap.set(d3, []), t3.candidateRuleMap.get(d3).push(k3);
        }
      },
      addVariant(s3, u3, g3 = {}) {
        u3 = [].concat(u3).map((h3) => {
          if (typeof h3 != "string") return (p3 = {}) => {
            let { args: d3, modifySelectors: v3, container: y3, separator: k3, wrap: x3, format: S3 } = p3, C3 = h3(Object.assign({
              modifySelectors: v3,
              container: y3,
              separator: k3
            }, g3.type === dt$1.MatchVariant && {
              args: d3,
              wrap: x3,
              format: S3
            }));
            if (typeof C3 == "string" && !De$1(C3)) throw new Error(`Your custom variant \`${s3}\` has an invalid format string. Make sure it's an at-rule or contains a \`&\` placeholder.`);
            return Array.isArray(C3) ? C3.filter((I3) => typeof I3 == "string").map((I3) => ye$1(I3)) : C3 && typeof C3 == "string" && ye$1(C3)(p3);
          };
          if (!De$1(h3)) throw new Error(`Your custom variant \`${s3}\` has an invalid format string. Make sure it's an at-rule or contains a \`&\` placeholder.`);
          return ye$1(h3);
        }), jn(r3, s3, g3), n3.set(s3, u3), t3.variantOptions.set(s3, g3);
      },
      matchVariant(s3, u3, g3) {
        let h3 = (g3 == null ? void 0 : g3.id) ?? ++c3, p3 = s3 === "@", d3 = F$1(e3, "generalizedModifiers");
        for (let [y3, k3] of Object.entries((g3 == null ? void 0 : g3.values) ?? {})) y3 !== "DEFAULT" && w3.addVariant(p3 ? `${s3}${y3}` : `${s3}-${y3}`, ({ args: x3, container: S3 }) => u3(k3, d3 ? {
          modifier: x3 == null ? void 0 : x3.modifier,
          container: S3
        } : {
          container: S3
        }), {
          ...g3,
          value: k3,
          id: h3,
          type: dt$1.MatchVariant,
          variantInfo: ct$1.Base
        });
        let v3 = "DEFAULT" in ((g3 == null ? void 0 : g3.values) ?? {});
        w3.addVariant(s3, ({ args: y3, container: k3 }) => (y3 == null ? void 0 : y3.value) === be$1 && !v3 ? null : u3((y3 == null ? void 0 : y3.value) === be$1 ? g3.values.DEFAULT : (y3 == null ? void 0 : y3.value) ?? (typeof y3 == "string" ? y3 : ""), d3 ? {
          modifier: y3 == null ? void 0 : y3.modifier,
          container: k3
        } : {
          container: k3
        }), {
          ...g3,
          id: h3,
          type: dt$1.MatchVariant,
          variantInfo: ct$1.Dynamic
        });
      }
    };
    return w3;
  }
  function fr$2(e3) {
    e3.walkAtRules((t3) => {
      [
        "responsive",
        "variants"
      ].includes(t3.name) && (fr$2(t3), t3.before(t3.nodes), t3.remove());
    });
  }
  function In(e3) {
    let t3 = [];
    return e3.each((r3) => {
      r3.type === "atrule" && [
        "responsive",
        "variants"
      ].includes(r3.name) && (r3.name = "layer", r3.params = "utilities");
    }), e3.walkAtRules("layer", (r3) => {
      if (fr$2(r3), r3.params === "base") {
        for (let n3 of r3.nodes) t3.push(function({ addBase: a3 }) {
          a3(n3, {
            respectPrefix: false
          });
        });
        r3.remove();
      } else if (r3.params === "components") {
        for (let n3 of r3.nodes) t3.push(function({ addComponents: a3 }) {
          a3(n3, {
            respectPrefix: false,
            preserveSource: true
          });
        });
        r3.remove();
      } else if (r3.params === "utilities") {
        for (let n3 of r3.nodes) t3.push(function({ addUtilities: a3 }) {
          a3(n3, {
            respectPrefix: false,
            preserveSource: true
          });
        });
        r3.remove();
      }
    }), t3;
  }
  function Nn(e3, t3) {
    let r3 = Object.entries({
      ...$,
      ...Lt
    }).map(([f3, m3]) => e3.tailwindConfig.corePlugins.includes(f3) ? m3 : null).filter(Boolean), n3 = e3.tailwindConfig.plugins.map((f3) => (f3.__isOptionsFunction && (f3 = f3()), typeof f3 == "function" ? f3 : f3.handler)), a3 = In(t3), o3 = [
      $.childVariant,
      $.pseudoElementVariants,
      $.pseudoClassVariants,
      $.hasVariants,
      $.ariaVariants,
      $.dataVariants
    ], i3 = [
      $.supportsVariants,
      $.reducedMotionVariants,
      $.prefersContrastVariants,
      $.screenVariants,
      $.orientationVariants,
      $.directionVariants,
      $.darkVariants,
      $.forcedColorsVariants,
      $.printVariant
    ];
    return (e3.tailwindConfig.darkMode === "class" || Array.isArray(e3.tailwindConfig.darkMode) && e3.tailwindConfig.darkMode[0] === "class") && (i3 = [
      $.supportsVariants,
      $.reducedMotionVariants,
      $.prefersContrastVariants,
      $.darkVariants,
      $.screenVariants,
      $.orientationVariants,
      $.directionVariants,
      $.forcedColorsVariants,
      $.printVariant
    ]), [
      ...r3,
      ...o3,
      ...n3,
      ...i3,
      ...a3
    ];
  }
  function Pn(e3, t3) {
    let r3 = [], n3 = /* @__PURE__ */ new Map();
    t3.variantMap = n3;
    let a3 = new Fe$1();
    t3.offsets = a3;
    let o3 = /* @__PURE__ */ new Set(), i3 = Tn(t3.tailwindConfig, t3, {
      variantList: r3,
      variantMap: n3,
      offsets: a3,
      classList: o3
    });
    for (let c3 of e3) if (Array.isArray(c3)) for (let w3 of c3) w3(i3);
    else c3 == null ? void 0 : c3(i3);
    a3.recordVariants(r3, (c3) => n3.get(c3).length);
    for (let [c3, w3] of n3.entries()) t3.variantMap.set(c3, w3.map((s3, u3) => [
      a3.forVariant(c3, u3),
      s3
    ]));
    let l3 = (t3.tailwindConfig.safelist ?? []).filter(Boolean);
    if (l3.length > 0) {
      let c3 = [];
      for (let w3 of l3) {
        if (typeof w3 == "string") {
          t3.changedContent.push({
            content: w3,
            extension: "html"
          });
          continue;
        }
        if (w3 instanceof RegExp) {
          V$1.warn("root-regex", [
            "Regular expressions in `safelist` work differently in Tailwind CSS v3.0.",
            "Update your `safelist` configuration to eliminate this warning.",
            "https://tailwindcss.com/docs/content-configuration#safelisting-classes"
          ]);
          continue;
        }
        c3.push(w3);
      }
      if (c3.length > 0) {
        let w3 = /* @__PURE__ */ new Map(), s3 = t3.tailwindConfig.prefix.length, u3 = c3.some((g3) => g3.pattern.source.includes("!"));
        for (let g3 of o3) {
          let h3 = Array.isArray(g3) ? (() => {
            let [p3, d3] = g3, y3 = Object.keys((d3 == null ? void 0 : d3.values) ?? {}).map((k3) => pe$2(p3, k3));
            return (d3 == null ? void 0 : d3.supportsNegativeValues) && (y3 = [
              ...y3,
              ...y3.map((k3) => "-" + k3)
            ], y3 = [
              ...y3,
              ...y3.map((k3) => k3.slice(0, s3) + "-" + k3.slice(s3))
            ]), d3.types.some(({ type: k3 }) => k3 === "color") && (y3 = [
              ...y3,
              ...y3.flatMap((k3) => Object.keys(t3.tailwindConfig.theme.opacity).map((x3) => `${k3}/${x3}`))
            ]), u3 && (d3 == null ? void 0 : d3.respectImportant) && (y3 = [
              ...y3,
              ...y3.map((k3) => "!" + k3)
            ]), y3;
          })() : [
            g3
          ];
          for (let p3 of h3) for (let { pattern: d3, variants: v3 = [] } of c3) if (d3.lastIndex = 0, w3.has(d3) || w3.set(d3, 0), !!d3.test(p3)) {
            w3.set(d3, w3.get(d3) + 1), t3.changedContent.push({
              content: p3,
              extension: "html"
            });
            for (let y3 of v3) t3.changedContent.push({
              content: y3 + t3.tailwindConfig.separator + p3,
              extension: "html"
            });
          }
        }
        for (let [g3, h3] of w3.entries()) h3 === 0 && V$1.warn([
          `The safelist pattern \`${g3}\` doesn't match any Tailwind CSS classes.`,
          "Fix this pattern or remove it from your `safelist` configuration.",
          "https://tailwindcss.com/docs/content-configuration#safelisting-classes"
        ]);
      }
    }
    let f3 = [].concat(t3.tailwindConfig.darkMode ?? "media")[1] ?? "dark", m3 = [
      ut$1(t3, f3),
      ut$1(t3, "group"),
      ut$1(t3, "peer")
    ];
    t3.getClassOrder = function(w3) {
      let s3 = [
        ...w3
      ].sort((p3, d3) => p3 === d3 ? 0 : p3 < d3 ? -1 : 1), u3 = new Map(s3.map((p3) => [
        p3,
        null
      ])), g3 = rr(new Set(s3), t3, true);
      g3 = t3.offsets.sort(g3);
      let h3 = BigInt(m3.length);
      for (let [, p3] of g3) {
        let d3 = p3.raws.tailwind.candidate;
        u3.set(d3, u3.get(d3) ?? h3++);
      }
      return w3.map((p3) => {
        let d3 = u3.get(p3) ?? null, v3 = m3.indexOf(p3);
        return d3 === null && v3 !== -1 && (d3 = BigInt(v3)), [
          p3,
          d3
        ];
      });
    }, t3.getClassList = function(w3 = {}) {
      var _a;
      let s3 = [];
      for (let u3 of o3) if (Array.isArray(u3)) {
        let [g3, h3] = u3, p3 = [], d3 = Object.keys((h3 == null ? void 0 : h3.modifiers) ?? {});
        ((_a = h3 == null ? void 0 : h3.types) == null ? void 0 : _a.some(({ type: k3 }) => k3 === "color")) && d3.push(...Object.keys(t3.tailwindConfig.theme.opacity ?? {}));
        let v3 = {
          modifiers: d3
        }, y3 = w3.includeMetadata && d3.length > 0;
        for (let [k3, x3] of Object.entries((h3 == null ? void 0 : h3.values) ?? {})) {
          if (x3 == null) continue;
          let S3 = pe$2(g3, k3);
          if (s3.push(y3 ? [
            S3,
            v3
          ] : S3), (h3 == null ? void 0 : h3.supportsNegativeValues) && oe$1(x3)) {
            let C3 = pe$2(g3, `-${k3}`);
            p3.push(y3 ? [
              C3,
              v3
            ] : C3);
          }
        }
        s3.push(...p3);
      } else s3.push(u3);
      return s3;
    }, t3.getVariants = function() {
      let w3 = Math.random().toString(36).substring(7).toUpperCase(), s3 = [];
      for (let [u3, g3] of t3.variantOptions.entries()) g3.variantInfo !== ct$1.Base && s3.push({
        name: u3,
        isArbitrary: g3.type === Symbol.for("MATCH_VARIANT"),
        values: Object.keys(g3.values ?? {}),
        hasDash: u3 !== "@",
        selectors({ modifier: h3, value: p3 } = {}) {
          var _a;
          let d3 = `TAILWINDPLACEHOLDER${w3}`, v3 = F$8.rule({
            selector: `.${d3}`
          }), y3 = F$8.root({
            nodes: [
              v3.clone()
            ]
          }), k3 = y3.toString(), x3 = (t3.variantMap.get(u3) ?? []).flatMap(([N3, P3]) => P3), S3 = [];
          for (let N3 of x3) {
            let P3 = [], xe2 = {
              args: {
                modifier: h3,
                value: ((_a = g3.values) == null ? void 0 : _a[p3]) ?? p3
              },
              separator: t3.tailwindConfig.separator,
              modifySelectors(z3) {
                return y3.each((_e2) => {
                  _e2.type === "rule" && (_e2.selectors = _e2.selectors.map((pt2) => z3({
                    get className() {
                      return st$1(pt2);
                    },
                    selector: pt2
                  })));
                }), y3;
              },
              format(z3) {
                P3.push(z3);
              },
              wrap(z3) {
                P3.push(`@${z3.name} ${z3.params} { & }`);
              },
              container: y3
            }, ke2 = N3(xe2);
            if (P3.length > 0 && S3.push(P3), Array.isArray(ke2)) for (let z3 of ke2) P3 = [], z3(xe2), S3.push(P3);
          }
          let C3 = [], I3 = y3.toString();
          k3 !== I3 && (y3.walkRules((N3) => {
            let P3 = N3.selector, xe2 = Pu((ke2) => {
              ke2.walkClasses((z3) => {
                z3.value = `${u3}${t3.tailwindConfig.separator}${z3.value}`;
              });
            }).processSync(P3);
            C3.push(P3.replace(xe2, "&").replace(d3, "&"));
          }), y3.walkAtRules((N3) => {
            C3.push(`@${N3.name} (${N3.params}) { & }`);
          }));
          let Q3 = !(p3 in (g3.values ?? {})), G3 = g3[J$1] ?? {}, re2 = !(Q3 || G3.respectPrefix === false);
          S3 = S3.map((N3) => N3.map((P3) => ({
            format: P3,
            respectPrefix: re2
          }))), C3 = C3.map((N3) => ({
            format: N3,
            respectPrefix: re2
          }));
          let ce2 = {
            candidate: d3,
            context: t3
          }, L3 = S3.map((N3) => Ne$2(`.${d3}`, de$2(N3, ce2), ce2).replace(`.${d3}`, "&").replace("{ & }", "").trim());
          return C3.length > 0 && L3.push(de$2(C3, ce2).toString().replace(`.${d3}`, "&")), L3;
        }
      });
      return s3;
    };
  }
  function cr$1(e3, t3) {
    e3.classCache.has(t3) && (e3.notClassCache.add(t3), e3.classCache.delete(t3), e3.applyClassCache.delete(t3), e3.candidateRuleMap.delete(t3), e3.candidateRuleCache.delete(t3), e3.stylesheetCache = null);
  }
  function Dn(e3, t3) {
    let r3 = t3.raws.tailwind.candidate;
    if (r3) {
      for (let n3 of e3.ruleCache) n3[1].raws.tailwind.candidate === r3 && e3.ruleCache.delete(n3);
      cr$1(e3, r3);
    }
  }
  function Rn(e3, t3 = [], r3 = F$8.root()) {
    let n3 = {
      disposables: [],
      ruleCache: /* @__PURE__ */ new Set(),
      candidateRuleCache: /* @__PURE__ */ new Map(),
      classCache: /* @__PURE__ */ new Map(),
      applyClassCache: /* @__PURE__ */ new Map(),
      notClassCache: new Set(e3.blocklist ?? []),
      postCssNodeCache: /* @__PURE__ */ new Map(),
      candidateRuleMap: /* @__PURE__ */ new Map(),
      tailwindConfig: e3,
      changedContent: t3,
      variantMap: /* @__PURE__ */ new Map(),
      stylesheetCache: null,
      variantOptions: /* @__PURE__ */ new Map(),
      markInvalidUtilityCandidate: (o3) => cr$1(n3, o3),
      markInvalidUtilityNode: (o3) => Dn(n3, o3)
    }, a3 = Nn(n3, r3);
    return Pn(a3, n3), n3;
  }
  var distExports = requireDist$1();
  const parser$1 = getDefaultExportFromCjs(distExports);
  var indexEs5;
  var hasRequiredIndexEs5;
  function requireIndexEs5() {
    if (hasRequiredIndexEs5) return indexEs5;
    hasRequiredIndexEs5 = 1;
    var pattern = /-(\w|$)/g;
    var callback = function callback2(dashChar, char) {
      return char.toUpperCase();
    };
    var camelCaseCSS = function camelCaseCSS2(property) {
      property = property.toLowerCase();
      if (property === "float") {
        return "cssFloat";
      } else if (property.charCodeAt(0) === 45 && property.charCodeAt(1) === 109 && property.charCodeAt(2) === 115 && property.charCodeAt(3) === 45) {
        return property.substr(1).replace(pattern, callback);
      } else {
        return property.replace(pattern, callback);
      }
    };
    indexEs5 = camelCaseCSS;
    return indexEs5;
  }
  var objectifier;
  var hasRequiredObjectifier;
  function requireObjectifier() {
    if (hasRequiredObjectifier) return objectifier;
    hasRequiredObjectifier = 1;
    let camelcase = requireIndexEs5();
    let UNITLESS = {
      boxFlex: true,
      boxFlexGroup: true,
      columnCount: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      strokeDashoffset: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    function atRule(node2) {
      if (typeof node2.nodes === "undefined") {
        return true;
      } else {
        return process(node2);
      }
    }
    function process(node2) {
      let name;
      let result = {};
      node2.each((child) => {
        if (child.type === "atrule") {
          name = "@" + child.name;
          if (child.params) name += " " + child.params;
          if (typeof result[name] === "undefined") {
            result[name] = atRule(child);
          } else if (Array.isArray(result[name])) {
            result[name].push(atRule(child));
          } else {
            result[name] = [
              result[name],
              atRule(child)
            ];
          }
        } else if (child.type === "rule") {
          let body = process(child);
          if (result[child.selector]) {
            for (let i3 in body) {
              result[child.selector][i3] = body[i3];
            }
          } else {
            result[child.selector] = body;
          }
        } else if (child.type === "decl") {
          if (child.prop[0] === "-" && child.prop[1] === "-") {
            name = child.prop;
          } else if (child.parent && child.parent.selector === ":export") {
            name = child.prop;
          } else {
            name = camelcase(child.prop);
          }
          let value = child.value;
          if (!isNaN(child.value) && UNITLESS[name]) {
            value = parseFloat(child.value);
          }
          if (child.important) value += " !important";
          if (typeof result[name] === "undefined") {
            result[name] = value;
          } else if (Array.isArray(result[name])) {
            result[name].push(value);
          } else {
            result[name] = [
              result[name],
              value
            ];
          }
        }
      });
      return result;
    }
    objectifier = process;
    return objectifier;
  }
  var parser;
  var hasRequiredParser;
  function requireParser() {
    if (hasRequiredParser) return parser;
    hasRequiredParser = 1;
    let postcss2 = requirePostcss();
    let IMPORTANT = /\s*!important\s*$/i;
    let UNITLESS = {
      "box-flex": true,
      "box-flex-group": true,
      "column-count": true,
      "flex": true,
      "flex-grow": true,
      "flex-positive": true,
      "flex-shrink": true,
      "flex-negative": true,
      "font-weight": true,
      "line-clamp": true,
      "line-height": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "tab-size": true,
      "widows": true,
      "z-index": true,
      "zoom": true,
      "fill-opacity": true,
      "stroke-dashoffset": true,
      "stroke-opacity": true,
      "stroke-width": true
    };
    function dashify(str) {
      return str.replace(/([A-Z])/g, "-$1").replace(/^ms-/, "-ms-").toLowerCase();
    }
    function decl(parent, name, value) {
      if (value === false || value === null) return;
      if (!name.startsWith("--")) {
        name = dashify(name);
      }
      if (typeof value === "number") {
        if (value === 0 || UNITLESS[name]) {
          value = value.toString();
        } else {
          value += "px";
        }
      }
      if (name === "css-float") name = "float";
      if (IMPORTANT.test(value)) {
        value = value.replace(IMPORTANT, "");
        parent.push(postcss2.decl({
          prop: name,
          value,
          important: true
        }));
      } else {
        parent.push(postcss2.decl({
          prop: name,
          value
        }));
      }
    }
    function atRule(parent, parts, value) {
      let node2 = postcss2.atRule({
        name: parts[1],
        params: parts[3] || ""
      });
      if (typeof value === "object") {
        node2.nodes = [];
        parse(value, node2);
      }
      parent.push(node2);
    }
    function parse(obj, parent) {
      let name, value, node2;
      for (name in obj) {
        value = obj[name];
        if (value === null || typeof value === "undefined") {
          continue;
        } else if (name[0] === "@") {
          let parts = name.match(/@(\S+)(\s+([\W\w]*)\s*)?/);
          if (Array.isArray(value)) {
            for (let i3 of value) {
              atRule(parent, parts, i3);
            }
          } else {
            atRule(parent, parts, value);
          }
        } else if (Array.isArray(value)) {
          for (let i3 of value) {
            decl(parent, name, i3);
          }
        } else if (typeof value === "object") {
          node2 = postcss2.rule({
            selector: name
          });
          parse(value, node2);
          parent.push(node2);
        } else {
          decl(parent, name, value);
        }
      }
    }
    parser = function(obj) {
      let root = postcss2.root();
      parse(obj, root);
      return root;
    };
    return parser;
  }
  var processResult;
  var hasRequiredProcessResult;
  function requireProcessResult() {
    if (hasRequiredProcessResult) return processResult;
    hasRequiredProcessResult = 1;
    let objectify = requireObjectifier();
    processResult = function processResult2(result) {
      if (console && console.warn) {
        result.warnings().forEach((warn) => {
          let source = warn.plugin || "PostCSS";
          console.warn(source + ": " + warn.text);
        });
      }
      return objectify(result.root);
    };
    return processResult;
  }
  var async$1;
  var hasRequiredAsync$1;
  function requireAsync$1() {
    if (hasRequiredAsync$1) return async$1;
    hasRequiredAsync$1 = 1;
    let postcss2 = requirePostcss();
    let processResult2 = requireProcessResult();
    let parse = requireParser();
    async$1 = function async2(plugins) {
      let processor = postcss2(plugins);
      return async (input) => {
        let result = await processor.process(input, {
          parser: parse,
          from: void 0
        });
        return processResult2(result);
      };
    };
    return async$1;
  }
  var sync;
  var hasRequiredSync;
  function requireSync() {
    if (hasRequiredSync) return sync;
    hasRequiredSync = 1;
    let postcss2 = requirePostcss();
    let processResult2 = requireProcessResult();
    let parse = requireParser();
    sync = function(plugins) {
      let processor = postcss2(plugins);
      return (input) => {
        let result = processor.process(input, {
          parser: parse,
          from: void 0
        });
        return processResult2(result);
      };
    };
    return sync;
  }
  var postcssJs;
  var hasRequiredPostcssJs;
  function requirePostcssJs() {
    if (hasRequiredPostcssJs) return postcssJs;
    hasRequiredPostcssJs = 1;
    let objectify = requireObjectifier();
    let parse = requireParser();
    let async2 = requireAsync$1();
    let sync2 = requireSync();
    postcssJs = {
      objectify,
      parse,
      async: async2,
      sync: sync2
    };
    return postcssJs;
  }
  var postcssJsExports = requirePostcssJs();
  const index = getDefaultExportFromCjs(postcssJsExports);
  index.objectify;
  index.parse;
  index.async;
  index.sync;
  function parseObjectStyles(styles) {
    if (!Array.isArray(styles)) {
      return parseObjectStyles([
        styles
      ]);
    }
    return styles.flatMap((style) => {
      return postcss([
        postcssNested({
          bubble: [
            "screen"
          ]
        })
      ]).process(style, {
        parser: index
      }).root.nodes;
    });
  }
  function isPlainObject(value) {
    if (Object.prototype.toString.call(value) !== "[object Object]") {
      return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return prototype === null || Object.getPrototypeOf(prototype) === null;
  }
  function prefixSelector(prefix2, selector, prependNegative = false) {
    if (prefix2 === "") {
      return selector;
    }
    let ast = typeof selector === "string" ? parser$1().astSync(selector) : selector;
    ast.walkClasses((classSelector) => {
      let baseClass = classSelector.value;
      let shouldPlaceNegativeBeforePrefix = prependNegative && baseClass.startsWith("-");
      classSelector.value = shouldPlaceNegativeBeforePrefix ? `-${prefix2}${baseClass.slice(1)}` : `${prefix2}${baseClass}`;
    });
    return typeof selector === "string" ? ast.toString() : ast;
  }
  function escapeCommas(className) {
    return className.replace(/\\,/g, "\\2c ");
  }
  const namedColors = {
    aliceblue: [
      240,
      248,
      255
    ],
    antiquewhite: [
      250,
      235,
      215
    ],
    aqua: [
      0,
      255,
      255
    ],
    aquamarine: [
      127,
      255,
      212
    ],
    azure: [
      240,
      255,
      255
    ],
    beige: [
      245,
      245,
      220
    ],
    bisque: [
      255,
      228,
      196
    ],
    black: [
      0,
      0,
      0
    ],
    blanchedalmond: [
      255,
      235,
      205
    ],
    blue: [
      0,
      0,
      255
    ],
    blueviolet: [
      138,
      43,
      226
    ],
    brown: [
      165,
      42,
      42
    ],
    burlywood: [
      222,
      184,
      135
    ],
    cadetblue: [
      95,
      158,
      160
    ],
    chartreuse: [
      127,
      255,
      0
    ],
    chocolate: [
      210,
      105,
      30
    ],
    coral: [
      255,
      127,
      80
    ],
    cornflowerblue: [
      100,
      149,
      237
    ],
    cornsilk: [
      255,
      248,
      220
    ],
    crimson: [
      220,
      20,
      60
    ],
    cyan: [
      0,
      255,
      255
    ],
    darkblue: [
      0,
      0,
      139
    ],
    darkcyan: [
      0,
      139,
      139
    ],
    darkgoldenrod: [
      184,
      134,
      11
    ],
    darkgray: [
      169,
      169,
      169
    ],
    darkgreen: [
      0,
      100,
      0
    ],
    darkgrey: [
      169,
      169,
      169
    ],
    darkkhaki: [
      189,
      183,
      107
    ],
    darkmagenta: [
      139,
      0,
      139
    ],
    darkolivegreen: [
      85,
      107,
      47
    ],
    darkorange: [
      255,
      140,
      0
    ],
    darkorchid: [
      153,
      50,
      204
    ],
    darkred: [
      139,
      0,
      0
    ],
    darksalmon: [
      233,
      150,
      122
    ],
    darkseagreen: [
      143,
      188,
      143
    ],
    darkslateblue: [
      72,
      61,
      139
    ],
    darkslategray: [
      47,
      79,
      79
    ],
    darkslategrey: [
      47,
      79,
      79
    ],
    darkturquoise: [
      0,
      206,
      209
    ],
    darkviolet: [
      148,
      0,
      211
    ],
    deeppink: [
      255,
      20,
      147
    ],
    deepskyblue: [
      0,
      191,
      255
    ],
    dimgray: [
      105,
      105,
      105
    ],
    dimgrey: [
      105,
      105,
      105
    ],
    dodgerblue: [
      30,
      144,
      255
    ],
    firebrick: [
      178,
      34,
      34
    ],
    floralwhite: [
      255,
      250,
      240
    ],
    forestgreen: [
      34,
      139,
      34
    ],
    fuchsia: [
      255,
      0,
      255
    ],
    gainsboro: [
      220,
      220,
      220
    ],
    ghostwhite: [
      248,
      248,
      255
    ],
    gold: [
      255,
      215,
      0
    ],
    goldenrod: [
      218,
      165,
      32
    ],
    gray: [
      128,
      128,
      128
    ],
    green: [
      0,
      128,
      0
    ],
    greenyellow: [
      173,
      255,
      47
    ],
    grey: [
      128,
      128,
      128
    ],
    honeydew: [
      240,
      255,
      240
    ],
    hotpink: [
      255,
      105,
      180
    ],
    indianred: [
      205,
      92,
      92
    ],
    indigo: [
      75,
      0,
      130
    ],
    ivory: [
      255,
      255,
      240
    ],
    khaki: [
      240,
      230,
      140
    ],
    lavender: [
      230,
      230,
      250
    ],
    lavenderblush: [
      255,
      240,
      245
    ],
    lawngreen: [
      124,
      252,
      0
    ],
    lemonchiffon: [
      255,
      250,
      205
    ],
    lightblue: [
      173,
      216,
      230
    ],
    lightcoral: [
      240,
      128,
      128
    ],
    lightcyan: [
      224,
      255,
      255
    ],
    lightgoldenrodyellow: [
      250,
      250,
      210
    ],
    lightgray: [
      211,
      211,
      211
    ],
    lightgreen: [
      144,
      238,
      144
    ],
    lightgrey: [
      211,
      211,
      211
    ],
    lightpink: [
      255,
      182,
      193
    ],
    lightsalmon: [
      255,
      160,
      122
    ],
    lightseagreen: [
      32,
      178,
      170
    ],
    lightskyblue: [
      135,
      206,
      250
    ],
    lightslategray: [
      119,
      136,
      153
    ],
    lightslategrey: [
      119,
      136,
      153
    ],
    lightsteelblue: [
      176,
      196,
      222
    ],
    lightyellow: [
      255,
      255,
      224
    ],
    lime: [
      0,
      255,
      0
    ],
    limegreen: [
      50,
      205,
      50
    ],
    linen: [
      250,
      240,
      230
    ],
    magenta: [
      255,
      0,
      255
    ],
    maroon: [
      128,
      0,
      0
    ],
    mediumaquamarine: [
      102,
      205,
      170
    ],
    mediumblue: [
      0,
      0,
      205
    ],
    mediumorchid: [
      186,
      85,
      211
    ],
    mediumpurple: [
      147,
      112,
      219
    ],
    mediumseagreen: [
      60,
      179,
      113
    ],
    mediumslateblue: [
      123,
      104,
      238
    ],
    mediumspringgreen: [
      0,
      250,
      154
    ],
    mediumturquoise: [
      72,
      209,
      204
    ],
    mediumvioletred: [
      199,
      21,
      133
    ],
    midnightblue: [
      25,
      25,
      112
    ],
    mintcream: [
      245,
      255,
      250
    ],
    mistyrose: [
      255,
      228,
      225
    ],
    moccasin: [
      255,
      228,
      181
    ],
    navajowhite: [
      255,
      222,
      173
    ],
    navy: [
      0,
      0,
      128
    ],
    oldlace: [
      253,
      245,
      230
    ],
    olive: [
      128,
      128,
      0
    ],
    olivedrab: [
      107,
      142,
      35
    ],
    orange: [
      255,
      165,
      0
    ],
    orangered: [
      255,
      69,
      0
    ],
    orchid: [
      218,
      112,
      214
    ],
    palegoldenrod: [
      238,
      232,
      170
    ],
    palegreen: [
      152,
      251,
      152
    ],
    paleturquoise: [
      175,
      238,
      238
    ],
    palevioletred: [
      219,
      112,
      147
    ],
    papayawhip: [
      255,
      239,
      213
    ],
    peachpuff: [
      255,
      218,
      185
    ],
    peru: [
      205,
      133,
      63
    ],
    pink: [
      255,
      192,
      203
    ],
    plum: [
      221,
      160,
      221
    ],
    powderblue: [
      176,
      224,
      230
    ],
    purple: [
      128,
      0,
      128
    ],
    rebeccapurple: [
      102,
      51,
      153
    ],
    red: [
      255,
      0,
      0
    ],
    rosybrown: [
      188,
      143,
      143
    ],
    royalblue: [
      65,
      105,
      225
    ],
    saddlebrown: [
      139,
      69,
      19
    ],
    salmon: [
      250,
      128,
      114
    ],
    sandybrown: [
      244,
      164,
      96
    ],
    seagreen: [
      46,
      139,
      87
    ],
    seashell: [
      255,
      245,
      238
    ],
    sienna: [
      160,
      82,
      45
    ],
    silver: [
      192,
      192,
      192
    ],
    skyblue: [
      135,
      206,
      235
    ],
    slateblue: [
      106,
      90,
      205
    ],
    slategray: [
      112,
      128,
      144
    ],
    slategrey: [
      112,
      128,
      144
    ],
    snow: [
      255,
      250,
      250
    ],
    springgreen: [
      0,
      255,
      127
    ],
    steelblue: [
      70,
      130,
      180
    ],
    tan: [
      210,
      180,
      140
    ],
    teal: [
      0,
      128,
      128
    ],
    thistle: [
      216,
      191,
      216
    ],
    tomato: [
      255,
      99,
      71
    ],
    turquoise: [
      64,
      224,
      208
    ],
    violet: [
      238,
      130,
      238
    ],
    wheat: [
      245,
      222,
      179
    ],
    white: [
      255,
      255,
      255
    ],
    whitesmoke: [
      245,
      245,
      245
    ],
    yellow: [
      255,
      255,
      0
    ],
    yellowgreen: [
      154,
      205,
      50
    ]
  };
  let HEX = /^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i;
  let SHORT_HEX = /^#([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i;
  let VALUE = /(?:\d+|\d*\.\d+)%?/;
  let SEP = /(?:\s*,\s*|\s+)/;
  let ALPHA_SEP = /\s*[,/]\s*/;
  let CUSTOM_PROPERTY = /var\(--(?:[^ )]*?)(?:,(?:[^ )]*?|var\(--[^ )]*?\)))?\)/;
  let RGB = new RegExp(`^(rgba?)\\(\\s*(${VALUE.source}|${CUSTOM_PROPERTY.source})(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${ALPHA_SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?\\s*\\)$`);
  let HSL = new RegExp(`^(hsla?)\\(\\s*((?:${VALUE.source})(?:deg|rad|grad|turn)?|${CUSTOM_PROPERTY.source})(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${ALPHA_SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?\\s*\\)$`);
  function parseColor(value, { loose = false } = {}) {
    var _a, _b;
    if (typeof value !== "string") {
      return null;
    }
    value = value.trim();
    if (value === "transparent") {
      return {
        mode: "rgb",
        color: [
          "0",
          "0",
          "0"
        ],
        alpha: "0"
      };
    }
    if (value in namedColors) {
      return {
        mode: "rgb",
        color: namedColors[value].map((v3) => v3.toString())
      };
    }
    let hex = value.replace(SHORT_HEX, (_3, r3, g3, b3, a3) => [
      "#",
      r3,
      r3,
      g3,
      g3,
      b3,
      b3,
      a3 ? a3 + a3 : ""
    ].join("")).match(HEX);
    if (hex !== null) {
      return {
        mode: "rgb",
        color: [
          parseInt(hex[1], 16),
          parseInt(hex[2], 16),
          parseInt(hex[3], 16)
        ].map((v3) => v3.toString()),
        alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : void 0
      };
    }
    let match = value.match(RGB) ?? value.match(HSL);
    if (match === null) {
      return null;
    }
    let color2 = [
      match[2],
      match[3],
      match[4]
    ].filter(Boolean).map((v3) => v3.toString());
    if (color2.length === 2 && color2[0].startsWith("var(")) {
      return {
        mode: match[1],
        color: [
          color2[0]
        ],
        alpha: color2[1]
      };
    }
    if (!loose && color2.length !== 3) {
      return null;
    }
    if (color2.length < 3 && !color2.some((part) => /^var\(.*?\)$/.test(part))) {
      return null;
    }
    return {
      mode: match[1],
      color: color2,
      alpha: (_b = (_a = match[5]) == null ? void 0 : _a.toString) == null ? void 0 : _b.call(_a)
    };
  }
  function formatColor({ mode, color: color2, alpha }) {
    let hasAlpha = alpha !== void 0;
    if (mode === "rgba" || mode === "hsla") {
      return `${mode}(${color2.join(", ")}${hasAlpha ? `, ${alpha}` : ""})`;
    }
    return `${mode}(${color2.join(" ")}${hasAlpha ? ` / ${alpha}` : ""})`;
  }
  function withAlphaValue(color2, alphaValue, defaultValue) {
    if (typeof color2 === "function") {
      return color2({
        opacityValue: alphaValue
      });
    }
    let parsed = parseColor(color2, {
      loose: true
    });
    if (parsed === null) {
      return defaultValue;
    }
    return formatColor({
      ...parsed,
      alpha: alphaValue
    });
  }
  function splitAtTopLevelOnly(input, separator) {
    let stack = [];
    let parts = [];
    let lastPos = 0;
    let isEscaped = false;
    for (let idx = 0; idx < input.length; idx++) {
      let char = input[idx];
      if (stack.length === 0 && char === separator[0] && !isEscaped) {
        if (separator.length === 1 || input.slice(idx, idx + separator.length) === separator) {
          parts.push(input.slice(lastPos, idx));
          lastPos = idx + separator.length;
        }
      }
      isEscaped = isEscaped ? false : char === "\\";
      if (char === "(" || char === "[" || char === "{") {
        stack.push(char);
      } else if (char === ")" && stack[stack.length - 1] === "(" || char === "]" && stack[stack.length - 1] === "[" || char === "}" && stack[stack.length - 1] === "{") {
        stack.pop();
      }
    }
    parts.push(input.slice(lastPos));
    return parts;
  }
  let KEYWORDS = /* @__PURE__ */ new Set([
    "inset",
    "inherit",
    "initial",
    "revert",
    "unset"
  ]);
  let SPACE = /\ +(?![^(]*\))/g;
  let LENGTH = /^-?(\d+|\.\d+)(.*?)$/g;
  function parseBoxShadowValue(input) {
    let shadows = splitAtTopLevelOnly(input, ",");
    return shadows.map((shadow2) => {
      let value = shadow2.trim();
      let result = {
        raw: value
      };
      let parts = value.split(SPACE);
      let seen = /* @__PURE__ */ new Set();
      for (let part of parts) {
        LENGTH.lastIndex = 0;
        if (!seen.has("KEYWORD") && KEYWORDS.has(part)) {
          result.keyword = part;
          seen.add("KEYWORD");
        } else if (LENGTH.test(part)) {
          if (!seen.has("X")) {
            result.x = part;
            seen.add("X");
          } else if (!seen.has("Y")) {
            result.y = part;
            seen.add("Y");
          } else if (!seen.has("BLUR")) {
            result.blur = part;
            seen.add("BLUR");
          } else if (!seen.has("SPREAD")) {
            result.spread = part;
            seen.add("SPREAD");
          }
        } else {
          if (!result.color) {
            result.color = part;
          } else {
            if (!result.unknown) result.unknown = [];
            result.unknown.push(part);
          }
        }
      }
      result.valid = result.x !== void 0 && result.y !== void 0;
      return result;
    });
  }
  let cssFunctions = [
    "min",
    "max",
    "clamp",
    "calc"
  ];
  function isCSSFunction(value) {
    return cssFunctions.some((fn2) => new RegExp(`^${fn2}\\(.*\\)`).test(value));
  }
  const AUTO_VAR_INJECTION_EXCEPTIONS = /* @__PURE__ */ new Set([
    "scroll-timeline-name",
    "timeline-scope",
    "view-timeline-name",
    "font-palette",
    "anchor-name",
    "anchor-scope",
    "position-anchor",
    "position-try-options",
    "scroll-timeline",
    "animation-timeline",
    "view-timeline",
    "position-try"
  ]);
  function normalize(value, context = null, isRoot = true) {
    let isVarException = context && AUTO_VAR_INJECTION_EXCEPTIONS.has(context.property);
    if (value.startsWith("--") && !isVarException) {
      return `var(${value})`;
    }
    if (value.includes("url(")) {
      return value.split(/(url\(.*?\))/g).filter(Boolean).map((part) => {
        if (/^url\(.*?\)$/.test(part)) {
          return part;
        }
        return normalize(part, context, false);
      }).join("");
    }
    value = value.replace(/([^\\])_+/g, (fullMatch, characterBefore) => characterBefore + " ".repeat(fullMatch.length - 1)).replace(/^_/g, " ").replace(/\\_/g, "_");
    if (isRoot) {
      value = value.trim();
    }
    value = normalizeMathOperatorSpacing(value);
    return value;
  }
  function normalizeMathOperatorSpacing(value) {
    let preventFormattingInFunctions = [
      "theme"
    ];
    let preventFormattingKeywords = [
      "min-content",
      "max-content",
      "fit-content",
      "safe-area-inset-top",
      "safe-area-inset-right",
      "safe-area-inset-bottom",
      "safe-area-inset-left",
      "titlebar-area-x",
      "titlebar-area-y",
      "titlebar-area-width",
      "titlebar-area-height",
      "keyboard-inset-top",
      "keyboard-inset-right",
      "keyboard-inset-bottom",
      "keyboard-inset-left",
      "keyboard-inset-width",
      "keyboard-inset-height",
      "radial-gradient",
      "linear-gradient",
      "conic-gradient",
      "repeating-radial-gradient",
      "repeating-linear-gradient",
      "repeating-conic-gradient",
      "anchor-size"
    ];
    return value.replace(/(calc|min|max|clamp)\(.+\)/g, (match) => {
      let result = "";
      function lastChar() {
        let char = result.trimEnd();
        return char[char.length - 1];
      }
      for (let i3 = 0; i3 < match.length; i3++) {
        let peek = function(word) {
          return word.split("").every((char2, j3) => match[i3 + j3] === char2);
        }, consumeUntil = function(chars) {
          let minIndex = Infinity;
          for (let char2 of chars) {
            let index2 = match.indexOf(char2, i3);
            if (index2 !== -1 && index2 < minIndex) {
              minIndex = index2;
            }
          }
          let result2 = match.slice(i3, minIndex);
          i3 += result2.length - 1;
          return result2;
        };
        let char = match[i3];
        if (peek("var")) {
          result += consumeUntil([
            ")",
            ","
          ]);
        } else if (preventFormattingKeywords.some((keyword) => peek(keyword))) {
          let keyword = preventFormattingKeywords.find((keyword2) => peek(keyword2));
          result += keyword;
          i3 += keyword.length - 1;
        } else if (preventFormattingInFunctions.some((fn2) => peek(fn2))) {
          result += consumeUntil([
            ")"
          ]);
        } else if (peek("[")) {
          result += consumeUntil([
            "]"
          ]);
        } else if ([
          "+",
          "-",
          "*",
          "/"
        ].includes(char) && ![
          "(",
          "+",
          "-",
          "*",
          "/",
          ","
        ].includes(lastChar())) {
          result += ` ${char} `;
        } else {
          result += char;
        }
      }
      return result.replace(/\s+/g, " ");
    });
  }
  function url(value) {
    return value.startsWith("url(");
  }
  function number(value) {
    return !isNaN(Number(value)) || isCSSFunction(value);
  }
  function percentage(value) {
    return value.endsWith("%") && number(value.slice(0, -1)) || isCSSFunction(value);
  }
  let lengthUnits = [
    "cm",
    "mm",
    "Q",
    "in",
    "pc",
    "pt",
    "px",
    "em",
    "ex",
    "ch",
    "rem",
    "lh",
    "rlh",
    "vw",
    "vh",
    "vmin",
    "vmax",
    "vb",
    "vi",
    "svw",
    "svh",
    "lvw",
    "lvh",
    "dvw",
    "dvh",
    "cqw",
    "cqh",
    "cqi",
    "cqb",
    "cqmin",
    "cqmax"
  ];
  let lengthUnitsPattern = `(?:${lengthUnits.join("|")})`;
  function length(value) {
    return value === "0" || new RegExp(`^[+-]?[0-9]*.?[0-9]+(?:[eE][+-]?[0-9]+)?${lengthUnitsPattern}$`).test(value) || isCSSFunction(value);
  }
  let lineWidths = /* @__PURE__ */ new Set([
    "thin",
    "medium",
    "thick"
  ]);
  function lineWidth(value) {
    return lineWidths.has(value);
  }
  function shadow(value) {
    let parsedShadows = parseBoxShadowValue(normalize(value));
    for (let parsedShadow of parsedShadows) {
      if (!parsedShadow.valid) {
        return false;
      }
    }
    return true;
  }
  function color(value) {
    let colors2 = 0;
    let result = splitAtTopLevelOnly(value, "_").every((part) => {
      part = normalize(part);
      if (part.startsWith("var(")) return true;
      if (parseColor(part, {
        loose: true
      }) !== null) return colors2++, true;
      return false;
    });
    if (!result) return false;
    return colors2 > 0;
  }
  function image(value) {
    let images = 0;
    let result = splitAtTopLevelOnly(value, ",").every((part) => {
      part = normalize(part);
      if (part.startsWith("var(")) return true;
      if (url(part) || gradient(part) || [
        "element(",
        "image(",
        "cross-fade(",
        "image-set("
      ].some((fn2) => part.startsWith(fn2))) {
        images++;
        return true;
      }
      return false;
    });
    if (!result) return false;
    return images > 0;
  }
  let gradientTypes = /* @__PURE__ */ new Set([
    "conic-gradient",
    "linear-gradient",
    "radial-gradient",
    "repeating-conic-gradient",
    "repeating-linear-gradient",
    "repeating-radial-gradient"
  ]);
  function gradient(value) {
    value = normalize(value);
    for (let type of gradientTypes) {
      if (value.startsWith(`${type}(`)) {
        return true;
      }
    }
    return false;
  }
  let validPositions = /* @__PURE__ */ new Set([
    "center",
    "top",
    "right",
    "bottom",
    "left"
  ]);
  function position(value) {
    let positions = 0;
    let result = splitAtTopLevelOnly(value, "_").every((part) => {
      part = normalize(part);
      if (part.startsWith("var(")) return true;
      if (validPositions.has(part) || length(part) || percentage(part)) {
        positions++;
        return true;
      }
      return false;
    });
    if (!result) return false;
    return positions > 0;
  }
  function familyName(value) {
    let fonts = 0;
    let result = splitAtTopLevelOnly(value, ",").every((part) => {
      part = normalize(part);
      if (part.startsWith("var(")) return true;
      if (part.includes(" ")) {
        if (!/(['"])([^"']+)\1/g.test(part)) {
          return false;
        }
      }
      if (/^\d/g.test(part)) {
        return false;
      }
      fonts++;
      return true;
    });
    if (!result) return false;
    return fonts > 0;
  }
  let genericNames = /* @__PURE__ */ new Set([
    "serif",
    "sans-serif",
    "monospace",
    "cursive",
    "fantasy",
    "system-ui",
    "ui-serif",
    "ui-sans-serif",
    "ui-monospace",
    "ui-rounded",
    "math",
    "emoji",
    "fangsong"
  ]);
  function genericName(value) {
    return genericNames.has(value);
  }
  let absoluteSizes = /* @__PURE__ */ new Set([
    "xx-small",
    "x-small",
    "small",
    "medium",
    "large",
    "x-large",
    "xx-large",
    "xxx-large"
  ]);
  function absoluteSize(value) {
    return absoluteSizes.has(value);
  }
  let relativeSizes = /* @__PURE__ */ new Set([
    "larger",
    "smaller"
  ]);
  function relativeSize(value) {
    return relativeSizes.has(value);
  }
  function negateValue(value) {
    value = `${value}`;
    if (value === "0") {
      return "0";
    }
    if (/^[+-]?(\d+|\d*\.\d+)(e[+-]?\d+)?(%|\w+)?$/.test(value)) {
      return value.replace(/^[+-]?/, (sign2) => sign2 === "-" ? "" : "-");
    }
    let numericFunctions = [
      "var",
      "calc",
      "min",
      "max",
      "clamp"
    ];
    for (const fn2 of numericFunctions) {
      if (value.includes(`${fn2}(`)) {
        return `calc(${value} * -1)`;
      }
    }
  }
  function backgroundSize(value) {
    let keywordValues = [
      "cover",
      "contain"
    ];
    return splitAtTopLevelOnly(value, ",").every((part) => {
      let sizes = splitAtTopLevelOnly(part, "_").filter(Boolean);
      if (sizes.length === 1 && keywordValues.includes(sizes[0])) return true;
      if (sizes.length !== 1 && sizes.length !== 2) return false;
      return sizes.every((size) => length(size) || percentage(size) || size === "auto");
    });
  }
  var picocolors_browserExports = requirePicocolors_browser();
  const colors = getDefaultExportFromCjs(picocolors_browserExports);
  var define_process_env_default$1 = {};
  let alreadyShown = /* @__PURE__ */ new Set();
  function log(type, messages, key2) {
    if (typeof process$1 !== "undefined" && define_process_env_default$1.JEST_WORKER_ID) return;
    if (key2 && alreadyShown.has(key2)) return;
    if (key2) alreadyShown.add(key2);
    console.warn("");
    messages.forEach((message) => console.warn(type, "-", message));
  }
  const log$1 = {
    info(key2, messages) {
      log(colors.bold(colors.cyan("info")), ...Array.isArray(key2) ? [
        key2
      ] : [
        messages,
        key2
      ]);
    },
    warn(key2, messages) {
      log(colors.bold(colors.yellow("warn")), ...Array.isArray(key2) ? [
        key2
      ] : [
        messages,
        key2
      ]);
    },
    risk(key2, messages) {
      log(colors.bold(colors.magenta("risk")), ...Array.isArray(key2) ? [
        key2
      ] : [
        messages,
        key2
      ]);
    }
  };
  let defaults = {
    optimizeUniversalDefaults: false,
    generalizedModifiers: true,
    disableColorOpacityUtilitiesByDefault: false,
    relativeContentPathsByDefault: false
  };
  let featureFlags = {
    future: [
      "hoverOnlyWhenSupported",
      "respectDefaultRingColorOpacity",
      "disableColorOpacityUtilitiesByDefault",
      "relativeContentPathsByDefault"
    ],
    experimental: [
      "optimizeUniversalDefaults",
      "generalizedModifiers"
    ]
  };
  function flagEnabled(config, flag) {
    var _a, _b;
    if (featureFlags.future.includes(flag)) {
      return config.future === "all" || (((_a = config == null ? void 0 : config.future) == null ? void 0 : _a[flag]) ?? defaults[flag] ?? false);
    }
    if (featureFlags.experimental.includes(flag)) {
      return config.experimental === "all" || (((_b = config == null ? void 0 : config.experimental) == null ? void 0 : _b[flag]) ?? defaults[flag] ?? false);
    }
    return false;
  }
  function updateAllClasses(selectors, updateClass) {
    selectors.walkClasses((sel) => {
      sel.value = updateClass(sel.value);
      if (sel.raws && sel.raws.value) {
        sel.raws.value = escapeCommas(sel.raws.value);
      }
    });
  }
  function resolveArbitraryValue(modifier, validate) {
    if (!isArbitraryValue$1(modifier)) {
      return void 0;
    }
    let value = modifier.slice(1, -1);
    if (!validate(value)) {
      return void 0;
    }
    return normalize(value);
  }
  function asNegativeValue(modifier, lookup = {}, validate) {
    let positiveValue = lookup[modifier];
    if (positiveValue !== void 0) {
      return negateValue(positiveValue);
    }
    if (isArbitraryValue$1(modifier)) {
      let resolved = resolveArbitraryValue(modifier, validate);
      if (resolved === void 0) {
        return void 0;
      }
      return negateValue(resolved);
    }
  }
  function asValue(modifier, options = {}, { validate = () => true } = {}) {
    var _a;
    let value = (_a = options.values) == null ? void 0 : _a[modifier];
    if (value !== void 0) {
      return value;
    }
    if (options.supportsNegativeValues && modifier.startsWith("-")) {
      return asNegativeValue(modifier.slice(1), options.values, validate);
    }
    return resolveArbitraryValue(modifier, validate);
  }
  function isArbitraryValue$1(input) {
    return input.startsWith("[") && input.endsWith("]");
  }
  function splitUtilityModifier(modifier) {
    let slashIdx = modifier.lastIndexOf("/");
    let arbitraryStartIdx = modifier.lastIndexOf("[", slashIdx);
    let arbitraryEndIdx = modifier.indexOf("]", slashIdx);
    let isNextToArbitrary = modifier[slashIdx - 1] === "]" || modifier[slashIdx + 1] === "[";
    if (!isNextToArbitrary) {
      if (arbitraryStartIdx !== -1 && arbitraryEndIdx !== -1) {
        if (arbitraryStartIdx < slashIdx && slashIdx < arbitraryEndIdx) {
          slashIdx = modifier.lastIndexOf("/", arbitraryStartIdx);
        }
      }
    }
    if (slashIdx === -1 || slashIdx === modifier.length - 1) {
      return [
        modifier,
        void 0
      ];
    }
    let arbitrary = isArbitraryValue$1(modifier);
    if (arbitrary && !modifier.includes("]/[")) {
      return [
        modifier,
        void 0
      ];
    }
    return [
      modifier.slice(0, slashIdx),
      modifier.slice(slashIdx + 1)
    ];
  }
  function parseColorFormat(value) {
    if (typeof value === "string" && value.includes("<alpha-value>")) {
      let oldValue = value;
      return ({ opacityValue = 1 }) => oldValue.replace(/<alpha-value>/g, opacityValue);
    }
    return value;
  }
  function unwrapArbitraryModifier(modifier) {
    return normalize(modifier.slice(1, -1));
  }
  function asColor(modifier, options = {}, { tailwindConfig = {} } = {}) {
    var _a, _b, _c, _d, _e2;
    if (((_a = options.values) == null ? void 0 : _a[modifier]) !== void 0) {
      return parseColorFormat((_b = options.values) == null ? void 0 : _b[modifier]);
    }
    let [color$1, alpha] = splitUtilityModifier(modifier);
    if (alpha !== void 0) {
      let normalizedColor = ((_c = options.values) == null ? void 0 : _c[color$1]) ?? (isArbitraryValue$1(color$1) ? color$1.slice(1, -1) : void 0);
      if (normalizedColor === void 0) {
        return void 0;
      }
      normalizedColor = parseColorFormat(normalizedColor);
      if (isArbitraryValue$1(alpha)) {
        return withAlphaValue(normalizedColor, unwrapArbitraryModifier(alpha));
      }
      if (((_e2 = (_d = tailwindConfig.theme) == null ? void 0 : _d.opacity) == null ? void 0 : _e2[alpha]) === void 0) {
        return void 0;
      }
      return withAlphaValue(normalizedColor, tailwindConfig.theme.opacity[alpha]);
    }
    return asValue(modifier, options, {
      validate: color
    });
  }
  function asLookupValue(modifier, options = {}) {
    var _a;
    return (_a = options.values) == null ? void 0 : _a[modifier];
  }
  function guess(validate) {
    return (modifier, options) => {
      return asValue(modifier, options, {
        validate
      });
    };
  }
  let typeMap = {
    any: asValue,
    color: asColor,
    url: guess(url),
    image: guess(image),
    length: guess(length),
    percentage: guess(percentage),
    position: guess(position),
    lookup: asLookupValue,
    "generic-name": guess(genericName),
    "family-name": guess(familyName),
    number: guess(number),
    "line-width": guess(lineWidth),
    "absolute-size": guess(absoluteSize),
    "relative-size": guess(relativeSize),
    shadow: guess(shadow),
    size: guess(backgroundSize)
  };
  function* getMatchingTypes(types, rawModifier, options, tailwindConfig) {
    var _a;
    let modifiersEnabled = flagEnabled(tailwindConfig, "generalizedModifiers");
    let [modifier, utilityModifier] = splitUtilityModifier(rawModifier);
    let canUseUtilityModifier = modifiersEnabled && options.modifiers != null && (options.modifiers === "any" || typeof options.modifiers === "object" && (utilityModifier && isArbitraryValue$1(utilityModifier) || utilityModifier in options.modifiers));
    if (!canUseUtilityModifier) {
      modifier = rawModifier;
      utilityModifier = void 0;
    }
    if (utilityModifier !== void 0 && modifier === "") {
      modifier = "DEFAULT";
    }
    if (utilityModifier !== void 0) {
      if (typeof options.modifiers === "object") {
        let configValue = ((_a = options.modifiers) == null ? void 0 : _a[utilityModifier]) ?? null;
        if (configValue !== null) {
          utilityModifier = configValue;
        } else if (isArbitraryValue$1(utilityModifier)) {
          utilityModifier = unwrapArbitraryModifier(utilityModifier);
        }
      }
    }
    for (let { type } of types ?? []) {
      let result = typeMap[type](modifier, options, {
        tailwindConfig
      });
      if (result === void 0) {
        continue;
      }
      yield [
        result,
        type,
        utilityModifier ?? null
      ];
    }
  }
  var define_process_env_default = {};
  typeof process$1 !== "undefined" ? {
    DEBUG: resolveDebug(define_process_env_default.DEBUG)
  } : {};
  const NOT_ON_DEMAND = new String("*");
  const NONE = Symbol("__NONE__");
  function resolveDebug(debug) {
    if (debug === void 0) {
      return false;
    }
    if (debug === "true" || debug === "1") {
      return true;
    }
    if (debug === "false" || debug === "0") {
      return false;
    }
    if (debug === "*") {
      return true;
    }
    let debuggers = debug.split(",").map((d3) => d3.split(":")[0]);
    if (debuggers.includes("-tailwindcss")) {
      return false;
    }
    if (debuggers.includes("tailwindcss")) {
      return true;
    }
    return false;
  }
  var unescExports = requireUnesc();
  const unescape = getDefaultExportFromCjs(unescExports);
  function escapeClassName(className) {
    var _a;
    let node2 = parser$1.className();
    node2.value = className;
    return escapeCommas(((_a = node2 == null ? void 0 : node2.raws) == null ? void 0 : _a.value) ?? node2.value);
  }
  let elementProperties = {
    "::after": [
      "terminal",
      "jumpable"
    ],
    "::backdrop": [
      "terminal",
      "jumpable"
    ],
    "::before": [
      "terminal",
      "jumpable"
    ],
    "::cue": [
      "terminal"
    ],
    "::cue-region": [
      "terminal"
    ],
    "::first-letter": [
      "terminal",
      "jumpable"
    ],
    "::first-line": [
      "terminal",
      "jumpable"
    ],
    "::grammar-error": [
      "terminal"
    ],
    "::marker": [
      "terminal",
      "jumpable"
    ],
    "::part": [
      "terminal",
      "actionable"
    ],
    "::placeholder": [
      "terminal",
      "jumpable"
    ],
    "::selection": [
      "terminal",
      "jumpable"
    ],
    "::slotted": [
      "terminal"
    ],
    "::spelling-error": [
      "terminal"
    ],
    "::target-text": [
      "terminal"
    ],
    "::file-selector-button": [
      "terminal",
      "actionable"
    ],
    "::deep": [
      "actionable"
    ],
    "::v-deep": [
      "actionable"
    ],
    "::ng-deep": [
      "actionable"
    ],
    ":after": [
      "terminal",
      "jumpable"
    ],
    ":before": [
      "terminal",
      "jumpable"
    ],
    ":first-letter": [
      "terminal",
      "jumpable"
    ],
    ":first-line": [
      "terminal",
      "jumpable"
    ],
    ":where": [],
    ":is": [],
    ":has": [],
    __default__: [
      "terminal",
      "actionable"
    ]
  };
  function movePseudos(sel) {
    let [pseudos] = movablePseudos(sel);
    pseudos.forEach(([sel2, pseudo]) => sel2.removeChild(pseudo));
    sel.nodes.push(...pseudos.map(([, pseudo]) => pseudo));
    return sel;
  }
  function movablePseudos(sel) {
    let buffer2 = [];
    let lastSeenElement = null;
    for (let node2 of sel.nodes) {
      if (node2.type === "combinator") {
        buffer2 = buffer2.filter(([, node3]) => propertiesForPseudo(node3).includes("jumpable"));
        lastSeenElement = null;
      } else if (node2.type === "pseudo") {
        if (isMovablePseudoElement(node2)) {
          lastSeenElement = node2;
          buffer2.push([
            sel,
            node2,
            null
          ]);
        } else if (lastSeenElement && isAttachablePseudoClass(node2, lastSeenElement)) {
          buffer2.push([
            sel,
            node2,
            lastSeenElement
          ]);
        } else {
          lastSeenElement = null;
        }
        for (let sub of node2.nodes ?? []) {
          let [movable, lastSeenElementInSub] = movablePseudos(sub);
          lastSeenElement = lastSeenElementInSub || lastSeenElement;
          buffer2.push(...movable);
        }
      }
    }
    return [
      buffer2,
      lastSeenElement
    ];
  }
  function isPseudoElement(node2) {
    return node2.value.startsWith("::") || elementProperties[node2.value] !== void 0;
  }
  function isMovablePseudoElement(node2) {
    return isPseudoElement(node2) && propertiesForPseudo(node2).includes("terminal");
  }
  function isAttachablePseudoClass(node2, pseudo) {
    if (node2.type !== "pseudo") return false;
    if (isPseudoElement(node2)) return false;
    return propertiesForPseudo(pseudo).includes("actionable");
  }
  function propertiesForPseudo(pseudo) {
    return elementProperties[pseudo.value] ?? elementProperties.__default__;
  }
  let MERGE = ":merge";
  function formatVariantSelector(formats, { context, candidate }) {
    let prefix2 = (context == null ? void 0 : context.tailwindConfig.prefix) ?? "";
    let parsedFormats = formats.map((format) => {
      let ast = parser$1().astSync(format.format);
      return {
        ...format,
        ast: format.respectPrefix ? prefixSelector(prefix2, ast) : ast
      };
    });
    let formatAst = parser$1.root({
      nodes: [
        parser$1.selector({
          nodes: [
            parser$1.className({
              value: escapeClassName(candidate)
            })
          ]
        })
      ]
    });
    for (let { ast } of parsedFormats) {
      [formatAst, ast] = handleMergePseudo(formatAst, ast);
      ast.walkNesting((nesting) => nesting.replaceWith(...formatAst.nodes[0].nodes));
      formatAst = ast;
    }
    return formatAst;
  }
  function simpleSelectorForNode(node2) {
    let nodes = [];
    while (node2.prev() && node2.prev().type !== "combinator") {
      node2 = node2.prev();
    }
    while (node2 && node2.type !== "combinator") {
      nodes.push(node2);
      node2 = node2.next();
    }
    return nodes;
  }
  function resortSelector(sel) {
    sel.sort((a3, b3) => {
      if (a3.type === "tag" && b3.type === "class") {
        return -1;
      } else if (a3.type === "class" && b3.type === "tag") {
        return 1;
      } else if (a3.type === "class" && b3.type === "pseudo" && b3.value.startsWith("::")) {
        return -1;
      } else if (a3.type === "pseudo" && a3.value.startsWith("::") && b3.type === "class") {
        return 1;
      }
      return sel.index(a3) - sel.index(b3);
    });
    return sel;
  }
  function eliminateIrrelevantSelectors(sel, base2) {
    let hasClassesMatchingCandidate = false;
    sel.walk((child) => {
      if (child.type === "class" && child.value === base2) {
        hasClassesMatchingCandidate = true;
        return false;
      }
    });
    if (!hasClassesMatchingCandidate) {
      sel.remove();
    }
  }
  function finalizeSelector(current, formats, { context, candidate, base: base2 }) {
    var _a;
    let separator = ((_a = context == null ? void 0 : context.tailwindConfig) == null ? void 0 : _a.separator) ?? ":";
    base2 = base2 ?? splitAtTopLevelOnly(candidate, separator).pop();
    let selector = parser$1().astSync(current);
    selector.walkClasses((node2) => {
      if (node2.raws && node2.value.includes(base2)) {
        node2.raws.value = escapeClassName(unescape(node2.raws.value));
      }
    });
    selector.each((sel) => eliminateIrrelevantSelectors(sel, base2));
    if (selector.length === 0) {
      return null;
    }
    let formatAst = Array.isArray(formats) ? formatVariantSelector(formats, {
      context,
      candidate
    }) : formats;
    if (formatAst === null) {
      return selector.toString();
    }
    let simpleStart = parser$1.comment({
      value: "/*__simple__*/"
    });
    let simpleEnd = parser$1.comment({
      value: "/*__simple__*/"
    });
    selector.walkClasses((node2) => {
      if (node2.value !== base2) {
        return;
      }
      let parent = node2.parent;
      let formatNodes = formatAst.nodes[0].nodes;
      if (parent.nodes.length === 1) {
        node2.replaceWith(...formatNodes);
        return;
      }
      let simpleSelector = simpleSelectorForNode(node2);
      parent.insertBefore(simpleSelector[0], simpleStart);
      parent.insertAfter(simpleSelector[simpleSelector.length - 1], simpleEnd);
      for (let child of formatNodes) {
        parent.insertBefore(simpleSelector[0], child.clone());
      }
      node2.remove();
      simpleSelector = simpleSelectorForNode(simpleStart);
      let firstNode = parent.index(simpleStart);
      parent.nodes.splice(firstNode, simpleSelector.length, ...resortSelector(parser$1.selector({
        nodes: simpleSelector
      })).nodes);
      simpleStart.remove();
      simpleEnd.remove();
    });
    selector.walkPseudos((p3) => {
      if (p3.value === MERGE) {
        p3.replaceWith(p3.nodes);
      }
    });
    selector.each((sel) => movePseudos(sel));
    return selector.toString();
  }
  function handleMergePseudo(selector, format) {
    let merges = [];
    selector.walkPseudos((pseudo) => {
      if (pseudo.value === MERGE) {
        merges.push({
          pseudo,
          value: pseudo.nodes[0].toString()
        });
      }
    });
    format.walkPseudos((pseudo) => {
      if (pseudo.value !== MERGE) {
        return;
      }
      let value = pseudo.nodes[0].toString();
      let existing = merges.find((merge) => merge.value === value);
      if (!existing) {
        return;
      }
      let attachments = [];
      let next = pseudo.next();
      while (next && next.type !== "combinator") {
        attachments.push(next);
        next = next.next();
      }
      let combinator = next;
      existing.pseudo.parent.insertAfter(existing.pseudo, parser$1.selector({
        nodes: attachments.map((node2) => node2.clone())
      }));
      pseudo.remove();
      attachments.forEach((node2) => node2.remove());
      if (combinator && combinator.type === "combinator") {
        combinator.remove();
      }
    });
    return [
      selector,
      format
    ];
  }
  function asClass(name) {
    return escapeCommas(`.${escapeClassName(name)}`);
  }
  function transformThemeValue(themeSection) {
    if ([
      "fontSize",
      "outline"
    ].includes(themeSection)) {
      return (value) => {
        if (typeof value === "function") value = value({});
        if (Array.isArray(value)) value = value[0];
        return value;
      };
    }
    if (themeSection === "fontFamily") {
      return (value) => {
        if (typeof value === "function") value = value({});
        let families = Array.isArray(value) && isPlainObject(value[1]) ? value[0] : value;
        return Array.isArray(families) ? families.join(", ") : families;
      };
    }
    if ([
      "boxShadow",
      "transitionProperty",
      "transitionDuration",
      "transitionDelay",
      "transitionTimingFunction",
      "backgroundImage",
      "backgroundSize",
      "backgroundColor",
      "cursor",
      "animation"
    ].includes(themeSection)) {
      return (value) => {
        if (typeof value === "function") value = value({});
        if (Array.isArray(value)) value = value.join(", ");
        return value;
      };
    }
    if ([
      "gridTemplateColumns",
      "gridTemplateRows",
      "objectPosition"
    ].includes(themeSection)) {
      return (value) => {
        if (typeof value === "function") value = value({});
        if (typeof value === "string") value = postcss.list.comma(value).join(" ");
        return value;
      };
    }
    return (value, opts = {}) => {
      if (typeof value === "function") {
        value = value(opts);
      }
      return value;
    };
  }
  function createUtilityPlugin(themeKey, utilityVariations = [
    [
      themeKey,
      [
        themeKey
      ]
    ]
  ], { filterDefault = false, ...options } = {}) {
    let transformValue = transformThemeValue(themeKey);
    return function({ matchUtilities, theme }) {
      for (let utilityVariation of utilityVariations) {
        let group = Array.isArray(utilityVariation[0]) ? utilityVariation : [
          utilityVariation
        ];
        matchUtilities(group.reduce((obj, [classPrefix, properties]) => {
          return Object.assign(obj, {
            [classPrefix]: (value) => {
              return properties.reduce((obj2, name) => {
                if (Array.isArray(name)) {
                  return Object.assign(obj2, {
                    [name[0]]: name[1]
                  });
                }
                return Object.assign(obj2, {
                  [name]: transformValue(value)
                });
              }, {});
            }
          });
        }, {}), {
          ...options,
          values: filterDefault ? Object.fromEntries(Object.entries(theme(themeKey) ?? {}).filter(([modifier]) => modifier !== "DEFAULT")) : theme(themeKey)
        });
      }
    };
  }
  let cssTransformValue = [
    "translate(var(--tw-translate-x), var(--tw-translate-y))",
    "rotate(var(--tw-rotate))",
    "skewX(var(--tw-skew-x))",
    "skewY(var(--tw-skew-y))",
    "scaleX(var(--tw-scale-x))",
    "scaleY(var(--tw-scale-y))"
  ].join(" ");
  ({
    inset: createUtilityPlugin("inset", [
      [
        "inset",
        [
          "inset"
        ]
      ],
      [
        [
          "inset-x",
          [
            "left",
            "right"
          ]
        ],
        [
          "inset-y",
          [
            "top",
            "bottom"
          ]
        ]
      ],
      [
        [
          "start",
          [
            "inset-inline-start"
          ]
        ],
        [
          "end",
          [
            "inset-inline-end"
          ]
        ],
        [
          "top",
          [
            "top"
          ]
        ],
        [
          "right",
          [
            "right"
          ]
        ],
        [
          "bottom",
          [
            "bottom"
          ]
        ],
        [
          "left",
          [
            "left"
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    zIndex: createUtilityPlugin("zIndex", [
      [
        "z",
        [
          "zIndex"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    order: createUtilityPlugin("order", void 0, {
      supportsNegativeValues: true
    }),
    gridColumn: createUtilityPlugin("gridColumn", [
      [
        "col",
        [
          "gridColumn"
        ]
      ]
    ]),
    gridColumnStart: createUtilityPlugin("gridColumnStart", [
      [
        "col-start",
        [
          "gridColumnStart"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    gridColumnEnd: createUtilityPlugin("gridColumnEnd", [
      [
        "col-end",
        [
          "gridColumnEnd"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    gridRow: createUtilityPlugin("gridRow", [
      [
        "row",
        [
          "gridRow"
        ]
      ]
    ]),
    gridRowStart: createUtilityPlugin("gridRowStart", [
      [
        "row-start",
        [
          "gridRowStart"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    gridRowEnd: createUtilityPlugin("gridRowEnd", [
      [
        "row-end",
        [
          "gridRowEnd"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    margin: createUtilityPlugin("margin", [
      [
        "m",
        [
          "margin"
        ]
      ],
      [
        [
          "mx",
          [
            "margin-left",
            "margin-right"
          ]
        ],
        [
          "my",
          [
            "margin-top",
            "margin-bottom"
          ]
        ]
      ],
      [
        [
          "ms",
          [
            "margin-inline-start"
          ]
        ],
        [
          "me",
          [
            "margin-inline-end"
          ]
        ],
        [
          "mt",
          [
            "margin-top"
          ]
        ],
        [
          "mr",
          [
            "margin-right"
          ]
        ],
        [
          "mb",
          [
            "margin-bottom"
          ]
        ],
        [
          "ml",
          [
            "margin-left"
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    aspectRatio: createUtilityPlugin("aspectRatio", [
      [
        "aspect",
        [
          "aspect-ratio"
        ]
      ]
    ]),
    size: createUtilityPlugin("size", [
      [
        "size",
        [
          "width",
          "height"
        ]
      ]
    ]),
    height: createUtilityPlugin("height", [
      [
        "h",
        [
          "height"
        ]
      ]
    ]),
    maxHeight: createUtilityPlugin("maxHeight", [
      [
        "max-h",
        [
          "maxHeight"
        ]
      ]
    ]),
    minHeight: createUtilityPlugin("minHeight", [
      [
        "min-h",
        [
          "minHeight"
        ]
      ]
    ]),
    width: createUtilityPlugin("width", [
      [
        "w",
        [
          "width"
        ]
      ]
    ]),
    minWidth: createUtilityPlugin("minWidth", [
      [
        "min-w",
        [
          "minWidth"
        ]
      ]
    ]),
    maxWidth: createUtilityPlugin("maxWidth", [
      [
        "max-w",
        [
          "maxWidth"
        ]
      ]
    ]),
    flex: createUtilityPlugin("flex"),
    flexShrink: createUtilityPlugin("flexShrink", [
      [
        "flex-shrink",
        [
          "flex-shrink"
        ]
      ],
      [
        "shrink",
        [
          "flex-shrink"
        ]
      ]
    ]),
    flexGrow: createUtilityPlugin("flexGrow", [
      [
        "flex-grow",
        [
          "flex-grow"
        ]
      ],
      [
        "grow",
        [
          "flex-grow"
        ]
      ]
    ]),
    flexBasis: createUtilityPlugin("flexBasis", [
      [
        "basis",
        [
          "flex-basis"
        ]
      ]
    ]),
    transformOrigin: createUtilityPlugin("transformOrigin", [
      [
        "origin",
        [
          "transformOrigin"
        ]
      ]
    ]),
    translate: createUtilityPlugin("translate", [
      [
        [
          "translate-x",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-translate-x",
            [
              "transform",
              cssTransformValue
            ]
          ]
        ],
        [
          "translate-y",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-translate-y",
            [
              "transform",
              cssTransformValue
            ]
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    rotate: createUtilityPlugin("rotate", [
      [
        "rotate",
        [
          [
            "@defaults transform",
            {}
          ],
          "--tw-rotate",
          [
            "transform",
            cssTransformValue
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    skew: createUtilityPlugin("skew", [
      [
        [
          "skew-x",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-skew-x",
            [
              "transform",
              cssTransformValue
            ]
          ]
        ],
        [
          "skew-y",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-skew-y",
            [
              "transform",
              cssTransformValue
            ]
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    scale: createUtilityPlugin("scale", [
      [
        "scale",
        [
          [
            "@defaults transform",
            {}
          ],
          "--tw-scale-x",
          "--tw-scale-y",
          [
            "transform",
            cssTransformValue
          ]
        ]
      ],
      [
        [
          "scale-x",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-scale-x",
            [
              "transform",
              cssTransformValue
            ]
          ]
        ],
        [
          "scale-y",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-scale-y",
            [
              "transform",
              cssTransformValue
            ]
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    cursor: createUtilityPlugin("cursor"),
    scrollMargin: createUtilityPlugin("scrollMargin", [
      [
        "scroll-m",
        [
          "scroll-margin"
        ]
      ],
      [
        [
          "scroll-mx",
          [
            "scroll-margin-left",
            "scroll-margin-right"
          ]
        ],
        [
          "scroll-my",
          [
            "scroll-margin-top",
            "scroll-margin-bottom"
          ]
        ]
      ],
      [
        [
          "scroll-ms",
          [
            "scroll-margin-inline-start"
          ]
        ],
        [
          "scroll-me",
          [
            "scroll-margin-inline-end"
          ]
        ],
        [
          "scroll-mt",
          [
            "scroll-margin-top"
          ]
        ],
        [
          "scroll-mr",
          [
            "scroll-margin-right"
          ]
        ],
        [
          "scroll-mb",
          [
            "scroll-margin-bottom"
          ]
        ],
        [
          "scroll-ml",
          [
            "scroll-margin-left"
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    scrollPadding: createUtilityPlugin("scrollPadding", [
      [
        "scroll-p",
        [
          "scroll-padding"
        ]
      ],
      [
        [
          "scroll-px",
          [
            "scroll-padding-left",
            "scroll-padding-right"
          ]
        ],
        [
          "scroll-py",
          [
            "scroll-padding-top",
            "scroll-padding-bottom"
          ]
        ]
      ],
      [
        [
          "scroll-ps",
          [
            "scroll-padding-inline-start"
          ]
        ],
        [
          "scroll-pe",
          [
            "scroll-padding-inline-end"
          ]
        ],
        [
          "scroll-pt",
          [
            "scroll-padding-top"
          ]
        ],
        [
          "scroll-pr",
          [
            "scroll-padding-right"
          ]
        ],
        [
          "scroll-pb",
          [
            "scroll-padding-bottom"
          ]
        ],
        [
          "scroll-pl",
          [
            "scroll-padding-left"
          ]
        ]
      ]
    ]),
    listStyleType: createUtilityPlugin("listStyleType", [
      [
        "list",
        [
          "listStyleType"
        ]
      ]
    ]),
    listStyleImage: createUtilityPlugin("listStyleImage", [
      [
        "list-image",
        [
          "listStyleImage"
        ]
      ]
    ]),
    columns: createUtilityPlugin("columns", [
      [
        "columns",
        [
          "columns"
        ]
      ]
    ]),
    gridAutoColumns: createUtilityPlugin("gridAutoColumns", [
      [
        "auto-cols",
        [
          "gridAutoColumns"
        ]
      ]
    ]),
    gridAutoRows: createUtilityPlugin("gridAutoRows", [
      [
        "auto-rows",
        [
          "gridAutoRows"
        ]
      ]
    ]),
    gridTemplateColumns: createUtilityPlugin("gridTemplateColumns", [
      [
        "grid-cols",
        [
          "gridTemplateColumns"
        ]
      ]
    ]),
    gridTemplateRows: createUtilityPlugin("gridTemplateRows", [
      [
        "grid-rows",
        [
          "gridTemplateRows"
        ]
      ]
    ]),
    gap: createUtilityPlugin("gap", [
      [
        "gap",
        [
          "gap"
        ]
      ],
      [
        [
          "gap-x",
          [
            "columnGap"
          ]
        ],
        [
          "gap-y",
          [
            "rowGap"
          ]
        ]
      ]
    ]),
    borderRadius: createUtilityPlugin("borderRadius", [
      [
        "rounded",
        [
          "border-radius"
        ]
      ],
      [
        [
          "rounded-s",
          [
            "border-start-start-radius",
            "border-end-start-radius"
          ]
        ],
        [
          "rounded-e",
          [
            "border-start-end-radius",
            "border-end-end-radius"
          ]
        ],
        [
          "rounded-t",
          [
            "border-top-left-radius",
            "border-top-right-radius"
          ]
        ],
        [
          "rounded-r",
          [
            "border-top-right-radius",
            "border-bottom-right-radius"
          ]
        ],
        [
          "rounded-b",
          [
            "border-bottom-right-radius",
            "border-bottom-left-radius"
          ]
        ],
        [
          "rounded-l",
          [
            "border-top-left-radius",
            "border-bottom-left-radius"
          ]
        ]
      ],
      [
        [
          "rounded-ss",
          [
            "border-start-start-radius"
          ]
        ],
        [
          "rounded-se",
          [
            "border-start-end-radius"
          ]
        ],
        [
          "rounded-ee",
          [
            "border-end-end-radius"
          ]
        ],
        [
          "rounded-es",
          [
            "border-end-start-radius"
          ]
        ],
        [
          "rounded-tl",
          [
            "border-top-left-radius"
          ]
        ],
        [
          "rounded-tr",
          [
            "border-top-right-radius"
          ]
        ],
        [
          "rounded-br",
          [
            "border-bottom-right-radius"
          ]
        ],
        [
          "rounded-bl",
          [
            "border-bottom-left-radius"
          ]
        ]
      ]
    ]),
    borderWidth: createUtilityPlugin("borderWidth", [
      [
        "border",
        [
          [
            "@defaults border-width",
            {}
          ],
          "border-width"
        ]
      ],
      [
        [
          "border-x",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-left-width",
            "border-right-width"
          ]
        ],
        [
          "border-y",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-top-width",
            "border-bottom-width"
          ]
        ]
      ],
      [
        [
          "border-s",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-inline-start-width"
          ]
        ],
        [
          "border-e",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-inline-end-width"
          ]
        ],
        [
          "border-t",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-top-width"
          ]
        ],
        [
          "border-r",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-right-width"
          ]
        ],
        [
          "border-b",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-bottom-width"
          ]
        ],
        [
          "border-l",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-left-width"
          ]
        ]
      ]
    ], {
      type: [
        "line-width",
        "length"
      ]
    }),
    borderOpacity: createUtilityPlugin("borderOpacity", [
      [
        "border-opacity",
        [
          "--tw-border-opacity"
        ]
      ]
    ]),
    backgroundOpacity: createUtilityPlugin("backgroundOpacity", [
      [
        "bg-opacity",
        [
          "--tw-bg-opacity"
        ]
      ]
    ]),
    backgroundImage: createUtilityPlugin("backgroundImage", [
      [
        "bg",
        [
          "background-image"
        ]
      ]
    ], {
      type: [
        "lookup",
        "image",
        "url"
      ]
    }),
    backgroundSize: createUtilityPlugin("backgroundSize", [
      [
        "bg",
        [
          "background-size"
        ]
      ]
    ], {
      type: [
        "lookup",
        "length",
        "percentage",
        "size"
      ]
    }),
    backgroundPosition: createUtilityPlugin("backgroundPosition", [
      [
        "bg",
        [
          "background-position"
        ]
      ]
    ], {
      type: [
        "lookup",
        [
          "position",
          {
            preferOnConflict: true
          }
        ]
      ]
    }),
    strokeWidth: createUtilityPlugin("strokeWidth", [
      [
        "stroke",
        [
          "stroke-width"
        ]
      ]
    ], {
      type: [
        "length",
        "number",
        "percentage"
      ]
    }),
    objectPosition: createUtilityPlugin("objectPosition", [
      [
        "object",
        [
          "object-position"
        ]
      ]
    ]),
    padding: createUtilityPlugin("padding", [
      [
        "p",
        [
          "padding"
        ]
      ],
      [
        [
          "px",
          [
            "padding-left",
            "padding-right"
          ]
        ],
        [
          "py",
          [
            "padding-top",
            "padding-bottom"
          ]
        ]
      ],
      [
        [
          "ps",
          [
            "padding-inline-start"
          ]
        ],
        [
          "pe",
          [
            "padding-inline-end"
          ]
        ],
        [
          "pt",
          [
            "padding-top"
          ]
        ],
        [
          "pr",
          [
            "padding-right"
          ]
        ],
        [
          "pb",
          [
            "padding-bottom"
          ]
        ],
        [
          "pl",
          [
            "padding-left"
          ]
        ]
      ]
    ]),
    textIndent: createUtilityPlugin("textIndent", [
      [
        "indent",
        [
          "text-indent"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    fontWeight: createUtilityPlugin("fontWeight", [
      [
        "font",
        [
          "fontWeight"
        ]
      ]
    ], {
      type: [
        "lookup",
        "number",
        "any"
      ]
    }),
    lineHeight: createUtilityPlugin("lineHeight", [
      [
        "leading",
        [
          "lineHeight"
        ]
      ]
    ]),
    letterSpacing: createUtilityPlugin("letterSpacing", [
      [
        "tracking",
        [
          "letterSpacing"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    textOpacity: createUtilityPlugin("textOpacity", [
      [
        "text-opacity",
        [
          "--tw-text-opacity"
        ]
      ]
    ]),
    textDecorationThickness: createUtilityPlugin("textDecorationThickness", [
      [
        "decoration",
        [
          "text-decoration-thickness"
        ]
      ]
    ], {
      type: [
        "length",
        "percentage"
      ]
    }),
    textUnderlineOffset: createUtilityPlugin("textUnderlineOffset", [
      [
        "underline-offset",
        [
          "text-underline-offset"
        ]
      ]
    ], {
      type: [
        "length",
        "percentage",
        "any"
      ]
    }),
    opacity: createUtilityPlugin("opacity", [
      [
        "opacity",
        [
          "opacity"
        ]
      ]
    ]),
    outlineWidth: createUtilityPlugin("outlineWidth", [
      [
        "outline",
        [
          "outline-width"
        ]
      ]
    ], {
      type: [
        "length",
        "number",
        "percentage"
      ]
    }),
    outlineOffset: createUtilityPlugin("outlineOffset", [
      [
        "outline-offset",
        [
          "outline-offset"
        ]
      ]
    ], {
      type: [
        "length",
        "number",
        "percentage",
        "any"
      ],
      supportsNegativeValues: true
    }),
    ringOffsetWidth: createUtilityPlugin("ringOffsetWidth", [
      [
        "ring-offset",
        [
          "--tw-ring-offset-width"
        ]
      ]
    ], {
      type: "length"
    }),
    transitionDelay: createUtilityPlugin("transitionDelay", [
      [
        "delay",
        [
          "transitionDelay"
        ]
      ]
    ]),
    transitionDuration: createUtilityPlugin("transitionDuration", [
      [
        "duration",
        [
          "transitionDuration"
        ]
      ]
    ], {
      filterDefault: true
    }),
    transitionTimingFunction: createUtilityPlugin("transitionTimingFunction", [
      [
        "ease",
        [
          "transitionTimingFunction"
        ]
      ]
    ], {
      filterDefault: true
    }),
    willChange: createUtilityPlugin("willChange", [
      [
        "will-change",
        [
          "will-change"
        ]
      ]
    ]),
    content: createUtilityPlugin("content", [
      [
        "content",
        [
          "--tw-content",
          [
            "content",
            "var(--tw-content)"
          ]
        ]
      ]
    ])
  });
  let matchingBrackets = /* @__PURE__ */ new Map([
    [
      "{",
      "}"
    ],
    [
      "[",
      "]"
    ],
    [
      "(",
      ")"
    ]
  ]);
  let inverseMatchingBrackets = new Map(Array.from(matchingBrackets.entries()).map(([k3, v3]) => [
    v3,
    k3
  ]));
  let quotes = /* @__PURE__ */ new Set([
    '"',
    "'",
    "`"
  ]);
  function isSyntacticallyValidPropertyValue(value) {
    let stack = [];
    let inQuotes = false;
    for (let i3 = 0; i3 < value.length; i3++) {
      let char = value[i3];
      if (char === ":" && !inQuotes && stack.length === 0) {
        return false;
      }
      if (quotes.has(char) && value[i3 - 1] !== "\\") {
        inQuotes = !inQuotes;
      }
      if (inQuotes) continue;
      if (value[i3 - 1] === "\\") continue;
      if (matchingBrackets.has(char)) {
        stack.push(char);
      } else if (inverseMatchingBrackets.has(char)) {
        let inverse = inverseMatchingBrackets.get(char);
        if (stack.length <= 0) {
          return false;
        }
        if (stack.pop() !== inverse) {
          return false;
        }
      }
    }
    if (stack.length > 0) {
      return false;
    }
    return true;
  }
  var cryptoBrowserify = {};
  var browser$a = {
    exports: {}
  };
  var hasRequiredBrowser$a;
  function requireBrowser$a() {
    if (hasRequiredBrowser$a) return browser$a.exports;
    hasRequiredBrowser$a = 1;
    var MAX_BYTES = 65536;
    var MAX_UINT32 = 4294967295;
    function oldBrowser() {
      throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
    }
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
    if (crypto && crypto.getRandomValues) {
      browser$a.exports = randomBytes;
    } else {
      browser$a.exports = oldBrowser;
    }
    function randomBytes(size, cb) {
      if (size > MAX_UINT32) throw new RangeError("requested too many random bytes");
      var bytes = Buffer2.allocUnsafe(size);
      if (size > 0) {
        if (size > MAX_BYTES) {
          for (var generated = 0; generated < size; generated += MAX_BYTES) {
            crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
          }
        } else {
          crypto.getRandomValues(bytes);
        }
      }
      if (typeof cb === "function") {
        return process$1.nextTick(function() {
          cb(null, bytes);
        });
      }
      return bytes;
    }
    return browser$a.exports;
  }
  var hashBase;
  var hasRequiredHashBase;
  function requireHashBase() {
    if (hasRequiredHashBase) return hashBase;
    hasRequiredHashBase = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var Transform = requireStreamBrowserify().Transform;
    var inherits = requireInherits_browser();
    function HashBase(blockSize) {
      Transform.call(this);
      this._block = Buffer2.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [
        0,
        0,
        0,
        0
      ];
      this._finalized = false;
    }
    inherits(HashBase, Transform);
    HashBase.prototype._transform = function(chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype._flush = function(callback) {
      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    var useUint8Array = typeof Uint8Array !== "undefined";
    var useArrayBuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined" && ArrayBuffer.isView && (Buffer2.prototype instanceof Uint8Array || Buffer2.TYPED_ARRAY_SUPPORT);
    function toBuffer2(data, encoding) {
      if (data instanceof Buffer2) return data;
      if (typeof data === "string") return Buffer2.from(data, encoding);
      if (useArrayBuffer && ArrayBuffer.isView(data)) {
        if (data.byteLength === 0) return Buffer2.alloc(0);
        var res = Buffer2.from(data.buffer, data.byteOffset, data.byteLength);
        if (res.byteLength === data.byteLength) return res;
      }
      if (useUint8Array && data instanceof Uint8Array) return Buffer2.from(data);
      if (Buffer2.isBuffer(data) && data.constructor && typeof data.constructor.isBuffer === "function" && data.constructor.isBuffer(data)) {
        return Buffer2.from(data);
      }
      throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
    }
    HashBase.prototype.update = function(data, encoding) {
      if (this._finalized) throw new Error("Digest already called");
      data = toBuffer2(data, encoding);
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i3 = this._blockOffset; i3 < this._blockSize; ) block[i3++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++];
      for (var j3 = 0, carry = data.length * 8; carry > 0; ++j3) {
        this._length[j3] += carry;
        carry = this._length[j3] / 4294967296 | 0;
        if (carry > 0) this._length[j3] -= 4294967296 * carry;
      }
      return this;
    };
    HashBase.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    HashBase.prototype.digest = function(encoding) {
      if (this._finalized) throw new Error("Digest already called");
      this._finalized = true;
      var digest = this._digest();
      if (encoding !== void 0) digest = digest.toString(encoding);
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i3 = 0; i3 < 4; ++i3) this._length[i3] = 0;
      return digest;
    };
    HashBase.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    hashBase = HashBase;
    return hashBase;
  }
  var md5_js;
  var hasRequiredMd5_js;
  function requireMd5_js() {
    if (hasRequiredMd5_js) return md5_js;
    hasRequiredMd5_js = 1;
    var inherits = requireInherits_browser();
    var HashBase = requireHashBase();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var ARRAY16 = new Array(16);
    function MD5() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
    }
    inherits(MD5, HashBase);
    MD5.prototype._update = function() {
      var M3 = ARRAY16;
      for (var i3 = 0; i3 < 16; ++i3) M3[i3] = this._block.readInt32LE(i3 * 4);
      var a3 = this._a;
      var b3 = this._b;
      var c3 = this._c;
      var d3 = this._d;
      a3 = fnF(a3, b3, c3, d3, M3[0], 3614090360, 7);
      d3 = fnF(d3, a3, b3, c3, M3[1], 3905402710, 12);
      c3 = fnF(c3, d3, a3, b3, M3[2], 606105819, 17);
      b3 = fnF(b3, c3, d3, a3, M3[3], 3250441966, 22);
      a3 = fnF(a3, b3, c3, d3, M3[4], 4118548399, 7);
      d3 = fnF(d3, a3, b3, c3, M3[5], 1200080426, 12);
      c3 = fnF(c3, d3, a3, b3, M3[6], 2821735955, 17);
      b3 = fnF(b3, c3, d3, a3, M3[7], 4249261313, 22);
      a3 = fnF(a3, b3, c3, d3, M3[8], 1770035416, 7);
      d3 = fnF(d3, a3, b3, c3, M3[9], 2336552879, 12);
      c3 = fnF(c3, d3, a3, b3, M3[10], 4294925233, 17);
      b3 = fnF(b3, c3, d3, a3, M3[11], 2304563134, 22);
      a3 = fnF(a3, b3, c3, d3, M3[12], 1804603682, 7);
      d3 = fnF(d3, a3, b3, c3, M3[13], 4254626195, 12);
      c3 = fnF(c3, d3, a3, b3, M3[14], 2792965006, 17);
      b3 = fnF(b3, c3, d3, a3, M3[15], 1236535329, 22);
      a3 = fnG(a3, b3, c3, d3, M3[1], 4129170786, 5);
      d3 = fnG(d3, a3, b3, c3, M3[6], 3225465664, 9);
      c3 = fnG(c3, d3, a3, b3, M3[11], 643717713, 14);
      b3 = fnG(b3, c3, d3, a3, M3[0], 3921069994, 20);
      a3 = fnG(a3, b3, c3, d3, M3[5], 3593408605, 5);
      d3 = fnG(d3, a3, b3, c3, M3[10], 38016083, 9);
      c3 = fnG(c3, d3, a3, b3, M3[15], 3634488961, 14);
      b3 = fnG(b3, c3, d3, a3, M3[4], 3889429448, 20);
      a3 = fnG(a3, b3, c3, d3, M3[9], 568446438, 5);
      d3 = fnG(d3, a3, b3, c3, M3[14], 3275163606, 9);
      c3 = fnG(c3, d3, a3, b3, M3[3], 4107603335, 14);
      b3 = fnG(b3, c3, d3, a3, M3[8], 1163531501, 20);
      a3 = fnG(a3, b3, c3, d3, M3[13], 2850285829, 5);
      d3 = fnG(d3, a3, b3, c3, M3[2], 4243563512, 9);
      c3 = fnG(c3, d3, a3, b3, M3[7], 1735328473, 14);
      b3 = fnG(b3, c3, d3, a3, M3[12], 2368359562, 20);
      a3 = fnH(a3, b3, c3, d3, M3[5], 4294588738, 4);
      d3 = fnH(d3, a3, b3, c3, M3[8], 2272392833, 11);
      c3 = fnH(c3, d3, a3, b3, M3[11], 1839030562, 16);
      b3 = fnH(b3, c3, d3, a3, M3[14], 4259657740, 23);
      a3 = fnH(a3, b3, c3, d3, M3[1], 2763975236, 4);
      d3 = fnH(d3, a3, b3, c3, M3[4], 1272893353, 11);
      c3 = fnH(c3, d3, a3, b3, M3[7], 4139469664, 16);
      b3 = fnH(b3, c3, d3, a3, M3[10], 3200236656, 23);
      a3 = fnH(a3, b3, c3, d3, M3[13], 681279174, 4);
      d3 = fnH(d3, a3, b3, c3, M3[0], 3936430074, 11);
      c3 = fnH(c3, d3, a3, b3, M3[3], 3572445317, 16);
      b3 = fnH(b3, c3, d3, a3, M3[6], 76029189, 23);
      a3 = fnH(a3, b3, c3, d3, M3[9], 3654602809, 4);
      d3 = fnH(d3, a3, b3, c3, M3[12], 3873151461, 11);
      c3 = fnH(c3, d3, a3, b3, M3[15], 530742520, 16);
      b3 = fnH(b3, c3, d3, a3, M3[2], 3299628645, 23);
      a3 = fnI(a3, b3, c3, d3, M3[0], 4096336452, 6);
      d3 = fnI(d3, a3, b3, c3, M3[7], 1126891415, 10);
      c3 = fnI(c3, d3, a3, b3, M3[14], 2878612391, 15);
      b3 = fnI(b3, c3, d3, a3, M3[5], 4237533241, 21);
      a3 = fnI(a3, b3, c3, d3, M3[12], 1700485571, 6);
      d3 = fnI(d3, a3, b3, c3, M3[3], 2399980690, 10);
      c3 = fnI(c3, d3, a3, b3, M3[10], 4293915773, 15);
      b3 = fnI(b3, c3, d3, a3, M3[1], 2240044497, 21);
      a3 = fnI(a3, b3, c3, d3, M3[8], 1873313359, 6);
      d3 = fnI(d3, a3, b3, c3, M3[15], 4264355552, 10);
      c3 = fnI(c3, d3, a3, b3, M3[6], 2734768916, 15);
      b3 = fnI(b3, c3, d3, a3, M3[13], 1309151649, 21);
      a3 = fnI(a3, b3, c3, d3, M3[4], 4149444226, 6);
      d3 = fnI(d3, a3, b3, c3, M3[11], 3174756917, 10);
      c3 = fnI(c3, d3, a3, b3, M3[2], 718787259, 15);
      b3 = fnI(b3, c3, d3, a3, M3[9], 3951481745, 21);
      this._a = this._a + a3 | 0;
      this._b = this._b + b3 | 0;
      this._c = this._c + c3 | 0;
      this._d = this._d + d3 | 0;
    };
    MD5.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer2 = Buffer2.allocUnsafe(16);
      buffer2.writeInt32LE(this._a, 0);
      buffer2.writeInt32LE(this._b, 4);
      buffer2.writeInt32LE(this._c, 8);
      buffer2.writeInt32LE(this._d, 12);
      return buffer2;
    };
    function rotl(x3, n3) {
      return x3 << n3 | x3 >>> 32 - n3;
    }
    function fnF(a3, b3, c3, d3, m3, k3, s3) {
      return rotl(a3 + (b3 & c3 | ~b3 & d3) + m3 + k3 | 0, s3) + b3 | 0;
    }
    function fnG(a3, b3, c3, d3, m3, k3, s3) {
      return rotl(a3 + (b3 & d3 | c3 & ~d3) + m3 + k3 | 0, s3) + b3 | 0;
    }
    function fnH(a3, b3, c3, d3, m3, k3, s3) {
      return rotl(a3 + (b3 ^ c3 ^ d3) + m3 + k3 | 0, s3) + b3 | 0;
    }
    function fnI(a3, b3, c3, d3, m3, k3, s3) {
      return rotl(a3 + (c3 ^ (b3 | ~d3)) + m3 + k3 | 0, s3) + b3 | 0;
    }
    md5_js = MD5;
    return md5_js;
  }
  var ripemd160;
  var hasRequiredRipemd160;
  function requireRipemd160() {
    if (hasRequiredRipemd160) return ripemd160;
    hasRequiredRipemd160 = 1;
    var Buffer2 = requireDist$2().Buffer;
    var inherits = requireInherits_browser();
    var HashBase = requireHashBase();
    var ARRAY16 = new Array(16);
    var zl = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var zr2 = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var sl = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sr2 = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
    var hl = [
      0,
      1518500249,
      1859775393,
      2400959708,
      2840853838
    ];
    var hr2 = [
      1352829926,
      1548603684,
      1836072691,
      2053994217,
      0
    ];
    function RIPEMD160() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
    }
    inherits(RIPEMD160, HashBase);
    RIPEMD160.prototype._update = function() {
      var words = ARRAY16;
      for (var j3 = 0; j3 < 16; ++j3) words[j3] = this._block.readInt32LE(j3 * 4);
      var al = this._a | 0;
      var bl = this._b | 0;
      var cl = this._c | 0;
      var dl = this._d | 0;
      var el = this._e | 0;
      var ar2 = this._a | 0;
      var br2 = this._b | 0;
      var cr2 = this._c | 0;
      var dr2 = this._d | 0;
      var er2 = this._e | 0;
      for (var i3 = 0; i3 < 80; i3 += 1) {
        var tl;
        var tr2;
        if (i3 < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i3]], hl[0], sl[i3]);
          tr2 = fn5(ar2, br2, cr2, dr2, er2, words[zr2[i3]], hr2[0], sr2[i3]);
        } else if (i3 < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i3]], hl[1], sl[i3]);
          tr2 = fn4(ar2, br2, cr2, dr2, er2, words[zr2[i3]], hr2[1], sr2[i3]);
        } else if (i3 < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i3]], hl[2], sl[i3]);
          tr2 = fn3(ar2, br2, cr2, dr2, er2, words[zr2[i3]], hr2[2], sr2[i3]);
        } else if (i3 < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i3]], hl[3], sl[i3]);
          tr2 = fn2(ar2, br2, cr2, dr2, er2, words[zr2[i3]], hr2[3], sr2[i3]);
        } else {
          tl = fn5(al, bl, cl, dl, el, words[zl[i3]], hl[4], sl[i3]);
          tr2 = fn1(ar2, br2, cr2, dr2, er2, words[zr2[i3]], hr2[4], sr2[i3]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar2 = er2;
        er2 = dr2;
        dr2 = rotl(cr2, 10);
        cr2 = br2;
        br2 = tr2;
      }
      var t3 = this._b + cl + dr2 | 0;
      this._b = this._c + dl + er2 | 0;
      this._c = this._d + el + ar2 | 0;
      this._d = this._e + al + br2 | 0;
      this._e = this._a + bl + cr2 | 0;
      this._a = t3;
    };
    RIPEMD160.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer2 = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);
      buffer2.writeInt32LE(this._a, 0);
      buffer2.writeInt32LE(this._b, 4);
      buffer2.writeInt32LE(this._c, 8);
      buffer2.writeInt32LE(this._d, 12);
      buffer2.writeInt32LE(this._e, 16);
      return buffer2;
    };
    function rotl(x3, n3) {
      return x3 << n3 | x3 >>> 32 - n3;
    }
    function fn1(a3, b3, c3, d3, e3, m3, k3, s3) {
      return rotl(a3 + (b3 ^ c3 ^ d3) + m3 + k3 | 0, s3) + e3 | 0;
    }
    function fn2(a3, b3, c3, d3, e3, m3, k3, s3) {
      return rotl(a3 + (b3 & c3 | ~b3 & d3) + m3 + k3 | 0, s3) + e3 | 0;
    }
    function fn3(a3, b3, c3, d3, e3, m3, k3, s3) {
      return rotl(a3 + ((b3 | ~c3) ^ d3) + m3 + k3 | 0, s3) + e3 | 0;
    }
    function fn4(a3, b3, c3, d3, e3, m3, k3, s3) {
      return rotl(a3 + (b3 & d3 | c3 & ~d3) + m3 + k3 | 0, s3) + e3 | 0;
    }
    function fn5(a3, b3, c3, d3, e3, m3, k3, s3) {
      return rotl(a3 + (b3 ^ (c3 | ~d3)) + m3 + k3 | 0, s3) + e3 | 0;
    }
    ripemd160 = RIPEMD160;
    return ripemd160;
  }
  var sha_js = {
    exports: {}
  };
  var hash$1;
  var hasRequiredHash$1;
  function requireHash$1() {
    if (hasRequiredHash$1) return hash$1;
    hasRequiredHash$1 = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function Hash(blockSize, finalSize) {
      this._block = Buffer2.alloc(blockSize);
      this._finalSize = finalSize;
      this._blockSize = blockSize;
      this._len = 0;
    }
    Hash.prototype.update = function(data, enc) {
      if (typeof data === "string") {
        enc = enc || "utf8";
        data = Buffer2.from(data, enc);
      }
      var block = this._block;
      var blockSize = this._blockSize;
      var length2 = data.length;
      var accum = this._len;
      for (var offset = 0; offset < length2; ) {
        var assigned = accum % blockSize;
        var remainder = Math.min(length2 - offset, blockSize - assigned);
        for (var i3 = 0; i3 < remainder; i3++) {
          block[assigned + i3] = data[offset + i3];
        }
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) {
          this._update(block);
        }
      }
      this._len += length2;
      return this;
    };
    Hash.prototype.digest = function(enc) {
      var rem = this._len % this._blockSize;
      this._block[rem] = 128;
      this._block.fill(0, rem + 1);
      if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
      }
      var bits = this._len * 8;
      if (bits <= 4294967295) {
        this._block.writeUInt32BE(bits, this._blockSize - 4);
      } else {
        var lowBits = (bits & 4294967295) >>> 0;
        var highBits = (bits - lowBits) / 4294967296;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
      }
      this._update(this._block);
      var hash2 = this._hash();
      return enc ? hash2.toString(enc) : hash2;
    };
    Hash.prototype._update = function() {
      throw new Error("_update must be implemented by subclass");
    };
    hash$1 = Hash;
    return hash$1;
  }
  var sha$1;
  var hasRequiredSha$1;
  function requireSha$1() {
    if (hasRequiredSha$1) return sha$1;
    hasRequiredSha$1 = 1;
    var inherits = requireInherits_browser();
    var Hash = requireHash$1();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var K3 = [
      1518500249,
      1859775393,
      2400959708 | 0,
      3395469782 | 0
    ];
    var W3 = new Array(80);
    function Sha() {
      this.init();
      this._w = W3;
      Hash.call(this, 64, 56);
    }
    inherits(Sha, Hash);
    Sha.prototype.init = function() {
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
      return this;
    };
    function rotl5(num) {
      return num << 5 | num >>> 27;
    }
    function rotl30(num) {
      return num << 30 | num >>> 2;
    }
    function ft2(s3, b3, c3, d3) {
      if (s3 === 0) return b3 & c3 | ~b3 & d3;
      if (s3 === 2) return b3 & c3 | b3 & d3 | c3 & d3;
      return b3 ^ c3 ^ d3;
    }
    Sha.prototype._update = function(M3) {
      var W4 = this._w;
      var a3 = this._a | 0;
      var b3 = this._b | 0;
      var c3 = this._c | 0;
      var d3 = this._d | 0;
      var e3 = this._e | 0;
      for (var i3 = 0; i3 < 16; ++i3) W4[i3] = M3.readInt32BE(i3 * 4);
      for (; i3 < 80; ++i3) W4[i3] = W4[i3 - 3] ^ W4[i3 - 8] ^ W4[i3 - 14] ^ W4[i3 - 16];
      for (var j3 = 0; j3 < 80; ++j3) {
        var s3 = ~~(j3 / 20);
        var t3 = rotl5(a3) + ft2(s3, b3, c3, d3) + e3 + W4[j3] + K3[s3] | 0;
        e3 = d3;
        d3 = c3;
        c3 = rotl30(b3);
        b3 = a3;
        a3 = t3;
      }
      this._a = a3 + this._a | 0;
      this._b = b3 + this._b | 0;
      this._c = c3 + this._c | 0;
      this._d = d3 + this._d | 0;
      this._e = e3 + this._e | 0;
    };
    Sha.prototype._hash = function() {
      var H3 = Buffer2.allocUnsafe(20);
      H3.writeInt32BE(this._a | 0, 0);
      H3.writeInt32BE(this._b | 0, 4);
      H3.writeInt32BE(this._c | 0, 8);
      H3.writeInt32BE(this._d | 0, 12);
      H3.writeInt32BE(this._e | 0, 16);
      return H3;
    };
    sha$1 = Sha;
    return sha$1;
  }
  var sha1;
  var hasRequiredSha1;
  function requireSha1() {
    if (hasRequiredSha1) return sha1;
    hasRequiredSha1 = 1;
    var inherits = requireInherits_browser();
    var Hash = requireHash$1();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var K3 = [
      1518500249,
      1859775393,
      2400959708 | 0,
      3395469782 | 0
    ];
    var W3 = new Array(80);
    function Sha1() {
      this.init();
      this._w = W3;
      Hash.call(this, 64, 56);
    }
    inherits(Sha1, Hash);
    Sha1.prototype.init = function() {
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
      return this;
    };
    function rotl1(num) {
      return num << 1 | num >>> 31;
    }
    function rotl5(num) {
      return num << 5 | num >>> 27;
    }
    function rotl30(num) {
      return num << 30 | num >>> 2;
    }
    function ft2(s3, b3, c3, d3) {
      if (s3 === 0) return b3 & c3 | ~b3 & d3;
      if (s3 === 2) return b3 & c3 | b3 & d3 | c3 & d3;
      return b3 ^ c3 ^ d3;
    }
    Sha1.prototype._update = function(M3) {
      var W4 = this._w;
      var a3 = this._a | 0;
      var b3 = this._b | 0;
      var c3 = this._c | 0;
      var d3 = this._d | 0;
      var e3 = this._e | 0;
      for (var i3 = 0; i3 < 16; ++i3) W4[i3] = M3.readInt32BE(i3 * 4);
      for (; i3 < 80; ++i3) W4[i3] = rotl1(W4[i3 - 3] ^ W4[i3 - 8] ^ W4[i3 - 14] ^ W4[i3 - 16]);
      for (var j3 = 0; j3 < 80; ++j3) {
        var s3 = ~~(j3 / 20);
        var t3 = rotl5(a3) + ft2(s3, b3, c3, d3) + e3 + W4[j3] + K3[s3] | 0;
        e3 = d3;
        d3 = c3;
        c3 = rotl30(b3);
        b3 = a3;
        a3 = t3;
      }
      this._a = a3 + this._a | 0;
      this._b = b3 + this._b | 0;
      this._c = c3 + this._c | 0;
      this._d = d3 + this._d | 0;
      this._e = e3 + this._e | 0;
    };
    Sha1.prototype._hash = function() {
      var H3 = Buffer2.allocUnsafe(20);
      H3.writeInt32BE(this._a | 0, 0);
      H3.writeInt32BE(this._b | 0, 4);
      H3.writeInt32BE(this._c | 0, 8);
      H3.writeInt32BE(this._d | 0, 12);
      H3.writeInt32BE(this._e | 0, 16);
      return H3;
    };
    sha1 = Sha1;
    return sha1;
  }
  var sha256$1;
  var hasRequiredSha256;
  function requireSha256() {
    if (hasRequiredSha256) return sha256$1;
    hasRequiredSha256 = 1;
    var inherits = requireInherits_browser();
    var Hash = requireHash$1();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var K3 = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    var W3 = new Array(64);
    function Sha256() {
      this.init();
      this._w = W3;
      Hash.call(this, 64, 56);
    }
    inherits(Sha256, Hash);
    Sha256.prototype.init = function() {
      this._a = 1779033703;
      this._b = 3144134277;
      this._c = 1013904242;
      this._d = 2773480762;
      this._e = 1359893119;
      this._f = 2600822924;
      this._g = 528734635;
      this._h = 1541459225;
      return this;
    };
    function ch(x3, y3, z3) {
      return z3 ^ x3 & (y3 ^ z3);
    }
    function maj(x3, y3, z3) {
      return x3 & y3 | z3 & (x3 | y3);
    }
    function sigma0(x3) {
      return (x3 >>> 2 | x3 << 30) ^ (x3 >>> 13 | x3 << 19) ^ (x3 >>> 22 | x3 << 10);
    }
    function sigma1(x3) {
      return (x3 >>> 6 | x3 << 26) ^ (x3 >>> 11 | x3 << 21) ^ (x3 >>> 25 | x3 << 7);
    }
    function gamma0(x3) {
      return (x3 >>> 7 | x3 << 25) ^ (x3 >>> 18 | x3 << 14) ^ x3 >>> 3;
    }
    function gamma1(x3) {
      return (x3 >>> 17 | x3 << 15) ^ (x3 >>> 19 | x3 << 13) ^ x3 >>> 10;
    }
    Sha256.prototype._update = function(M3) {
      var W4 = this._w;
      var a3 = this._a | 0;
      var b3 = this._b | 0;
      var c3 = this._c | 0;
      var d3 = this._d | 0;
      var e3 = this._e | 0;
      var f3 = this._f | 0;
      var g3 = this._g | 0;
      var h3 = this._h | 0;
      for (var i3 = 0; i3 < 16; ++i3) W4[i3] = M3.readInt32BE(i3 * 4);
      for (; i3 < 64; ++i3) W4[i3] = gamma1(W4[i3 - 2]) + W4[i3 - 7] + gamma0(W4[i3 - 15]) + W4[i3 - 16] | 0;
      for (var j3 = 0; j3 < 64; ++j3) {
        var T1 = h3 + sigma1(e3) + ch(e3, f3, g3) + K3[j3] + W4[j3] | 0;
        var T22 = sigma0(a3) + maj(a3, b3, c3) | 0;
        h3 = g3;
        g3 = f3;
        f3 = e3;
        e3 = d3 + T1 | 0;
        d3 = c3;
        c3 = b3;
        b3 = a3;
        a3 = T1 + T22 | 0;
      }
      this._a = a3 + this._a | 0;
      this._b = b3 + this._b | 0;
      this._c = c3 + this._c | 0;
      this._d = d3 + this._d | 0;
      this._e = e3 + this._e | 0;
      this._f = f3 + this._f | 0;
      this._g = g3 + this._g | 0;
      this._h = h3 + this._h | 0;
    };
    Sha256.prototype._hash = function() {
      var H3 = Buffer2.allocUnsafe(32);
      H3.writeInt32BE(this._a, 0);
      H3.writeInt32BE(this._b, 4);
      H3.writeInt32BE(this._c, 8);
      H3.writeInt32BE(this._d, 12);
      H3.writeInt32BE(this._e, 16);
      H3.writeInt32BE(this._f, 20);
      H3.writeInt32BE(this._g, 24);
      H3.writeInt32BE(this._h, 28);
      return H3;
    };
    sha256$1 = Sha256;
    return sha256$1;
  }
  var sha224$1;
  var hasRequiredSha224;
  function requireSha224() {
    if (hasRequiredSha224) return sha224$1;
    hasRequiredSha224 = 1;
    var inherits = requireInherits_browser();
    var Sha256 = requireSha256();
    var Hash = requireHash$1();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var W3 = new Array(64);
    function Sha224() {
      this.init();
      this._w = W3;
      Hash.call(this, 64, 56);
    }
    inherits(Sha224, Sha256);
    Sha224.prototype.init = function() {
      this._a = 3238371032;
      this._b = 914150663;
      this._c = 812702999;
      this._d = 4144912697;
      this._e = 4290775857;
      this._f = 1750603025;
      this._g = 1694076839;
      this._h = 3204075428;
      return this;
    };
    Sha224.prototype._hash = function() {
      var H3 = Buffer2.allocUnsafe(28);
      H3.writeInt32BE(this._a, 0);
      H3.writeInt32BE(this._b, 4);
      H3.writeInt32BE(this._c, 8);
      H3.writeInt32BE(this._d, 12);
      H3.writeInt32BE(this._e, 16);
      H3.writeInt32BE(this._f, 20);
      H3.writeInt32BE(this._g, 24);
      return H3;
    };
    sha224$1 = Sha224;
    return sha224$1;
  }
  var sha512$1;
  var hasRequiredSha512;
  function requireSha512() {
    if (hasRequiredSha512) return sha512$1;
    hasRequiredSha512 = 1;
    var inherits = requireInherits_browser();
    var Hash = requireHash$1();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var K3 = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    var W3 = new Array(160);
    function Sha512() {
      this.init();
      this._w = W3;
      Hash.call(this, 128, 112);
    }
    inherits(Sha512, Hash);
    Sha512.prototype.init = function() {
      this._ah = 1779033703;
      this._bh = 3144134277;
      this._ch = 1013904242;
      this._dh = 2773480762;
      this._eh = 1359893119;
      this._fh = 2600822924;
      this._gh = 528734635;
      this._hh = 1541459225;
      this._al = 4089235720;
      this._bl = 2227873595;
      this._cl = 4271175723;
      this._dl = 1595750129;
      this._el = 2917565137;
      this._fl = 725511199;
      this._gl = 4215389547;
      this._hl = 327033209;
      return this;
    };
    function Ch(x3, y3, z3) {
      return z3 ^ x3 & (y3 ^ z3);
    }
    function maj(x3, y3, z3) {
      return x3 & y3 | z3 & (x3 | y3);
    }
    function sigma0(x3, xl) {
      return (x3 >>> 28 | xl << 4) ^ (xl >>> 2 | x3 << 30) ^ (xl >>> 7 | x3 << 25);
    }
    function sigma1(x3, xl) {
      return (x3 >>> 14 | xl << 18) ^ (x3 >>> 18 | xl << 14) ^ (xl >>> 9 | x3 << 23);
    }
    function Gamma0(x3, xl) {
      return (x3 >>> 1 | xl << 31) ^ (x3 >>> 8 | xl << 24) ^ x3 >>> 7;
    }
    function Gamma0l(x3, xl) {
      return (x3 >>> 1 | xl << 31) ^ (x3 >>> 8 | xl << 24) ^ (x3 >>> 7 | xl << 25);
    }
    function Gamma1(x3, xl) {
      return (x3 >>> 19 | xl << 13) ^ (xl >>> 29 | x3 << 3) ^ x3 >>> 6;
    }
    function Gamma1l(x3, xl) {
      return (x3 >>> 19 | xl << 13) ^ (xl >>> 29 | x3 << 3) ^ (x3 >>> 6 | xl << 26);
    }
    function getCarry(a3, b3) {
      return a3 >>> 0 < b3 >>> 0 ? 1 : 0;
    }
    Sha512.prototype._update = function(M3) {
      var W4 = this._w;
      var ah = this._ah | 0;
      var bh = this._bh | 0;
      var ch = this._ch | 0;
      var dh2 = this._dh | 0;
      var eh = this._eh | 0;
      var fh = this._fh | 0;
      var gh = this._gh | 0;
      var hh = this._hh | 0;
      var al = this._al | 0;
      var bl = this._bl | 0;
      var cl = this._cl | 0;
      var dl = this._dl | 0;
      var el = this._el | 0;
      var fl = this._fl | 0;
      var gl = this._gl | 0;
      var hl = this._hl | 0;
      for (var i3 = 0; i3 < 32; i3 += 2) {
        W4[i3] = M3.readInt32BE(i3 * 4);
        W4[i3 + 1] = M3.readInt32BE(i3 * 4 + 4);
      }
      for (; i3 < 160; i3 += 2) {
        var xh = W4[i3 - 15 * 2];
        var xl = W4[i3 - 15 * 2 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W4[i3 - 2 * 2];
        xl = W4[i3 - 2 * 2 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        var Wi7h = W4[i3 - 7 * 2];
        var Wi7l = W4[i3 - 7 * 2 + 1];
        var Wi16h = W4[i3 - 16 * 2];
        var Wi16l = W4[i3 - 16 * 2 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W4[i3] = Wih;
        W4[i3 + 1] = Wil;
      }
      for (var j3 = 0; j3 < 160; j3 += 2) {
        Wih = W4[j3];
        Wil = W4[j3 + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        var Kih = K3[j3];
        var Kil = K3[j3 + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh2 + t1h + getCarry(el, dl) | 0;
        dh2 = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
      }
      this._al = this._al + al | 0;
      this._bl = this._bl + bl | 0;
      this._cl = this._cl + cl | 0;
      this._dl = this._dl + dl | 0;
      this._el = this._el + el | 0;
      this._fl = this._fl + fl | 0;
      this._gl = this._gl + gl | 0;
      this._hl = this._hl + hl | 0;
      this._ah = this._ah + ah + getCarry(this._al, al) | 0;
      this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
      this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
      this._dh = this._dh + dh2 + getCarry(this._dl, dl) | 0;
      this._eh = this._eh + eh + getCarry(this._el, el) | 0;
      this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
      this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
      this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
    };
    Sha512.prototype._hash = function() {
      var H3 = Buffer2.allocUnsafe(64);
      function writeInt64BE(h3, l3, offset) {
        H3.writeInt32BE(h3, offset);
        H3.writeInt32BE(l3, offset + 4);
      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      writeInt64BE(this._gh, this._gl, 48);
      writeInt64BE(this._hh, this._hl, 56);
      return H3;
    };
    sha512$1 = Sha512;
    return sha512$1;
  }
  var sha384$1;
  var hasRequiredSha384;
  function requireSha384() {
    if (hasRequiredSha384) return sha384$1;
    hasRequiredSha384 = 1;
    var inherits = requireInherits_browser();
    var SHA512 = requireSha512();
    var Hash = requireHash$1();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var W3 = new Array(160);
    function Sha384() {
      this.init();
      this._w = W3;
      Hash.call(this, 128, 112);
    }
    inherits(Sha384, SHA512);
    Sha384.prototype.init = function() {
      this._ah = 3418070365;
      this._bh = 1654270250;
      this._ch = 2438529370;
      this._dh = 355462360;
      this._eh = 1731405415;
      this._fh = 2394180231;
      this._gh = 3675008525;
      this._hh = 1203062813;
      this._al = 3238371032;
      this._bl = 914150663;
      this._cl = 812702999;
      this._dl = 4144912697;
      this._el = 4290775857;
      this._fl = 1750603025;
      this._gl = 1694076839;
      this._hl = 3204075428;
      return this;
    };
    Sha384.prototype._hash = function() {
      var H3 = Buffer2.allocUnsafe(48);
      function writeInt64BE(h3, l3, offset) {
        H3.writeInt32BE(h3, offset);
        H3.writeInt32BE(l3, offset + 4);
      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      return H3;
    };
    sha384$1 = Sha384;
    return sha384$1;
  }
  var hasRequiredSha_js;
  function requireSha_js() {
    if (hasRequiredSha_js) return sha_js.exports;
    hasRequiredSha_js = 1;
    var exports2 = sha_js.exports = function SHA(algorithm) {
      algorithm = algorithm.toLowerCase();
      var Algorithm = exports2[algorithm];
      if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
      return new Algorithm();
    };
    exports2.sha = requireSha$1();
    exports2.sha1 = requireSha1();
    exports2.sha224 = requireSha224();
    exports2.sha256 = requireSha256();
    exports2.sha384 = requireSha384();
    exports2.sha512 = requireSha512();
    return sha_js.exports;
  }
  var cipherBase;
  var hasRequiredCipherBase;
  function requireCipherBase() {
    if (hasRequiredCipherBase) return cipherBase;
    hasRequiredCipherBase = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var Transform = requireStreamBrowserify().Transform;
    var StringDecoder = requireString_decoder().StringDecoder;
    var inherits = requireInherits_browser();
    function CipherBase(hashMode) {
      Transform.call(this);
      this.hashMode = typeof hashMode === "string";
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest;
      } else {
        this["final"] = this._finalOrDigest;
      }
      if (this._final) {
        this.__final = this._final;
        this._final = null;
      }
      this._decoder = null;
      this._encoding = null;
    }
    inherits(CipherBase, Transform);
    var useUint8Array = typeof Uint8Array !== "undefined";
    var useArrayBuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined" && ArrayBuffer.isView && (Buffer2.prototype instanceof Uint8Array || Buffer2.TYPED_ARRAY_SUPPORT);
    function toBuffer2(data, encoding) {
      if (data instanceof Buffer2) {
        return data;
      }
      if (typeof data === "string") {
        return Buffer2.from(data, encoding);
      }
      if (useArrayBuffer && ArrayBuffer.isView(data)) {
        if (data.byteLength === 0) {
          return Buffer2.alloc(0);
        }
        var res = Buffer2.from(data.buffer, data.byteOffset, data.byteLength);
        if (res.byteLength === data.byteLength) {
          return res;
        }
      }
      if (useUint8Array && data instanceof Uint8Array) {
        return Buffer2.from(data);
      }
      if (Buffer2.isBuffer(data) && data.constructor && typeof data.constructor.isBuffer === "function" && data.constructor.isBuffer(data)) {
        return Buffer2.from(data);
      }
      throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
    }
    CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
      var bufferData = toBuffer2(data, inputEnc);
      var outData = this._update(bufferData);
      if (this.hashMode) {
        return this;
      }
      if (outputEnc) {
        outData = this._toString(outData, outputEnc);
      }
      return outData;
    };
    CipherBase.prototype.setAutoPadding = function() {
    };
    CipherBase.prototype.getAuthTag = function() {
      throw new Error("trying to get auth tag in unsupported state");
    };
    CipherBase.prototype.setAuthTag = function() {
      throw new Error("trying to set auth tag in unsupported state");
    };
    CipherBase.prototype.setAAD = function() {
      throw new Error("trying to set aad in unsupported state");
    };
    CipherBase.prototype._transform = function(data, _3, next) {
      var err;
      try {
        if (this.hashMode) {
          this._update(data);
        } else {
          this.push(this._update(data));
        }
      } catch (e3) {
        err = e3;
      } finally {
        next(err);
      }
    };
    CipherBase.prototype._flush = function(done) {
      var err;
      try {
        this.push(this.__final());
      } catch (e3) {
        err = e3;
      }
      done(err);
    };
    CipherBase.prototype._finalOrDigest = function(outputEnc) {
      var outData = this.__final() || Buffer2.alloc(0);
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true);
      }
      return outData;
    };
    CipherBase.prototype._toString = function(value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
      }
      if (this._encoding !== enc) {
        throw new Error("can\u2019t switch encodings");
      }
      var out = this._decoder.write(value);
      if (fin) {
        out += this._decoder.end();
      }
      return out;
    };
    cipherBase = CipherBase;
    return cipherBase;
  }
  var browser$9;
  var hasRequiredBrowser$9;
  function requireBrowser$9() {
    if (hasRequiredBrowser$9) return browser$9;
    hasRequiredBrowser$9 = 1;
    var inherits = requireInherits_browser();
    var MD5 = requireMd5_js();
    var RIPEMD160 = requireRipemd160();
    var sha2 = requireSha_js();
    var Base = requireCipherBase();
    function Hash(hash2) {
      Base.call(this, "digest");
      this._hash = hash2;
    }
    inherits(Hash, Base);
    Hash.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hash.prototype._final = function() {
      return this._hash.digest();
    };
    browser$9 = function createHash(alg) {
      alg = alg.toLowerCase();
      if (alg === "md5") return new MD5();
      if (alg === "rmd160" || alg === "ripemd160") return new RIPEMD160();
      return new Hash(sha2(alg));
    };
    return browser$9;
  }
  var legacy;
  var hasRequiredLegacy;
  function requireLegacy() {
    if (hasRequiredLegacy) return legacy;
    hasRequiredLegacy = 1;
    var inherits = requireInherits_browser();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var Base = requireCipherBase();
    var ZEROS = Buffer2.alloc(128);
    var blocksize = 64;
    function Hmac(alg, key2) {
      Base.call(this, "digest");
      if (typeof key2 === "string") {
        key2 = Buffer2.from(key2);
      }
      this._alg = alg;
      this._key = key2;
      if (key2.length > blocksize) {
        key2 = alg(key2);
      } else if (key2.length < blocksize) {
        key2 = Buffer2.concat([
          key2,
          ZEROS
        ], blocksize);
      }
      var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
      var opad = this._opad = Buffer2.allocUnsafe(blocksize);
      for (var i3 = 0; i3 < blocksize; i3++) {
        ipad[i3] = key2[i3] ^ 54;
        opad[i3] = key2[i3] ^ 92;
      }
      this._hash = [
        ipad
      ];
    }
    inherits(Hmac, Base);
    Hmac.prototype._update = function(data) {
      this._hash.push(data);
    };
    Hmac.prototype._final = function() {
      var h3 = this._alg(Buffer2.concat(this._hash));
      return this._alg(Buffer2.concat([
        this._opad,
        h3
      ]));
    };
    legacy = Hmac;
    return legacy;
  }
  var md5;
  var hasRequiredMd5;
  function requireMd5() {
    if (hasRequiredMd5) return md5;
    hasRequiredMd5 = 1;
    var MD5 = requireMd5_js();
    md5 = function(buffer2) {
      return new MD5().update(buffer2).digest();
    };
    return md5;
  }
  var browser$8;
  var hasRequiredBrowser$8;
  function requireBrowser$8() {
    if (hasRequiredBrowser$8) return browser$8;
    hasRequiredBrowser$8 = 1;
    var inherits = requireInherits_browser();
    var Legacy = requireLegacy();
    var Base = requireCipherBase();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var md52 = requireMd5();
    var RIPEMD160 = requireRipemd160();
    var sha2 = requireSha_js();
    var ZEROS = Buffer2.alloc(128);
    function Hmac(alg, key2) {
      Base.call(this, "digest");
      if (typeof key2 === "string") {
        key2 = Buffer2.from(key2);
      }
      var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
      this._alg = alg;
      this._key = key2;
      if (key2.length > blocksize) {
        var hash2 = alg === "rmd160" ? new RIPEMD160() : sha2(alg);
        key2 = hash2.update(key2).digest();
      } else if (key2.length < blocksize) {
        key2 = Buffer2.concat([
          key2,
          ZEROS
        ], blocksize);
      }
      var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
      var opad = this._opad = Buffer2.allocUnsafe(blocksize);
      for (var i3 = 0; i3 < blocksize; i3++) {
        ipad[i3] = key2[i3] ^ 54;
        opad[i3] = key2[i3] ^ 92;
      }
      this._hash = alg === "rmd160" ? new RIPEMD160() : sha2(alg);
      this._hash.update(ipad);
    }
    inherits(Hmac, Base);
    Hmac.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hmac.prototype._final = function() {
      var h3 = this._hash.digest();
      var hash2 = this._alg === "rmd160" ? new RIPEMD160() : sha2(this._alg);
      return hash2.update(this._opad).update(h3).digest();
    };
    browser$8 = function createHmac(alg, key2) {
      alg = alg.toLowerCase();
      if (alg === "rmd160" || alg === "ripemd160") {
        return new Hmac("rmd160", key2);
      }
      if (alg === "md5") {
        return new Legacy(md52, key2);
      }
      return new Hmac(alg, key2);
    };
    return browser$8;
  }
  const sha224WithRSAEncryption = {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  };
  const sha256WithRSAEncryption = {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  };
  const sha384WithRSAEncryption = {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  };
  const sha512WithRSAEncryption = {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  };
  const sha256 = {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  };
  const sha224 = {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  };
  const sha384 = {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  };
  const sha512 = {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  };
  const DSA = {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  };
  const ripemd160WithRSA = {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  };
  const md5WithRSAEncryption = {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  };
  const require$$6 = {
    sha224WithRSAEncryption,
    "RSA-SHA224": {
      "sign": "ecdsa/rsa",
      "hash": "sha224",
      "id": "302d300d06096086480165030402040500041c"
    },
    sha256WithRSAEncryption,
    "RSA-SHA256": {
      "sign": "ecdsa/rsa",
      "hash": "sha256",
      "id": "3031300d060960864801650304020105000420"
    },
    sha384WithRSAEncryption,
    "RSA-SHA384": {
      "sign": "ecdsa/rsa",
      "hash": "sha384",
      "id": "3041300d060960864801650304020205000430"
    },
    sha512WithRSAEncryption,
    "RSA-SHA512": {
      "sign": "ecdsa/rsa",
      "hash": "sha512",
      "id": "3051300d060960864801650304020305000440"
    },
    "RSA-SHA1": {
      "sign": "rsa",
      "hash": "sha1",
      "id": "3021300906052b0e03021a05000414"
    },
    "ecdsa-with-SHA1": {
      "sign": "ecdsa",
      "hash": "sha1",
      "id": ""
    },
    sha256,
    sha224,
    sha384,
    sha512,
    "DSA-SHA": {
      "sign": "dsa",
      "hash": "sha1",
      "id": ""
    },
    "DSA-SHA1": {
      "sign": "dsa",
      "hash": "sha1",
      "id": ""
    },
    DSA,
    "DSA-WITH-SHA224": {
      "sign": "dsa",
      "hash": "sha224",
      "id": ""
    },
    "DSA-SHA224": {
      "sign": "dsa",
      "hash": "sha224",
      "id": ""
    },
    "DSA-WITH-SHA256": {
      "sign": "dsa",
      "hash": "sha256",
      "id": ""
    },
    "DSA-SHA256": {
      "sign": "dsa",
      "hash": "sha256",
      "id": ""
    },
    "DSA-WITH-SHA384": {
      "sign": "dsa",
      "hash": "sha384",
      "id": ""
    },
    "DSA-SHA384": {
      "sign": "dsa",
      "hash": "sha384",
      "id": ""
    },
    "DSA-WITH-SHA512": {
      "sign": "dsa",
      "hash": "sha512",
      "id": ""
    },
    "DSA-SHA512": {
      "sign": "dsa",
      "hash": "sha512",
      "id": ""
    },
    "DSA-RIPEMD160": {
      "sign": "dsa",
      "hash": "rmd160",
      "id": ""
    },
    ripemd160WithRSA,
    "RSA-RIPEMD160": {
      "sign": "rsa",
      "hash": "rmd160",
      "id": "3021300906052b2403020105000414"
    },
    md5WithRSAEncryption,
    "RSA-MD5": {
      "sign": "rsa",
      "hash": "md5",
      "id": "3020300c06082a864886f70d020505000410"
    }
  };
  var algos;
  var hasRequiredAlgos;
  function requireAlgos() {
    if (hasRequiredAlgos) return algos;
    hasRequiredAlgos = 1;
    algos = require$$6;
    return algos;
  }
  var browser$7 = {};
  var precondition;
  var hasRequiredPrecondition;
  function requirePrecondition() {
    if (hasRequiredPrecondition) return precondition;
    hasRequiredPrecondition = 1;
    var MAX_ALLOC = Math.pow(2, 30) - 1;
    precondition = function(iterations, keylen) {
      if (typeof iterations !== "number") {
        throw new TypeError("Iterations not a number");
      }
      if (iterations < 0) {
        throw new TypeError("Bad iterations");
      }
      if (typeof keylen !== "number") {
        throw new TypeError("Key length not a number");
      }
      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
        throw new TypeError("Bad key length");
      }
    };
    return precondition;
  }
  var defaultEncoding_1;
  var hasRequiredDefaultEncoding;
  function requireDefaultEncoding() {
    if (hasRequiredDefaultEncoding) return defaultEncoding_1;
    hasRequiredDefaultEncoding = 1;
    var defaultEncoding;
    if (commonjsGlobal.process && commonjsGlobal.process.browser) {
      defaultEncoding = "utf-8";
    } else if (commonjsGlobal.process && commonjsGlobal.process.version) {
      var pVersionMajor = parseInt(process$1.version.split(".")[0].slice(1), 10);
      defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
    } else {
      defaultEncoding = "utf-8";
    }
    defaultEncoding_1 = defaultEncoding;
    return defaultEncoding_1;
  }
  var toBuffer;
  var hasRequiredToBuffer;
  function requireToBuffer() {
    if (hasRequiredToBuffer) return toBuffer;
    hasRequiredToBuffer = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    toBuffer = function(thing, encoding, name) {
      if (Buffer2.isBuffer(thing)) {
        return thing;
      } else if (typeof thing === "string") {
        return Buffer2.from(thing, encoding);
      } else if (ArrayBuffer.isView(thing)) {
        return Buffer2.from(thing.buffer);
      } else {
        throw new TypeError(name + " must be a string, a Buffer, a typed array or a DataView");
      }
    };
    return toBuffer;
  }
  var syncBrowser;
  var hasRequiredSyncBrowser;
  function requireSyncBrowser() {
    if (hasRequiredSyncBrowser) return syncBrowser;
    hasRequiredSyncBrowser = 1;
    var md52 = requireMd5();
    var RIPEMD160 = requireRipemd160();
    var sha2 = requireSha_js();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var checkParameters = requirePrecondition();
    var defaultEncoding = requireDefaultEncoding();
    var toBuffer2 = requireToBuffer();
    var ZEROS = Buffer2.alloc(128);
    var sizes = {
      md5: 16,
      sha1: 20,
      sha224: 28,
      sha256: 32,
      sha384: 48,
      sha512: 64,
      rmd160: 20,
      ripemd160: 20
    };
    function Hmac(alg, key2, saltLen) {
      var hash2 = getDigest(alg);
      var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
      if (key2.length > blocksize) {
        key2 = hash2(key2);
      } else if (key2.length < blocksize) {
        key2 = Buffer2.concat([
          key2,
          ZEROS
        ], blocksize);
      }
      var ipad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
      var opad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
      for (var i3 = 0; i3 < blocksize; i3++) {
        ipad[i3] = key2[i3] ^ 54;
        opad[i3] = key2[i3] ^ 92;
      }
      var ipad1 = Buffer2.allocUnsafe(blocksize + saltLen + 4);
      ipad.copy(ipad1, 0, 0, blocksize);
      this.ipad1 = ipad1;
      this.ipad2 = ipad;
      this.opad = opad;
      this.alg = alg;
      this.blocksize = blocksize;
      this.hash = hash2;
      this.size = sizes[alg];
    }
    Hmac.prototype.run = function(data, ipad) {
      data.copy(ipad, this.blocksize);
      var h3 = this.hash(ipad);
      h3.copy(this.opad, this.blocksize);
      return this.hash(this.opad);
    };
    function getDigest(alg) {
      function shaFunc(data) {
        return sha2(alg).update(data).digest();
      }
      function rmd160Func(data) {
        return new RIPEMD160().update(data).digest();
      }
      if (alg === "rmd160" || alg === "ripemd160") return rmd160Func;
      if (alg === "md5") return md52;
      return shaFunc;
    }
    function pbkdf2(password, salt, iterations, keylen, digest) {
      checkParameters(iterations, keylen);
      password = toBuffer2(password, defaultEncoding, "Password");
      salt = toBuffer2(salt, defaultEncoding, "Salt");
      digest = digest || "sha1";
      var hmac2 = new Hmac(digest, password, salt.length);
      var DK = Buffer2.allocUnsafe(keylen);
      var block1 = Buffer2.allocUnsafe(salt.length + 4);
      salt.copy(block1, 0, 0, salt.length);
      var destPos = 0;
      var hLen = sizes[digest];
      var l3 = Math.ceil(keylen / hLen);
      for (var i3 = 1; i3 <= l3; i3++) {
        block1.writeUInt32BE(i3, salt.length);
        var T3 = hmac2.run(block1, hmac2.ipad1);
        var U3 = T3;
        for (var j3 = 1; j3 < iterations; j3++) {
          U3 = hmac2.run(U3, hmac2.ipad2);
          for (var k3 = 0; k3 < hLen; k3++) T3[k3] ^= U3[k3];
        }
        T3.copy(DK, destPos);
        destPos += hLen;
      }
      return DK;
    }
    syncBrowser = pbkdf2;
    return syncBrowser;
  }
  var async;
  var hasRequiredAsync;
  function requireAsync() {
    if (hasRequiredAsync) return async;
    hasRequiredAsync = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var checkParameters = requirePrecondition();
    var defaultEncoding = requireDefaultEncoding();
    var sync2 = requireSyncBrowser();
    var toBuffer2 = requireToBuffer();
    var ZERO_BUF;
    var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;
    var toBrowser = {
      sha: "SHA-1",
      "sha-1": "SHA-1",
      sha1: "SHA-1",
      sha256: "SHA-256",
      "sha-256": "SHA-256",
      sha384: "SHA-384",
      "sha-384": "SHA-384",
      "sha-512": "SHA-512",
      sha512: "SHA-512"
    };
    var checks = [];
    function checkNative(algo) {
      if (commonjsGlobal.process && !commonjsGlobal.process.browser) {
        return Promise.resolve(false);
      }
      if (!subtle || !subtle.importKey || !subtle.deriveBits) {
        return Promise.resolve(false);
      }
      if (checks[algo] !== void 0) {
        return checks[algo];
      }
      ZERO_BUF = ZERO_BUF || Buffer2.alloc(8);
      var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
        return true;
      }).catch(function() {
        return false;
      });
      checks[algo] = prom;
      return prom;
    }
    var nextTick;
    function getNextTick() {
      if (nextTick) {
        return nextTick;
      }
      if (commonjsGlobal.process && commonjsGlobal.process.nextTick) {
        nextTick = commonjsGlobal.process.nextTick;
      } else if (commonjsGlobal.queueMicrotask) {
        nextTick = commonjsGlobal.queueMicrotask;
      } else if (commonjsGlobal.setImmediate) {
        nextTick = commonjsGlobal.setImmediate;
      } else {
        nextTick = commonjsGlobal.setTimeout;
      }
      return nextTick;
    }
    function browserPbkdf2(password, salt, iterations, length2, algo) {
      return subtle.importKey("raw", password, {
        name: "PBKDF2"
      }, false, [
        "deriveBits"
      ]).then(function(key2) {
        return subtle.deriveBits({
          name: "PBKDF2",
          salt,
          iterations,
          hash: {
            name: algo
          }
        }, key2, length2 << 3);
      }).then(function(res) {
        return Buffer2.from(res);
      });
    }
    function resolvePromise(promise, callback) {
      promise.then(function(out) {
        getNextTick()(function() {
          callback(null, out);
        });
      }, function(e3) {
        getNextTick()(function() {
          callback(e3);
        });
      });
    }
    async = function(password, salt, iterations, keylen, digest, callback) {
      if (typeof digest === "function") {
        callback = digest;
        digest = void 0;
      }
      digest = digest || "sha1";
      var algo = toBrowser[digest.toLowerCase()];
      if (!algo || typeof commonjsGlobal.Promise !== "function") {
        getNextTick()(function() {
          var out;
          try {
            out = sync2(password, salt, iterations, keylen, digest);
          } catch (e3) {
            return callback(e3);
          }
          callback(null, out);
        });
        return;
      }
      checkParameters(iterations, keylen);
      password = toBuffer2(password, defaultEncoding, "Password");
      salt = toBuffer2(salt, defaultEncoding, "Salt");
      if (typeof callback !== "function") throw new Error("No callback provided to pbkdf2");
      resolvePromise(checkNative(algo).then(function(resp) {
        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
        return sync2(password, salt, iterations, keylen, digest);
      }), callback);
    };
    return async;
  }
  var hasRequiredBrowser$7;
  function requireBrowser$7() {
    if (hasRequiredBrowser$7) return browser$7;
    hasRequiredBrowser$7 = 1;
    browser$7.pbkdf2 = requireAsync();
    browser$7.pbkdf2Sync = requireSyncBrowser();
    return browser$7;
  }
  var browser$6 = {};
  var des$1 = {};
  var utils$3 = {};
  var hasRequiredUtils$3;
  function requireUtils$3() {
    if (hasRequiredUtils$3) return utils$3;
    hasRequiredUtils$3 = 1;
    utils$3.readUInt32BE = function readUInt32BE(bytes, off) {
      var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
      return res >>> 0;
    };
    utils$3.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
      bytes[0 + off] = value >>> 24;
      bytes[1 + off] = value >>> 16 & 255;
      bytes[2 + off] = value >>> 8 & 255;
      bytes[3 + off] = value & 255;
    };
    utils$3.ip = function ip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i3 = 6; i3 >= 0; i3 -= 2) {
        for (var j3 = 0; j3 <= 24; j3 += 8) {
          outL <<= 1;
          outL |= inR >>> j3 + i3 & 1;
        }
        for (var j3 = 0; j3 <= 24; j3 += 8) {
          outL <<= 1;
          outL |= inL >>> j3 + i3 & 1;
        }
      }
      for (var i3 = 6; i3 >= 0; i3 -= 2) {
        for (var j3 = 1; j3 <= 25; j3 += 8) {
          outR <<= 1;
          outR |= inR >>> j3 + i3 & 1;
        }
        for (var j3 = 1; j3 <= 25; j3 += 8) {
          outR <<= 1;
          outR |= inL >>> j3 + i3 & 1;
        }
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    utils$3.rip = function rip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i3 = 0; i3 < 4; i3++) {
        for (var j3 = 24; j3 >= 0; j3 -= 8) {
          outL <<= 1;
          outL |= inR >>> j3 + i3 & 1;
          outL <<= 1;
          outL |= inL >>> j3 + i3 & 1;
        }
      }
      for (var i3 = 4; i3 < 8; i3++) {
        for (var j3 = 24; j3 >= 0; j3 -= 8) {
          outR <<= 1;
          outR |= inR >>> j3 + i3 & 1;
          outR <<= 1;
          outR |= inL >>> j3 + i3 & 1;
        }
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    utils$3.pc1 = function pc1(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i3 = 7; i3 >= 5; i3--) {
        for (var j3 = 0; j3 <= 24; j3 += 8) {
          outL <<= 1;
          outL |= inR >> j3 + i3 & 1;
        }
        for (var j3 = 0; j3 <= 24; j3 += 8) {
          outL <<= 1;
          outL |= inL >> j3 + i3 & 1;
        }
      }
      for (var j3 = 0; j3 <= 24; j3 += 8) {
        outL <<= 1;
        outL |= inR >> j3 + i3 & 1;
      }
      for (var i3 = 1; i3 <= 3; i3++) {
        for (var j3 = 0; j3 <= 24; j3 += 8) {
          outR <<= 1;
          outR |= inR >> j3 + i3 & 1;
        }
        for (var j3 = 0; j3 <= 24; j3 += 8) {
          outR <<= 1;
          outR |= inL >> j3 + i3 & 1;
        }
      }
      for (var j3 = 0; j3 <= 24; j3 += 8) {
        outR <<= 1;
        outR |= inL >> j3 + i3 & 1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    utils$3.r28shl = function r28shl(num, shift) {
      return num << shift & 268435455 | num >>> 28 - shift;
    };
    var pc2table = [
      14,
      11,
      17,
      4,
      27,
      23,
      25,
      0,
      13,
      22,
      7,
      18,
      5,
      9,
      16,
      24,
      2,
      20,
      12,
      21,
      1,
      8,
      15,
      26,
      15,
      4,
      25,
      19,
      9,
      1,
      26,
      16,
      5,
      11,
      23,
      8,
      12,
      7,
      17,
      0,
      22,
      3,
      10,
      14,
      6,
      20,
      27,
      24
    ];
    utils$3.pc2 = function pc2(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      var len = pc2table.length >>> 1;
      for (var i3 = 0; i3 < len; i3++) {
        outL <<= 1;
        outL |= inL >>> pc2table[i3] & 1;
      }
      for (var i3 = len; i3 < pc2table.length; i3++) {
        outR <<= 1;
        outR |= inR >>> pc2table[i3] & 1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    utils$3.expand = function expand(r3, out, off) {
      var outL = 0;
      var outR = 0;
      outL = (r3 & 1) << 5 | r3 >>> 27;
      for (var i3 = 23; i3 >= 15; i3 -= 4) {
        outL <<= 6;
        outL |= r3 >>> i3 & 63;
      }
      for (var i3 = 11; i3 >= 3; i3 -= 4) {
        outR |= r3 >>> i3 & 63;
        outR <<= 6;
      }
      outR |= (r3 & 31) << 1 | r3 >>> 31;
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    var sTable = [
      14,
      0,
      4,
      15,
      13,
      7,
      1,
      4,
      2,
      14,
      15,
      2,
      11,
      13,
      8,
      1,
      3,
      10,
      10,
      6,
      6,
      12,
      12,
      11,
      5,
      9,
      9,
      5,
      0,
      3,
      7,
      8,
      4,
      15,
      1,
      12,
      14,
      8,
      8,
      2,
      13,
      4,
      6,
      9,
      2,
      1,
      11,
      7,
      15,
      5,
      12,
      11,
      9,
      3,
      7,
      14,
      3,
      10,
      10,
      0,
      5,
      6,
      0,
      13,
      15,
      3,
      1,
      13,
      8,
      4,
      14,
      7,
      6,
      15,
      11,
      2,
      3,
      8,
      4,
      14,
      9,
      12,
      7,
      0,
      2,
      1,
      13,
      10,
      12,
      6,
      0,
      9,
      5,
      11,
      10,
      5,
      0,
      13,
      14,
      8,
      7,
      10,
      11,
      1,
      10,
      3,
      4,
      15,
      13,
      4,
      1,
      2,
      5,
      11,
      8,
      6,
      12,
      7,
      6,
      12,
      9,
      0,
      3,
      5,
      2,
      14,
      15,
      9,
      10,
      13,
      0,
      7,
      9,
      0,
      14,
      9,
      6,
      3,
      3,
      4,
      15,
      6,
      5,
      10,
      1,
      2,
      13,
      8,
      12,
      5,
      7,
      14,
      11,
      12,
      4,
      11,
      2,
      15,
      8,
      1,
      13,
      1,
      6,
      10,
      4,
      13,
      9,
      0,
      8,
      6,
      15,
      9,
      3,
      8,
      0,
      7,
      11,
      4,
      1,
      15,
      2,
      14,
      12,
      3,
      5,
      11,
      10,
      5,
      14,
      2,
      7,
      12,
      7,
      13,
      13,
      8,
      14,
      11,
      3,
      5,
      0,
      6,
      6,
      15,
      9,
      0,
      10,
      3,
      1,
      4,
      2,
      7,
      8,
      2,
      5,
      12,
      11,
      1,
      12,
      10,
      4,
      14,
      15,
      9,
      10,
      3,
      6,
      15,
      9,
      0,
      0,
      6,
      12,
      10,
      11,
      1,
      7,
      13,
      13,
      8,
      15,
      9,
      1,
      4,
      3,
      5,
      14,
      11,
      5,
      12,
      2,
      7,
      8,
      2,
      4,
      14,
      2,
      14,
      12,
      11,
      4,
      2,
      1,
      12,
      7,
      4,
      10,
      7,
      11,
      13,
      6,
      1,
      8,
      5,
      5,
      0,
      3,
      15,
      15,
      10,
      13,
      3,
      0,
      9,
      14,
      8,
      9,
      6,
      4,
      11,
      2,
      8,
      1,
      12,
      11,
      7,
      10,
      1,
      13,
      14,
      7,
      2,
      8,
      13,
      15,
      6,
      9,
      15,
      12,
      0,
      5,
      9,
      6,
      10,
      3,
      4,
      0,
      5,
      14,
      3,
      12,
      10,
      1,
      15,
      10,
      4,
      15,
      2,
      9,
      7,
      2,
      12,
      6,
      9,
      8,
      5,
      0,
      6,
      13,
      1,
      3,
      13,
      4,
      14,
      14,
      0,
      7,
      11,
      5,
      3,
      11,
      8,
      9,
      4,
      14,
      3,
      15,
      2,
      5,
      12,
      2,
      9,
      8,
      5,
      12,
      15,
      3,
      10,
      7,
      11,
      0,
      14,
      4,
      1,
      10,
      7,
      1,
      6,
      13,
      0,
      11,
      8,
      6,
      13,
      4,
      13,
      11,
      0,
      2,
      11,
      14,
      7,
      15,
      4,
      0,
      9,
      8,
      1,
      13,
      10,
      3,
      14,
      12,
      3,
      9,
      5,
      7,
      12,
      5,
      2,
      10,
      15,
      6,
      8,
      1,
      6,
      1,
      6,
      4,
      11,
      11,
      13,
      13,
      8,
      12,
      1,
      3,
      4,
      7,
      10,
      14,
      7,
      10,
      9,
      15,
      5,
      6,
      0,
      8,
      15,
      0,
      14,
      5,
      2,
      9,
      3,
      2,
      12,
      13,
      1,
      2,
      15,
      8,
      13,
      4,
      8,
      6,
      10,
      15,
      3,
      11,
      7,
      1,
      4,
      10,
      12,
      9,
      5,
      3,
      6,
      14,
      11,
      5,
      0,
      0,
      14,
      12,
      9,
      7,
      2,
      7,
      2,
      11,
      1,
      4,
      14,
      1,
      7,
      9,
      4,
      12,
      10,
      14,
      8,
      2,
      13,
      0,
      15,
      6,
      12,
      10,
      9,
      13,
      0,
      15,
      3,
      3,
      5,
      5,
      6,
      8,
      11
    ];
    utils$3.substitute = function substitute(inL, inR) {
      var out = 0;
      for (var i3 = 0; i3 < 4; i3++) {
        var b3 = inL >>> 18 - i3 * 6 & 63;
        var sb = sTable[i3 * 64 + b3];
        out <<= 4;
        out |= sb;
      }
      for (var i3 = 0; i3 < 4; i3++) {
        var b3 = inR >>> 18 - i3 * 6 & 63;
        var sb = sTable[4 * 64 + i3 * 64 + b3];
        out <<= 4;
        out |= sb;
      }
      return out >>> 0;
    };
    var permuteTable = [
      16,
      25,
      12,
      11,
      3,
      20,
      4,
      15,
      31,
      17,
      9,
      6,
      27,
      14,
      1,
      22,
      30,
      24,
      8,
      18,
      0,
      5,
      29,
      23,
      13,
      19,
      2,
      26,
      10,
      21,
      28,
      7
    ];
    utils$3.permute = function permute(num) {
      var out = 0;
      for (var i3 = 0; i3 < permuteTable.length; i3++) {
        out <<= 1;
        out |= num >>> permuteTable[i3] & 1;
      }
      return out >>> 0;
    };
    utils$3.padSplit = function padSplit(num, size, group) {
      var str = num.toString(2);
      while (str.length < size) str = "0" + str;
      var out = [];
      for (var i3 = 0; i3 < size; i3 += group) out.push(str.slice(i3, i3 + group));
      return out.join(" ");
    };
    return utils$3;
  }
  var minimalisticAssert;
  var hasRequiredMinimalisticAssert;
  function requireMinimalisticAssert() {
    if (hasRequiredMinimalisticAssert) return minimalisticAssert;
    hasRequiredMinimalisticAssert = 1;
    minimalisticAssert = assert;
    function assert(val, msg) {
      if (!val) throw new Error(msg || "Assertion failed");
    }
    assert.equal = function assertEqual(l3, r3, msg) {
      if (l3 != r3) throw new Error(msg || "Assertion failed: " + l3 + " != " + r3);
    };
    return minimalisticAssert;
  }
  var cipher;
  var hasRequiredCipher;
  function requireCipher() {
    if (hasRequiredCipher) return cipher;
    hasRequiredCipher = 1;
    var assert = requireMinimalisticAssert();
    function Cipher(options) {
      this.options = options;
      this.type = this.options.type;
      this.blockSize = 8;
      this._init();
      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
      this.padding = options.padding !== false;
    }
    cipher = Cipher;
    Cipher.prototype._init = function _init() {
    };
    Cipher.prototype.update = function update(data) {
      if (data.length === 0) return [];
      if (this.type === "decrypt") return this._updateDecrypt(data);
      else return this._updateEncrypt(data);
    };
    Cipher.prototype._buffer = function _buffer(data, off) {
      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
      for (var i3 = 0; i3 < min; i3++) this.buffer[this.bufferOff + i3] = data[off + i3];
      this.bufferOff += min;
      return min;
    };
    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
      this._update(this.buffer, 0, out, off);
      this.bufferOff = 0;
      return this.blockSize;
    };
    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = (this.bufferOff + data.length) / this.blockSize | 0;
      var out = new Array(count * this.blockSize);
      if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
      }
      var max = data.length - (data.length - inputOff) % this.blockSize;
      for (; inputOff < max; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
      }
      for (; inputOff < data.length; inputOff++, this.bufferOff++) this.buffer[this.bufferOff] = data[inputOff];
      return out;
    };
    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize);
      for (; count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      }
      inputOff += this._buffer(data, inputOff);
      return out;
    };
    Cipher.prototype.final = function final(buffer2) {
      var first;
      if (buffer2) first = this.update(buffer2);
      var last;
      if (this.type === "encrypt") last = this._finalEncrypt();
      else last = this._finalDecrypt();
      if (first) return first.concat(last);
      else return last;
    };
    Cipher.prototype._pad = function _pad(buffer2, off) {
      if (off === 0) return false;
      while (off < buffer2.length) buffer2[off++] = 0;
      return true;
    };
    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
      if (!this._pad(this.buffer, this.bufferOff)) return [];
      var out = new Array(this.blockSize);
      this._update(this.buffer, 0, out, 0);
      return out;
    };
    Cipher.prototype._unpad = function _unpad(buffer2) {
      return buffer2;
    };
    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
      assert.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
      var out = new Array(this.blockSize);
      this._flushBuffer(out, 0);
      return this._unpad(out);
    };
    return cipher;
  }
  var des;
  var hasRequiredDes$1;
  function requireDes$1() {
    if (hasRequiredDes$1) return des;
    hasRequiredDes$1 = 1;
    var assert = requireMinimalisticAssert();
    var inherits = requireInherits_browser();
    var utils2 = requireUtils$3();
    var Cipher = requireCipher();
    function DESState() {
      this.tmp = new Array(2);
      this.keys = null;
    }
    function DES(options) {
      Cipher.call(this, options);
      var state = new DESState();
      this._desState = state;
      this.deriveKeys(state, options.key);
    }
    inherits(DES, Cipher);
    des = DES;
    DES.create = function create(options) {
      return new DES(options);
    };
    var shiftTable = [
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      1
    ];
    DES.prototype.deriveKeys = function deriveKeys(state, key2) {
      state.keys = new Array(16 * 2);
      assert.equal(key2.length, this.blockSize, "Invalid key length");
      var kL = utils2.readUInt32BE(key2, 0);
      var kR = utils2.readUInt32BE(key2, 4);
      utils2.pc1(kL, kR, state.tmp, 0);
      kL = state.tmp[0];
      kR = state.tmp[1];
      for (var i3 = 0; i3 < state.keys.length; i3 += 2) {
        var shift = shiftTable[i3 >>> 1];
        kL = utils2.r28shl(kL, shift);
        kR = utils2.r28shl(kR, shift);
        utils2.pc2(kL, kR, state.keys, i3);
      }
    };
    DES.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._desState;
      var l3 = utils2.readUInt32BE(inp, inOff);
      var r3 = utils2.readUInt32BE(inp, inOff + 4);
      utils2.ip(l3, r3, state.tmp, 0);
      l3 = state.tmp[0];
      r3 = state.tmp[1];
      if (this.type === "encrypt") this._encrypt(state, l3, r3, state.tmp, 0);
      else this._decrypt(state, l3, r3, state.tmp, 0);
      l3 = state.tmp[0];
      r3 = state.tmp[1];
      utils2.writeUInt32BE(out, l3, outOff);
      utils2.writeUInt32BE(out, r3, outOff + 4);
    };
    DES.prototype._pad = function _pad(buffer2, off) {
      if (this.padding === false) {
        return false;
      }
      var value = buffer2.length - off;
      for (var i3 = off; i3 < buffer2.length; i3++) buffer2[i3] = value;
      return true;
    };
    DES.prototype._unpad = function _unpad(buffer2) {
      if (this.padding === false) {
        return buffer2;
      }
      var pad = buffer2[buffer2.length - 1];
      for (var i3 = buffer2.length - pad; i3 < buffer2.length; i3++) assert.equal(buffer2[i3], pad);
      return buffer2.slice(0, buffer2.length - pad);
    };
    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
      var l3 = lStart;
      var r3 = rStart;
      for (var i3 = 0; i3 < state.keys.length; i3 += 2) {
        var keyL = state.keys[i3];
        var keyR = state.keys[i3 + 1];
        utils2.expand(r3, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s3 = utils2.substitute(keyL, keyR);
        var f3 = utils2.permute(s3);
        var t3 = r3;
        r3 = (l3 ^ f3) >>> 0;
        l3 = t3;
      }
      utils2.rip(r3, l3, out, off);
    };
    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
      var l3 = rStart;
      var r3 = lStart;
      for (var i3 = state.keys.length - 2; i3 >= 0; i3 -= 2) {
        var keyL = state.keys[i3];
        var keyR = state.keys[i3 + 1];
        utils2.expand(l3, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s3 = utils2.substitute(keyL, keyR);
        var f3 = utils2.permute(s3);
        var t3 = l3;
        l3 = (r3 ^ f3) >>> 0;
        r3 = t3;
      }
      utils2.rip(l3, r3, out, off);
    };
    return des;
  }
  var cbc$1 = {};
  var hasRequiredCbc$1;
  function requireCbc$1() {
    if (hasRequiredCbc$1) return cbc$1;
    hasRequiredCbc$1 = 1;
    var assert = requireMinimalisticAssert();
    var inherits = requireInherits_browser();
    var proto = {};
    function CBCState(iv) {
      assert.equal(iv.length, 8, "Invalid IV length");
      this.iv = new Array(8);
      for (var i3 = 0; i3 < this.iv.length; i3++) this.iv[i3] = iv[i3];
    }
    function instantiate(Base) {
      function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
      }
      inherits(CBC, Base);
      var keys = Object.keys(proto);
      for (var i3 = 0; i3 < keys.length; i3++) {
        var key2 = keys[i3];
        CBC.prototype[key2] = proto[key2];
      }
      CBC.create = function create(options) {
        return new CBC(options);
      };
      return CBC;
    }
    cbc$1.instantiate = instantiate;
    proto._cbcInit = function _cbcInit() {
      var state = new CBCState(this.options.iv);
      this._cbcState = state;
    };
    proto._update = function _update(inp, inOff, out, outOff) {
      var state = this._cbcState;
      var superProto = this.constructor.super_.prototype;
      var iv = state.iv;
      if (this.type === "encrypt") {
        for (var i3 = 0; i3 < this.blockSize; i3++) iv[i3] ^= inp[inOff + i3];
        superProto._update.call(this, iv, 0, out, outOff);
        for (var i3 = 0; i3 < this.blockSize; i3++) iv[i3] = out[outOff + i3];
      } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for (var i3 = 0; i3 < this.blockSize; i3++) out[outOff + i3] ^= iv[i3];
        for (var i3 = 0; i3 < this.blockSize; i3++) iv[i3] = inp[inOff + i3];
      }
    };
    return cbc$1;
  }
  var ede;
  var hasRequiredEde;
  function requireEde() {
    if (hasRequiredEde) return ede;
    hasRequiredEde = 1;
    var assert = requireMinimalisticAssert();
    var inherits = requireInherits_browser();
    var Cipher = requireCipher();
    var DES = requireDes$1();
    function EDEState(type, key2) {
      assert.equal(key2.length, 24, "Invalid key length");
      var k1 = key2.slice(0, 8);
      var k22 = key2.slice(8, 16);
      var k3 = key2.slice(16, 24);
      if (type === "encrypt") {
        this.ciphers = [
          DES.create({
            type: "encrypt",
            key: k1
          }),
          DES.create({
            type: "decrypt",
            key: k22
          }),
          DES.create({
            type: "encrypt",
            key: k3
          })
        ];
      } else {
        this.ciphers = [
          DES.create({
            type: "decrypt",
            key: k3
          }),
          DES.create({
            type: "encrypt",
            key: k22
          }),
          DES.create({
            type: "decrypt",
            key: k1
          })
        ];
      }
    }
    function EDE(options) {
      Cipher.call(this, options);
      var state = new EDEState(this.type, this.options.key);
      this._edeState = state;
    }
    inherits(EDE, Cipher);
    ede = EDE;
    EDE.create = function create(options) {
      return new EDE(options);
    };
    EDE.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._edeState;
      state.ciphers[0]._update(inp, inOff, out, outOff);
      state.ciphers[1]._update(out, outOff, out, outOff);
      state.ciphers[2]._update(out, outOff, out, outOff);
    };
    EDE.prototype._pad = DES.prototype._pad;
    EDE.prototype._unpad = DES.prototype._unpad;
    return ede;
  }
  var hasRequiredDes;
  function requireDes() {
    if (hasRequiredDes) return des$1;
    hasRequiredDes = 1;
    des$1.utils = requireUtils$3();
    des$1.Cipher = requireCipher();
    des$1.DES = requireDes$1();
    des$1.CBC = requireCbc$1();
    des$1.EDE = requireEde();
    return des$1;
  }
  var browserifyDes;
  var hasRequiredBrowserifyDes;
  function requireBrowserifyDes() {
    if (hasRequiredBrowserifyDes) return browserifyDes;
    hasRequiredBrowserifyDes = 1;
    var CipherBase = requireCipherBase();
    var des2 = requireDes();
    var inherits = requireInherits_browser();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var modes2 = {
      "des-ede3-cbc": des2.CBC.instantiate(des2.EDE),
      "des-ede3": des2.EDE,
      "des-ede-cbc": des2.CBC.instantiate(des2.EDE),
      "des-ede": des2.EDE,
      "des-cbc": des2.CBC.instantiate(des2.DES),
      "des-ecb": des2.DES
    };
    modes2.des = modes2["des-cbc"];
    modes2.des3 = modes2["des-ede3-cbc"];
    browserifyDes = DES;
    inherits(DES, CipherBase);
    function DES(opts) {
      CipherBase.call(this);
      var modeName = opts.mode.toLowerCase();
      var mode = modes2[modeName];
      var type;
      if (opts.decrypt) {
        type = "decrypt";
      } else {
        type = "encrypt";
      }
      var key2 = opts.key;
      if (!Buffer2.isBuffer(key2)) {
        key2 = Buffer2.from(key2);
      }
      if (modeName === "des-ede" || modeName === "des-ede-cbc") {
        key2 = Buffer2.concat([
          key2,
          key2.slice(0, 8)
        ]);
      }
      var iv = opts.iv;
      if (!Buffer2.isBuffer(iv)) {
        iv = Buffer2.from(iv);
      }
      this._des = mode.create({
        key: key2,
        iv,
        type
      });
    }
    DES.prototype._update = function(data) {
      return Buffer2.from(this._des.update(data));
    };
    DES.prototype._final = function() {
      return Buffer2.from(this._des.final());
    };
    return browserifyDes;
  }
  var browser$5 = {};
  var encrypter = {};
  var ecb = {};
  var hasRequiredEcb;
  function requireEcb() {
    if (hasRequiredEcb) return ecb;
    hasRequiredEcb = 1;
    ecb.encrypt = function(self2, block) {
      return self2._cipher.encryptBlock(block);
    };
    ecb.decrypt = function(self2, block) {
      return self2._cipher.decryptBlock(block);
    };
    return ecb;
  }
  var cbc = {};
  var bufferXor;
  var hasRequiredBufferXor;
  function requireBufferXor() {
    if (hasRequiredBufferXor) return bufferXor;
    hasRequiredBufferXor = 1;
    bufferXor = function xor2(a3, b3) {
      var length2 = Math.min(a3.length, b3.length);
      var buffer2 = new Buffer(length2);
      for (var i3 = 0; i3 < length2; ++i3) {
        buffer2[i3] = a3[i3] ^ b3[i3];
      }
      return buffer2;
    };
    return bufferXor;
  }
  var hasRequiredCbc;
  function requireCbc() {
    if (hasRequiredCbc) return cbc;
    hasRequiredCbc = 1;
    var xor2 = requireBufferXor();
    cbc.encrypt = function(self2, block) {
      var data = xor2(block, self2._prev);
      self2._prev = self2._cipher.encryptBlock(data);
      return self2._prev;
    };
    cbc.decrypt = function(self2, block) {
      var pad = self2._prev;
      self2._prev = block;
      var out = self2._cipher.decryptBlock(block);
      return xor2(out, pad);
    };
    return cbc;
  }
  var cfb = {};
  var hasRequiredCfb;
  function requireCfb() {
    if (hasRequiredCfb) return cfb;
    hasRequiredCfb = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var xor2 = requireBufferXor();
    function encryptStart(self2, data, decrypt) {
      var len = data.length;
      var out = xor2(data, self2._cache);
      self2._cache = self2._cache.slice(len);
      self2._prev = Buffer2.concat([
        self2._prev,
        decrypt ? data : out
      ]);
      return out;
    }
    cfb.encrypt = function(self2, data, decrypt) {
      var out = Buffer2.allocUnsafe(0);
      var len;
      while (data.length) {
        if (self2._cache.length === 0) {
          self2._cache = self2._cipher.encryptBlock(self2._prev);
          self2._prev = Buffer2.allocUnsafe(0);
        }
        if (self2._cache.length <= data.length) {
          len = self2._cache.length;
          out = Buffer2.concat([
            out,
            encryptStart(self2, data.slice(0, len), decrypt)
          ]);
          data = data.slice(len);
        } else {
          out = Buffer2.concat([
            out,
            encryptStart(self2, data, decrypt)
          ]);
          break;
        }
      }
      return out;
    };
    return cfb;
  }
  var cfb8 = {};
  var hasRequiredCfb8;
  function requireCfb8() {
    if (hasRequiredCfb8) return cfb8;
    hasRequiredCfb8 = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function encryptByte(self2, byteParam, decrypt) {
      var pad = self2._cipher.encryptBlock(self2._prev);
      var out = pad[0] ^ byteParam;
      self2._prev = Buffer2.concat([
        self2._prev.slice(1),
        Buffer2.from([
          decrypt ? byteParam : out
        ])
      ]);
      return out;
    }
    cfb8.encrypt = function(self2, chunk, decrypt) {
      var len = chunk.length;
      var out = Buffer2.allocUnsafe(len);
      var i3 = -1;
      while (++i3 < len) {
        out[i3] = encryptByte(self2, chunk[i3], decrypt);
      }
      return out;
    };
    return cfb8;
  }
  var cfb1 = {};
  var hasRequiredCfb1;
  function requireCfb1() {
    if (hasRequiredCfb1) return cfb1;
    hasRequiredCfb1 = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function encryptByte(self2, byteParam, decrypt) {
      var pad;
      var i3 = -1;
      var len = 8;
      var out = 0;
      var bit, value;
      while (++i3 < len) {
        pad = self2._cipher.encryptBlock(self2._prev);
        bit = byteParam & 1 << 7 - i3 ? 128 : 0;
        value = pad[0] ^ bit;
        out += (value & 128) >> i3 % 8;
        self2._prev = shiftIn(self2._prev, decrypt ? bit : value);
      }
      return out;
    }
    function shiftIn(buffer2, value) {
      var len = buffer2.length;
      var i3 = -1;
      var out = Buffer2.allocUnsafe(buffer2.length);
      buffer2 = Buffer2.concat([
        buffer2,
        Buffer2.from([
          value
        ])
      ]);
      while (++i3 < len) {
        out[i3] = buffer2[i3] << 1 | buffer2[i3 + 1] >> 7;
      }
      return out;
    }
    cfb1.encrypt = function(self2, chunk, decrypt) {
      var len = chunk.length;
      var out = Buffer2.allocUnsafe(len);
      var i3 = -1;
      while (++i3 < len) {
        out[i3] = encryptByte(self2, chunk[i3], decrypt);
      }
      return out;
    };
    return cfb1;
  }
  var ofb = {};
  var hasRequiredOfb;
  function requireOfb() {
    if (hasRequiredOfb) return ofb;
    hasRequiredOfb = 1;
    var xor2 = requireBufferXor();
    function getBlock(self2) {
      self2._prev = self2._cipher.encryptBlock(self2._prev);
      return self2._prev;
    }
    ofb.encrypt = function(self2, chunk) {
      while (self2._cache.length < chunk.length) {
        self2._cache = Buffer.concat([
          self2._cache,
          getBlock(self2)
        ]);
      }
      var pad = self2._cache.slice(0, chunk.length);
      self2._cache = self2._cache.slice(chunk.length);
      return xor2(chunk, pad);
    };
    return ofb;
  }
  var ctr = {};
  var incr32_1;
  var hasRequiredIncr32;
  function requireIncr32() {
    if (hasRequiredIncr32) return incr32_1;
    hasRequiredIncr32 = 1;
    function incr32(iv) {
      var len = iv.length;
      var item;
      while (len--) {
        item = iv.readUInt8(len);
        if (item === 255) {
          iv.writeUInt8(0, len);
        } else {
          item++;
          iv.writeUInt8(item, len);
          break;
        }
      }
    }
    incr32_1 = incr32;
    return incr32_1;
  }
  var hasRequiredCtr;
  function requireCtr() {
    if (hasRequiredCtr) return ctr;
    hasRequiredCtr = 1;
    var xor2 = requireBufferXor();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var incr32 = requireIncr32();
    function getBlock(self2) {
      var out = self2._cipher.encryptBlockRaw(self2._prev);
      incr32(self2._prev);
      return out;
    }
    var blockSize = 16;
    ctr.encrypt = function(self2, chunk) {
      var chunkNum = Math.ceil(chunk.length / blockSize);
      var start = self2._cache.length;
      self2._cache = Buffer2.concat([
        self2._cache,
        Buffer2.allocUnsafe(chunkNum * blockSize)
      ]);
      for (var i3 = 0; i3 < chunkNum; i3++) {
        var out = getBlock(self2);
        var offset = start + i3 * blockSize;
        self2._cache.writeUInt32BE(out[0], offset + 0);
        self2._cache.writeUInt32BE(out[1], offset + 4);
        self2._cache.writeUInt32BE(out[2], offset + 8);
        self2._cache.writeUInt32BE(out[3], offset + 12);
      }
      var pad = self2._cache.slice(0, chunk.length);
      self2._cache = self2._cache.slice(chunk.length);
      return xor2(chunk, pad);
    };
    return ctr;
  }
  const aes128 = {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  };
  const aes192 = {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  };
  const aes256 = {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  };
  const require$$2 = {
    "aes-128-ecb": {
      "cipher": "AES",
      "key": 128,
      "iv": 0,
      "mode": "ECB",
      "type": "block"
    },
    "aes-192-ecb": {
      "cipher": "AES",
      "key": 192,
      "iv": 0,
      "mode": "ECB",
      "type": "block"
    },
    "aes-256-ecb": {
      "cipher": "AES",
      "key": 256,
      "iv": 0,
      "mode": "ECB",
      "type": "block"
    },
    "aes-128-cbc": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "CBC",
      "type": "block"
    },
    "aes-192-cbc": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "CBC",
      "type": "block"
    },
    "aes-256-cbc": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "CBC",
      "type": "block"
    },
    aes128,
    aes192,
    aes256,
    "aes-128-cfb": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "CFB",
      "type": "stream"
    },
    "aes-192-cfb": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "CFB",
      "type": "stream"
    },
    "aes-256-cfb": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "CFB",
      "type": "stream"
    },
    "aes-128-cfb8": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "CFB8",
      "type": "stream"
    },
    "aes-192-cfb8": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "CFB8",
      "type": "stream"
    },
    "aes-256-cfb8": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "CFB8",
      "type": "stream"
    },
    "aes-128-cfb1": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "CFB1",
      "type": "stream"
    },
    "aes-192-cfb1": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "CFB1",
      "type": "stream"
    },
    "aes-256-cfb1": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "CFB1",
      "type": "stream"
    },
    "aes-128-ofb": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "OFB",
      "type": "stream"
    },
    "aes-192-ofb": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "OFB",
      "type": "stream"
    },
    "aes-256-ofb": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "OFB",
      "type": "stream"
    },
    "aes-128-ctr": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "CTR",
      "type": "stream"
    },
    "aes-192-ctr": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "CTR",
      "type": "stream"
    },
    "aes-256-ctr": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "CTR",
      "type": "stream"
    },
    "aes-128-gcm": {
      "cipher": "AES",
      "key": 128,
      "iv": 12,
      "mode": "GCM",
      "type": "auth"
    },
    "aes-192-gcm": {
      "cipher": "AES",
      "key": 192,
      "iv": 12,
      "mode": "GCM",
      "type": "auth"
    },
    "aes-256-gcm": {
      "cipher": "AES",
      "key": 256,
      "iv": 12,
      "mode": "GCM",
      "type": "auth"
    }
  };
  var modes_1;
  var hasRequiredModes$1;
  function requireModes$1() {
    if (hasRequiredModes$1) return modes_1;
    hasRequiredModes$1 = 1;
    var modeModules = {
      ECB: requireEcb(),
      CBC: requireCbc(),
      CFB: requireCfb(),
      CFB8: requireCfb8(),
      CFB1: requireCfb1(),
      OFB: requireOfb(),
      CTR: requireCtr(),
      GCM: requireCtr()
    };
    var modes2 = require$$2;
    for (var key2 in modes2) {
      modes2[key2].module = modeModules[modes2[key2].mode];
    }
    modes_1 = modes2;
    return modes_1;
  }
  var aes = {};
  var hasRequiredAes;
  function requireAes() {
    if (hasRequiredAes) return aes;
    hasRequiredAes = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function asUInt32Array(buf) {
      if (!Buffer2.isBuffer(buf)) buf = Buffer2.from(buf);
      var len = buf.length / 4 | 0;
      var out = new Array(len);
      for (var i3 = 0; i3 < len; i3++) {
        out[i3] = buf.readUInt32BE(i3 * 4);
      }
      return out;
    }
    function scrubVec(v3) {
      for (var i3 = 0; i3 < v3.length; v3++) {
        v3[i3] = 0;
      }
    }
    function cryptBlock(M3, keySchedule, SUB_MIX, SBOX, nRounds) {
      var SUB_MIX0 = SUB_MIX[0];
      var SUB_MIX1 = SUB_MIX[1];
      var SUB_MIX2 = SUB_MIX[2];
      var SUB_MIX3 = SUB_MIX[3];
      var s0 = M3[0] ^ keySchedule[0];
      var s1 = M3[1] ^ keySchedule[1];
      var s22 = M3[2] ^ keySchedule[2];
      var s3 = M3[3] ^ keySchedule[3];
      var t0, t1, t22, t3;
      var ksRow = 4;
      for (var round = 1; round < nRounds; round++) {
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s22 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s22 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
        t22 = SUB_MIX0[s22 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s22 & 255] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s22 = t22;
        s3 = t3;
      }
      t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s22 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
      t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s22 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
      t22 = (SBOX[s22 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
      t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s22 & 255]) ^ keySchedule[ksRow++];
      t0 = t0 >>> 0;
      t1 = t1 >>> 0;
      t22 = t22 >>> 0;
      t3 = t3 >>> 0;
      return [
        t0,
        t1,
        t22,
        t3
      ];
    }
    var RCON = [
      0,
      1,
      2,
      4,
      8,
      16,
      32,
      64,
      128,
      27,
      54
    ];
    var G3 = function() {
      var d3 = new Array(256);
      for (var j3 = 0; j3 < 256; j3++) {
        if (j3 < 128) {
          d3[j3] = j3 << 1;
        } else {
          d3[j3] = j3 << 1 ^ 283;
        }
      }
      var SBOX = [];
      var INV_SBOX = [];
      var SUB_MIX = [
        [],
        [],
        [],
        []
      ];
      var INV_SUB_MIX = [
        [],
        [],
        [],
        []
      ];
      var x3 = 0;
      var xi2 = 0;
      for (var i3 = 0; i3 < 256; ++i3) {
        var sx = xi2 ^ xi2 << 1 ^ xi2 << 2 ^ xi2 << 3 ^ xi2 << 4;
        sx = sx >>> 8 ^ sx & 255 ^ 99;
        SBOX[x3] = sx;
        INV_SBOX[sx] = x3;
        var x22 = d3[x3];
        var x4 = d3[x22];
        var x8 = d3[x4];
        var t3 = d3[sx] * 257 ^ sx * 16843008;
        SUB_MIX[0][x3] = t3 << 24 | t3 >>> 8;
        SUB_MIX[1][x3] = t3 << 16 | t3 >>> 16;
        SUB_MIX[2][x3] = t3 << 8 | t3 >>> 24;
        SUB_MIX[3][x3] = t3;
        t3 = x8 * 16843009 ^ x4 * 65537 ^ x22 * 257 ^ x3 * 16843008;
        INV_SUB_MIX[0][sx] = t3 << 24 | t3 >>> 8;
        INV_SUB_MIX[1][sx] = t3 << 16 | t3 >>> 16;
        INV_SUB_MIX[2][sx] = t3 << 8 | t3 >>> 24;
        INV_SUB_MIX[3][sx] = t3;
        if (x3 === 0) {
          x3 = xi2 = 1;
        } else {
          x3 = x22 ^ d3[d3[d3[x8 ^ x22]]];
          xi2 ^= d3[d3[xi2]];
        }
      }
      return {
        SBOX,
        INV_SBOX,
        SUB_MIX,
        INV_SUB_MIX
      };
    }();
    function AES(key2) {
      this._key = asUInt32Array(key2);
      this._reset();
    }
    AES.blockSize = 4 * 4;
    AES.keySize = 256 / 8;
    AES.prototype.blockSize = AES.blockSize;
    AES.prototype.keySize = AES.keySize;
    AES.prototype._reset = function() {
      var keyWords = this._key;
      var keySize = keyWords.length;
      var nRounds = keySize + 6;
      var ksRows = (nRounds + 1) * 4;
      var keySchedule = [];
      for (var k3 = 0; k3 < keySize; k3++) {
        keySchedule[k3] = keyWords[k3];
      }
      for (k3 = keySize; k3 < ksRows; k3++) {
        var t3 = keySchedule[k3 - 1];
        if (k3 % keySize === 0) {
          t3 = t3 << 8 | t3 >>> 24;
          t3 = G3.SBOX[t3 >>> 24] << 24 | G3.SBOX[t3 >>> 16 & 255] << 16 | G3.SBOX[t3 >>> 8 & 255] << 8 | G3.SBOX[t3 & 255];
          t3 ^= RCON[k3 / keySize | 0] << 24;
        } else if (keySize > 6 && k3 % keySize === 4) {
          t3 = G3.SBOX[t3 >>> 24] << 24 | G3.SBOX[t3 >>> 16 & 255] << 16 | G3.SBOX[t3 >>> 8 & 255] << 8 | G3.SBOX[t3 & 255];
        }
        keySchedule[k3] = keySchedule[k3 - keySize] ^ t3;
      }
      var invKeySchedule = [];
      for (var ik = 0; ik < ksRows; ik++) {
        var ksR = ksRows - ik;
        var tt2 = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) {
          invKeySchedule[ik] = tt2;
        } else {
          invKeySchedule[ik] = G3.INV_SUB_MIX[0][G3.SBOX[tt2 >>> 24]] ^ G3.INV_SUB_MIX[1][G3.SBOX[tt2 >>> 16 & 255]] ^ G3.INV_SUB_MIX[2][G3.SBOX[tt2 >>> 8 & 255]] ^ G3.INV_SUB_MIX[3][G3.SBOX[tt2 & 255]];
        }
      }
      this._nRounds = nRounds;
      this._keySchedule = keySchedule;
      this._invKeySchedule = invKeySchedule;
    };
    AES.prototype.encryptBlockRaw = function(M3) {
      M3 = asUInt32Array(M3);
      return cryptBlock(M3, this._keySchedule, G3.SUB_MIX, G3.SBOX, this._nRounds);
    };
    AES.prototype.encryptBlock = function(M3) {
      var out = this.encryptBlockRaw(M3);
      var buf = Buffer2.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[1], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[3], 12);
      return buf;
    };
    AES.prototype.decryptBlock = function(M3) {
      M3 = asUInt32Array(M3);
      var m1 = M3[1];
      M3[1] = M3[3];
      M3[3] = m1;
      var out = cryptBlock(M3, this._invKeySchedule, G3.INV_SUB_MIX, G3.INV_SBOX, this._nRounds);
      var buf = Buffer2.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[3], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[1], 12);
      return buf;
    };
    AES.prototype.scrub = function() {
      scrubVec(this._keySchedule);
      scrubVec(this._invKeySchedule);
      scrubVec(this._key);
    };
    aes.AES = AES;
    return aes;
  }
  var ghash;
  var hasRequiredGhash;
  function requireGhash() {
    if (hasRequiredGhash) return ghash;
    hasRequiredGhash = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var ZEROES = Buffer2.alloc(16, 0);
    function toArray(buf) {
      return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
      ];
    }
    function fromArray(out) {
      var buf = Buffer2.allocUnsafe(16);
      buf.writeUInt32BE(out[0] >>> 0, 0);
      buf.writeUInt32BE(out[1] >>> 0, 4);
      buf.writeUInt32BE(out[2] >>> 0, 8);
      buf.writeUInt32BE(out[3] >>> 0, 12);
      return buf;
    }
    function GHASH(key2) {
      this.h = key2;
      this.state = Buffer2.alloc(16, 0);
      this.cache = Buffer2.allocUnsafe(0);
    }
    GHASH.prototype.ghash = function(block) {
      var i3 = -1;
      while (++i3 < block.length) {
        this.state[i3] ^= block[i3];
      }
      this._multiply();
    };
    GHASH.prototype._multiply = function() {
      var Vi2 = toArray(this.h);
      var Zi2 = [
        0,
        0,
        0,
        0
      ];
      var j3, xi2, lsbVi;
      var i3 = -1;
      while (++i3 < 128) {
        xi2 = (this.state[~~(i3 / 8)] & 1 << 7 - i3 % 8) !== 0;
        if (xi2) {
          Zi2[0] ^= Vi2[0];
          Zi2[1] ^= Vi2[1];
          Zi2[2] ^= Vi2[2];
          Zi2[3] ^= Vi2[3];
        }
        lsbVi = (Vi2[3] & 1) !== 0;
        for (j3 = 3; j3 > 0; j3--) {
          Vi2[j3] = Vi2[j3] >>> 1 | (Vi2[j3 - 1] & 1) << 31;
        }
        Vi2[0] = Vi2[0] >>> 1;
        if (lsbVi) {
          Vi2[0] = Vi2[0] ^ 225 << 24;
        }
      }
      this.state = fromArray(Zi2);
    };
    GHASH.prototype.update = function(buf) {
      this.cache = Buffer2.concat([
        this.cache,
        buf
      ]);
      var chunk;
      while (this.cache.length >= 16) {
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
      }
    };
    GHASH.prototype.final = function(abl, bl) {
      if (this.cache.length) {
        this.ghash(Buffer2.concat([
          this.cache,
          ZEROES
        ], 16));
      }
      this.ghash(fromArray([
        0,
        abl,
        0,
        bl
      ]));
      return this.state;
    };
    ghash = GHASH;
    return ghash;
  }
  var authCipher;
  var hasRequiredAuthCipher;
  function requireAuthCipher() {
    if (hasRequiredAuthCipher) return authCipher;
    hasRequiredAuthCipher = 1;
    var aes2 = requireAes();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var Transform = requireCipherBase();
    var inherits = requireInherits_browser();
    var GHASH = requireGhash();
    var xor2 = requireBufferXor();
    var incr32 = requireIncr32();
    function xorTest(a3, b3) {
      var out = 0;
      if (a3.length !== b3.length) out++;
      var len = Math.min(a3.length, b3.length);
      for (var i3 = 0; i3 < len; ++i3) {
        out += a3[i3] ^ b3[i3];
      }
      return out;
    }
    function calcIv(self2, iv, ck) {
      if (iv.length === 12) {
        self2._finID = Buffer2.concat([
          iv,
          Buffer2.from([
            0,
            0,
            0,
            1
          ])
        ]);
        return Buffer2.concat([
          iv,
          Buffer2.from([
            0,
            0,
            0,
            2
          ])
        ]);
      }
      var ghash2 = new GHASH(ck);
      var len = iv.length;
      var toPad = len % 16;
      ghash2.update(iv);
      if (toPad) {
        toPad = 16 - toPad;
        ghash2.update(Buffer2.alloc(toPad, 0));
      }
      ghash2.update(Buffer2.alloc(8, 0));
      var ivBits = len * 8;
      var tail = Buffer2.alloc(8);
      tail.writeUIntBE(ivBits, 0, 8);
      ghash2.update(tail);
      self2._finID = ghash2.state;
      var out = Buffer2.from(self2._finID);
      incr32(out);
      return out;
    }
    function StreamCipher(mode, key2, iv, decrypt) {
      Transform.call(this);
      var h3 = Buffer2.alloc(4, 0);
      this._cipher = new aes2.AES(key2);
      var ck = this._cipher.encryptBlock(h3);
      this._ghash = new GHASH(ck);
      iv = calcIv(this, iv, ck);
      this._prev = Buffer2.from(iv);
      this._cache = Buffer2.allocUnsafe(0);
      this._secCache = Buffer2.allocUnsafe(0);
      this._decrypt = decrypt;
      this._alen = 0;
      this._len = 0;
      this._mode = mode;
      this._authTag = null;
      this._called = false;
    }
    inherits(StreamCipher, Transform);
    StreamCipher.prototype._update = function(chunk) {
      if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
          rump = Buffer2.alloc(rump, 0);
          this._ghash.update(rump);
        }
      }
      this._called = true;
      var out = this._mode.encrypt(this, chunk);
      if (this._decrypt) {
        this._ghash.update(chunk);
      } else {
        this._ghash.update(out);
      }
      this._len += chunk.length;
      return out;
    };
    StreamCipher.prototype._final = function() {
      if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
      var tag = xor2(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
      if (this._decrypt && xorTest(tag, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
      this._authTag = tag;
      this._cipher.scrub();
    };
    StreamCipher.prototype.getAuthTag = function getAuthTag() {
      if (this._decrypt || !Buffer2.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
      return this._authTag;
    };
    StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
      if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
      this._authTag = tag;
    };
    StreamCipher.prototype.setAAD = function setAAD(buf) {
      if (this._called) throw new Error("Attempting to set AAD in unsupported state");
      this._ghash.update(buf);
      this._alen += buf.length;
    };
    authCipher = StreamCipher;
    return authCipher;
  }
  var streamCipher;
  var hasRequiredStreamCipher;
  function requireStreamCipher() {
    if (hasRequiredStreamCipher) return streamCipher;
    hasRequiredStreamCipher = 1;
    var aes2 = requireAes();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var Transform = requireCipherBase();
    var inherits = requireInherits_browser();
    function StreamCipher(mode, key2, iv, decrypt) {
      Transform.call(this);
      this._cipher = new aes2.AES(key2);
      this._prev = Buffer2.from(iv);
      this._cache = Buffer2.allocUnsafe(0);
      this._secCache = Buffer2.allocUnsafe(0);
      this._decrypt = decrypt;
      this._mode = mode;
    }
    inherits(StreamCipher, Transform);
    StreamCipher.prototype._update = function(chunk) {
      return this._mode.encrypt(this, chunk, this._decrypt);
    };
    StreamCipher.prototype._final = function() {
      this._cipher.scrub();
    };
    streamCipher = StreamCipher;
    return streamCipher;
  }
  var evp_bytestokey;
  var hasRequiredEvp_bytestokey;
  function requireEvp_bytestokey() {
    if (hasRequiredEvp_bytestokey) return evp_bytestokey;
    hasRequiredEvp_bytestokey = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var MD5 = requireMd5_js();
    function EVP_BytesToKey(password, salt, keyBits, ivLen) {
      if (!Buffer2.isBuffer(password)) password = Buffer2.from(password, "binary");
      if (salt) {
        if (!Buffer2.isBuffer(salt)) salt = Buffer2.from(salt, "binary");
        if (salt.length !== 8) throw new RangeError("salt should be Buffer with 8 byte length");
      }
      var keyLen = keyBits / 8;
      var key2 = Buffer2.alloc(keyLen);
      var iv = Buffer2.alloc(ivLen || 0);
      var tmp = Buffer2.alloc(0);
      while (keyLen > 0 || ivLen > 0) {
        var hash2 = new MD5();
        hash2.update(tmp);
        hash2.update(password);
        if (salt) hash2.update(salt);
        tmp = hash2.digest();
        var used = 0;
        if (keyLen > 0) {
          var keyStart = key2.length - keyLen;
          used = Math.min(keyLen, tmp.length);
          tmp.copy(key2, keyStart, 0, used);
          keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
          var ivStart = iv.length - ivLen;
          var length2 = Math.min(ivLen, tmp.length - used);
          tmp.copy(iv, ivStart, used, used + length2);
          ivLen -= length2;
        }
      }
      tmp.fill(0);
      return {
        key: key2,
        iv
      };
    }
    evp_bytestokey = EVP_BytesToKey;
    return evp_bytestokey;
  }
  var hasRequiredEncrypter;
  function requireEncrypter() {
    if (hasRequiredEncrypter) return encrypter;
    hasRequiredEncrypter = 1;
    var MODES = requireModes$1();
    var AuthCipher = requireAuthCipher();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var StreamCipher = requireStreamCipher();
    var Transform = requireCipherBase();
    var aes2 = requireAes();
    var ebtk = requireEvp_bytestokey();
    var inherits = requireInherits_browser();
    function Cipher(mode, key2, iv) {
      Transform.call(this);
      this._cache = new Splitter();
      this._cipher = new aes2.AES(key2);
      this._prev = Buffer2.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }
    inherits(Cipher, Transform);
    Cipher.prototype._update = function(data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while (chunk = this._cache.get()) {
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
      }
      return Buffer2.concat(out);
    };
    var PADDING = Buffer2.alloc(16, 16);
    Cipher.prototype._final = function() {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
      }
      if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
        throw new Error("data not multiple of block length");
      }
    };
    Cipher.prototype.setAutoPadding = function(setTo) {
      this._autopadding = !!setTo;
      return this;
    };
    function Splitter() {
      this.cache = Buffer2.allocUnsafe(0);
    }
    Splitter.prototype.add = function(data) {
      this.cache = Buffer2.concat([
        this.cache,
        data
      ]);
    };
    Splitter.prototype.get = function() {
      if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
      }
      return null;
    };
    Splitter.prototype.flush = function() {
      var len = 16 - this.cache.length;
      var padBuff = Buffer2.allocUnsafe(len);
      var i3 = -1;
      while (++i3 < len) {
        padBuff.writeUInt8(len, i3);
      }
      return Buffer2.concat([
        this.cache,
        padBuff
      ]);
    };
    function createCipheriv(suite, password, iv) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError("invalid suite type");
      if (typeof password === "string") password = Buffer2.from(password);
      if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
      if (typeof iv === "string") iv = Buffer2.from(iv);
      if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
      if (config.type === "stream") {
        return new StreamCipher(config.module, password, iv);
      } else if (config.type === "auth") {
        return new AuthCipher(config.module, password, iv);
      }
      return new Cipher(config.module, password, iv);
    }
    function createCipher(suite, password) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError("invalid suite type");
      var keys = ebtk(password, false, config.key, config.iv);
      return createCipheriv(suite, keys.key, keys.iv);
    }
    encrypter.createCipheriv = createCipheriv;
    encrypter.createCipher = createCipher;
    return encrypter;
  }
  var decrypter = {};
  var hasRequiredDecrypter;
  function requireDecrypter() {
    if (hasRequiredDecrypter) return decrypter;
    hasRequiredDecrypter = 1;
    var AuthCipher = requireAuthCipher();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var MODES = requireModes$1();
    var StreamCipher = requireStreamCipher();
    var Transform = requireCipherBase();
    var aes2 = requireAes();
    var ebtk = requireEvp_bytestokey();
    var inherits = requireInherits_browser();
    function Decipher(mode, key2, iv) {
      Transform.call(this);
      this._cache = new Splitter();
      this._last = void 0;
      this._cipher = new aes2.AES(key2);
      this._prev = Buffer2.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }
    inherits(Decipher, Transform);
    Decipher.prototype._update = function(data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while (chunk = this._cache.get(this._autopadding)) {
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
      }
      return Buffer2.concat(out);
    };
    Decipher.prototype._final = function() {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        return unpad(this._mode.decrypt(this, chunk));
      } else if (chunk) {
        throw new Error("data not multiple of block length");
      }
    };
    Decipher.prototype.setAutoPadding = function(setTo) {
      this._autopadding = !!setTo;
      return this;
    };
    function Splitter() {
      this.cache = Buffer2.allocUnsafe(0);
    }
    Splitter.prototype.add = function(data) {
      this.cache = Buffer2.concat([
        this.cache,
        data
      ]);
    };
    Splitter.prototype.get = function(autoPadding) {
      var out;
      if (autoPadding) {
        if (this.cache.length > 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      } else {
        if (this.cache.length >= 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      }
      return null;
    };
    Splitter.prototype.flush = function() {
      if (this.cache.length) return this.cache;
    };
    function unpad(last) {
      var padded = last[15];
      if (padded < 1 || padded > 16) {
        throw new Error("unable to decrypt data");
      }
      var i3 = -1;
      while (++i3 < padded) {
        if (last[i3 + (16 - padded)] !== padded) {
          throw new Error("unable to decrypt data");
        }
      }
      if (padded === 16) return;
      return last.slice(0, 16 - padded);
    }
    function createDecipheriv(suite, password, iv) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError("invalid suite type");
      if (typeof iv === "string") iv = Buffer2.from(iv);
      if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
      if (typeof password === "string") password = Buffer2.from(password);
      if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
      if (config.type === "stream") {
        return new StreamCipher(config.module, password, iv, true);
      } else if (config.type === "auth") {
        return new AuthCipher(config.module, password, iv, true);
      }
      return new Decipher(config.module, password, iv);
    }
    function createDecipher(suite, password) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError("invalid suite type");
      var keys = ebtk(password, false, config.key, config.iv);
      return createDecipheriv(suite, keys.key, keys.iv);
    }
    decrypter.createDecipher = createDecipher;
    decrypter.createDecipheriv = createDecipheriv;
    return decrypter;
  }
  var hasRequiredBrowser$6;
  function requireBrowser$6() {
    if (hasRequiredBrowser$6) return browser$5;
    hasRequiredBrowser$6 = 1;
    var ciphers = requireEncrypter();
    var deciphers = requireDecrypter();
    var modes2 = require$$2;
    function getCiphers() {
      return Object.keys(modes2);
    }
    browser$5.createCipher = browser$5.Cipher = ciphers.createCipher;
    browser$5.createCipheriv = browser$5.Cipheriv = ciphers.createCipheriv;
    browser$5.createDecipher = browser$5.Decipher = deciphers.createDecipher;
    browser$5.createDecipheriv = browser$5.Decipheriv = deciphers.createDecipheriv;
    browser$5.listCiphers = browser$5.getCiphers = getCiphers;
    return browser$5;
  }
  var modes = {};
  var hasRequiredModes;
  function requireModes() {
    if (hasRequiredModes) return modes;
    hasRequiredModes = 1;
    (function(exports2) {
      exports2["des-ecb"] = {
        key: 8,
        iv: 0
      };
      exports2["des-cbc"] = exports2.des = {
        key: 8,
        iv: 8
      };
      exports2["des-ede3-cbc"] = exports2.des3 = {
        key: 24,
        iv: 8
      };
      exports2["des-ede3"] = {
        key: 24,
        iv: 0
      };
      exports2["des-ede-cbc"] = {
        key: 16,
        iv: 8
      };
      exports2["des-ede"] = {
        key: 16,
        iv: 0
      };
    })(modes);
    return modes;
  }
  var hasRequiredBrowser$5;
  function requireBrowser$5() {
    if (hasRequiredBrowser$5) return browser$6;
    hasRequiredBrowser$5 = 1;
    var DES = requireBrowserifyDes();
    var aes2 = requireBrowser$6();
    var aesModes = requireModes$1();
    var desModes = requireModes();
    var ebtk = requireEvp_bytestokey();
    function createCipher(suite, password) {
      suite = suite.toLowerCase();
      var keyLen, ivLen;
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
        throw new TypeError("invalid suite type");
      }
      var keys = ebtk(password, false, keyLen, ivLen);
      return createCipheriv(suite, keys.key, keys.iv);
    }
    function createDecipher(suite, password) {
      suite = suite.toLowerCase();
      var keyLen, ivLen;
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
        throw new TypeError("invalid suite type");
      }
      var keys = ebtk(password, false, keyLen, ivLen);
      return createDecipheriv(suite, keys.key, keys.iv);
    }
    function createCipheriv(suite, key2, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite]) return aes2.createCipheriv(suite, key2, iv);
      if (desModes[suite]) return new DES({
        key: key2,
        iv,
        mode: suite
      });
      throw new TypeError("invalid suite type");
    }
    function createDecipheriv(suite, key2, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite]) return aes2.createDecipheriv(suite, key2, iv);
      if (desModes[suite]) return new DES({
        key: key2,
        iv,
        mode: suite,
        decrypt: true
      });
      throw new TypeError("invalid suite type");
    }
    function getCiphers() {
      return Object.keys(desModes).concat(aes2.getCiphers());
    }
    browser$6.createCipher = browser$6.Cipher = createCipher;
    browser$6.createCipheriv = browser$6.Cipheriv = createCipheriv;
    browser$6.createDecipher = browser$6.Decipher = createDecipher;
    browser$6.createDecipheriv = browser$6.Decipheriv = createDecipheriv;
    browser$6.listCiphers = browser$6.getCiphers = getCiphers;
    return browser$6;
  }
  var browser$4 = {};
  var bn$3 = {
    exports: {}
  };
  var bn$2 = bn$3.exports;
  var hasRequiredBn$1;
  function requireBn$1() {
    if (hasRequiredBn$1) return bn$3.exports;
    hasRequiredBn$1 = 1;
    (function(module) {
      (function(module2, exports2) {
        function assert(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number2, base2, endian) {
          if (BN.isBN(number2)) {
            return number2;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number2 !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number2 || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN;
        } else {
          exports2.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer2;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer2 = window.Buffer;
          } else {
            Buffer2 = requireDist$2().Buffer;
          }
        } catch (e3) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN.prototype._init = function init(number2, base2, endian) {
          if (typeof number2 === "number") {
            return this._initNumber(number2, base2, endian);
          }
          if (typeof number2 === "object") {
            return this._initArray(number2, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number2 = number2.toString().replace(/\s+/g, "");
          var start = 0;
          if (number2[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number2.length) {
            if (base2 === 16) {
              this._parseHex(number2, start, endian);
            } else {
              this._parseBase(number2, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN.prototype._initNumber = function _initNumber(number2, base2, endian) {
          if (number2 < 0) {
            this.negative = 1;
            number2 = -number2;
          }
          if (number2 < 67108864) {
            this.words = [
              number2 & 67108863
            ];
            this.length = 1;
          } else if (number2 < 4503599627370496) {
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert(number2 < 9007199254740992);
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initArray = function _initArray(number2, base2, endian) {
          assert(typeof number2.length === "number");
          if (number2.length <= 0) {
            this.words = [
              0
            ];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number2.length / 3);
          this.words = new Array(this.length);
          for (var i3 = 0; i3 < this.length; i3++) {
            this.words[i3] = 0;
          }
          var j3, w3;
          var off = 0;
          if (endian === "be") {
            for (i3 = number2.length - 1, j3 = 0; i3 >= 0; i3 -= 3) {
              w3 = number2[i3] | number2[i3 - 1] << 8 | number2[i3 - 2] << 16;
              this.words[j3] |= w3 << off & 67108863;
              this.words[j3 + 1] = w3 >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j3++;
              }
            }
          } else if (endian === "le") {
            for (i3 = 0, j3 = 0; i3 < number2.length; i3 += 3) {
              w3 = number2[i3] | number2[i3 + 1] << 8 | number2[i3 + 2] << 16;
              this.words[j3] |= w3 << off & 67108863;
              this.words[j3 + 1] = w3 >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j3++;
              }
            }
          }
          return this.strip();
        };
        function parseHex4Bits(string2, index2) {
          var c3 = string2.charCodeAt(index2);
          if (c3 >= 65 && c3 <= 70) {
            return c3 - 55;
          } else if (c3 >= 97 && c3 <= 102) {
            return c3 - 87;
          } else {
            return c3 - 48 & 15;
          }
        }
        function parseHexByte(string2, lowerBound, index2) {
          var r3 = parseHex4Bits(string2, index2);
          if (index2 - 1 >= lowerBound) {
            r3 |= parseHex4Bits(string2, index2 - 1) << 4;
          }
          return r3;
        }
        BN.prototype._parseHex = function _parseHex(number2, start, endian) {
          this.length = Math.ceil((number2.length - start) / 6);
          this.words = new Array(this.length);
          for (var i3 = 0; i3 < this.length; i3++) {
            this.words[i3] = 0;
          }
          var off = 0;
          var j3 = 0;
          var w3;
          if (endian === "be") {
            for (i3 = number2.length - 1; i3 >= start; i3 -= 2) {
              w3 = parseHexByte(number2, start, i3) << off;
              this.words[j3] |= w3 & 67108863;
              if (off >= 18) {
                off -= 18;
                j3 += 1;
                this.words[j3] |= w3 >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number2.length - start;
            for (i3 = parseLength % 2 === 0 ? start + 1 : start; i3 < number2.length; i3 += 2) {
              w3 = parseHexByte(number2, start, i3) << off;
              this.words[j3] |= w3 & 67108863;
              if (off >= 18) {
                off -= 18;
                j3 += 1;
                this.words[j3] |= w3 >>> 26;
              } else {
                off += 8;
              }
            }
          }
          this.strip();
        };
        function parseBase(str, start, end, mul) {
          var r3 = 0;
          var len = Math.min(str.length, end);
          for (var i3 = start; i3 < len; i3++) {
            var c3 = str.charCodeAt(i3) - 48;
            r3 *= mul;
            if (c3 >= 49) {
              r3 += c3 - 49 + 10;
            } else if (c3 >= 17) {
              r3 += c3 - 17 + 10;
            } else {
              r3 += c3;
            }
          }
          return r3;
        }
        BN.prototype._parseBase = function _parseBase(number2, base2, start) {
          this.words = [
            0
          ];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number2.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i3 = start; i3 < end; i3 += limbLen) {
            word = parseBase(number2, i3, i3 + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number2, i3, number2.length, base2);
            for (i3 = 0; i3 < mod; i3++) {
              pow *= base2;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this.strip();
        };
        BN.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for (var i3 = 0; i3 < this.length; i3++) {
            dest.words[i3] = this.words[i3];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN.prototype.clone = function clone() {
          var r3 = new BN(null);
          this.copy(r3);
          return r3;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN.prototype.inspect = function inspect() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i3 = 0; i3 < this.length; i3++) {
              var w3 = this.words[i3];
              var word = ((w3 << off | carry) & 16777215).toString(16);
              carry = w3 >>> 24 - off & 16777215;
              off += 2;
              if (off >= 26) {
                off -= 26;
                i3--;
              }
              if (carry !== 0 || i3 !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c3 = this.clone();
            c3.negative = 0;
            while (!c3.isZero()) {
              var r3 = c3.modn(groupBase).toString(base2);
              c3 = c3.idivn(groupBase);
              if (!c3.isZero()) {
                out = zeros[groupSize - r3.length] + r3 + out;
              } else {
                out = r3 + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON() {
          return this.toString(16);
        };
        BN.prototype.toBuffer = function toBuffer2(endian, length2) {
          assert(typeof Buffer2 !== "undefined");
          return this.toArrayLike(Buffer2, endian, length2);
        };
        BN.prototype.toArray = function toArray(endian, length2) {
          return this.toArrayLike(Array, endian, length2);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length2) {
          var byteLength = this.byteLength();
          var reqLength = length2 || Math.max(1, byteLength);
          assert(byteLength <= reqLength, "byte array longer than desired length");
          assert(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b3, i3;
          var q3 = this.clone();
          if (!littleEndian) {
            for (i3 = 0; i3 < reqLength - byteLength; i3++) {
              res[i3] = 0;
            }
            for (i3 = 0; !q3.isZero(); i3++) {
              b3 = q3.andln(255);
              q3.iushrn(8);
              res[reqLength - i3 - 1] = b3;
            }
          } else {
            for (i3 = 0; !q3.isZero(); i3++) {
              b3 = q3.andln(255);
              q3.iushrn(8);
              res[i3] = b3;
            }
            for (; i3 < reqLength; i3++) {
              res[i3] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w3) {
            return 32 - Math.clz32(w3);
          };
        } else {
          BN.prototype._countBits = function _countBits(w3) {
            var t3 = w3;
            var r3 = 0;
            if (t3 >= 4096) {
              r3 += 13;
              t3 >>>= 13;
            }
            if (t3 >= 64) {
              r3 += 7;
              t3 >>>= 7;
            }
            if (t3 >= 8) {
              r3 += 4;
              t3 >>>= 4;
            }
            if (t3 >= 2) {
              r3 += 2;
              t3 >>>= 2;
            }
            return r3 + t3;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w3) {
          if (w3 === 0) return 26;
          var t3 = w3;
          var r3 = 0;
          if ((t3 & 8191) === 0) {
            r3 += 13;
            t3 >>>= 13;
          }
          if ((t3 & 127) === 0) {
            r3 += 7;
            t3 >>>= 7;
          }
          if ((t3 & 15) === 0) {
            r3 += 4;
            t3 >>>= 4;
          }
          if ((t3 & 3) === 0) {
            r3 += 2;
            t3 >>>= 2;
          }
          if ((t3 & 1) === 0) {
            r3++;
          }
          return r3;
        };
        BN.prototype.bitLength = function bitLength() {
          var w3 = this.words[this.length - 1];
          var hi2 = this._countBits(w3);
          return (this.length - 1) * 26 + hi2;
        };
        function toBitArray(num) {
          var w3 = new Array(num.bitLength());
          for (var bit = 0; bit < w3.length; bit++) {
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w3[bit] = (num.words[off] & 1 << wbit) >>> wbit;
          }
          return w3;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r3 = 0;
          for (var i3 = 0; i3 < this.length; i3++) {
            var b3 = this._zeroBits(this.words[i3]);
            r3 += b3;
            if (b3 !== 26) break;
          }
          return r3;
        };
        BN.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i3 = 0; i3 < num.length; i3++) {
            this.words[i3] = this.words[i3] | num.words[i3];
          }
          return this.strip();
        };
        BN.prototype.ior = function ior(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or2(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b3;
          if (this.length > num.length) {
            b3 = num;
          } else {
            b3 = this;
          }
          for (var i3 = 0; i3 < b3.length; i3++) {
            this.words[i3] = this.words[i3] & num.words[i3];
          }
          this.length = b3.length;
          return this.strip();
        };
        BN.prototype.iand = function iand(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a3;
          var b3;
          if (this.length > num.length) {
            a3 = this;
            b3 = num;
          } else {
            a3 = num;
            b3 = this;
          }
          for (var i3 = 0; i3 < b3.length; i3++) {
            this.words[i3] = a3.words[i3] ^ b3.words[i3];
          }
          if (this !== a3) {
            for (; i3 < a3.length; i3++) {
              this.words[i3] = a3.words[i3];
            }
          }
          this.length = a3.length;
          return this.strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor2(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i3 = 0; i3 < bytesNeeded; i3++) {
            this.words[i3] = ~this.words[i3] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i3] = ~this.words[i3] & 67108863 >> 26 - bitsLeft;
          }
          return this.strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | 1 << wbit;
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r3;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r3 = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r3 = this.isub(num);
            num.negative = 1;
            return r3._normSign();
          }
          var a3, b3;
          if (this.length > num.length) {
            a3 = this;
            b3 = num;
          } else {
            a3 = num;
            b3 = this;
          }
          var carry = 0;
          for (var i3 = 0; i3 < b3.length; i3++) {
            r3 = (a3.words[i3] | 0) + (b3.words[i3] | 0) + carry;
            this.words[i3] = r3 & 67108863;
            carry = r3 >>> 26;
          }
          for (; carry !== 0 && i3 < a3.length; i3++) {
            r3 = (a3.words[i3] | 0) + carry;
            this.words[i3] = r3 & 67108863;
            carry = r3 >>> 26;
          }
          this.length = a3.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a3 !== this) {
            for (; i3 < a3.length; i3++) {
              this.words[i3] = a3.words[i3];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r3 = this.iadd(num);
            num.negative = 1;
            return r3._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a3, b3;
          if (cmp > 0) {
            a3 = this;
            b3 = num;
          } else {
            a3 = num;
            b3 = this;
          }
          var carry = 0;
          for (var i3 = 0; i3 < b3.length; i3++) {
            r3 = (a3.words[i3] | 0) - (b3.words[i3] | 0) + carry;
            carry = r3 >> 26;
            this.words[i3] = r3 & 67108863;
          }
          for (; carry !== 0 && i3 < a3.length; i3++) {
            r3 = (a3.words[i3] | 0) + carry;
            carry = r3 >> 26;
            this.words[i3] = r3 & 67108863;
          }
          if (carry === 0 && i3 < a3.length && a3 !== this) {
            for (; i3 < a3.length; i3++) {
              this.words[i3] = a3.words[i3];
            }
          }
          this.length = Math.max(this.length, i3);
          if (a3 !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a3 = self2.words[0] | 0;
          var b3 = num.words[0] | 0;
          var r3 = a3 * b3;
          var lo2 = r3 & 67108863;
          var carry = r3 / 67108864 | 0;
          out.words[0] = lo2;
          for (var k3 = 1; k3 < len; k3++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k3, num.length - 1);
            for (var j3 = Math.max(0, k3 - self2.length + 1); j3 <= maxJ; j3++) {
              var i3 = k3 - j3 | 0;
              a3 = self2.words[i3] | 0;
              b3 = num.words[j3] | 0;
              r3 = a3 * b3 + rword;
              ncarry += r3 / 67108864 | 0;
              rword = r3 & 67108863;
            }
            out.words[k3] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k3] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a3 = self2.words;
          var b3 = num.words;
          var o3 = out.words;
          var c3 = 0;
          var lo2;
          var mid;
          var hi2;
          var a0 = a3[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a3[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a22 = a3[2] | 0;
          var al2 = a22 & 8191;
          var ah2 = a22 >>> 13;
          var a32 = a3[3] | 0;
          var al3 = a32 & 8191;
          var ah3 = a32 >>> 13;
          var a4 = a3[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a3[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a3[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a3[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a3[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a3[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b3[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b3[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b22 = b3[2] | 0;
          var bl2 = b22 & 8191;
          var bh2 = b22 >>> 13;
          var b32 = b3[3] | 0;
          var bl3 = b32 & 8191;
          var bh3 = b32 >>> 13;
          var b4 = b3[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b3[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b3[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b3[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b3[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b3[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo2 = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi2 = Math.imul(ah0, bh0);
          var w02 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w02 >>> 26) | 0;
          w02 &= 67108863;
          lo2 = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi2 = Math.imul(ah1, bh0);
          lo2 = lo2 + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi2 = hi2 + Math.imul(ah0, bh1) | 0;
          var w1 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo2 = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi2 = Math.imul(ah2, bh0);
          lo2 = lo2 + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi2 = hi2 + Math.imul(ah1, bh1) | 0;
          lo2 = lo2 + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi2 = hi2 + Math.imul(ah0, bh2) | 0;
          var w22 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
          w22 &= 67108863;
          lo2 = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi2 = Math.imul(ah3, bh0);
          lo2 = lo2 + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi2 = hi2 + Math.imul(ah2, bh1) | 0;
          lo2 = lo2 + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi2 = hi2 + Math.imul(ah1, bh2) | 0;
          lo2 = lo2 + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi2 = hi2 + Math.imul(ah0, bh3) | 0;
          var w3 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo2 = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi2 = Math.imul(ah4, bh0);
          lo2 = lo2 + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi2 = hi2 + Math.imul(ah3, bh1) | 0;
          lo2 = lo2 + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi2 = hi2 + Math.imul(ah2, bh2) | 0;
          lo2 = lo2 + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi2 = hi2 + Math.imul(ah1, bh3) | 0;
          lo2 = lo2 + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi2 = hi2 + Math.imul(ah0, bh4) | 0;
          var w4 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo2 = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi2 = Math.imul(ah5, bh0);
          lo2 = lo2 + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi2 = hi2 + Math.imul(ah4, bh1) | 0;
          lo2 = lo2 + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi2 = hi2 + Math.imul(ah3, bh2) | 0;
          lo2 = lo2 + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi2 = hi2 + Math.imul(ah2, bh3) | 0;
          lo2 = lo2 + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi2 = hi2 + Math.imul(ah1, bh4) | 0;
          lo2 = lo2 + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi2 = hi2 + Math.imul(ah0, bh5) | 0;
          var w5 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo2 = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi2 = Math.imul(ah6, bh0);
          lo2 = lo2 + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi2 = hi2 + Math.imul(ah5, bh1) | 0;
          lo2 = lo2 + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi2 = hi2 + Math.imul(ah4, bh2) | 0;
          lo2 = lo2 + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi2 = hi2 + Math.imul(ah3, bh3) | 0;
          lo2 = lo2 + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi2 = hi2 + Math.imul(ah2, bh4) | 0;
          lo2 = lo2 + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi2 = hi2 + Math.imul(ah1, bh5) | 0;
          lo2 = lo2 + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi2 = hi2 + Math.imul(ah0, bh6) | 0;
          var w6 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo2 = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi2 = Math.imul(ah7, bh0);
          lo2 = lo2 + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi2 = hi2 + Math.imul(ah6, bh1) | 0;
          lo2 = lo2 + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi2 = hi2 + Math.imul(ah5, bh2) | 0;
          lo2 = lo2 + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi2 = hi2 + Math.imul(ah4, bh3) | 0;
          lo2 = lo2 + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi2 = hi2 + Math.imul(ah3, bh4) | 0;
          lo2 = lo2 + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi2 = hi2 + Math.imul(ah2, bh5) | 0;
          lo2 = lo2 + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi2 = hi2 + Math.imul(ah1, bh6) | 0;
          lo2 = lo2 + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi2 = hi2 + Math.imul(ah0, bh7) | 0;
          var w7 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo2 = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi2 = Math.imul(ah8, bh0);
          lo2 = lo2 + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi2 = hi2 + Math.imul(ah7, bh1) | 0;
          lo2 = lo2 + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi2 = hi2 + Math.imul(ah6, bh2) | 0;
          lo2 = lo2 + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi2 = hi2 + Math.imul(ah5, bh3) | 0;
          lo2 = lo2 + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi2 = hi2 + Math.imul(ah4, bh4) | 0;
          lo2 = lo2 + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi2 = hi2 + Math.imul(ah3, bh5) | 0;
          lo2 = lo2 + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi2 = hi2 + Math.imul(ah2, bh6) | 0;
          lo2 = lo2 + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi2 = hi2 + Math.imul(ah1, bh7) | 0;
          lo2 = lo2 + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi2 = hi2 + Math.imul(ah0, bh8) | 0;
          var w8 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo2 = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi2 = Math.imul(ah9, bh0);
          lo2 = lo2 + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi2 = hi2 + Math.imul(ah8, bh1) | 0;
          lo2 = lo2 + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi2 = hi2 + Math.imul(ah7, bh2) | 0;
          lo2 = lo2 + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi2 = hi2 + Math.imul(ah6, bh3) | 0;
          lo2 = lo2 + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi2 = hi2 + Math.imul(ah5, bh4) | 0;
          lo2 = lo2 + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi2 = hi2 + Math.imul(ah4, bh5) | 0;
          lo2 = lo2 + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi2 = hi2 + Math.imul(ah3, bh6) | 0;
          lo2 = lo2 + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi2 = hi2 + Math.imul(ah2, bh7) | 0;
          lo2 = lo2 + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi2 = hi2 + Math.imul(ah1, bh8) | 0;
          lo2 = lo2 + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi2 = hi2 + Math.imul(ah0, bh9) | 0;
          var w9 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo2 = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi2 = Math.imul(ah9, bh1);
          lo2 = lo2 + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi2 = hi2 + Math.imul(ah8, bh2) | 0;
          lo2 = lo2 + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi2 = hi2 + Math.imul(ah7, bh3) | 0;
          lo2 = lo2 + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi2 = hi2 + Math.imul(ah6, bh4) | 0;
          lo2 = lo2 + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi2 = hi2 + Math.imul(ah5, bh5) | 0;
          lo2 = lo2 + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi2 = hi2 + Math.imul(ah4, bh6) | 0;
          lo2 = lo2 + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi2 = hi2 + Math.imul(ah3, bh7) | 0;
          lo2 = lo2 + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi2 = hi2 + Math.imul(ah2, bh8) | 0;
          lo2 = lo2 + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi2 = hi2 + Math.imul(ah1, bh9) | 0;
          var w10 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo2 = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi2 = Math.imul(ah9, bh2);
          lo2 = lo2 + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi2 = hi2 + Math.imul(ah8, bh3) | 0;
          lo2 = lo2 + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi2 = hi2 + Math.imul(ah7, bh4) | 0;
          lo2 = lo2 + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi2 = hi2 + Math.imul(ah6, bh5) | 0;
          lo2 = lo2 + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi2 = hi2 + Math.imul(ah5, bh6) | 0;
          lo2 = lo2 + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi2 = hi2 + Math.imul(ah4, bh7) | 0;
          lo2 = lo2 + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi2 = hi2 + Math.imul(ah3, bh8) | 0;
          lo2 = lo2 + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi2 = hi2 + Math.imul(ah2, bh9) | 0;
          var w11 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo2 = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi2 = Math.imul(ah9, bh3);
          lo2 = lo2 + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi2 = hi2 + Math.imul(ah8, bh4) | 0;
          lo2 = lo2 + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi2 = hi2 + Math.imul(ah7, bh5) | 0;
          lo2 = lo2 + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi2 = hi2 + Math.imul(ah6, bh6) | 0;
          lo2 = lo2 + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi2 = hi2 + Math.imul(ah5, bh7) | 0;
          lo2 = lo2 + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi2 = hi2 + Math.imul(ah4, bh8) | 0;
          lo2 = lo2 + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi2 = hi2 + Math.imul(ah3, bh9) | 0;
          var w12 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo2 = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi2 = Math.imul(ah9, bh4);
          lo2 = lo2 + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi2 = hi2 + Math.imul(ah8, bh5) | 0;
          lo2 = lo2 + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi2 = hi2 + Math.imul(ah7, bh6) | 0;
          lo2 = lo2 + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi2 = hi2 + Math.imul(ah6, bh7) | 0;
          lo2 = lo2 + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi2 = hi2 + Math.imul(ah5, bh8) | 0;
          lo2 = lo2 + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi2 = hi2 + Math.imul(ah4, bh9) | 0;
          var w13 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo2 = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi2 = Math.imul(ah9, bh5);
          lo2 = lo2 + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi2 = hi2 + Math.imul(ah8, bh6) | 0;
          lo2 = lo2 + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi2 = hi2 + Math.imul(ah7, bh7) | 0;
          lo2 = lo2 + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi2 = hi2 + Math.imul(ah6, bh8) | 0;
          lo2 = lo2 + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi2 = hi2 + Math.imul(ah5, bh9) | 0;
          var w14 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo2 = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi2 = Math.imul(ah9, bh6);
          lo2 = lo2 + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi2 = hi2 + Math.imul(ah8, bh7) | 0;
          lo2 = lo2 + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi2 = hi2 + Math.imul(ah7, bh8) | 0;
          lo2 = lo2 + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi2 = hi2 + Math.imul(ah6, bh9) | 0;
          var w15 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo2 = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi2 = Math.imul(ah9, bh7);
          lo2 = lo2 + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi2 = hi2 + Math.imul(ah8, bh8) | 0;
          lo2 = lo2 + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi2 = hi2 + Math.imul(ah7, bh9) | 0;
          var w16 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo2 = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi2 = Math.imul(ah9, bh8);
          lo2 = lo2 + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi2 = hi2 + Math.imul(ah8, bh9) | 0;
          var w17 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo2 = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi2 = Math.imul(ah9, bh9);
          var w18 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o3[0] = w02;
          o3[1] = w1;
          o3[2] = w22;
          o3[3] = w3;
          o3[4] = w4;
          o3[5] = w5;
          o3[6] = w6;
          o3[7] = w7;
          o3[8] = w8;
          o3[9] = w9;
          o3[10] = w10;
          o3[11] = w11;
          o3[12] = w12;
          o3[13] = w13;
          o3[14] = w14;
          o3[15] = w15;
          o3[16] = w16;
          o3[17] = w17;
          o3[18] = w18;
          if (c3 !== 0) {
            o3[19] = c3;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k3 = 0; k3 < out.length - 1; k3++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k3, num.length - 1);
            for (var j3 = Math.max(0, k3 - self2.length + 1); j3 <= maxJ; j3++) {
              var i3 = k3 - j3;
              var a3 = self2.words[i3] | 0;
              var b3 = num.words[j3] | 0;
              var r3 = a3 * b3;
              var lo2 = r3 & 67108863;
              ncarry = ncarry + (r3 / 67108864 | 0) | 0;
              lo2 = lo2 + rword | 0;
              rword = lo2 & 67108863;
              ncarry = ncarry + (lo2 >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k3] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k3] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x3, y3) {
          this.x = x3;
          this.y = y3;
        }
        FFTM.prototype.makeRBT = function makeRBT(N3) {
          var t3 = new Array(N3);
          var l3 = BN.prototype._countBits(N3) - 1;
          for (var i3 = 0; i3 < N3; i3++) {
            t3[i3] = this.revBin(i3, l3, N3);
          }
          return t3;
        };
        FFTM.prototype.revBin = function revBin(x3, l3, N3) {
          if (x3 === 0 || x3 === N3 - 1) return x3;
          var rb = 0;
          for (var i3 = 0; i3 < l3; i3++) {
            rb |= (x3 & 1) << l3 - i3 - 1;
            x3 >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N3) {
          for (var i3 = 0; i3 < N3; i3++) {
            rtws[i3] = rws[rbt[i3]];
            itws[i3] = iws[rbt[i3]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N3, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N3);
          for (var s3 = 1; s3 < N3; s3 <<= 1) {
            var l3 = s3 << 1;
            var rtwdf = Math.cos(2 * Math.PI / l3);
            var itwdf = Math.sin(2 * Math.PI / l3);
            for (var p3 = 0; p3 < N3; p3 += l3) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j3 = 0; j3 < s3; j3++) {
                var re2 = rtws[p3 + j3];
                var ie2 = itws[p3 + j3];
                var ro2 = rtws[p3 + j3 + s3];
                var io2 = itws[p3 + j3 + s3];
                var rx = rtwdf_ * ro2 - itwdf_ * io2;
                io2 = rtwdf_ * io2 + itwdf_ * ro2;
                ro2 = rx;
                rtws[p3 + j3] = re2 + ro2;
                itws[p3 + j3] = ie2 + io2;
                rtws[p3 + j3 + s3] = re2 - ro2;
                itws[p3 + j3 + s3] = ie2 - io2;
                if (j3 !== l3) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n3, m3) {
          var N3 = Math.max(m3, n3) | 1;
          var odd = N3 & 1;
          var i3 = 0;
          for (N3 = N3 / 2 | 0; N3; N3 = N3 >>> 1) {
            i3++;
          }
          return 1 << i3 + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N3) {
          if (N3 <= 1) return;
          for (var i3 = 0; i3 < N3 / 2; i3++) {
            var t3 = rws[i3];
            rws[i3] = rws[N3 - i3 - 1];
            rws[N3 - i3 - 1] = t3;
            t3 = iws[i3];
            iws[i3] = -iws[N3 - i3 - 1];
            iws[N3 - i3 - 1] = -t3;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N3) {
          var carry = 0;
          for (var i3 = 0; i3 < N3 / 2; i3++) {
            var w3 = Math.round(ws[2 * i3 + 1] / N3) * 8192 + Math.round(ws[2 * i3] / N3) + carry;
            ws[i3] = w3 & 67108863;
            if (w3 < 67108864) {
              carry = 0;
            } else {
              carry = w3 / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N3) {
          var carry = 0;
          for (var i3 = 0; i3 < len; i3++) {
            carry = carry + (ws[i3] | 0);
            rws[2 * i3] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i3 + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i3 = 2 * len; i3 < N3; ++i3) {
            rws[i3] = 0;
          }
          assert(carry === 0);
          assert((carry & -8192) === 0);
        };
        FFTM.prototype.stub = function stub(N3) {
          var ph = new Array(N3);
          for (var i3 = 0; i3 < N3; i3++) {
            ph[i3] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x3, y3, out) {
          var N3 = 2 * this.guessLen13b(x3.length, y3.length);
          var rbt = this.makeRBT(N3);
          var _3 = this.stub(N3);
          var rws = new Array(N3);
          var rwst = new Array(N3);
          var iwst = new Array(N3);
          var nrws = new Array(N3);
          var nrwst = new Array(N3);
          var niwst = new Array(N3);
          var rmws = out.words;
          rmws.length = N3;
          this.convert13b(x3.words, x3.length, rws, N3);
          this.convert13b(y3.words, y3.length, nrws, N3);
          this.transform(rws, _3, rwst, iwst, N3, rbt);
          this.transform(nrws, _3, nrwst, niwst, N3, rbt);
          for (var i3 = 0; i3 < N3; i3++) {
            var rx = rwst[i3] * nrwst[i3] - iwst[i3] * niwst[i3];
            iwst[i3] = rwst[i3] * niwst[i3] + iwst[i3] * nrwst[i3];
            rwst[i3] = rx;
          }
          this.conjugate(rwst, iwst, N3);
          this.transform(rwst, iwst, rmws, _3, N3, rbt);
          this.conjugate(rmws, _3, N3);
          this.normalize13b(rmws, N3);
          out.negative = x3.negative ^ y3.negative;
          out.length = x3.length + y3.length;
          return out.strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          var carry = 0;
          for (var i3 = 0; i3 < this.length; i3++) {
            var w3 = (this.words[i3] | 0) * num;
            var lo2 = (w3 & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w3 / 67108864 | 0;
            carry += lo2 >>> 26;
            this.words[i3] = lo2 & 67108863;
          }
          if (carry !== 0) {
            this.words[i3] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w3 = toBitArray(num);
          if (w3.length === 0) return new BN(1);
          var res = this;
          for (var i3 = 0; i3 < w3.length; i3++, res = res.sqr()) {
            if (w3[i3] !== 0) break;
          }
          if (++i3 < w3.length) {
            for (var q3 = res.sqr(); i3 < w3.length; i3++, q3 = q3.sqr()) {
              if (w3[i3] === 0) continue;
              res = res.mul(q3);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r3 = bits % 26;
          var s3 = (bits - r3) / 26;
          var carryMask = 67108863 >>> 26 - r3 << 26 - r3;
          var i3;
          if (r3 !== 0) {
            var carry = 0;
            for (i3 = 0; i3 < this.length; i3++) {
              var newCarry = this.words[i3] & carryMask;
              var c3 = (this.words[i3] | 0) - newCarry << r3;
              this.words[i3] = c3 | carry;
              carry = newCarry >>> 26 - r3;
            }
            if (carry) {
              this.words[i3] = carry;
              this.length++;
            }
          }
          if (s3 !== 0) {
            for (i3 = this.length - 1; i3 >= 0; i3--) {
              this.words[i3 + s3] = this.words[i3];
            }
            for (i3 = 0; i3 < s3; i3++) {
              this.words[i3] = 0;
            }
            this.length += s3;
          }
          return this.strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert(typeof bits === "number" && bits >= 0);
          var h3;
          if (hint) {
            h3 = (hint - hint % 26) / 26;
          } else {
            h3 = 0;
          }
          var r3 = bits % 26;
          var s3 = Math.min((bits - r3) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r3 << r3;
          var maskedWords = extended;
          h3 -= s3;
          h3 = Math.max(0, h3);
          if (maskedWords) {
            for (var i3 = 0; i3 < s3; i3++) {
              maskedWords.words[i3] = this.words[i3];
            }
            maskedWords.length = s3;
          }
          if (s3 === 0) ;
          else if (this.length > s3) {
            this.length -= s3;
            for (i3 = 0; i3 < this.length; i3++) {
              this.words[i3] = this.words[i3 + s3];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i3 = this.length - 1; i3 >= 0 && (carry !== 0 || i3 >= h3); i3--) {
            var word = this.words[i3] | 0;
            this.words[i3] = carry << 26 - r3 | word >>> r3;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert(typeof bit === "number" && bit >= 0);
          var r3 = bit % 26;
          var s3 = (bit - r3) / 26;
          var q3 = 1 << r3;
          if (this.length <= s3) return false;
          var w3 = this.words[s3];
          return !!(w3 & q3);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r3 = bits % 26;
          var s3 = (bits - r3) / 26;
          assert(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s3) {
            return this;
          }
          if (r3 !== 0) {
            s3++;
          }
          this.length = Math.min(s3, this.length);
          if (r3 !== 0) {
            var mask = 67108863 ^ 67108863 >>> r3 << r3;
            this.words[this.length - 1] &= mask;
          }
          return this.strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i3 = 0; i3 < this.length && this.words[i3] >= 67108864; i3++) {
            this.words[i3] -= 67108864;
            if (i3 === this.length - 1) {
              this.words[i3 + 1] = 1;
            } else {
              this.words[i3 + 1]++;
            }
          }
          this.length = Math.max(this.length, i3 + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i3 = 0; i3 < this.length && this.words[i3] < 0; i3++) {
              this.words[i3] += 67108864;
              this.words[i3 + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i3;
          this._expand(len);
          var w3;
          var carry = 0;
          for (i3 = 0; i3 < num.length; i3++) {
            w3 = (this.words[i3 + shift] | 0) + carry;
            var right = (num.words[i3] | 0) * mul;
            w3 -= right & 67108863;
            carry = (w3 >> 26) - (right / 67108864 | 0);
            this.words[i3 + shift] = w3 & 67108863;
          }
          for (; i3 < this.length - shift; i3++) {
            w3 = (this.words[i3 + shift] | 0) + carry;
            carry = w3 >> 26;
            this.words[i3 + shift] = w3 & 67108863;
          }
          if (carry === 0) return this.strip();
          assert(carry === -1);
          carry = 0;
          for (i3 = 0; i3 < this.length; i3++) {
            w3 = -(this.words[i3] | 0) + carry;
            carry = w3 >> 26;
            this.words[i3] = w3 & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a3 = this.clone();
          var b3 = num;
          var bhi = b3.words[b3.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b3 = b3.ushln(shift);
            a3.iushln(shift);
            bhi = b3.words[b3.length - 1] | 0;
          }
          var m3 = a3.length - b3.length;
          var q3;
          if (mode !== "mod") {
            q3 = new BN(null);
            q3.length = m3 + 1;
            q3.words = new Array(q3.length);
            for (var i3 = 0; i3 < q3.length; i3++) {
              q3.words[i3] = 0;
            }
          }
          var diff = a3.clone()._ishlnsubmul(b3, 1, m3);
          if (diff.negative === 0) {
            a3 = diff;
            if (q3) {
              q3.words[m3] = 1;
            }
          }
          for (var j3 = m3 - 1; j3 >= 0; j3--) {
            var qj = (a3.words[b3.length + j3] | 0) * 67108864 + (a3.words[b3.length + j3 - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a3._ishlnsubmul(b3, qj, j3);
            while (a3.negative !== 0) {
              qj--;
              a3.negative = 0;
              a3._ishlnsubmul(b3, 1, j3);
              if (!a3.isZero()) {
                a3.negative ^= 1;
              }
            }
            if (q3) {
              q3.words[j3] = qj;
            }
          }
          if (q3) {
            q3.strip();
          }
          a3.strip();
          if (mode !== "div" && shift !== 0) {
            a3.iushrn(shift);
          }
          return {
            div: q3 || null,
            mod: a3
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r22 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r22 === 1 && cmp === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modn = function modn(num) {
          assert(num <= 67108863);
          var p3 = (1 << 26) % num;
          var acc = 0;
          for (var i3 = this.length - 1; i3 >= 0; i3--) {
            acc = (p3 * acc + (this.words[i3] | 0)) % num;
          }
          return acc;
        };
        BN.prototype.idivn = function idivn(num) {
          assert(num <= 67108863);
          var carry = 0;
          for (var i3 = this.length - 1; i3 >= 0; i3--) {
            var w3 = (this.words[i3] | 0) + carry * 67108864;
            this.words[i3] = w3 / num | 0;
            carry = w3 % num;
          }
          return this.strip();
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p3) {
          assert(p3.negative === 0);
          assert(!p3.isZero());
          var x3 = this;
          var y3 = p3.clone();
          if (x3.negative !== 0) {
            x3 = x3.umod(p3);
          } else {
            x3 = x3.clone();
          }
          var A3 = new BN(1);
          var B3 = new BN(0);
          var C3 = new BN(0);
          var D3 = new BN(1);
          var g3 = 0;
          while (x3.isEven() && y3.isEven()) {
            x3.iushrn(1);
            y3.iushrn(1);
            ++g3;
          }
          var yp = y3.clone();
          var xp = x3.clone();
          while (!x3.isZero()) {
            for (var i3 = 0, im = 1; (x3.words[0] & im) === 0 && i3 < 26; ++i3, im <<= 1) ;
            if (i3 > 0) {
              x3.iushrn(i3);
              while (i3-- > 0) {
                if (A3.isOdd() || B3.isOdd()) {
                  A3.iadd(yp);
                  B3.isub(xp);
                }
                A3.iushrn(1);
                B3.iushrn(1);
              }
            }
            for (var j3 = 0, jm = 1; (y3.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1) ;
            if (j3 > 0) {
              y3.iushrn(j3);
              while (j3-- > 0) {
                if (C3.isOdd() || D3.isOdd()) {
                  C3.iadd(yp);
                  D3.isub(xp);
                }
                C3.iushrn(1);
                D3.iushrn(1);
              }
            }
            if (x3.cmp(y3) >= 0) {
              x3.isub(y3);
              A3.isub(C3);
              B3.isub(D3);
            } else {
              y3.isub(x3);
              C3.isub(A3);
              D3.isub(B3);
            }
          }
          return {
            a: C3,
            b: D3,
            gcd: y3.iushln(g3)
          };
        };
        BN.prototype._invmp = function _invmp(p3) {
          assert(p3.negative === 0);
          assert(!p3.isZero());
          var a3 = this;
          var b3 = p3.clone();
          if (a3.negative !== 0) {
            a3 = a3.umod(p3);
          } else {
            a3 = a3.clone();
          }
          var x1 = new BN(1);
          var x22 = new BN(0);
          var delta = b3.clone();
          while (a3.cmpn(1) > 0 && b3.cmpn(1) > 0) {
            for (var i3 = 0, im = 1; (a3.words[0] & im) === 0 && i3 < 26; ++i3, im <<= 1) ;
            if (i3 > 0) {
              a3.iushrn(i3);
              while (i3-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j3 = 0, jm = 1; (b3.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1) ;
            if (j3 > 0) {
              b3.iushrn(j3);
              while (j3-- > 0) {
                if (x22.isOdd()) {
                  x22.iadd(delta);
                }
                x22.iushrn(1);
              }
            }
            if (a3.cmp(b3) >= 0) {
              a3.isub(b3);
              x1.isub(x22);
            } else {
              b3.isub(a3);
              x22.isub(x1);
            }
          }
          var res;
          if (a3.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x22;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p3);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a3 = this.clone();
          var b3 = num.clone();
          a3.negative = 0;
          b3.negative = 0;
          for (var shift = 0; a3.isEven() && b3.isEven(); shift++) {
            a3.iushrn(1);
            b3.iushrn(1);
          }
          do {
            while (a3.isEven()) {
              a3.iushrn(1);
            }
            while (b3.isEven()) {
              b3.iushrn(1);
            }
            var r3 = a3.cmp(b3);
            if (r3 < 0) {
              var t3 = a3;
              a3 = b3;
              b3 = t3;
            } else if (r3 === 0 || b3.cmpn(1) === 0) {
              break;
            }
            a3.isub(b3);
          } while (true);
          return b3.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert(typeof bit === "number");
          var r3 = bit % 26;
          var s3 = (bit - r3) / 26;
          var q3 = 1 << r3;
          if (this.length <= s3) {
            this._expand(s3 + 1);
            this.words[s3] |= q3;
            return this;
          }
          var carry = q3;
          for (var i3 = s3; carry !== 0 && i3 < this.length; i3++) {
            var w3 = this.words[i3] | 0;
            w3 += carry;
            carry = w3 >>> 26;
            w3 &= 67108863;
            this.words[i3] = w3;
          }
          if (carry !== 0) {
            this.words[i3] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert(num <= 67108863, "Number is too big");
            var w3 = this.words[0] | 0;
            res = w3 === num ? 0 : w3 < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i3 = this.length - 1; i3 >= 0; i3--) {
            var a3 = this.words[i3] | 0;
            var b3 = num.words[i3] | 0;
            if (a3 === b3) continue;
            if (a3 < b3) {
              res = -1;
            } else if (a3 > b3) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt2(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt2(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          assert(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name, p3) {
          this.name = name;
          this.p = new BN(p3, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r3 = num;
          var rlen;
          do {
            this.split(r3, this.tmp);
            r3 = this.imulK(r3);
            r3 = r3.iadd(this.tmp);
            rlen = r3.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r3.ucmp(this.p);
          if (cmp === 0) {
            r3.words[0] = 0;
            r3.length = 1;
          } else if (cmp > 0) {
            r3.isub(this.p);
          } else {
            if (r3.strip !== void 0) {
              r3.strip();
            } else {
              r3._strip();
            }
          }
          return r3;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
        }
        inherits(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i3 = 0; i3 < outLen; i3++) {
            output.words[i3] = input.words[i3];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i3 = 10; i3 < input.length; i3++) {
            var next = input.words[i3] | 0;
            input.words[i3 - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i3 - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo2 = 0;
          for (var i3 = 0; i3 < num.length; i3++) {
            var w3 = num.words[i3] | 0;
            lo2 += w3 * 977;
            num.words[i3] = lo2 & 67108863;
            lo2 = w3 * 64 + (lo2 / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
        }
        inherits(P224, MPrime);
        function P192() {
          MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
        }
        inherits(P192, MPrime);
        function P25519() {
          MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
        }
        inherits(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i3 = 0; i3 < num.length; i3++) {
            var hi2 = (num.words[i3] | 0) * 19 + carry;
            var lo2 = hi2 & 67108863;
            hi2 >>>= 26;
            num.words[i3] = lo2;
            carry = hi2;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name) {
          if (primes[name]) return primes[name];
          var prime2;
          if (name === "k256") {
            prime2 = new K256();
          } else if (name === "p224") {
            prime2 = new P224();
          } else if (name === "p192") {
            prime2 = new P192();
          } else if (name === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name);
          }
          primes[name] = prime2;
          return prime2;
        };
        function Red(m3) {
          if (typeof m3 === "string") {
            var prime = BN._prime(m3);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert(m3.gtn(1), "modulus must be greater than 1");
            this.m = m3;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a3) {
          assert(a3.negative === 0, "red works only with positives");
          assert(a3.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a3, b3) {
          assert((a3.negative | b3.negative) === 0, "red works only with positives");
          assert(a3.red && a3.red === b3.red, "red works only with red numbers");
        };
        Red.prototype.imod = function imod(a3) {
          if (this.prime) return this.prime.ireduce(a3)._forceRed(this);
          return a3.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg(a3) {
          if (a3.isZero()) {
            return a3.clone();
          }
          return this.m.sub(a3)._forceRed(this);
        };
        Red.prototype.add = function add(a3, b3) {
          this._verify2(a3, b3);
          var res = a3.add(b3);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a3, b3) {
          this._verify2(a3, b3);
          var res = a3.iadd(b3);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a3, b3) {
          this._verify2(a3, b3);
          var res = a3.sub(b3);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a3, b3) {
          this._verify2(a3, b3);
          var res = a3.isub(b3);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a3, num) {
          this._verify1(a3);
          return this.imod(a3.ushln(num));
        };
        Red.prototype.imul = function imul(a3, b3) {
          this._verify2(a3, b3);
          return this.imod(a3.imul(b3));
        };
        Red.prototype.mul = function mul(a3, b3) {
          this._verify2(a3, b3);
          return this.imod(a3.mul(b3));
        };
        Red.prototype.isqr = function isqr(a3) {
          return this.imul(a3, a3.clone());
        };
        Red.prototype.sqr = function sqr(a3) {
          return this.mul(a3, a3);
        };
        Red.prototype.sqrt = function sqrt(a3) {
          if (a3.isZero()) return a3.clone();
          var mod3 = this.m.andln(3);
          assert(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a3, pow);
          }
          var q3 = this.m.subn(1);
          var s3 = 0;
          while (!q3.isZero() && q3.andln(1) === 0) {
            s3++;
            q3.iushrn(1);
          }
          assert(!q3.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z3 = this.m.bitLength();
          z3 = new BN(2 * z3 * z3).toRed(this);
          while (this.pow(z3, lpow).cmp(nOne) !== 0) {
            z3.redIAdd(nOne);
          }
          var c3 = this.pow(z3, q3);
          var r3 = this.pow(a3, q3.addn(1).iushrn(1));
          var t3 = this.pow(a3, q3);
          var m3 = s3;
          while (t3.cmp(one) !== 0) {
            var tmp = t3;
            for (var i3 = 0; tmp.cmp(one) !== 0; i3++) {
              tmp = tmp.redSqr();
            }
            assert(i3 < m3);
            var b3 = this.pow(c3, new BN(1).iushln(m3 - i3 - 1));
            r3 = r3.redMul(b3);
            c3 = b3.redSqr();
            t3 = t3.redMul(c3);
            m3 = i3;
          }
          return r3;
        };
        Red.prototype.invm = function invm(a3) {
          var inv = a3._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a3, num) {
          if (num.isZero()) return new BN(1).toRed(this);
          if (num.cmpn(1) === 0) return a3.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a3;
          for (var i3 = 2; i3 < wnd.length; i3++) {
            wnd[i3] = this.mul(wnd[i3 - 1], a3);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i3 = num.length - 1; i3 >= 0; i3--) {
            var word = num.words[i3];
            for (var j3 = start - 1; j3 >= 0; j3--) {
              var bit = word >> j3 & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i3 !== 0 || j3 !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r3 = num.umod(this.m);
          return r3 === num ? r3.clone() : r3;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont2(num) {
          return new Mont(num);
        };
        function Mont(m3) {
          Red.call(this, m3);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r3 = this.imod(num.mul(this.rinv));
          r3.red = null;
          return r3;
        };
        Mont.prototype.imul = function imul(a3, b3) {
          if (a3.isZero() || b3.isZero()) {
            a3.words[0] = 0;
            a3.length = 1;
            return a3;
          }
          var t3 = a3.imul(b3);
          var c3 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u3 = t3.isub(c3).iushrn(this.shift);
          var res = u3;
          if (u3.cmp(this.m) >= 0) {
            res = u3.isub(this.m);
          } else if (u3.cmpn(0) < 0) {
            res = u3.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a3, b3) {
          if (a3.isZero() || b3.isZero()) return new BN(0)._forceRed(this);
          var t3 = a3.mul(b3);
          var c3 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u3 = t3.isub(c3).iushrn(this.shift);
          var res = u3;
          if (u3.cmp(this.m) >= 0) {
            res = u3.isub(this.m);
          } else if (u3.cmpn(0) < 0) {
            res = u3.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a3) {
          var res = this.imod(a3._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(module, bn$2);
    })(bn$3);
    return bn$3.exports;
  }
  var brorand = {
    exports: {}
  };
  var hasRequiredBrorand;
  function requireBrorand() {
    if (hasRequiredBrorand) return brorand.exports;
    hasRequiredBrorand = 1;
    var r3;
    brorand.exports = function rand(len) {
      if (!r3) r3 = new Rand(null);
      return r3.generate(len);
    };
    function Rand(rand) {
      this.rand = rand;
    }
    brorand.exports.Rand = Rand;
    Rand.prototype.generate = function generate2(len) {
      return this._rand(len);
    };
    Rand.prototype._rand = function _rand(n3) {
      if (this.rand.getBytes) return this.rand.getBytes(n3);
      var res = new Uint8Array(n3);
      for (var i3 = 0; i3 < res.length; i3++) res[i3] = this.rand.getByte();
      return res;
    };
    if (typeof self === "object") {
      if (self.crypto && self.crypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n3) {
          var arr = new Uint8Array(n3);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n3) {
          var arr = new Uint8Array(n3);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };
      } else if (typeof window === "object") {
        Rand.prototype._rand = function() {
          throw new Error("Not implemented yet");
        };
      }
    } else {
      try {
        var crypto = requireCryptoBrowserify();
        if (typeof crypto.randomBytes !== "function") throw new Error("Not supported");
        Rand.prototype._rand = function _rand(n3) {
          return crypto.randomBytes(n3);
        };
      } catch (e3) {
      }
    }
    return brorand.exports;
  }
  var mr$1;
  var hasRequiredMr;
  function requireMr() {
    if (hasRequiredMr) return mr$1;
    hasRequiredMr = 1;
    var bn2 = requireBn$1();
    var brorand2 = requireBrorand();
    function MillerRabin(rand) {
      this.rand = rand || new brorand2.Rand();
    }
    mr$1 = MillerRabin;
    MillerRabin.create = function create(rand) {
      return new MillerRabin(rand);
    };
    MillerRabin.prototype._randbelow = function _randbelow(n3) {
      var len = n3.bitLength();
      var min_bytes = Math.ceil(len / 8);
      do
        var a3 = new bn2(this.rand.generate(min_bytes));
      while (a3.cmp(n3) >= 0);
      return a3;
    };
    MillerRabin.prototype._randrange = function _randrange(start, stop) {
      var size = stop.sub(start);
      return start.add(this._randbelow(size));
    };
    MillerRabin.prototype.test = function test(n3, k3, cb) {
      var len = n3.bitLength();
      var red = bn2.mont(n3);
      var rone = new bn2(1).toRed(red);
      if (!k3) k3 = Math.max(1, len / 48 | 0);
      var n1 = n3.subn(1);
      for (var s3 = 0; !n1.testn(s3); s3++) {
      }
      var d3 = n3.shrn(s3);
      var rn1 = n1.toRed(red);
      var prime = true;
      for (; k3 > 0; k3--) {
        var a3 = this._randrange(new bn2(2), n1);
        if (cb) cb(a3);
        var x3 = a3.toRed(red).redPow(d3);
        if (x3.cmp(rone) === 0 || x3.cmp(rn1) === 0) continue;
        for (var i3 = 1; i3 < s3; i3++) {
          x3 = x3.redSqr();
          if (x3.cmp(rone) === 0) return false;
          if (x3.cmp(rn1) === 0) break;
        }
        if (i3 === s3) return false;
      }
      return prime;
    };
    MillerRabin.prototype.getDivisor = function getDivisor(n3, k3) {
      var len = n3.bitLength();
      var red = bn2.mont(n3);
      var rone = new bn2(1).toRed(red);
      if (!k3) k3 = Math.max(1, len / 48 | 0);
      var n1 = n3.subn(1);
      for (var s3 = 0; !n1.testn(s3); s3++) {
      }
      var d3 = n3.shrn(s3);
      var rn1 = n1.toRed(red);
      for (; k3 > 0; k3--) {
        var a3 = this._randrange(new bn2(2), n1);
        var g3 = n3.gcd(a3);
        if (g3.cmpn(1) !== 0) return g3;
        var x3 = a3.toRed(red).redPow(d3);
        if (x3.cmp(rone) === 0 || x3.cmp(rn1) === 0) continue;
        for (var i3 = 1; i3 < s3; i3++) {
          x3 = x3.redSqr();
          if (x3.cmp(rone) === 0) return x3.fromRed().subn(1).gcd(n3);
          if (x3.cmp(rn1) === 0) break;
        }
        if (i3 === s3) {
          x3 = x3.redSqr();
          return x3.fromRed().subn(1).gcd(n3);
        }
      }
      return false;
    };
    return mr$1;
  }
  var generatePrime;
  var hasRequiredGeneratePrime;
  function requireGeneratePrime() {
    if (hasRequiredGeneratePrime) return generatePrime;
    hasRequiredGeneratePrime = 1;
    var randomBytes = requireBrowser$a();
    generatePrime = findPrime;
    findPrime.simpleSieve = simpleSieve;
    findPrime.fermatTest = fermatTest;
    var BN = requireBn$1();
    var TWENTYFOUR = new BN(24);
    var MillerRabin = requireMr();
    var millerRabin = new MillerRabin();
    var ONE = new BN(1);
    var TWO = new BN(2);
    var FIVE = new BN(5);
    new BN(16);
    new BN(8);
    var TEN = new BN(10);
    var THREE = new BN(3);
    new BN(7);
    var ELEVEN = new BN(11);
    var FOUR = new BN(4);
    new BN(12);
    var primes = null;
    function _getPrimes() {
      if (primes !== null) return primes;
      var limit = 1048576;
      var res = [];
      res[0] = 2;
      for (var i3 = 1, k3 = 3; k3 < limit; k3 += 2) {
        var sqrt = Math.ceil(Math.sqrt(k3));
        for (var j3 = 0; j3 < i3 && res[j3] <= sqrt; j3++) if (k3 % res[j3] === 0) break;
        if (i3 !== j3 && res[j3] <= sqrt) continue;
        res[i3++] = k3;
      }
      primes = res;
      return res;
    }
    function simpleSieve(p3) {
      var primes2 = _getPrimes();
      for (var i3 = 0; i3 < primes2.length; i3++) if (p3.modn(primes2[i3]) === 0) {
        if (p3.cmpn(primes2[i3]) === 0) {
          return true;
        } else {
          return false;
        }
      }
      return true;
    }
    function fermatTest(p3) {
      var red = BN.mont(p3);
      return TWO.toRed(red).redPow(p3.subn(1)).fromRed().cmpn(1) === 0;
    }
    function findPrime(bits, gen) {
      if (bits < 16) {
        if (gen === 2 || gen === 5) {
          return new BN([
            140,
            123
          ]);
        } else {
          return new BN([
            140,
            39
          ]);
        }
      }
      gen = new BN(gen);
      var num, n22;
      while (true) {
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while (num.bitLength() > bits) {
          num.ishrn(1);
        }
        if (num.isEven()) {
          num.iadd(ONE);
        }
        if (!num.testn(1)) {
          num.iadd(TWO);
        }
        if (!gen.cmp(TWO)) {
          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
            num.iadd(FOUR);
          }
        } else if (!gen.cmp(FIVE)) {
          while (num.mod(TEN).cmp(THREE)) {
            num.iadd(FOUR);
          }
        }
        n22 = num.shrn(1);
        if (simpleSieve(n22) && simpleSieve(num) && fermatTest(n22) && fermatTest(num) && millerRabin.test(n22) && millerRabin.test(num)) {
          return num;
        }
      }
    }
    return generatePrime;
  }
  const modp1 = {
    "gen": "02",
    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
  };
  const modp2 = {
    "gen": "02",
    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
  };
  const modp5 = {
    "gen": "02",
    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
  };
  const modp14 = {
    "gen": "02",
    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
  };
  const modp15 = {
    "gen": "02",
    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
  };
  const modp16 = {
    "gen": "02",
    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
  };
  const modp17 = {
    "gen": "02",
    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
  };
  const modp18 = {
    "gen": "02",
    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
  };
  const require$$1$1 = {
    modp1,
    modp2,
    modp5,
    modp14,
    modp15,
    modp16,
    modp17,
    modp18
  };
  var dh;
  var hasRequiredDh;
  function requireDh() {
    if (hasRequiredDh) return dh;
    hasRequiredDh = 1;
    var BN = requireBn$1();
    var MillerRabin = requireMr();
    var millerRabin = new MillerRabin();
    var TWENTYFOUR = new BN(24);
    var ELEVEN = new BN(11);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var primes = requireGeneratePrime();
    var randomBytes = requireBrowser$a();
    dh = DH;
    function setPublicKey(pub, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(pub)) {
        pub = new Buffer(pub, enc);
      }
      this._pub = new BN(pub);
      return this;
    }
    function setPrivateKey(priv, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(priv)) {
        priv = new Buffer(priv, enc);
      }
      this._priv = new BN(priv);
      return this;
    }
    var primeCache = {};
    function checkPrime(prime, generator) {
      var gen = generator.toString("hex");
      var hex = [
        gen,
        prime.toString(16)
      ].join("_");
      if (hex in primeCache) {
        return primeCache[hex];
      }
      var error = 0;
      if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
        error += 1;
        if (gen === "02" || gen === "05") {
          error += 8;
        } else {
          error += 4;
        }
        primeCache[hex] = error;
        return error;
      }
      if (!millerRabin.test(prime.shrn(1))) {
        error += 2;
      }
      var rem;
      switch (gen) {
        case "02":
          if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
            error += 8;
          }
          break;
        case "05":
          rem = prime.mod(TEN);
          if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
            error += 8;
          }
          break;
        default:
          error += 4;
      }
      primeCache[hex] = error;
      return error;
    }
    function DH(prime, generator, malleable) {
      this.setGenerator(generator);
      this.__prime = new BN(prime);
      this._prime = BN.mont(this.__prime);
      this._primeLen = prime.length;
      this._pub = void 0;
      this._priv = void 0;
      this._primeCode = void 0;
      if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
      } else {
        this._primeCode = 8;
      }
    }
    Object.defineProperty(DH.prototype, "verifyError", {
      enumerable: true,
      get: function() {
        if (typeof this._primeCode !== "number") {
          this._primeCode = checkPrime(this.__prime, this.__gen);
        }
        return this._primeCode;
      }
    });
    DH.prototype.generateKeys = function() {
      if (!this._priv) {
        this._priv = new BN(randomBytes(this._primeLen));
      }
      this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
      return this.getPublicKey();
    };
    DH.prototype.computeSecret = function(other) {
      other = new BN(other);
      other = other.toRed(this._prime);
      var secret = other.redPow(this._priv).fromRed();
      var out = new Buffer(secret.toArray());
      var prime = this.getPrime();
      if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([
          front,
          out
        ]);
      }
      return out;
    };
    DH.prototype.getPublicKey = function getPublicKey(enc) {
      return formatReturnValue(this._pub, enc);
    };
    DH.prototype.getPrivateKey = function getPrivateKey(enc) {
      return formatReturnValue(this._priv, enc);
    };
    DH.prototype.getPrime = function(enc) {
      return formatReturnValue(this.__prime, enc);
    };
    DH.prototype.getGenerator = function(enc) {
      return formatReturnValue(this._gen, enc);
    };
    DH.prototype.setGenerator = function(gen, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(gen)) {
        gen = new Buffer(gen, enc);
      }
      this.__gen = gen;
      this._gen = new BN(gen);
      return this;
    };
    function formatReturnValue(bn2, enc) {
      var buf = new Buffer(bn2.toArray());
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }
    return dh;
  }
  var hasRequiredBrowser$4;
  function requireBrowser$4() {
    if (hasRequiredBrowser$4) return browser$4;
    hasRequiredBrowser$4 = 1;
    var generatePrime2 = requireGeneratePrime();
    var primes = require$$1$1;
    var DH = requireDh();
    function getDiffieHellman(mod) {
      var prime = new Buffer(primes[mod].prime, "hex");
      var gen = new Buffer(primes[mod].gen, "hex");
      return new DH(prime, gen);
    }
    var ENCODINGS = {
      "binary": true,
      "hex": true,
      "base64": true
    };
    function createDiffieHellman(prime, enc, generator, genc) {
      if (Buffer.isBuffer(enc) || ENCODINGS[enc] === void 0) {
        return createDiffieHellman(prime, "binary", enc, generator);
      }
      enc = enc || "binary";
      genc = genc || "binary";
      generator = generator || new Buffer([
        2
      ]);
      if (!Buffer.isBuffer(generator)) {
        generator = new Buffer(generator, genc);
      }
      if (typeof prime === "number") {
        return new DH(generatePrime2(prime, generator), generator, true);
      }
      if (!Buffer.isBuffer(prime)) {
        prime = new Buffer(prime, enc);
      }
      return new DH(prime, generator, true);
    }
    browser$4.DiffieHellmanGroup = browser$4.createDiffieHellmanGroup = browser$4.getDiffieHellman = getDiffieHellman;
    browser$4.createDiffieHellman = browser$4.DiffieHellman = createDiffieHellman;
    return browser$4;
  }
  var readableBrowser = {
    exports: {}
  };
  var processNextickArgs = {
    exports: {}
  };
  var hasRequiredProcessNextickArgs;
  function requireProcessNextickArgs() {
    if (hasRequiredProcessNextickArgs) return processNextickArgs.exports;
    hasRequiredProcessNextickArgs = 1;
    if (typeof process$1 === "undefined" || !process$1.version || process$1.version.indexOf("v0.") === 0 || process$1.version.indexOf("v1.") === 0 && process$1.version.indexOf("v1.8.") !== 0) {
      processNextickArgs.exports = {
        nextTick
      };
    } else {
      processNextickArgs.exports = process$1;
    }
    function nextTick(fn2, arg1, arg2, arg3) {
      if (typeof fn2 !== "function") {
        throw new TypeError('"callback" argument must be a function');
      }
      var len = arguments.length;
      var args, i3;
      switch (len) {
        case 0:
        case 1:
          return process$1.nextTick(fn2);
        case 2:
          return process$1.nextTick(function afterTickOne() {
            fn2.call(null, arg1);
          });
        case 3:
          return process$1.nextTick(function afterTickTwo() {
            fn2.call(null, arg1, arg2);
          });
        case 4:
          return process$1.nextTick(function afterTickThree() {
            fn2.call(null, arg1, arg2, arg3);
          });
        default:
          args = new Array(len - 1);
          i3 = 0;
          while (i3 < args.length) {
            args[i3++] = arguments[i3];
          }
          return process$1.nextTick(function afterTick() {
            fn2.apply(null, args);
          });
      }
    }
    return processNextickArgs.exports;
  }
  var isarray;
  var hasRequiredIsarray;
  function requireIsarray() {
    if (hasRequiredIsarray) return isarray;
    hasRequiredIsarray = 1;
    var toString = {}.toString;
    isarray = Array.isArray || function(arr) {
      return toString.call(arr) == "[object Array]";
    };
    return isarray;
  }
  var streamBrowser;
  var hasRequiredStreamBrowser;
  function requireStreamBrowser() {
    if (hasRequiredStreamBrowser) return streamBrowser;
    hasRequiredStreamBrowser = 1;
    streamBrowser = requireEvents().EventEmitter;
    return streamBrowser;
  }
  var safeBuffer = {
    exports: {}
  };
  var hasRequiredSafeBuffer;
  function requireSafeBuffer() {
    if (hasRequiredSafeBuffer) return safeBuffer.exports;
    hasRequiredSafeBuffer = 1;
    (function(module, exports2) {
      var buffer2 = requireDist$2();
      var Buffer2 = buffer2.Buffer;
      function copyProps(src, dst) {
        for (var key2 in src) {
          dst[key2] = src[key2];
        }
      }
      if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
        module.exports = buffer2;
      } else {
        copyProps(buffer2, exports2);
        exports2.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length2) {
        return Buffer2(arg, encodingOrOffset, length2);
      }
      copyProps(Buffer2, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length2) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer2(arg, encodingOrOffset, length2);
      };
      SafeBuffer.alloc = function(size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer2(size);
        if (fill !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer2(size);
      };
      SafeBuffer.allocUnsafeSlow = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer2.SlowBuffer(size);
      };
    })(safeBuffer, safeBuffer.exports);
    return safeBuffer.exports;
  }
  var util = {};
  var hasRequiredUtil;
  function requireUtil() {
    if (hasRequiredUtil) return util;
    hasRequiredUtil = 1;
    function isArray(arg) {
      if (Array.isArray) {
        return Array.isArray(arg);
      }
      return objectToString(arg) === "[object Array]";
    }
    util.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    util.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    util.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    util.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    util.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === "string";
    }
    util.isString = isString;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    util.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    util.isUndefined = isUndefined;
    function isRegExp(re2) {
      return objectToString(re2) === "[object RegExp]";
    }
    util.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    util.isObject = isObject;
    function isDate(d3) {
      return objectToString(d3) === "[object Date]";
    }
    util.isDate = isDate;
    function isError(e3) {
      return objectToString(e3) === "[object Error]" || e3 instanceof Error;
    }
    util.isError = isError;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    util.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
    }
    util.isPrimitive = isPrimitive;
    util.isBuffer = requireDist$2().Buffer.isBuffer;
    function objectToString(o3) {
      return Object.prototype.toString.call(o3);
    }
    return util;
  }
  var BufferList = {
    exports: {}
  };
  var hasRequiredBufferList;
  function requireBufferList() {
    if (hasRequiredBufferList) return BufferList.exports;
    hasRequiredBufferList = 1;
    (function(module) {
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var Buffer2 = requireSafeBuffer().Buffer;
      var util2 = requireUtil$1();
      function copyBuffer(src, target, offset) {
        src.copy(target, offset);
      }
      module.exports = function() {
        function BufferList2() {
          _classCallCheck(this, BufferList2);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        BufferList2.prototype.push = function push(v3) {
          var entry = {
            data: v3,
            next: null
          };
          if (this.length > 0) this.tail.next = entry;
          else this.head = entry;
          this.tail = entry;
          ++this.length;
        };
        BufferList2.prototype.unshift = function unshift(v3) {
          var entry = {
            data: v3,
            next: this.head
          };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        };
        BufferList2.prototype.shift = function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;
          else this.head = this.head.next;
          --this.length;
          return ret;
        };
        BufferList2.prototype.clear = function clear() {
          this.head = this.tail = null;
          this.length = 0;
        };
        BufferList2.prototype.join = function join(s3) {
          if (this.length === 0) return "";
          var p3 = this.head;
          var ret = "" + p3.data;
          while (p3 = p3.next) {
            ret += s3 + p3.data;
          }
          return ret;
        };
        BufferList2.prototype.concat = function concat(n3) {
          if (this.length === 0) return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n3 >>> 0);
          var p3 = this.head;
          var i3 = 0;
          while (p3) {
            copyBuffer(p3.data, ret, i3);
            i3 += p3.data.length;
            p3 = p3.next;
          }
          return ret;
        };
        return BufferList2;
      }();
      if (util2 && util2.inspect && util2.inspect.custom) {
        module.exports.prototype[util2.inspect.custom] = function() {
          var obj = util2.inspect({
            length: this.length
          });
          return this.constructor.name + " " + obj;
        };
      }
    })(BufferList);
    return BufferList.exports;
  }
  var destroy_1;
  var hasRequiredDestroy;
  function requireDestroy() {
    if (hasRequiredDestroy) return destroy_1;
    hasRequiredDestroy = 1;
    var pna = requireProcessNextickArgs();
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            pna.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            pna.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            pna.nextTick(emitErrorNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            pna.nextTick(emitErrorNT, _this, err2);
          }
        } else if (cb) {
          cb(err2);
        }
      });
      return this;
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    destroy_1 = {
      destroy,
      undestroy
    };
    return destroy_1;
  }
  var _stream_writable;
  var hasRequired_stream_writable;
  function require_stream_writable() {
    if (hasRequired_stream_writable) return _stream_writable;
    hasRequired_stream_writable = 1;
    var pna = requireProcessNextickArgs();
    _stream_writable = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var asyncWrite = !process$1.browser && [
      "v0.10",
      "v0.9."
    ].indexOf(process$1.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
    var Duplex;
    Writable.WritableState = WritableState;
    var util2 = Object.create(requireUtil());
    util2.inherits = requireInherits_browser();
    var internalUtil = {
      deprecate: requireBrowser$b()
    };
    var Stream = requireStreamBrowser();
    var Buffer2 = requireSafeBuffer().Buffer;
    var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = requireDestroy();
    util2.inherits(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      var isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
      var hwm = options.highWaterMark;
      var writableHwm = options.writableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      if (hwm || hwm === 0) this.highWaterMark = hwm;
      else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;
      else this.highWaterMark = defaultHwm;
      this.highWaterMark = Math.floor(this.highWaterMark);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er2) {
        onwrite(stream, er2);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_3) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function(object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable) return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
        return new Writable(options);
      }
      this._writableState = new WritableState(options, this);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      this.emit("error", new Error("Cannot pipe, not readable"));
    };
    function writeAfterEnd(stream, cb) {
      var er2 = new Error("write after end");
      stream.emit("error", er2);
      pna.nextTick(cb, er2);
    }
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er2 = false;
      if (chunk === null) {
        er2 = new TypeError("May not write null values to stream");
      } else if (typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er2 = new TypeError("Invalid non-string/buffer chunk");
      }
      if (er2) {
        stream.emit("error", er2);
        pna.nextTick(cb, er2);
        valid = false;
      }
      return valid;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf) encoding = "buffer";
      else if (!encoding) encoding = state.defaultEncoding;
      if (typeof cb !== "function") cb = nop;
      if (state.ended) writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      var state = this._writableState;
      state.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string") encoding = encoding.toLowerCase();
      if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
      ].indexOf((encoding + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret) state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);
      else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync2, er2, cb) {
      --state.pendingcb;
      if (sync2) {
        pna.nextTick(cb, er2);
        pna.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        stream.emit("error", er2);
      } else {
        cb(er2);
        stream._writableState.errorEmitted = true;
        stream.emit("error", er2);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er2) {
      var state = stream._writableState;
      var sync2 = state.sync;
      var cb = state.writecb;
      onwriteStateUpdate(state);
      if (er2) onwriteError(stream, state, sync2, er2, cb);
      else {
        var finished = needFinish(state);
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync2) {
          asyncWrite(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l3 = state.bufferedRequestCount;
        var buffer2 = new Array(l3);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer2[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer2.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer2, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null) state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new Error("_write() is not implemented"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending) endWritable(this, state, cb);
    };
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          stream.emit("error", err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function") {
          state.pendingcb++;
          state.finalCalled = true;
          pna.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) pna.nextTick(cb);
        else stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      get: function() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      this.end();
      cb(err);
    };
    return _stream_writable;
  }
  var _stream_duplex;
  var hasRequired_stream_duplex;
  function require_stream_duplex() {
    if (hasRequired_stream_duplex) return _stream_duplex;
    hasRequired_stream_duplex = 1;
    var pna = requireProcessNextickArgs();
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key2 in obj) {
        keys2.push(key2);
      }
      return keys2;
    };
    _stream_duplex = Duplex;
    var util2 = Object.create(requireUtil());
    util2.inherits = requireInherits_browser();
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    util2.inherits(Duplex, Readable);
    {
      var keys = objectKeys(Writable.prototype);
      for (var v3 = 0; v3 < keys.length; v3++) {
        var method = keys[v3];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      if (options && options.readable === false) this.readable = false;
      if (options && options.writable === false) this.writable = false;
      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
      this.once("end", onend);
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function() {
        return this._writableState.highWaterMark;
      }
    });
    function onend() {
      if (this.allowHalfOpen || this._writableState.ended) return;
      pna.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      get: function() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
    Duplex.prototype._destroy = function(err, cb) {
      this.push(null);
      this.end();
      pna.nextTick(cb, err);
    };
    return _stream_duplex;
  }
  var _stream_readable;
  var hasRequired_stream_readable;
  function require_stream_readable() {
    if (hasRequired_stream_readable) return _stream_readable;
    hasRequired_stream_readable = 1;
    var pna = requireProcessNextickArgs();
    _stream_readable = Readable;
    var isArray = requireIsarray();
    var Duplex;
    Readable.ReadableState = ReadableState;
    requireEvents().EventEmitter;
    var EElistenerCount = function(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = requireStreamBrowser();
    var Buffer2 = requireSafeBuffer().Buffer;
    var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var util2 = Object.create(requireUtil());
    util2.inherits = requireInherits_browser();
    var debugUtil = requireUtil$1();
    var debug = void 0;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function() {
      };
    }
    var BufferList2 = requireBufferList();
    var destroyImpl = requireDestroy();
    var StringDecoder;
    util2.inherits(Readable, Stream);
    var kProxyEvents = [
      "error",
      "close",
      "destroy",
      "pause",
      "resume"
    ];
    function prependListener(emitter, event, fn2) {
      if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn2);
      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn2);
      else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn2);
      else emitter._events[event] = [
        fn2,
        emitter._events[event]
      ];
    }
    function ReadableState(options, stream) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      var isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
      var hwm = options.highWaterMark;
      var readableHwm = options.readableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      if (hwm || hwm === 0) this.highWaterMark = hwm;
      else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;
      else this.highWaterMark = defaultHwm;
      this.highWaterMark = Math.floor(this.highWaterMark);
      this.buffer = new BufferList2();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable)) return new Readable(options);
      this._readableState = new ReadableState(options, this);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      get: function() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      this.push(null);
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er2;
        if (!skipChunkCheck) er2 = chunkInvalid(state, chunk);
        if (er2) {
          stream.emit("error", er2);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted) stream.emit("error", new Error("stream.unshift() after end event"));
            else addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            stream.emit("error", new Error("stream.push() after EOF"));
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
              else maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
        }
      }
      return needMoreData(state);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit("data", chunk);
        stream.read(0);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er2;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er2 = new TypeError("Invalid non-string/buffer chunk");
      }
      return er2;
    }
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };
    var MAX_HWM = 8388608;
    function computeNewHighWaterMark(n3) {
      if (n3 >= MAX_HWM) {
        n3 = MAX_HWM;
      } else {
        n3--;
        n3 |= n3 >>> 1;
        n3 |= n3 >>> 2;
        n3 |= n3 >>> 4;
        n3 |= n3 >>> 8;
        n3 |= n3 >>> 16;
        n3++;
      }
      return n3;
    }
    function howMuchToRead(n3, state) {
      if (n3 <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n3 !== n3) {
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
      }
      if (n3 > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n3);
      if (n3 <= state.length) return n3;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n3) {
      debug("read", n3);
      n3 = parseInt(n3, 10);
      var state = this._readableState;
      var nOrig = n3;
      if (n3 !== 0) state.emittedReadable = false;
      if (n3 === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
      }
      n3 = howMuchToRead(n3, state);
      if (n3 === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n3 < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0) state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading) n3 = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n3 > 0) ret = fromList(n3, state);
      else ret = null;
      if (ret === null) {
        state.needReadable = true;
        n3 = 0;
      } else {
        state.length -= n3;
      }
      if (state.length === 0) {
        if (!state.ended) state.needReadable = true;
        if (nOrig !== n3 && state.ended) endReadable(this);
      }
      if (ret !== null) this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      emitReadable(stream);
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        if (state.sync) pna.nextTick(emitReadable_, stream);
        else emitReadable_(stream);
      }
    }
    function emitReadable_(stream) {
      debug("emit readable");
      stream.emit("readable");
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        pna.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
        else len = state.length;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n3) {
      this.emit("error", new Error("_read() is not implemented"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [
            state.pipes,
            dest
          ];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) pna.nextTick(endFn);
      else src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }
      var increasedAwaitDrain = false;
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf2(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }
      function onerror(er2) {
        debug("onerror", er2);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) dest.emit("error", er2);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0) return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i3 = 0; i3 < len; i3++) {
          dests[i3].emit("unpipe", this, {
            hasUnpiped: false
          });
        }
        return this;
      }
      var index2 = indexOf2(state.pipes, dest);
      if (index2 === -1) return this;
      state.pipes.splice(index2, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn2) {
      var res = Stream.prototype.on.call(this, ev, fn2);
      if (ev === "data") {
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === "readable") {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            pna.nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        pna.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      if (!state.reading) {
        debug("resume read 0");
        stream.read(0);
      }
      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null) {
      }
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i3 in stream) {
        if (this[i3] === void 0 && typeof stream[i3] === "function") {
          this[i3] = /* @__PURE__ */ function(method) {
            return function() {
              return stream[method].apply(stream, arguments);
            };
          }(i3);
        }
      }
      for (var n3 = 0; n3 < kProxyEvents.length; n3++) {
        stream.on(kProxyEvents[n3], this.emit.bind(this, kProxyEvents[n3]));
      }
      this._read = function(n4) {
        debug("wrapped _read", n4);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      enumerable: false,
      get: function() {
        return this._readableState.highWaterMark;
      }
    });
    Readable._fromList = fromList;
    function fromList(n3, state) {
      if (state.length === 0) return null;
      var ret;
      if (state.objectMode) ret = state.buffer.shift();
      else if (!n3 || n3 >= state.length) {
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.head.data;
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = fromListPartial(n3, state.buffer, state.decoder);
      }
      return ret;
    }
    function fromListPartial(n3, list, hasStrings) {
      var ret;
      if (n3 < list.head.data.length) {
        ret = list.head.data.slice(0, n3);
        list.head.data = list.head.data.slice(n3);
      } else if (n3 === list.head.data.length) {
        ret = list.shift();
      } else {
        ret = hasStrings ? copyFromBufferString(n3, list) : copyFromBuffer(n3, list);
      }
      return ret;
    }
    function copyFromBufferString(n3, list) {
      var p3 = list.head;
      var c3 = 1;
      var ret = p3.data;
      n3 -= ret.length;
      while (p3 = p3.next) {
        var str = p3.data;
        var nb = n3 > str.length ? str.length : n3;
        if (nb === str.length) ret += str;
        else ret += str.slice(0, n3);
        n3 -= nb;
        if (n3 === 0) {
          if (nb === str.length) {
            ++c3;
            if (p3.next) list.head = p3.next;
            else list.head = list.tail = null;
          } else {
            list.head = p3;
            p3.data = str.slice(nb);
          }
          break;
        }
        ++c3;
      }
      list.length -= c3;
      return ret;
    }
    function copyFromBuffer(n3, list) {
      var ret = Buffer2.allocUnsafe(n3);
      var p3 = list.head;
      var c3 = 1;
      p3.data.copy(ret);
      n3 -= p3.data.length;
      while (p3 = p3.next) {
        var buf = p3.data;
        var nb = n3 > buf.length ? buf.length : n3;
        buf.copy(ret, ret.length - n3, 0, nb);
        n3 -= nb;
        if (n3 === 0) {
          if (nb === buf.length) {
            ++c3;
            if (p3.next) list.head = p3.next;
            else list.head = list.tail = null;
          } else {
            list.head = p3;
            p3.data = buf.slice(nb);
          }
          break;
        }
        ++c3;
      }
      list.length -= c3;
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
      if (!state.endEmitted) {
        state.ended = true;
        pna.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
      }
    }
    function indexOf2(xs2, x3) {
      for (var i3 = 0, l3 = xs2.length; i3 < l3; i3++) {
        if (xs2[i3] === x3) return i3;
      }
      return -1;
    }
    return _stream_readable;
  }
  var _stream_transform;
  var hasRequired_stream_transform;
  function require_stream_transform() {
    if (hasRequired_stream_transform) return _stream_transform;
    hasRequired_stream_transform = 1;
    _stream_transform = Transform;
    var Duplex = require_stream_duplex();
    var util2 = Object.create(requireUtil());
    util2.inherits = requireInherits_browser();
    util2.inherits(Transform, Duplex);
    function afterTransform(er2, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (!cb) {
        return this.emit("error", new Error("write callback called multiple times"));
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null) this.push(data);
      cb(er2);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function") {
        this._flush(function(er2, data) {
          done(_this, er2, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      throw new Error("_transform() is not implemented");
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n3) {
      var ts = this._transformState;
      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      var _this2 = this;
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
        _this2.emit("close");
      });
    };
    function done(stream, er2, data) {
      if (er2) return stream.emit("error", er2);
      if (data != null) stream.push(data);
      if (stream._writableState.length) throw new Error("Calling transform done when ws.length != 0");
      if (stream._transformState.transforming) throw new Error("Calling transform done when still transforming");
      return stream.push(null);
    }
    return _stream_transform;
  }
  var _stream_passthrough;
  var hasRequired_stream_passthrough;
  function require_stream_passthrough() {
    if (hasRequired_stream_passthrough) return _stream_passthrough;
    hasRequired_stream_passthrough = 1;
    _stream_passthrough = PassThrough;
    var Transform = require_stream_transform();
    var util2 = Object.create(requireUtil());
    util2.inherits = requireInherits_browser();
    util2.inherits(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
    return _stream_passthrough;
  }
  var hasRequiredReadableBrowser;
  function requireReadableBrowser() {
    if (hasRequiredReadableBrowser) return readableBrowser.exports;
    hasRequiredReadableBrowser = 1;
    (function(module, exports2) {
      exports2 = module.exports = require_stream_readable();
      exports2.Stream = exports2;
      exports2.Readable = exports2;
      exports2.Writable = require_stream_writable();
      exports2.Duplex = require_stream_duplex();
      exports2.Transform = require_stream_transform();
      exports2.PassThrough = require_stream_passthrough();
    })(readableBrowser, readableBrowser.exports);
    return readableBrowser.exports;
  }
  var sign = {
    exports: {}
  };
  var bn$1 = {
    exports: {}
  };
  var bn = bn$1.exports;
  var hasRequiredBn;
  function requireBn() {
    if (hasRequiredBn) return bn$1.exports;
    hasRequiredBn = 1;
    (function(module) {
      (function(module2, exports2) {
        function assert(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number2, base2, endian) {
          if (BN.isBN(number2)) {
            return number2;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number2 !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number2 || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN;
        } else {
          exports2.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer2;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer2 = window.Buffer;
          } else {
            Buffer2 = requireDist$2().Buffer;
          }
        } catch (e3) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN.prototype._init = function init(number2, base2, endian) {
          if (typeof number2 === "number") {
            return this._initNumber(number2, base2, endian);
          }
          if (typeof number2 === "object") {
            return this._initArray(number2, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number2 = number2.toString().replace(/\s+/g, "");
          var start = 0;
          if (number2[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number2.length) {
            if (base2 === 16) {
              this._parseHex(number2, start, endian);
            } else {
              this._parseBase(number2, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN.prototype._initNumber = function _initNumber(number2, base2, endian) {
          if (number2 < 0) {
            this.negative = 1;
            number2 = -number2;
          }
          if (number2 < 67108864) {
            this.words = [
              number2 & 67108863
            ];
            this.length = 1;
          } else if (number2 < 4503599627370496) {
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert(number2 < 9007199254740992);
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initArray = function _initArray(number2, base2, endian) {
          assert(typeof number2.length === "number");
          if (number2.length <= 0) {
            this.words = [
              0
            ];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number2.length / 3);
          this.words = new Array(this.length);
          for (var i3 = 0; i3 < this.length; i3++) {
            this.words[i3] = 0;
          }
          var j3, w3;
          var off = 0;
          if (endian === "be") {
            for (i3 = number2.length - 1, j3 = 0; i3 >= 0; i3 -= 3) {
              w3 = number2[i3] | number2[i3 - 1] << 8 | number2[i3 - 2] << 16;
              this.words[j3] |= w3 << off & 67108863;
              this.words[j3 + 1] = w3 >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j3++;
              }
            }
          } else if (endian === "le") {
            for (i3 = 0, j3 = 0; i3 < number2.length; i3 += 3) {
              w3 = number2[i3] | number2[i3 + 1] << 8 | number2[i3 + 2] << 16;
              this.words[j3] |= w3 << off & 67108863;
              this.words[j3 + 1] = w3 >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j3++;
              }
            }
          }
          return this._strip();
        };
        function parseHex4Bits(string2, index2) {
          var c3 = string2.charCodeAt(index2);
          if (c3 >= 48 && c3 <= 57) {
            return c3 - 48;
          } else if (c3 >= 65 && c3 <= 70) {
            return c3 - 55;
          } else if (c3 >= 97 && c3 <= 102) {
            return c3 - 87;
          } else {
            assert(false, "Invalid character in " + string2);
          }
        }
        function parseHexByte(string2, lowerBound, index2) {
          var r3 = parseHex4Bits(string2, index2);
          if (index2 - 1 >= lowerBound) {
            r3 |= parseHex4Bits(string2, index2 - 1) << 4;
          }
          return r3;
        }
        BN.prototype._parseHex = function _parseHex(number2, start, endian) {
          this.length = Math.ceil((number2.length - start) / 6);
          this.words = new Array(this.length);
          for (var i3 = 0; i3 < this.length; i3++) {
            this.words[i3] = 0;
          }
          var off = 0;
          var j3 = 0;
          var w3;
          if (endian === "be") {
            for (i3 = number2.length - 1; i3 >= start; i3 -= 2) {
              w3 = parseHexByte(number2, start, i3) << off;
              this.words[j3] |= w3 & 67108863;
              if (off >= 18) {
                off -= 18;
                j3 += 1;
                this.words[j3] |= w3 >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number2.length - start;
            for (i3 = parseLength % 2 === 0 ? start + 1 : start; i3 < number2.length; i3 += 2) {
              w3 = parseHexByte(number2, start, i3) << off;
              this.words[j3] |= w3 & 67108863;
              if (off >= 18) {
                off -= 18;
                j3 += 1;
                this.words[j3] |= w3 >>> 26;
              } else {
                off += 8;
              }
            }
          }
          this._strip();
        };
        function parseBase(str, start, end, mul) {
          var r3 = 0;
          var b3 = 0;
          var len = Math.min(str.length, end);
          for (var i3 = start; i3 < len; i3++) {
            var c3 = str.charCodeAt(i3) - 48;
            r3 *= mul;
            if (c3 >= 49) {
              b3 = c3 - 49 + 10;
            } else if (c3 >= 17) {
              b3 = c3 - 17 + 10;
            } else {
              b3 = c3;
            }
            assert(c3 >= 0 && b3 < mul, "Invalid character");
            r3 += b3;
          }
          return r3;
        }
        BN.prototype._parseBase = function _parseBase(number2, base2, start) {
          this.words = [
            0
          ];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number2.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i3 = start; i3 < end; i3 += limbLen) {
            word = parseBase(number2, i3, i3 + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number2, i3, number2.length, base2);
            for (i3 = 0; i3 < mod; i3++) {
              pow *= base2;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this._strip();
        };
        BN.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for (var i3 = 0; i3 < this.length; i3++) {
            dest.words[i3] = this.words[i3];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        function move(dest, src) {
          dest.words = src.words;
          dest.length = src.length;
          dest.negative = src.negative;
          dest.red = src.red;
        }
        BN.prototype._move = function _move(dest) {
          move(dest, this);
        };
        BN.prototype.clone = function clone() {
          var r3 = new BN(null);
          this.copy(r3);
          return r3;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype._strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
          try {
            BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
          } catch (e3) {
            BN.prototype.inspect = inspect;
          }
        } else {
          BN.prototype.inspect = inspect;
        }
        function inspect() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i3 = 0; i3 < this.length; i3++) {
              var w3 = this.words[i3];
              var word = ((w3 << off | carry) & 16777215).toString(16);
              carry = w3 >>> 24 - off & 16777215;
              off += 2;
              if (off >= 26) {
                off -= 26;
                i3--;
              }
              if (carry !== 0 || i3 !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c3 = this.clone();
            c3.negative = 0;
            while (!c3.isZero()) {
              var r3 = c3.modrn(groupBase).toString(base2);
              c3 = c3.idivn(groupBase);
              if (!c3.isZero()) {
                out = zeros[groupSize - r3.length] + r3 + out;
              } else {
                out = r3 + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON() {
          return this.toString(16, 2);
        };
        if (Buffer2) {
          BN.prototype.toBuffer = function toBuffer2(endian, length2) {
            return this.toArrayLike(Buffer2, endian, length2);
          };
        }
        BN.prototype.toArray = function toArray(endian, length2) {
          return this.toArrayLike(Array, endian, length2);
        };
        var allocate = function allocate2(ArrayType, size) {
          if (ArrayType.allocUnsafe) {
            return ArrayType.allocUnsafe(size);
          }
          return new ArrayType(size);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length2) {
          this._strip();
          var byteLength = this.byteLength();
          var reqLength = length2 || Math.max(1, byteLength);
          assert(byteLength <= reqLength, "byte array longer than desired length");
          assert(reqLength > 0, "Requested array length <= 0");
          var res = allocate(ArrayType, reqLength);
          var postfix = endian === "le" ? "LE" : "BE";
          this["_toArrayLike" + postfix](res, byteLength);
          return res;
        };
        BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
          var position2 = 0;
          var carry = 0;
          for (var i3 = 0, shift = 0; i3 < this.length; i3++) {
            var word = this.words[i3] << shift | carry;
            res[position2++] = word & 255;
            if (position2 < res.length) {
              res[position2++] = word >> 8 & 255;
            }
            if (position2 < res.length) {
              res[position2++] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position2 < res.length) {
                res[position2++] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position2 < res.length) {
            res[position2++] = carry;
            while (position2 < res.length) {
              res[position2++] = 0;
            }
          }
        };
        BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
          var position2 = res.length - 1;
          var carry = 0;
          for (var i3 = 0, shift = 0; i3 < this.length; i3++) {
            var word = this.words[i3] << shift | carry;
            res[position2--] = word & 255;
            if (position2 >= 0) {
              res[position2--] = word >> 8 & 255;
            }
            if (position2 >= 0) {
              res[position2--] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position2 >= 0) {
                res[position2--] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position2 >= 0) {
            res[position2--] = carry;
            while (position2 >= 0) {
              res[position2--] = 0;
            }
          }
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w3) {
            return 32 - Math.clz32(w3);
          };
        } else {
          BN.prototype._countBits = function _countBits(w3) {
            var t3 = w3;
            var r3 = 0;
            if (t3 >= 4096) {
              r3 += 13;
              t3 >>>= 13;
            }
            if (t3 >= 64) {
              r3 += 7;
              t3 >>>= 7;
            }
            if (t3 >= 8) {
              r3 += 4;
              t3 >>>= 4;
            }
            if (t3 >= 2) {
              r3 += 2;
              t3 >>>= 2;
            }
            return r3 + t3;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w3) {
          if (w3 === 0) return 26;
          var t3 = w3;
          var r3 = 0;
          if ((t3 & 8191) === 0) {
            r3 += 13;
            t3 >>>= 13;
          }
          if ((t3 & 127) === 0) {
            r3 += 7;
            t3 >>>= 7;
          }
          if ((t3 & 15) === 0) {
            r3 += 4;
            t3 >>>= 4;
          }
          if ((t3 & 3) === 0) {
            r3 += 2;
            t3 >>>= 2;
          }
          if ((t3 & 1) === 0) {
            r3++;
          }
          return r3;
        };
        BN.prototype.bitLength = function bitLength() {
          var w3 = this.words[this.length - 1];
          var hi2 = this._countBits(w3);
          return (this.length - 1) * 26 + hi2;
        };
        function toBitArray(num) {
          var w3 = new Array(num.bitLength());
          for (var bit = 0; bit < w3.length; bit++) {
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w3[bit] = num.words[off] >>> wbit & 1;
          }
          return w3;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r3 = 0;
          for (var i3 = 0; i3 < this.length; i3++) {
            var b3 = this._zeroBits(this.words[i3]);
            r3 += b3;
            if (b3 !== 26) break;
          }
          return r3;
        };
        BN.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i3 = 0; i3 < num.length; i3++) {
            this.words[i3] = this.words[i3] | num.words[i3];
          }
          return this._strip();
        };
        BN.prototype.ior = function ior(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or2(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b3;
          if (this.length > num.length) {
            b3 = num;
          } else {
            b3 = this;
          }
          for (var i3 = 0; i3 < b3.length; i3++) {
            this.words[i3] = this.words[i3] & num.words[i3];
          }
          this.length = b3.length;
          return this._strip();
        };
        BN.prototype.iand = function iand(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a3;
          var b3;
          if (this.length > num.length) {
            a3 = this;
            b3 = num;
          } else {
            a3 = num;
            b3 = this;
          }
          for (var i3 = 0; i3 < b3.length; i3++) {
            this.words[i3] = a3.words[i3] ^ b3.words[i3];
          }
          if (this !== a3) {
            for (; i3 < a3.length; i3++) {
              this.words[i3] = a3.words[i3];
            }
          }
          this.length = a3.length;
          return this._strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor2(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i3 = 0; i3 < bytesNeeded; i3++) {
            this.words[i3] = ~this.words[i3] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i3] = ~this.words[i3] & 67108863 >> 26 - bitsLeft;
          }
          return this._strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | 1 << wbit;
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this._strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r3;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r3 = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r3 = this.isub(num);
            num.negative = 1;
            return r3._normSign();
          }
          var a3, b3;
          if (this.length > num.length) {
            a3 = this;
            b3 = num;
          } else {
            a3 = num;
            b3 = this;
          }
          var carry = 0;
          for (var i3 = 0; i3 < b3.length; i3++) {
            r3 = (a3.words[i3] | 0) + (b3.words[i3] | 0) + carry;
            this.words[i3] = r3 & 67108863;
            carry = r3 >>> 26;
          }
          for (; carry !== 0 && i3 < a3.length; i3++) {
            r3 = (a3.words[i3] | 0) + carry;
            this.words[i3] = r3 & 67108863;
            carry = r3 >>> 26;
          }
          this.length = a3.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a3 !== this) {
            for (; i3 < a3.length; i3++) {
              this.words[i3] = a3.words[i3];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r3 = this.iadd(num);
            num.negative = 1;
            return r3._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a3, b3;
          if (cmp > 0) {
            a3 = this;
            b3 = num;
          } else {
            a3 = num;
            b3 = this;
          }
          var carry = 0;
          for (var i3 = 0; i3 < b3.length; i3++) {
            r3 = (a3.words[i3] | 0) - (b3.words[i3] | 0) + carry;
            carry = r3 >> 26;
            this.words[i3] = r3 & 67108863;
          }
          for (; carry !== 0 && i3 < a3.length; i3++) {
            r3 = (a3.words[i3] | 0) + carry;
            carry = r3 >> 26;
            this.words[i3] = r3 & 67108863;
          }
          if (carry === 0 && i3 < a3.length && a3 !== this) {
            for (; i3 < a3.length; i3++) {
              this.words[i3] = a3.words[i3];
            }
          }
          this.length = Math.max(this.length, i3);
          if (a3 !== this) {
            this.negative = 1;
          }
          return this._strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a3 = self2.words[0] | 0;
          var b3 = num.words[0] | 0;
          var r3 = a3 * b3;
          var lo2 = r3 & 67108863;
          var carry = r3 / 67108864 | 0;
          out.words[0] = lo2;
          for (var k3 = 1; k3 < len; k3++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k3, num.length - 1);
            for (var j3 = Math.max(0, k3 - self2.length + 1); j3 <= maxJ; j3++) {
              var i3 = k3 - j3 | 0;
              a3 = self2.words[i3] | 0;
              b3 = num.words[j3] | 0;
              r3 = a3 * b3 + rword;
              ncarry += r3 / 67108864 | 0;
              rword = r3 & 67108863;
            }
            out.words[k3] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k3] = carry | 0;
          } else {
            out.length--;
          }
          return out._strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a3 = self2.words;
          var b3 = num.words;
          var o3 = out.words;
          var c3 = 0;
          var lo2;
          var mid;
          var hi2;
          var a0 = a3[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a3[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a22 = a3[2] | 0;
          var al2 = a22 & 8191;
          var ah2 = a22 >>> 13;
          var a32 = a3[3] | 0;
          var al3 = a32 & 8191;
          var ah3 = a32 >>> 13;
          var a4 = a3[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a3[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a3[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a3[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a3[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a3[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b3[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b3[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b22 = b3[2] | 0;
          var bl2 = b22 & 8191;
          var bh2 = b22 >>> 13;
          var b32 = b3[3] | 0;
          var bl3 = b32 & 8191;
          var bh3 = b32 >>> 13;
          var b4 = b3[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b3[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b3[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b3[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b3[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b3[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo2 = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi2 = Math.imul(ah0, bh0);
          var w02 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w02 >>> 26) | 0;
          w02 &= 67108863;
          lo2 = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi2 = Math.imul(ah1, bh0);
          lo2 = lo2 + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi2 = hi2 + Math.imul(ah0, bh1) | 0;
          var w1 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo2 = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi2 = Math.imul(ah2, bh0);
          lo2 = lo2 + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi2 = hi2 + Math.imul(ah1, bh1) | 0;
          lo2 = lo2 + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi2 = hi2 + Math.imul(ah0, bh2) | 0;
          var w22 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
          w22 &= 67108863;
          lo2 = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi2 = Math.imul(ah3, bh0);
          lo2 = lo2 + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi2 = hi2 + Math.imul(ah2, bh1) | 0;
          lo2 = lo2 + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi2 = hi2 + Math.imul(ah1, bh2) | 0;
          lo2 = lo2 + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi2 = hi2 + Math.imul(ah0, bh3) | 0;
          var w3 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo2 = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi2 = Math.imul(ah4, bh0);
          lo2 = lo2 + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi2 = hi2 + Math.imul(ah3, bh1) | 0;
          lo2 = lo2 + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi2 = hi2 + Math.imul(ah2, bh2) | 0;
          lo2 = lo2 + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi2 = hi2 + Math.imul(ah1, bh3) | 0;
          lo2 = lo2 + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi2 = hi2 + Math.imul(ah0, bh4) | 0;
          var w4 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo2 = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi2 = Math.imul(ah5, bh0);
          lo2 = lo2 + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi2 = hi2 + Math.imul(ah4, bh1) | 0;
          lo2 = lo2 + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi2 = hi2 + Math.imul(ah3, bh2) | 0;
          lo2 = lo2 + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi2 = hi2 + Math.imul(ah2, bh3) | 0;
          lo2 = lo2 + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi2 = hi2 + Math.imul(ah1, bh4) | 0;
          lo2 = lo2 + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi2 = hi2 + Math.imul(ah0, bh5) | 0;
          var w5 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo2 = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi2 = Math.imul(ah6, bh0);
          lo2 = lo2 + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi2 = hi2 + Math.imul(ah5, bh1) | 0;
          lo2 = lo2 + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi2 = hi2 + Math.imul(ah4, bh2) | 0;
          lo2 = lo2 + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi2 = hi2 + Math.imul(ah3, bh3) | 0;
          lo2 = lo2 + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi2 = hi2 + Math.imul(ah2, bh4) | 0;
          lo2 = lo2 + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi2 = hi2 + Math.imul(ah1, bh5) | 0;
          lo2 = lo2 + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi2 = hi2 + Math.imul(ah0, bh6) | 0;
          var w6 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo2 = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi2 = Math.imul(ah7, bh0);
          lo2 = lo2 + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi2 = hi2 + Math.imul(ah6, bh1) | 0;
          lo2 = lo2 + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi2 = hi2 + Math.imul(ah5, bh2) | 0;
          lo2 = lo2 + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi2 = hi2 + Math.imul(ah4, bh3) | 0;
          lo2 = lo2 + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi2 = hi2 + Math.imul(ah3, bh4) | 0;
          lo2 = lo2 + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi2 = hi2 + Math.imul(ah2, bh5) | 0;
          lo2 = lo2 + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi2 = hi2 + Math.imul(ah1, bh6) | 0;
          lo2 = lo2 + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi2 = hi2 + Math.imul(ah0, bh7) | 0;
          var w7 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo2 = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi2 = Math.imul(ah8, bh0);
          lo2 = lo2 + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi2 = hi2 + Math.imul(ah7, bh1) | 0;
          lo2 = lo2 + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi2 = hi2 + Math.imul(ah6, bh2) | 0;
          lo2 = lo2 + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi2 = hi2 + Math.imul(ah5, bh3) | 0;
          lo2 = lo2 + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi2 = hi2 + Math.imul(ah4, bh4) | 0;
          lo2 = lo2 + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi2 = hi2 + Math.imul(ah3, bh5) | 0;
          lo2 = lo2 + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi2 = hi2 + Math.imul(ah2, bh6) | 0;
          lo2 = lo2 + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi2 = hi2 + Math.imul(ah1, bh7) | 0;
          lo2 = lo2 + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi2 = hi2 + Math.imul(ah0, bh8) | 0;
          var w8 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo2 = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi2 = Math.imul(ah9, bh0);
          lo2 = lo2 + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi2 = hi2 + Math.imul(ah8, bh1) | 0;
          lo2 = lo2 + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi2 = hi2 + Math.imul(ah7, bh2) | 0;
          lo2 = lo2 + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi2 = hi2 + Math.imul(ah6, bh3) | 0;
          lo2 = lo2 + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi2 = hi2 + Math.imul(ah5, bh4) | 0;
          lo2 = lo2 + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi2 = hi2 + Math.imul(ah4, bh5) | 0;
          lo2 = lo2 + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi2 = hi2 + Math.imul(ah3, bh6) | 0;
          lo2 = lo2 + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi2 = hi2 + Math.imul(ah2, bh7) | 0;
          lo2 = lo2 + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi2 = hi2 + Math.imul(ah1, bh8) | 0;
          lo2 = lo2 + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi2 = hi2 + Math.imul(ah0, bh9) | 0;
          var w9 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo2 = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi2 = Math.imul(ah9, bh1);
          lo2 = lo2 + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi2 = hi2 + Math.imul(ah8, bh2) | 0;
          lo2 = lo2 + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi2 = hi2 + Math.imul(ah7, bh3) | 0;
          lo2 = lo2 + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi2 = hi2 + Math.imul(ah6, bh4) | 0;
          lo2 = lo2 + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi2 = hi2 + Math.imul(ah5, bh5) | 0;
          lo2 = lo2 + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi2 = hi2 + Math.imul(ah4, bh6) | 0;
          lo2 = lo2 + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi2 = hi2 + Math.imul(ah3, bh7) | 0;
          lo2 = lo2 + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi2 = hi2 + Math.imul(ah2, bh8) | 0;
          lo2 = lo2 + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi2 = hi2 + Math.imul(ah1, bh9) | 0;
          var w10 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo2 = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi2 = Math.imul(ah9, bh2);
          lo2 = lo2 + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi2 = hi2 + Math.imul(ah8, bh3) | 0;
          lo2 = lo2 + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi2 = hi2 + Math.imul(ah7, bh4) | 0;
          lo2 = lo2 + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi2 = hi2 + Math.imul(ah6, bh5) | 0;
          lo2 = lo2 + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi2 = hi2 + Math.imul(ah5, bh6) | 0;
          lo2 = lo2 + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi2 = hi2 + Math.imul(ah4, bh7) | 0;
          lo2 = lo2 + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi2 = hi2 + Math.imul(ah3, bh8) | 0;
          lo2 = lo2 + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi2 = hi2 + Math.imul(ah2, bh9) | 0;
          var w11 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo2 = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi2 = Math.imul(ah9, bh3);
          lo2 = lo2 + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi2 = hi2 + Math.imul(ah8, bh4) | 0;
          lo2 = lo2 + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi2 = hi2 + Math.imul(ah7, bh5) | 0;
          lo2 = lo2 + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi2 = hi2 + Math.imul(ah6, bh6) | 0;
          lo2 = lo2 + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi2 = hi2 + Math.imul(ah5, bh7) | 0;
          lo2 = lo2 + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi2 = hi2 + Math.imul(ah4, bh8) | 0;
          lo2 = lo2 + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi2 = hi2 + Math.imul(ah3, bh9) | 0;
          var w12 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo2 = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi2 = Math.imul(ah9, bh4);
          lo2 = lo2 + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi2 = hi2 + Math.imul(ah8, bh5) | 0;
          lo2 = lo2 + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi2 = hi2 + Math.imul(ah7, bh6) | 0;
          lo2 = lo2 + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi2 = hi2 + Math.imul(ah6, bh7) | 0;
          lo2 = lo2 + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi2 = hi2 + Math.imul(ah5, bh8) | 0;
          lo2 = lo2 + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi2 = hi2 + Math.imul(ah4, bh9) | 0;
          var w13 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo2 = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi2 = Math.imul(ah9, bh5);
          lo2 = lo2 + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi2 = hi2 + Math.imul(ah8, bh6) | 0;
          lo2 = lo2 + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi2 = hi2 + Math.imul(ah7, bh7) | 0;
          lo2 = lo2 + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi2 = hi2 + Math.imul(ah6, bh8) | 0;
          lo2 = lo2 + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi2 = hi2 + Math.imul(ah5, bh9) | 0;
          var w14 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo2 = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi2 = Math.imul(ah9, bh6);
          lo2 = lo2 + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi2 = hi2 + Math.imul(ah8, bh7) | 0;
          lo2 = lo2 + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi2 = hi2 + Math.imul(ah7, bh8) | 0;
          lo2 = lo2 + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi2 = hi2 + Math.imul(ah6, bh9) | 0;
          var w15 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo2 = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi2 = Math.imul(ah9, bh7);
          lo2 = lo2 + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi2 = hi2 + Math.imul(ah8, bh8) | 0;
          lo2 = lo2 + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi2 = hi2 + Math.imul(ah7, bh9) | 0;
          var w16 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo2 = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi2 = Math.imul(ah9, bh8);
          lo2 = lo2 + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi2 = hi2 + Math.imul(ah8, bh9) | 0;
          var w17 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo2 = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi2 = Math.imul(ah9, bh9);
          var w18 = (c3 + lo2 | 0) + ((mid & 8191) << 13) | 0;
          c3 = (hi2 + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o3[0] = w02;
          o3[1] = w1;
          o3[2] = w22;
          o3[3] = w3;
          o3[4] = w4;
          o3[5] = w5;
          o3[6] = w6;
          o3[7] = w7;
          o3[8] = w8;
          o3[9] = w9;
          o3[10] = w10;
          o3[11] = w11;
          o3[12] = w12;
          o3[13] = w13;
          o3[14] = w14;
          o3[15] = w15;
          o3[16] = w16;
          o3[17] = w17;
          o3[18] = w18;
          if (c3 !== 0) {
            o3[19] = c3;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k3 = 0; k3 < out.length - 1; k3++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k3, num.length - 1);
            for (var j3 = Math.max(0, k3 - self2.length + 1); j3 <= maxJ; j3++) {
              var i3 = k3 - j3;
              var a3 = self2.words[i3] | 0;
              var b3 = num.words[j3] | 0;
              var r3 = a3 * b3;
              var lo2 = r3 & 67108863;
              ncarry = ncarry + (r3 / 67108864 | 0) | 0;
              lo2 = lo2 + rword | 0;
              rword = lo2 & 67108863;
              ncarry = ncarry + (lo2 >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k3] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k3] = carry;
          } else {
            out.length--;
          }
          return out._strip();
        }
        function jumboMulTo(self2, num, out) {
          return bigMulTo(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert(typeof num === "number");
          assert(num < 67108864);
          var carry = 0;
          for (var i3 = 0; i3 < this.length; i3++) {
            var w3 = (this.words[i3] | 0) * num;
            var lo2 = (w3 & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w3 / 67108864 | 0;
            carry += lo2 >>> 26;
            this.words[i3] = lo2 & 67108863;
          }
          if (carry !== 0) {
            this.words[i3] = carry;
            this.length++;
          }
          return isNegNum ? this.ineg() : this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w3 = toBitArray(num);
          if (w3.length === 0) return new BN(1);
          var res = this;
          for (var i3 = 0; i3 < w3.length; i3++, res = res.sqr()) {
            if (w3[i3] !== 0) break;
          }
          if (++i3 < w3.length) {
            for (var q3 = res.sqr(); i3 < w3.length; i3++, q3 = q3.sqr()) {
              if (w3[i3] === 0) continue;
              res = res.mul(q3);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r3 = bits % 26;
          var s3 = (bits - r3) / 26;
          var carryMask = 67108863 >>> 26 - r3 << 26 - r3;
          var i3;
          if (r3 !== 0) {
            var carry = 0;
            for (i3 = 0; i3 < this.length; i3++) {
              var newCarry = this.words[i3] & carryMask;
              var c3 = (this.words[i3] | 0) - newCarry << r3;
              this.words[i3] = c3 | carry;
              carry = newCarry >>> 26 - r3;
            }
            if (carry) {
              this.words[i3] = carry;
              this.length++;
            }
          }
          if (s3 !== 0) {
            for (i3 = this.length - 1; i3 >= 0; i3--) {
              this.words[i3 + s3] = this.words[i3];
            }
            for (i3 = 0; i3 < s3; i3++) {
              this.words[i3] = 0;
            }
            this.length += s3;
          }
          return this._strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert(typeof bits === "number" && bits >= 0);
          var h3;
          if (hint) {
            h3 = (hint - hint % 26) / 26;
          } else {
            h3 = 0;
          }
          var r3 = bits % 26;
          var s3 = Math.min((bits - r3) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r3 << r3;
          var maskedWords = extended;
          h3 -= s3;
          h3 = Math.max(0, h3);
          if (maskedWords) {
            for (var i3 = 0; i3 < s3; i3++) {
              maskedWords.words[i3] = this.words[i3];
            }
            maskedWords.length = s3;
          }
          if (s3 === 0) ;
          else if (this.length > s3) {
            this.length -= s3;
            for (i3 = 0; i3 < this.length; i3++) {
              this.words[i3] = this.words[i3 + s3];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i3 = this.length - 1; i3 >= 0 && (carry !== 0 || i3 >= h3); i3--) {
            var word = this.words[i3] | 0;
            this.words[i3] = carry << 26 - r3 | word >>> r3;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this._strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert(typeof bit === "number" && bit >= 0);
          var r3 = bit % 26;
          var s3 = (bit - r3) / 26;
          var q3 = 1 << r3;
          if (this.length <= s3) return false;
          var w3 = this.words[s3];
          return !!(w3 & q3);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r3 = bits % 26;
          var s3 = (bits - r3) / 26;
          assert(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s3) {
            return this;
          }
          if (r3 !== 0) {
            s3++;
          }
          this.length = Math.min(s3, this.length);
          if (r3 !== 0) {
            var mask = 67108863 ^ 67108863 >>> r3 << r3;
            this.words[this.length - 1] &= mask;
          }
          return this._strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i3 = 0; i3 < this.length && this.words[i3] >= 67108864; i3++) {
            this.words[i3] -= 67108864;
            if (i3 === this.length - 1) {
              this.words[i3 + 1] = 1;
            } else {
              this.words[i3 + 1]++;
            }
          }
          this.length = Math.max(this.length, i3 + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i3 = 0; i3 < this.length && this.words[i3] < 0; i3++) {
              this.words[i3] += 67108864;
              this.words[i3 + 1] -= 1;
            }
          }
          return this._strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i3;
          this._expand(len);
          var w3;
          var carry = 0;
          for (i3 = 0; i3 < num.length; i3++) {
            w3 = (this.words[i3 + shift] | 0) + carry;
            var right = (num.words[i3] | 0) * mul;
            w3 -= right & 67108863;
            carry = (w3 >> 26) - (right / 67108864 | 0);
            this.words[i3 + shift] = w3 & 67108863;
          }
          for (; i3 < this.length - shift; i3++) {
            w3 = (this.words[i3 + shift] | 0) + carry;
            carry = w3 >> 26;
            this.words[i3 + shift] = w3 & 67108863;
          }
          if (carry === 0) return this._strip();
          assert(carry === -1);
          carry = 0;
          for (i3 = 0; i3 < this.length; i3++) {
            w3 = -(this.words[i3] | 0) + carry;
            carry = w3 >> 26;
            this.words[i3] = w3 & 67108863;
          }
          this.negative = 1;
          return this._strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a3 = this.clone();
          var b3 = num;
          var bhi = b3.words[b3.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b3 = b3.ushln(shift);
            a3.iushln(shift);
            bhi = b3.words[b3.length - 1] | 0;
          }
          var m3 = a3.length - b3.length;
          var q3;
          if (mode !== "mod") {
            q3 = new BN(null);
            q3.length = m3 + 1;
            q3.words = new Array(q3.length);
            for (var i3 = 0; i3 < q3.length; i3++) {
              q3.words[i3] = 0;
            }
          }
          var diff = a3.clone()._ishlnsubmul(b3, 1, m3);
          if (diff.negative === 0) {
            a3 = diff;
            if (q3) {
              q3.words[m3] = 1;
            }
          }
          for (var j3 = m3 - 1; j3 >= 0; j3--) {
            var qj = (a3.words[b3.length + j3] | 0) * 67108864 + (a3.words[b3.length + j3 - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a3._ishlnsubmul(b3, qj, j3);
            while (a3.negative !== 0) {
              qj--;
              a3.negative = 0;
              a3._ishlnsubmul(b3, 1, j3);
              if (!a3.isZero()) {
                a3.negative ^= 1;
              }
            }
            if (q3) {
              q3.words[j3] = qj;
            }
          }
          if (q3) {
            q3._strip();
          }
          a3._strip();
          if (mode !== "div" && shift !== 0) {
            a3.iushrn(shift);
          }
          return {
            div: q3 || null,
            mod: a3
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modrn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r22 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r22 === 1 && cmp === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modrn = function modrn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert(num <= 67108863);
          var p3 = (1 << 26) % num;
          var acc = 0;
          for (var i3 = this.length - 1; i3 >= 0; i3--) {
            acc = (p3 * acc + (this.words[i3] | 0)) % num;
          }
          return isNegNum ? -acc : acc;
        };
        BN.prototype.modn = function modn(num) {
          return this.modrn(num);
        };
        BN.prototype.idivn = function idivn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert(num <= 67108863);
          var carry = 0;
          for (var i3 = this.length - 1; i3 >= 0; i3--) {
            var w3 = (this.words[i3] | 0) + carry * 67108864;
            this.words[i3] = w3 / num | 0;
            carry = w3 % num;
          }
          this._strip();
          return isNegNum ? this.ineg() : this;
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p3) {
          assert(p3.negative === 0);
          assert(!p3.isZero());
          var x3 = this;
          var y3 = p3.clone();
          if (x3.negative !== 0) {
            x3 = x3.umod(p3);
          } else {
            x3 = x3.clone();
          }
          var A3 = new BN(1);
          var B3 = new BN(0);
          var C3 = new BN(0);
          var D3 = new BN(1);
          var g3 = 0;
          while (x3.isEven() && y3.isEven()) {
            x3.iushrn(1);
            y3.iushrn(1);
            ++g3;
          }
          var yp = y3.clone();
          var xp = x3.clone();
          while (!x3.isZero()) {
            for (var i3 = 0, im = 1; (x3.words[0] & im) === 0 && i3 < 26; ++i3, im <<= 1) ;
            if (i3 > 0) {
              x3.iushrn(i3);
              while (i3-- > 0) {
                if (A3.isOdd() || B3.isOdd()) {
                  A3.iadd(yp);
                  B3.isub(xp);
                }
                A3.iushrn(1);
                B3.iushrn(1);
              }
            }
            for (var j3 = 0, jm = 1; (y3.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1) ;
            if (j3 > 0) {
              y3.iushrn(j3);
              while (j3-- > 0) {
                if (C3.isOdd() || D3.isOdd()) {
                  C3.iadd(yp);
                  D3.isub(xp);
                }
                C3.iushrn(1);
                D3.iushrn(1);
              }
            }
            if (x3.cmp(y3) >= 0) {
              x3.isub(y3);
              A3.isub(C3);
              B3.isub(D3);
            } else {
              y3.isub(x3);
              C3.isub(A3);
              D3.isub(B3);
            }
          }
          return {
            a: C3,
            b: D3,
            gcd: y3.iushln(g3)
          };
        };
        BN.prototype._invmp = function _invmp(p3) {
          assert(p3.negative === 0);
          assert(!p3.isZero());
          var a3 = this;
          var b3 = p3.clone();
          if (a3.negative !== 0) {
            a3 = a3.umod(p3);
          } else {
            a3 = a3.clone();
          }
          var x1 = new BN(1);
          var x22 = new BN(0);
          var delta = b3.clone();
          while (a3.cmpn(1) > 0 && b3.cmpn(1) > 0) {
            for (var i3 = 0, im = 1; (a3.words[0] & im) === 0 && i3 < 26; ++i3, im <<= 1) ;
            if (i3 > 0) {
              a3.iushrn(i3);
              while (i3-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j3 = 0, jm = 1; (b3.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1) ;
            if (j3 > 0) {
              b3.iushrn(j3);
              while (j3-- > 0) {
                if (x22.isOdd()) {
                  x22.iadd(delta);
                }
                x22.iushrn(1);
              }
            }
            if (a3.cmp(b3) >= 0) {
              a3.isub(b3);
              x1.isub(x22);
            } else {
              b3.isub(a3);
              x22.isub(x1);
            }
          }
          var res;
          if (a3.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x22;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p3);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a3 = this.clone();
          var b3 = num.clone();
          a3.negative = 0;
          b3.negative = 0;
          for (var shift = 0; a3.isEven() && b3.isEven(); shift++) {
            a3.iushrn(1);
            b3.iushrn(1);
          }
          do {
            while (a3.isEven()) {
              a3.iushrn(1);
            }
            while (b3.isEven()) {
              b3.iushrn(1);
            }
            var r3 = a3.cmp(b3);
            if (r3 < 0) {
              var t3 = a3;
              a3 = b3;
              b3 = t3;
            } else if (r3 === 0 || b3.cmpn(1) === 0) {
              break;
            }
            a3.isub(b3);
          } while (true);
          return b3.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert(typeof bit === "number");
          var r3 = bit % 26;
          var s3 = (bit - r3) / 26;
          var q3 = 1 << r3;
          if (this.length <= s3) {
            this._expand(s3 + 1);
            this.words[s3] |= q3;
            return this;
          }
          var carry = q3;
          for (var i3 = s3; carry !== 0 && i3 < this.length; i3++) {
            var w3 = this.words[i3] | 0;
            w3 += carry;
            carry = w3 >>> 26;
            w3 &= 67108863;
            this.words[i3] = w3;
          }
          if (carry !== 0) {
            this.words[i3] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this._strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert(num <= 67108863, "Number is too big");
            var w3 = this.words[0] | 0;
            res = w3 === num ? 0 : w3 < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i3 = this.length - 1; i3 >= 0; i3--) {
            var a3 = this.words[i3] | 0;
            var b3 = num.words[i3] | 0;
            if (a3 === b3) continue;
            if (a3 < b3) {
              res = -1;
            } else if (a3 > b3) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt2(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt2(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          assert(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name, p3) {
          this.name = name;
          this.p = new BN(p3, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r3 = num;
          var rlen;
          do {
            this.split(r3, this.tmp);
            r3 = this.imulK(r3);
            r3 = r3.iadd(this.tmp);
            rlen = r3.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r3.ucmp(this.p);
          if (cmp === 0) {
            r3.words[0] = 0;
            r3.length = 1;
          } else if (cmp > 0) {
            r3.isub(this.p);
          } else {
            if (r3.strip !== void 0) {
              r3.strip();
            } else {
              r3._strip();
            }
          }
          return r3;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
        }
        inherits(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i3 = 0; i3 < outLen; i3++) {
            output.words[i3] = input.words[i3];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i3 = 10; i3 < input.length; i3++) {
            var next = input.words[i3] | 0;
            input.words[i3 - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i3 - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo2 = 0;
          for (var i3 = 0; i3 < num.length; i3++) {
            var w3 = num.words[i3] | 0;
            lo2 += w3 * 977;
            num.words[i3] = lo2 & 67108863;
            lo2 = w3 * 64 + (lo2 / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
        }
        inherits(P224, MPrime);
        function P192() {
          MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
        }
        inherits(P192, MPrime);
        function P25519() {
          MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
        }
        inherits(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i3 = 0; i3 < num.length; i3++) {
            var hi2 = (num.words[i3] | 0) * 19 + carry;
            var lo2 = hi2 & 67108863;
            hi2 >>>= 26;
            num.words[i3] = lo2;
            carry = hi2;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name) {
          if (primes[name]) return primes[name];
          var prime2;
          if (name === "k256") {
            prime2 = new K256();
          } else if (name === "p224") {
            prime2 = new P224();
          } else if (name === "p192") {
            prime2 = new P192();
          } else if (name === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name);
          }
          primes[name] = prime2;
          return prime2;
        };
        function Red(m3) {
          if (typeof m3 === "string") {
            var prime = BN._prime(m3);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert(m3.gtn(1), "modulus must be greater than 1");
            this.m = m3;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a3) {
          assert(a3.negative === 0, "red works only with positives");
          assert(a3.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a3, b3) {
          assert((a3.negative | b3.negative) === 0, "red works only with positives");
          assert(a3.red && a3.red === b3.red, "red works only with red numbers");
        };
        Red.prototype.imod = function imod(a3) {
          if (this.prime) return this.prime.ireduce(a3)._forceRed(this);
          move(a3, a3.umod(this.m)._forceRed(this));
          return a3;
        };
        Red.prototype.neg = function neg(a3) {
          if (a3.isZero()) {
            return a3.clone();
          }
          return this.m.sub(a3)._forceRed(this);
        };
        Red.prototype.add = function add(a3, b3) {
          this._verify2(a3, b3);
          var res = a3.add(b3);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a3, b3) {
          this._verify2(a3, b3);
          var res = a3.iadd(b3);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a3, b3) {
          this._verify2(a3, b3);
          var res = a3.sub(b3);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a3, b3) {
          this._verify2(a3, b3);
          var res = a3.isub(b3);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a3, num) {
          this._verify1(a3);
          return this.imod(a3.ushln(num));
        };
        Red.prototype.imul = function imul(a3, b3) {
          this._verify2(a3, b3);
          return this.imod(a3.imul(b3));
        };
        Red.prototype.mul = function mul(a3, b3) {
          this._verify2(a3, b3);
          return this.imod(a3.mul(b3));
        };
        Red.prototype.isqr = function isqr(a3) {
          return this.imul(a3, a3.clone());
        };
        Red.prototype.sqr = function sqr(a3) {
          return this.mul(a3, a3);
        };
        Red.prototype.sqrt = function sqrt(a3) {
          if (a3.isZero()) return a3.clone();
          var mod3 = this.m.andln(3);
          assert(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a3, pow);
          }
          var q3 = this.m.subn(1);
          var s3 = 0;
          while (!q3.isZero() && q3.andln(1) === 0) {
            s3++;
            q3.iushrn(1);
          }
          assert(!q3.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z3 = this.m.bitLength();
          z3 = new BN(2 * z3 * z3).toRed(this);
          while (this.pow(z3, lpow).cmp(nOne) !== 0) {
            z3.redIAdd(nOne);
          }
          var c3 = this.pow(z3, q3);
          var r3 = this.pow(a3, q3.addn(1).iushrn(1));
          var t3 = this.pow(a3, q3);
          var m3 = s3;
          while (t3.cmp(one) !== 0) {
            var tmp = t3;
            for (var i3 = 0; tmp.cmp(one) !== 0; i3++) {
              tmp = tmp.redSqr();
            }
            assert(i3 < m3);
            var b3 = this.pow(c3, new BN(1).iushln(m3 - i3 - 1));
            r3 = r3.redMul(b3);
            c3 = b3.redSqr();
            t3 = t3.redMul(c3);
            m3 = i3;
          }
          return r3;
        };
        Red.prototype.invm = function invm(a3) {
          var inv = a3._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a3, num) {
          if (num.isZero()) return new BN(1).toRed(this);
          if (num.cmpn(1) === 0) return a3.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a3;
          for (var i3 = 2; i3 < wnd.length; i3++) {
            wnd[i3] = this.mul(wnd[i3 - 1], a3);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i3 = num.length - 1; i3 >= 0; i3--) {
            var word = num.words[i3];
            for (var j3 = start - 1; j3 >= 0; j3--) {
              var bit = word >> j3 & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i3 !== 0 || j3 !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r3 = num.umod(this.m);
          return r3 === num ? r3.clone() : r3;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont2(num) {
          return new Mont(num);
        };
        function Mont(m3) {
          Red.call(this, m3);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r3 = this.imod(num.mul(this.rinv));
          r3.red = null;
          return r3;
        };
        Mont.prototype.imul = function imul(a3, b3) {
          if (a3.isZero() || b3.isZero()) {
            a3.words[0] = 0;
            a3.length = 1;
            return a3;
          }
          var t3 = a3.imul(b3);
          var c3 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u3 = t3.isub(c3).iushrn(this.shift);
          var res = u3;
          if (u3.cmp(this.m) >= 0) {
            res = u3.isub(this.m);
          } else if (u3.cmpn(0) < 0) {
            res = u3.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a3, b3) {
          if (a3.isZero() || b3.isZero()) return new BN(0)._forceRed(this);
          var t3 = a3.mul(b3);
          var c3 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u3 = t3.isub(c3).iushrn(this.shift);
          var res = u3;
          if (u3.cmp(this.m) >= 0) {
            res = u3.isub(this.m);
          } else if (u3.cmpn(0) < 0) {
            res = u3.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a3) {
          var res = this.imod(a3._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(module, bn);
    })(bn$1);
    return bn$1.exports;
  }
  var browserifyRsa;
  var hasRequiredBrowserifyRsa;
  function requireBrowserifyRsa() {
    if (hasRequiredBrowserifyRsa) return browserifyRsa;
    hasRequiredBrowserifyRsa = 1;
    var BN = requireBn();
    var randomBytes = requireBrowser$a();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function getr(priv) {
      var len = priv.modulus.byteLength();
      var r3;
      do {
        r3 = new BN(randomBytes(len));
      } while (r3.cmp(priv.modulus) >= 0 || !r3.umod(priv.prime1) || !r3.umod(priv.prime2));
      return r3;
    }
    function blind(priv) {
      var r3 = getr(priv);
      var blinder = r3.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
      return {
        blinder,
        unblinder: r3.invm(priv.modulus)
      };
    }
    function crt(msg, priv) {
      var blinds = blind(priv);
      var len = priv.modulus.byteLength();
      var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
      var c1 = blinded.toRed(BN.mont(priv.prime1));
      var c22 = blinded.toRed(BN.mont(priv.prime2));
      var qinv = priv.coefficient;
      var p3 = priv.prime1;
      var q3 = priv.prime2;
      var m1 = c1.redPow(priv.exponent1).fromRed();
      var m22 = c22.redPow(priv.exponent2).fromRed();
      var h3 = m1.isub(m22).imul(qinv).umod(p3).imul(q3);
      return m22.iadd(h3).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer2, "be", len);
    }
    crt.getr = getr;
    browserifyRsa = crt;
    return browserifyRsa;
  }
  var elliptic = {};
  const version = "6.6.1";
  const require$$0 = {
    version
  };
  var utils$2 = {};
  var utils$1 = {};
  var hasRequiredUtils$2;
  function requireUtils$2() {
    if (hasRequiredUtils$2) return utils$1;
    hasRequiredUtils$2 = 1;
    (function(exports2) {
      var utils2 = exports2;
      function toArray(msg, enc) {
        if (Array.isArray(msg)) return msg.slice();
        if (!msg) return [];
        var res = [];
        if (typeof msg !== "string") {
          for (var i3 = 0; i3 < msg.length; i3++) res[i3] = msg[i3] | 0;
          return res;
        }
        if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0) msg = "0" + msg;
          for (var i3 = 0; i3 < msg.length; i3 += 2) res.push(parseInt(msg[i3] + msg[i3 + 1], 16));
        } else {
          for (var i3 = 0; i3 < msg.length; i3++) {
            var c3 = msg.charCodeAt(i3);
            var hi2 = c3 >> 8;
            var lo2 = c3 & 255;
            if (hi2) res.push(hi2, lo2);
            else res.push(lo2);
          }
        }
        return res;
      }
      utils2.toArray = toArray;
      function zero2(word) {
        if (word.length === 1) return "0" + word;
        else return word;
      }
      utils2.zero2 = zero2;
      function toHex(msg) {
        var res = "";
        for (var i3 = 0; i3 < msg.length; i3++) res += zero2(msg[i3].toString(16));
        return res;
      }
      utils2.toHex = toHex;
      utils2.encode = function encode(arr, enc) {
        if (enc === "hex") return toHex(arr);
        else return arr;
      };
    })(utils$1);
    return utils$1;
  }
  var hasRequiredUtils$1;
  function requireUtils$1() {
    if (hasRequiredUtils$1) return utils$2;
    hasRequiredUtils$1 = 1;
    (function(exports2) {
      var utils2 = exports2;
      var BN = requireBn$1();
      var minAssert = requireMinimalisticAssert();
      var minUtils = requireUtils$2();
      utils2.assert = minAssert;
      utils2.toArray = minUtils.toArray;
      utils2.zero2 = minUtils.zero2;
      utils2.toHex = minUtils.toHex;
      utils2.encode = minUtils.encode;
      function getNAF(num, w3, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        var i3;
        for (i3 = 0; i3 < naf.length; i3 += 1) {
          naf[i3] = 0;
        }
        var ws = 1 << w3 + 1;
        var k3 = num.clone();
        for (i3 = 0; i3 < naf.length; i3++) {
          var z3;
          var mod = k3.andln(ws - 1);
          if (k3.isOdd()) {
            if (mod > (ws >> 1) - 1) z3 = (ws >> 1) - mod;
            else z3 = mod;
            k3.isubn(z3);
          } else {
            z3 = 0;
          }
          naf[i3] = z3;
          k3.iushrn(1);
        }
        return naf;
      }
      utils2.getNAF = getNAF;
      function getJSF(k1, k22) {
        var jsf = [
          [],
          []
        ];
        k1 = k1.clone();
        k22 = k22.clone();
        var d1 = 0;
        var d22 = 0;
        var m8;
        while (k1.cmpn(-d1) > 0 || k22.cmpn(-d22) > 0) {
          var m14 = k1.andln(3) + d1 & 3;
          var m24 = k22.andln(3) + d22 & 3;
          if (m14 === 3) m14 = -1;
          if (m24 === 3) m24 = -1;
          var u1;
          if ((m14 & 1) === 0) {
            u1 = 0;
          } else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
          }
          jsf[0].push(u1);
          var u22;
          if ((m24 & 1) === 0) {
            u22 = 0;
          } else {
            m8 = k22.andln(7) + d22 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u22 = -m24;
            else u22 = m24;
          }
          jsf[1].push(u22);
          if (2 * d1 === u1 + 1) d1 = 1 - d1;
          if (2 * d22 === u22 + 1) d22 = 1 - d22;
          k1.iushrn(1);
          k22.iushrn(1);
        }
        return jsf;
      }
      utils2.getJSF = getJSF;
      function cachedProperty(obj, name, computer) {
        var key2 = "_" + name;
        obj.prototype[name] = function cachedProperty2() {
          return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
        };
      }
      utils2.cachedProperty = cachedProperty;
      function parseBytes(bytes) {
        return typeof bytes === "string" ? utils2.toArray(bytes, "hex") : bytes;
      }
      utils2.parseBytes = parseBytes;
      function intFromLE(bytes) {
        return new BN(bytes, "hex", "le");
      }
      utils2.intFromLE = intFromLE;
    })(utils$2);
    return utils$2;
  }
  var curve = {};
  var base$1;
  var hasRequiredBase$1;
  function requireBase$1() {
    if (hasRequiredBase$1) return base$1;
    hasRequiredBase$1 = 1;
    var BN = requireBn$1();
    var utils2 = requireUtils$1();
    var getNAF = utils2.getNAF;
    var getJSF = utils2.getJSF;
    var assert = utils2.assert;
    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16);
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    base$1 = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p3, k3) {
      assert(p3.precomputed);
      var doubles = p3._getDoubles();
      var naf = getNAF(k3, 1, this._bitLength);
      var I3 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I3 /= 3;
      var repr = [];
      var j3;
      var nafW;
      for (j3 = 0; j3 < naf.length; j3 += doubles.step) {
        nafW = 0;
        for (var l3 = j3 + doubles.step - 1; l3 >= j3; l3--) nafW = (nafW << 1) + naf[l3];
        repr.push(nafW);
      }
      var a3 = this.jpoint(null, null, null);
      var b3 = this.jpoint(null, null, null);
      for (var i3 = I3; i3 > 0; i3--) {
        for (j3 = 0; j3 < repr.length; j3++) {
          nafW = repr[j3];
          if (nafW === i3) b3 = b3.mixedAdd(doubles.points[j3]);
          else if (nafW === -i3) b3 = b3.mixedAdd(doubles.points[j3].neg());
        }
        a3 = a3.add(b3);
      }
      return a3.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p3, k3) {
      var w3 = 4;
      var nafPoints = p3._getNAFPoints(w3);
      w3 = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k3, w3, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i3 = naf.length - 1; i3 >= 0; i3--) {
        for (var l3 = 0; i3 >= 0 && naf[i3] === 0; i3--) l3++;
        if (i3 >= 0) l3++;
        acc = acc.dblp(l3);
        if (i3 < 0) break;
        var z3 = naf[i3];
        assert(z3 !== 0);
        if (p3.type === "affine") {
          if (z3 > 0) acc = acc.mixedAdd(wnd[z3 - 1 >> 1]);
          else acc = acc.mixedAdd(wnd[-z3 - 1 >> 1].neg());
        } else {
          if (z3 > 0) acc = acc.add(wnd[z3 - 1 >> 1]);
          else acc = acc.add(wnd[-z3 - 1 >> 1].neg());
        }
      }
      return p3.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i3;
      var j3;
      var p3;
      for (i3 = 0; i3 < len; i3++) {
        p3 = points[i3];
        var nafPoints = p3._getNAFPoints(defW);
        wndWidth[i3] = nafPoints.wnd;
        wnd[i3] = nafPoints.points;
      }
      for (i3 = len - 1; i3 >= 1; i3 -= 2) {
        var a3 = i3 - 1;
        var b3 = i3;
        if (wndWidth[a3] !== 1 || wndWidth[b3] !== 1) {
          naf[a3] = getNAF(coeffs[a3], wndWidth[a3], this._bitLength);
          naf[b3] = getNAF(coeffs[b3], wndWidth[b3], this._bitLength);
          max = Math.max(naf[a3].length, max);
          max = Math.max(naf[b3].length, max);
          continue;
        }
        var comb = [
          points[a3],
          null,
          null,
          points[b3]
        ];
        if (points[a3].y.cmp(points[b3].y) === 0) {
          comb[1] = points[a3].add(points[b3]);
          comb[2] = points[a3].toJ().mixedAdd(points[b3].neg());
        } else if (points[a3].y.cmp(points[b3].y.redNeg()) === 0) {
          comb[1] = points[a3].toJ().mixedAdd(points[b3]);
          comb[2] = points[a3].add(points[b3].neg());
        } else {
          comb[1] = points[a3].toJ().mixedAdd(points[b3]);
          comb[2] = points[a3].toJ().mixedAdd(points[b3].neg());
        }
        var index2 = [
          -3,
          -1,
          -5,
          -7,
          0,
          7,
          5,
          1,
          3
        ];
        var jsf = getJSF(coeffs[a3], coeffs[b3]);
        max = Math.max(jsf[0].length, max);
        naf[a3] = new Array(max);
        naf[b3] = new Array(max);
        for (j3 = 0; j3 < max; j3++) {
          var ja2 = jsf[0][j3] | 0;
          var jb = jsf[1][j3] | 0;
          naf[a3][j3] = index2[(ja2 + 1) * 3 + (jb + 1)];
          naf[b3][j3] = 0;
          wnd[a3] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i3 = max; i3 >= 0; i3--) {
        var k3 = 0;
        while (i3 >= 0) {
          var zero = true;
          for (j3 = 0; j3 < len; j3++) {
            tmp[j3] = naf[j3][i3] | 0;
            if (tmp[j3] !== 0) zero = false;
          }
          if (!zero) break;
          k3++;
          i3--;
        }
        if (i3 >= 0) k3++;
        acc = acc.dblp(k3);
        if (i3 < 0) break;
        for (j3 = 0; j3 < len; j3++) {
          var z3 = tmp[j3];
          if (z3 === 0) continue;
          else if (z3 > 0) p3 = wnd[j3][z3 - 1 >> 1];
          else if (z3 < 0) p3 = wnd[j3][-z3 - 1 >> 1].neg();
          if (p3.type === "affine") acc = acc.mixedAdd(p3);
          else acc = acc.add(p3);
        }
      }
      for (i3 = 0; i3 < len; i3++) wnd[i3] = null;
      if (jacobianResult) return acc;
      else return acc.toP();
    };
    function BasePoint(curve2, type) {
      this.curve = curve2;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils2.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6) assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7) assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x3 = this.getX().toArray("be", len);
      if (compact) return [
        this.getY().isEven() ? 2 : 3
      ].concat(x3);
      return [
        4
      ].concat(x3, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils2.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed) return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k3) {
      if (!this.precomputed) return false;
      var doubles = this.precomputed.doubles;
      if (!doubles) return false;
      return doubles.points.length >= Math.ceil((k3.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
      var doubles = [
        this
      ];
      var acc = this;
      for (var i3 = 0; i3 < power; i3 += step) {
        for (var j3 = 0; j3 < step; j3++) acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
      var res = [
        this
      ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i3 = 1; i3 < max; i3++) res[i3] = res[i3 - 1].add(dbl);
      return {
        wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k3) {
      var r3 = this;
      for (var i3 = 0; i3 < k3; i3++) r3 = r3.dbl();
      return r3;
    };
    return base$1;
  }
  var short;
  var hasRequiredShort;
  function requireShort() {
    if (hasRequiredShort) return short;
    hasRequiredShort = 1;
    var utils2 = requireUtils$1();
    var BN = requireBn$1();
    var inherits = requireInherits_browser();
    var Base = requireBase$1();
    var assert = utils2.assert;
    function ShortCurve(conf) {
      Base.call(this, "short", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve, Base);
    short = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s3 = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s3).fromRed();
      var l22 = ntinv.redSub(s3).fromRed();
      return [
        l1,
        l22
      ];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u3 = lambda;
      var v3 = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x22 = new BN(0);
      var y22 = new BN(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a22;
      var b22;
      var prevR;
      var i3 = 0;
      var r3;
      var x3;
      while (u3.cmpn(0) !== 0) {
        var q3 = v3.div(u3);
        r3 = v3.sub(q3.mul(u3));
        x3 = x22.sub(q3.mul(x1));
        var y3 = y22.sub(q3.mul(y1));
        if (!a1 && r3.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r3.neg();
          b1 = x3;
        } else if (a1 && ++i3 === 2) {
          break;
        }
        prevR = r3;
        v3 = u3;
        u3 = r3;
        x22 = x1;
        x1 = x3;
        y22 = y1;
        y1 = y3;
      }
      a22 = r3.neg();
      b22 = x3;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a22.sqr().add(b22.sqr());
      if (len2.cmp(len1) >= 0) {
        a22 = a0;
        b22 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a22.negative) {
        a22 = a22.neg();
        b22 = b22.neg();
      }
      return [
        {
          a: a1,
          b: b1
        },
        {
          a: a22,
          b: b22
        }
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k3) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v22 = basis[1];
      var c1 = v22.b.mul(k3).divRound(this.n);
      var c22 = v1.b.neg().mul(k3).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p22 = c22.mul(v22.a);
      var q1 = c1.mul(v1.b);
      var q22 = c22.mul(v22.b);
      var k1 = k3.sub(p1).sub(p22);
      var k22 = q1.add(q22).neg();
      return {
        k1,
        k2: k22
      };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x3, odd) {
      x3 = new BN(x3, 16);
      if (!x3.red) x3 = x3.toRed(this.red);
      var y22 = x3.redSqr().redMul(x3).redIAdd(x3.redMul(this.a)).redIAdd(this.b);
      var y3 = y22.redSqrt();
      if (y3.redSqr().redSub(y22).cmp(this.zero) !== 0) throw new Error("invalid point");
      var isOdd = y3.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd) y3 = y3.redNeg();
      return this.point(x3, y3);
    };
    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf) return true;
      var x3 = point.x;
      var y3 = point.y;
      var ax = this.a.redMul(x3);
      var rhs = x3.redSqr().redMul(x3).redIAdd(ax).redIAdd(this.b);
      return y3.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i3 = 0; i3 < points.length; i3++) {
        var split = this._endoSplit(coeffs[i3]);
        var p3 = points[i3];
        var beta = p3._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p3 = p3.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i3 * 2] = p3;
        npoints[i3 * 2 + 1] = beta;
        ncoeffs[i3 * 2] = split.k1;
        ncoeffs[i3 * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i3 * 2, jacobianResult);
      for (var j3 = 0; j3 < i3 * 2; j3++) {
        npoints[j3] = null;
        ncoeffs[j3] = null;
      }
      return res;
    };
    function Point(curve2, x3, y3, isRed) {
      Base.BasePoint.call(this, curve2, "affine");
      if (x3 === null && y3 === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x3, 16);
        this.y = new BN(y3, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point, Base.BasePoint);
    ShortCurve.prototype.point = function point(x3, y3, isRed) {
      return new Point(this, x3, y3, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo) return;
      var pre = this.precomputed;
      if (pre && pre.beta) return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve2 = this.curve;
        var endoMul = function(p3) {
          return curve2.point(p3.x.redMul(curve2.endo.beta), p3.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed) return [
        this.x,
        this.y
      ];
      return [
        this.x,
        this.y,
        this.precomputed && {
          doubles: this.precomputed.doubles && {
            step: this.precomputed.doubles.step,
            points: this.precomputed.doubles.points.slice(1)
          },
          naf: this.precomputed.naf && {
            wnd: this.precomputed.naf.wnd,
            points: this.precomputed.naf.points.slice(1)
          }
        }
      ];
    };
    Point.fromJSON = function fromJSON(curve2, obj, red) {
      if (typeof obj === "string") obj = JSON.parse(obj);
      var res = curve2.point(obj[0], obj[1], red);
      if (!obj[2]) return res;
      function obj2point(obj2) {
        return curve2.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [
            res
          ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [
            res
          ].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p3) {
      if (this.inf) return p3;
      if (p3.inf) return this;
      if (this.eq(p3)) return this.dbl();
      if (this.neg().eq(p3)) return this.curve.point(null, null);
      if (this.x.cmp(p3.x) === 0) return this.curve.point(null, null);
      var c3 = this.y.redSub(p3.y);
      if (c3.cmpn(0) !== 0) c3 = c3.redMul(this.x.redSub(p3.x).redInvm());
      var nx = c3.redSqr().redISub(this.x).redISub(p3.x);
      var ny = c3.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf) return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
      var a3 = this.curve.a;
      var x22 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c3 = x22.redAdd(x22).redIAdd(x22).redIAdd(a3).redMul(dyinv);
      var nx = c3.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c3.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k3) {
      k3 = new BN(k3, 16);
      if (this.isInfinity()) return this;
      else if (this._hasDoubles(k3)) return this.curve._fixedNafMul(this, k3);
      else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
      ], [
        k3
      ]);
      else return this.curve._wnafMul(this, k3);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p22, k22) {
      var points = [
        this,
        p22
      ];
      var coeffs = [
        k1,
        k22
      ];
      if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
      else return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p22, k22) {
      var points = [
        this,
        p22
      ];
      var coeffs = [
        k1,
        k22
      ];
      if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
      else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq(p3) {
      return this === p3 || this.inf === p3.inf && (this.inf || this.x.cmp(p3.x) === 0 && this.y.cmp(p3.y) === 0);
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf) return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p3) {
          return p3.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf) return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint(curve2, x3, y3, z3) {
      Base.BasePoint.call(this, curve2, "jacobian");
      if (x3 === null && y3 === null && z3 === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x3, 16);
        this.y = new BN(y3, 16);
        this.z = new BN(z3, 16);
      }
      if (!this.x.red) this.x = this.x.toRed(this.curve.red);
      if (!this.y.red) this.y = this.y.toRed(this.curve.red);
      if (!this.z.red) this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint, Base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x3, y3, z3) {
      return new JPoint(this, x3, y3, z3);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity()) return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add(p3) {
      if (this.isInfinity()) return p3;
      if (p3.isInfinity()) return this;
      var pz2 = p3.z.redSqr();
      var z22 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u22 = p3.x.redMul(z22);
      var s1 = this.y.redMul(pz2.redMul(p3.z));
      var s22 = p3.y.redMul(z22.redMul(this.z));
      var h3 = u1.redSub(u22);
      var r3 = s1.redSub(s22);
      if (h3.cmpn(0) === 0) {
        if (r3.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
      }
      var h22 = h3.redSqr();
      var h32 = h22.redMul(h3);
      var v3 = u1.redMul(h22);
      var nx = r3.redSqr().redIAdd(h32).redISub(v3).redISub(v3);
      var ny = r3.redMul(v3.redISub(nx)).redISub(s1.redMul(h32));
      var nz = this.z.redMul(p3.z).redMul(h3);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p3) {
      if (this.isInfinity()) return p3.toJ();
      if (p3.isInfinity()) return this;
      var z22 = this.z.redSqr();
      var u1 = this.x;
      var u22 = p3.x.redMul(z22);
      var s1 = this.y;
      var s22 = p3.y.redMul(z22).redMul(this.z);
      var h3 = u1.redSub(u22);
      var r3 = s1.redSub(s22);
      if (h3.cmpn(0) === 0) {
        if (r3.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
      }
      var h22 = h3.redSqr();
      var h32 = h22.redMul(h3);
      var v3 = u1.redMul(h22);
      var nx = r3.redSqr().redIAdd(h32).redISub(v3).redISub(v3);
      var ny = r3.redMul(v3.redISub(nx)).redISub(s1.redMul(h32));
      var nz = this.z.redMul(h3);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0) return this;
      if (this.isInfinity()) return this;
      if (!pow) return this.dbl();
      var i3;
      if (this.curve.zeroA || this.curve.threeA) {
        var r3 = this;
        for (i3 = 0; i3 < pow; i3++) r3 = r3.dbl();
        return r3;
      }
      var a3 = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i3 = 0; i3 < pow; i3++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c3 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a3.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c3.redSqr().redISub(t1.redAdd(t1));
        var t22 = t1.redISub(nx);
        var dny = c3.redMul(t22);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i3 + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity()) return this;
      if (this.curve.zeroA) return this._zeroDbl();
      else if (this.curve.threeA) return this._threeDbl();
      else return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s3 = s3.redIAdd(s3);
        var m3 = xx.redAdd(xx).redIAdd(xx);
        var t3 = m3.redSqr().redISub(s3).redISub(s3);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t3;
        ny = m3.redMul(s3.redISub(t3)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a3 = this.x.redSqr();
        var b3 = this.y.redSqr();
        var c3 = b3.redSqr();
        var d3 = this.x.redAdd(b3).redSqr().redISub(a3).redISub(c3);
        d3 = d3.redIAdd(d3);
        var e3 = a3.redAdd(a3).redIAdd(a3);
        var f3 = e3.redSqr();
        var c8 = c3.redIAdd(c3);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f3.redISub(d3).redISub(d3);
        ny = e3.redMul(d3.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s3 = s3.redIAdd(s3);
        var m3 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t3 = m3.redSqr().redISub(s3).redISub(s3);
        nx = t3;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m3.redMul(s3.redISub(t3)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a3 = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c3 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a3.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c3.redSqr().redISub(t1.redAdd(t1));
      var t22 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c3.redMul(t22).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA) return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m3 = xx.redAdd(xx).redIAdd(xx);
      var mm = m3.redSqr();
      var e3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e3 = e3.redIAdd(e3);
      e3 = e3.redAdd(e3).redIAdd(e3);
      e3 = e3.redISub(mm);
      var ee2 = e3.redSqr();
      var t3 = yyyy.redIAdd(yyyy);
      t3 = t3.redIAdd(t3);
      t3 = t3.redIAdd(t3);
      t3 = t3.redIAdd(t3);
      var u3 = m3.redIAdd(e3).redSqr().redISub(mm).redISub(ee2).redISub(t3);
      var yyu4 = yy.redMul(u3);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee2).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u3.redMul(t3.redISub(u3)).redISub(e3.redMul(ee2)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e3).redSqr().redISub(zz).redISub(ee2);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul(k3, kbase) {
      k3 = new BN(k3, kbase);
      return this.curve._wnafMul(this, k3);
    };
    JPoint.prototype.eq = function eq(p3) {
      if (p3.type === "affine") return this.eq(p3.toJ());
      if (this === p3) return true;
      var z22 = this.z.redSqr();
      var pz2 = p3.z.redSqr();
      if (this.x.redMul(pz2).redISub(p3.x.redMul(z22)).cmpn(0) !== 0) return false;
      var z3 = z22.redMul(this.z);
      var pz3 = pz2.redMul(p3.z);
      return this.y.redMul(pz3).redISub(p3.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x3) {
      var zs = this.z.redSqr();
      var rx = x3.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0) return true;
      var xc = x3.clone();
      var t3 = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t3);
        if (this.x.cmp(rx) === 0) return true;
      }
    };
    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity()) return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
    return short;
  }
  var mont;
  var hasRequiredMont;
  function requireMont() {
    if (hasRequiredMont) return mont;
    hasRequiredMont = 1;
    var BN = requireBn$1();
    var inherits = requireInherits_browser();
    var Base = requireBase$1();
    var utils2 = requireUtils$1();
    function MontCurve(conf) {
      Base.call(this, "mont", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    mont = MontCurve;
    MontCurve.prototype.validate = function validate(point) {
      var x3 = point.normalize().x;
      var x22 = x3.redSqr();
      var rhs = x22.redMul(x3).redAdd(x22.redMul(this.a)).redAdd(x3);
      var y3 = rhs.redSqrt();
      return y3.redSqr().cmp(rhs) === 0;
    };
    function Point(curve2, x3, z3) {
      Base.BasePoint.call(this, curve2, "projective");
      if (x3 === null && z3 === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x3, 16);
        this.z = new BN(z3, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils2.toArray(bytes, enc), 1);
    };
    MontCurve.prototype.point = function point(x3, z3) {
      return new Point(this, x3, z3);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    Point.prototype.precompute = function precompute() {
    };
    Point.prototype._encode = function _encode() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Point.fromJSON = function fromJSON(curve2, obj) {
      return new Point(curve2, obj[0], obj[1] || curve2.one);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
    Point.prototype.dbl = function dbl() {
      var a3 = this.x.redAdd(this.z);
      var aa = a3.redSqr();
      var b3 = this.x.redSub(this.z);
      var bb = b3.redSqr();
      var c3 = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c3.redMul(bb.redAdd(this.curve.a24.redMul(c3)));
      return this.curve.point(nx, nz);
    };
    Point.prototype.add = function add() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.diffAdd = function diffAdd(p3, diff) {
      var a3 = this.x.redAdd(this.z);
      var b3 = this.x.redSub(this.z);
      var c3 = p3.x.redAdd(p3.z);
      var d3 = p3.x.redSub(p3.z);
      var da = d3.redMul(a3);
      var cb = c3.redMul(b3);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point.prototype.mul = function mul(k3) {
      var t3 = k3.clone();
      var a3 = this;
      var b3 = this.curve.point(null, null);
      var c3 = this;
      for (var bits = []; t3.cmpn(0) !== 0; t3.iushrn(1)) bits.push(t3.andln(1));
      for (var i3 = bits.length - 1; i3 >= 0; i3--) {
        if (bits[i3] === 0) {
          a3 = a3.diffAdd(b3, c3);
          b3 = b3.dbl();
        } else {
          b3 = a3.diffAdd(b3, c3);
          a3 = a3.dbl();
        }
      }
      return b3;
    };
    Point.prototype.mulAdd = function mulAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    Point.prototype.normalize = function normalize2() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    return mont;
  }
  var edwards;
  var hasRequiredEdwards;
  function requireEdwards() {
    if (hasRequiredEdwards) return edwards;
    hasRequiredEdwards = 1;
    var utils2 = requireUtils$1();
    var BN = requireBn$1();
    var inherits = requireInherits_browser();
    var Base = requireBase$1();
    var assert = utils2.assert;
    function EdwardsCurve(conf) {
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, "edwards", conf);
      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    edwards = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA) return num.redNeg();
      else return this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC) return num;
      else return this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint(x3, y3, z3, t3) {
      return this.point(x3, y3, z3, t3);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX(x3, odd) {
      x3 = new BN(x3, 16);
      if (!x3.red) x3 = x3.toRed(this.red);
      var x22 = x3.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x22));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x22));
      var y22 = rhs.redMul(lhs.redInvm());
      var y3 = y22.redSqrt();
      if (y3.redSqr().redSub(y22).cmp(this.zero) !== 0) throw new Error("invalid point");
      var isOdd = y3.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd) y3 = y3.redNeg();
      return this.point(x3, y3);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y3, odd) {
      y3 = new BN(y3, 16);
      if (!y3.red) y3 = y3.toRed(this.red);
      var y22 = y3.redSqr();
      var lhs = y22.redSub(this.c2);
      var rhs = y22.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x22 = lhs.redMul(rhs.redInvm());
      if (x22.cmp(this.zero) === 0) {
        if (odd) throw new Error("invalid point");
        else return this.point(this.zero, y3);
      }
      var x3 = x22.redSqrt();
      if (x3.redSqr().redSub(x22).cmp(this.zero) !== 0) throw new Error("invalid point");
      if (x3.fromRed().isOdd() !== odd) x3 = x3.redNeg();
      return this.point(x3, y3);
    };
    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity()) return true;
      point.normalize();
      var x22 = point.x.redSqr();
      var y22 = point.y.redSqr();
      var lhs = x22.redMul(this.a).redAdd(y22);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x22).redMul(y22)));
      return lhs.cmp(rhs) === 0;
    };
    function Point(curve2, x3, y3, z3, t3) {
      Base.BasePoint.call(this, curve2, "projective");
      if (x3 === null && y3 === null && z3 === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x3, 16);
        this.y = new BN(y3, 16);
        this.z = z3 ? new BN(z3, 16) : this.curve.one;
        this.t = t3 && new BN(t3, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point(x3, y3, z3, t3) {
      return new Point(this, x3, y3, z3, t3);
    };
    Point.fromJSON = function fromJSON(curve2, obj) {
      return new Point(curve2, obj[0], obj[1], obj[2]);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    Point.prototype._extDbl = function _extDbl() {
      var a3 = this.x.redSqr();
      var b3 = this.y.redSqr();
      var c3 = this.z.redSqr();
      c3 = c3.redIAdd(c3);
      var d3 = this.curve._mulA(a3);
      var e3 = this.x.redAdd(this.y).redSqr().redISub(a3).redISub(b3);
      var g3 = d3.redAdd(b3);
      var f3 = g3.redSub(c3);
      var h3 = d3.redSub(b3);
      var nx = e3.redMul(f3);
      var ny = g3.redMul(h3);
      var nt2 = e3.redMul(h3);
      var nz = f3.redMul(g3);
      return this.curve.point(nx, ny, nz, nt2);
    };
    Point.prototype._projDbl = function _projDbl() {
      var b3 = this.x.redAdd(this.y).redSqr();
      var c3 = this.x.redSqr();
      var d3 = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      var e3;
      var h3;
      var j3;
      if (this.curve.twisted) {
        e3 = this.curve._mulA(c3);
        var f3 = e3.redAdd(d3);
        if (this.zOne) {
          nx = b3.redSub(c3).redSub(d3).redMul(f3.redSub(this.curve.two));
          ny = f3.redMul(e3.redSub(d3));
          nz = f3.redSqr().redSub(f3).redSub(f3);
        } else {
          h3 = this.z.redSqr();
          j3 = f3.redSub(h3).redISub(h3);
          nx = b3.redSub(c3).redISub(d3).redMul(j3);
          ny = f3.redMul(e3.redSub(d3));
          nz = f3.redMul(j3);
        }
      } else {
        e3 = c3.redAdd(d3);
        h3 = this.curve._mulC(this.z).redSqr();
        j3 = e3.redSub(h3).redSub(h3);
        nx = this.curve._mulC(b3.redISub(e3)).redMul(j3);
        ny = this.curve._mulC(e3).redMul(c3.redISub(d3));
        nz = e3.redMul(j3);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.dbl = function dbl() {
      if (this.isInfinity()) return this;
      if (this.curve.extended) return this._extDbl();
      else return this._projDbl();
    };
    Point.prototype._extAdd = function _extAdd(p3) {
      var a3 = this.y.redSub(this.x).redMul(p3.y.redSub(p3.x));
      var b3 = this.y.redAdd(this.x).redMul(p3.y.redAdd(p3.x));
      var c3 = this.t.redMul(this.curve.dd).redMul(p3.t);
      var d3 = this.z.redMul(p3.z.redAdd(p3.z));
      var e3 = b3.redSub(a3);
      var f3 = d3.redSub(c3);
      var g3 = d3.redAdd(c3);
      var h3 = b3.redAdd(a3);
      var nx = e3.redMul(f3);
      var ny = g3.redMul(h3);
      var nt2 = e3.redMul(h3);
      var nz = f3.redMul(g3);
      return this.curve.point(nx, ny, nz, nt2);
    };
    Point.prototype._projAdd = function _projAdd(p3) {
      var a3 = this.z.redMul(p3.z);
      var b3 = a3.redSqr();
      var c3 = this.x.redMul(p3.x);
      var d3 = this.y.redMul(p3.y);
      var e3 = this.curve.d.redMul(c3).redMul(d3);
      var f3 = b3.redSub(e3);
      var g3 = b3.redAdd(e3);
      var tmp = this.x.redAdd(this.y).redMul(p3.x.redAdd(p3.y)).redISub(c3).redISub(d3);
      var nx = a3.redMul(f3).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a3.redMul(g3).redMul(d3.redSub(this.curve._mulA(c3)));
        nz = f3.redMul(g3);
      } else {
        ny = a3.redMul(g3).redMul(d3.redSub(c3));
        nz = this.curve._mulC(f3).redMul(g3);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.add = function add(p3) {
      if (this.isInfinity()) return p3;
      if (p3.isInfinity()) return this;
      if (this.curve.extended) return this._extAdd(p3);
      else return this._projAdd(p3);
    };
    Point.prototype.mul = function mul(k3) {
      if (this._hasDoubles(k3)) return this.curve._fixedNafMul(this, k3);
      else return this.curve._wnafMul(this, k3);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p3, k22) {
      return this.curve._wnafMulAdd(1, [
        this,
        p3
      ], [
        k1,
        k22
      ], 2, false);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p3, k22) {
      return this.curve._wnafMulAdd(1, [
        this,
        p3
      ], [
        k1,
        k22
      ], 2, true);
    };
    Point.prototype.normalize = function normalize2() {
      if (this.zOne) return this;
      var zi2 = this.z.redInvm();
      this.x = this.x.redMul(zi2);
      this.y = this.y.redMul(zi2);
      if (this.t) this.t = this.t.redMul(zi2);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };
    Point.prototype.eq = function eq(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };
    Point.prototype.eqXToP = function eqXToP(x3) {
      var rx = x3.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0) return true;
      var xc = x3.clone();
      var t3 = this.curve.redN.redMul(this.z);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t3);
        if (this.x.cmp(rx) === 0) return true;
      }
    };
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
    return edwards;
  }
  var hasRequiredCurve;
  function requireCurve() {
    if (hasRequiredCurve) return curve;
    hasRequiredCurve = 1;
    (function(exports2) {
      var curve2 = exports2;
      curve2.base = requireBase$1();
      curve2.short = requireShort();
      curve2.mont = requireMont();
      curve2.edwards = requireEdwards();
    })(curve);
    return curve;
  }
  var curves = {};
  var hash = {};
  var utils = {};
  var hasRequiredUtils;
  function requireUtils() {
    if (hasRequiredUtils) return utils;
    hasRequiredUtils = 1;
    var assert = requireMinimalisticAssert();
    var inherits = requireInherits_browser();
    utils.inherits = inherits;
    function isSurrogatePair(msg, i3) {
      if ((msg.charCodeAt(i3) & 64512) !== 55296) {
        return false;
      }
      if (i3 < 0 || i3 + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i3 + 1) & 64512) === 56320;
    }
    function toArray(msg, enc) {
      if (Array.isArray(msg)) return msg.slice();
      if (!msg) return [];
      var res = [];
      if (typeof msg === "string") {
        if (!enc) {
          var p3 = 0;
          for (var i3 = 0; i3 < msg.length; i3++) {
            var c3 = msg.charCodeAt(i3);
            if (c3 < 128) {
              res[p3++] = c3;
            } else if (c3 < 2048) {
              res[p3++] = c3 >> 6 | 192;
              res[p3++] = c3 & 63 | 128;
            } else if (isSurrogatePair(msg, i3)) {
              c3 = 65536 + ((c3 & 1023) << 10) + (msg.charCodeAt(++i3) & 1023);
              res[p3++] = c3 >> 18 | 240;
              res[p3++] = c3 >> 12 & 63 | 128;
              res[p3++] = c3 >> 6 & 63 | 128;
              res[p3++] = c3 & 63 | 128;
            } else {
              res[p3++] = c3 >> 12 | 224;
              res[p3++] = c3 >> 6 & 63 | 128;
              res[p3++] = c3 & 63 | 128;
            }
          }
        } else if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0) msg = "0" + msg;
          for (i3 = 0; i3 < msg.length; i3 += 2) res.push(parseInt(msg[i3] + msg[i3 + 1], 16));
        }
      } else {
        for (i3 = 0; i3 < msg.length; i3++) res[i3] = msg[i3] | 0;
      }
      return res;
    }
    utils.toArray = toArray;
    function toHex(msg) {
      var res = "";
      for (var i3 = 0; i3 < msg.length; i3++) res += zero2(msg[i3].toString(16));
      return res;
    }
    utils.toHex = toHex;
    function htonl(w3) {
      var res = w3 >>> 24 | w3 >>> 8 & 65280 | w3 << 8 & 16711680 | (w3 & 255) << 24;
      return res >>> 0;
    }
    utils.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i3 = 0; i3 < msg.length; i3++) {
        var w3 = msg[i3];
        if (endian === "little") w3 = htonl(w3);
        res += zero8(w3.toString(16));
      }
      return res;
    }
    utils.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1) return "0" + word;
      else return word;
    }
    utils.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7) return "0" + word;
      else if (word.length === 6) return "00" + word;
      else if (word.length === 5) return "000" + word;
      else if (word.length === 4) return "0000" + word;
      else if (word.length === 3) return "00000" + word;
      else if (word.length === 2) return "000000" + word;
      else if (word.length === 1) return "0000000" + word;
      else return word;
    }
    utils.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i3 = 0, k3 = start; i3 < res.length; i3++, k3 += 4) {
        var w3;
        if (endian === "big") w3 = msg[k3] << 24 | msg[k3 + 1] << 16 | msg[k3 + 2] << 8 | msg[k3 + 3];
        else w3 = msg[k3 + 3] << 24 | msg[k3 + 2] << 16 | msg[k3 + 1] << 8 | msg[k3];
        res[i3] = w3 >>> 0;
      }
      return res;
    }
    utils.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i3 = 0, k3 = 0; i3 < msg.length; i3++, k3 += 4) {
        var m3 = msg[i3];
        if (endian === "big") {
          res[k3] = m3 >>> 24;
          res[k3 + 1] = m3 >>> 16 & 255;
          res[k3 + 2] = m3 >>> 8 & 255;
          res[k3 + 3] = m3 & 255;
        } else {
          res[k3 + 3] = m3 >>> 24;
          res[k3 + 2] = m3 >>> 16 & 255;
          res[k3 + 1] = m3 >>> 8 & 255;
          res[k3] = m3 & 255;
        }
      }
      return res;
    }
    utils.split32 = split32;
    function rotr32(w3, b3) {
      return w3 >>> b3 | w3 << 32 - b3;
    }
    utils.rotr32 = rotr32;
    function rotl32(w3, b3) {
      return w3 << b3 | w3 >>> 32 - b3;
    }
    utils.rotl32 = rotl32;
    function sum32(a3, b3) {
      return a3 + b3 >>> 0;
    }
    utils.sum32 = sum32;
    function sum32_3(a3, b3, c3) {
      return a3 + b3 + c3 >>> 0;
    }
    utils.sum32_3 = sum32_3;
    function sum32_4(a3, b3, c3, d3) {
      return a3 + b3 + c3 + d3 >>> 0;
    }
    utils.sum32_4 = sum32_4;
    function sum32_5(a3, b3, c3, d3, e3) {
      return a3 + b3 + c3 + d3 + e3 >>> 0;
    }
    utils.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo2 = al + bl >>> 0;
      var hi2 = (lo2 < al ? 1 : 0) + ah + bh;
      buf[pos] = hi2 >>> 0;
      buf[pos + 1] = lo2;
    }
    utils.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo2 = al + bl >>> 0;
      var hi2 = (lo2 < al ? 1 : 0) + ah + bh;
      return hi2 >>> 0;
    }
    utils.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo2 = al + bl;
      return lo2 >>> 0;
    }
    utils.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh2, dl) {
      var carry = 0;
      var lo2 = al;
      lo2 = lo2 + bl >>> 0;
      carry += lo2 < al ? 1 : 0;
      lo2 = lo2 + cl >>> 0;
      carry += lo2 < cl ? 1 : 0;
      lo2 = lo2 + dl >>> 0;
      carry += lo2 < dl ? 1 : 0;
      var hi2 = ah + bh + ch + dh2 + carry;
      return hi2 >>> 0;
    }
    utils.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh2, dl) {
      var lo2 = al + bl + cl + dl;
      return lo2 >>> 0;
    }
    utils.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh2, dl, eh, el) {
      var carry = 0;
      var lo2 = al;
      lo2 = lo2 + bl >>> 0;
      carry += lo2 < al ? 1 : 0;
      lo2 = lo2 + cl >>> 0;
      carry += lo2 < cl ? 1 : 0;
      lo2 = lo2 + dl >>> 0;
      carry += lo2 < dl ? 1 : 0;
      lo2 = lo2 + el >>> 0;
      carry += lo2 < el ? 1 : 0;
      var hi2 = ah + bh + ch + dh2 + eh + carry;
      return hi2 >>> 0;
    }
    utils.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh2, dl, eh, el) {
      var lo2 = al + bl + cl + dl + el;
      return lo2 >>> 0;
    }
    utils.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r3 = al << 32 - num | ah >>> num;
      return r3 >>> 0;
    }
    utils.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r3 = ah << 32 - num | al >>> num;
      return r3 >>> 0;
    }
    utils.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    utils.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r3 = ah << 32 - num | al >>> num;
      return r3 >>> 0;
    }
    utils.shr64_lo = shr64_lo;
    return utils;
  }
  var common$1 = {};
  var hasRequiredCommon$1;
  function requireCommon$1() {
    if (hasRequiredCommon$1) return common$1;
    hasRequiredCommon$1 = 1;
    var utils2 = requireUtils();
    var assert = requireMinimalisticAssert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    common$1.BlockHash = BlockHash;
    BlockHash.prototype.update = function update(msg, enc) {
      msg = utils2.toArray(msg, enc);
      if (!this.pending) this.pending = msg;
      else this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r3 = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r3, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils2.join32(msg, 0, msg.length - r3, this.endian);
        for (var i3 = 0; i3 < msg.length; i3 += this._delta32) this._update(msg, i3, i3 + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k3 = bytes - (len + this.padLength) % bytes;
      var res = new Array(k3 + this.padLength);
      res[0] = 128;
      for (var i3 = 1; i3 < k3; i3++) res[i3] = 0;
      len <<= 3;
      if (this.endian === "big") {
        for (var t3 = 8; t3 < this.padLength; t3++) res[i3++] = 0;
        res[i3++] = 0;
        res[i3++] = 0;
        res[i3++] = 0;
        res[i3++] = 0;
        res[i3++] = len >>> 24 & 255;
        res[i3++] = len >>> 16 & 255;
        res[i3++] = len >>> 8 & 255;
        res[i3++] = len & 255;
      } else {
        res[i3++] = len & 255;
        res[i3++] = len >>> 8 & 255;
        res[i3++] = len >>> 16 & 255;
        res[i3++] = len >>> 24 & 255;
        res[i3++] = 0;
        res[i3++] = 0;
        res[i3++] = 0;
        res[i3++] = 0;
        for (t3 = 8; t3 < this.padLength; t3++) res[i3++] = 0;
      }
      return res;
    };
    return common$1;
  }
  var sha = {};
  var common = {};
  var hasRequiredCommon;
  function requireCommon() {
    if (hasRequiredCommon) return common;
    hasRequiredCommon = 1;
    var utils2 = requireUtils();
    var rotr32 = utils2.rotr32;
    function ft_1(s3, x3, y3, z3) {
      if (s3 === 0) return ch32(x3, y3, z3);
      if (s3 === 1 || s3 === 3) return p32(x3, y3, z3);
      if (s3 === 2) return maj32(x3, y3, z3);
    }
    common.ft_1 = ft_1;
    function ch32(x3, y3, z3) {
      return x3 & y3 ^ ~x3 & z3;
    }
    common.ch32 = ch32;
    function maj32(x3, y3, z3) {
      return x3 & y3 ^ x3 & z3 ^ y3 & z3;
    }
    common.maj32 = maj32;
    function p32(x3, y3, z3) {
      return x3 ^ y3 ^ z3;
    }
    common.p32 = p32;
    function s0_256(x3) {
      return rotr32(x3, 2) ^ rotr32(x3, 13) ^ rotr32(x3, 22);
    }
    common.s0_256 = s0_256;
    function s1_256(x3) {
      return rotr32(x3, 6) ^ rotr32(x3, 11) ^ rotr32(x3, 25);
    }
    common.s1_256 = s1_256;
    function g0_256(x3) {
      return rotr32(x3, 7) ^ rotr32(x3, 18) ^ x3 >>> 3;
    }
    common.g0_256 = g0_256;
    function g1_256(x3) {
      return rotr32(x3, 17) ^ rotr32(x3, 19) ^ x3 >>> 10;
    }
    common.g1_256 = g1_256;
    return common;
  }
  var _1;
  var hasRequired_1;
  function require_1() {
    if (hasRequired_1) return _1;
    hasRequired_1 = 1;
    var utils2 = requireUtils();
    var common2 = requireCommon$1();
    var shaCommon = requireCommon();
    var rotl32 = utils2.rotl32;
    var sum32 = utils2.sum32;
    var sum32_5 = utils2.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common2.BlockHash;
    var sha1_K = [
      1518500249,
      1859775393,
      2400959708,
      3395469782
    ];
    function SHA1() {
      if (!(this instanceof SHA1)) return new SHA1();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.W = new Array(80);
    }
    utils2.inherits(SHA1, BlockHash);
    _1 = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W3 = this.W;
      for (var i3 = 0; i3 < 16; i3++) W3[i3] = msg[start + i3];
      for (; i3 < W3.length; i3++) W3[i3] = rotl32(W3[i3 - 3] ^ W3[i3 - 8] ^ W3[i3 - 14] ^ W3[i3 - 16], 1);
      var a3 = this.h[0];
      var b3 = this.h[1];
      var c3 = this.h[2];
      var d3 = this.h[3];
      var e3 = this.h[4];
      for (i3 = 0; i3 < W3.length; i3++) {
        var s3 = ~~(i3 / 20);
        var t3 = sum32_5(rotl32(a3, 5), ft_1(s3, b3, c3, d3), e3, W3[i3], sha1_K[s3]);
        e3 = d3;
        d3 = c3;
        c3 = rotl32(b3, 30);
        b3 = a3;
        a3 = t3;
      }
      this.h[0] = sum32(this.h[0], a3);
      this.h[1] = sum32(this.h[1], b3);
      this.h[2] = sum32(this.h[2], c3);
      this.h[3] = sum32(this.h[3], d3);
      this.h[4] = sum32(this.h[4], e3);
    };
    SHA1.prototype._digest = function digest(enc) {
      if (enc === "hex") return utils2.toHex32(this.h, "big");
      else return utils2.split32(this.h, "big");
    };
    return _1;
  }
  var _256;
  var hasRequired_256;
  function require_256() {
    if (hasRequired_256) return _256;
    hasRequired_256 = 1;
    var utils2 = requireUtils();
    var common2 = requireCommon$1();
    var shaCommon = requireCommon();
    var assert = requireMinimalisticAssert();
    var sum32 = utils2.sum32;
    var sum32_4 = utils2.sum32_4;
    var sum32_5 = utils2.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common2.BlockHash;
    var sha256_K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function SHA256() {
      if (!(this instanceof SHA256)) return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils2.inherits(SHA256, BlockHash);
    _256 = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W3 = this.W;
      for (var i3 = 0; i3 < 16; i3++) W3[i3] = msg[start + i3];
      for (; i3 < W3.length; i3++) W3[i3] = sum32_4(g1_256(W3[i3 - 2]), W3[i3 - 7], g0_256(W3[i3 - 15]), W3[i3 - 16]);
      var a3 = this.h[0];
      var b3 = this.h[1];
      var c3 = this.h[2];
      var d3 = this.h[3];
      var e3 = this.h[4];
      var f3 = this.h[5];
      var g3 = this.h[6];
      var h3 = this.h[7];
      assert(this.k.length === W3.length);
      for (i3 = 0; i3 < W3.length; i3++) {
        var T1 = sum32_5(h3, s1_256(e3), ch32(e3, f3, g3), this.k[i3], W3[i3]);
        var T22 = sum32(s0_256(a3), maj32(a3, b3, c3));
        h3 = g3;
        g3 = f3;
        f3 = e3;
        e3 = sum32(d3, T1);
        d3 = c3;
        c3 = b3;
        b3 = a3;
        a3 = sum32(T1, T22);
      }
      this.h[0] = sum32(this.h[0], a3);
      this.h[1] = sum32(this.h[1], b3);
      this.h[2] = sum32(this.h[2], c3);
      this.h[3] = sum32(this.h[3], d3);
      this.h[4] = sum32(this.h[4], e3);
      this.h[5] = sum32(this.h[5], f3);
      this.h[6] = sum32(this.h[6], g3);
      this.h[7] = sum32(this.h[7], h3);
    };
    SHA256.prototype._digest = function digest(enc) {
      if (enc === "hex") return utils2.toHex32(this.h, "big");
      else return utils2.split32(this.h, "big");
    };
    return _256;
  }
  var _224;
  var hasRequired_224;
  function require_224() {
    if (hasRequired_224) return _224;
    hasRequired_224 = 1;
    var utils2 = requireUtils();
    var SHA256 = require_256();
    function SHA224() {
      if (!(this instanceof SHA224)) return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
      ];
    }
    utils2.inherits(SHA224, SHA256);
    _224 = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      if (enc === "hex") return utils2.toHex32(this.h.slice(0, 7), "big");
      else return utils2.split32(this.h.slice(0, 7), "big");
    };
    return _224;
  }
  var _512;
  var hasRequired_512;
  function require_512() {
    if (hasRequired_512) return _512;
    hasRequired_512 = 1;
    var utils2 = requireUtils();
    var common2 = requireCommon$1();
    var assert = requireMinimalisticAssert();
    var rotr64_hi = utils2.rotr64_hi;
    var rotr64_lo = utils2.rotr64_lo;
    var shr64_hi = utils2.shr64_hi;
    var shr64_lo = utils2.shr64_lo;
    var sum64 = utils2.sum64;
    var sum64_hi = utils2.sum64_hi;
    var sum64_lo = utils2.sum64_lo;
    var sum64_4_hi = utils2.sum64_4_hi;
    var sum64_4_lo = utils2.sum64_4_lo;
    var sum64_5_hi = utils2.sum64_5_hi;
    var sum64_5_lo = utils2.sum64_5_lo;
    var BlockHash = common2.BlockHash;
    var sha512_K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function SHA512() {
      if (!(this instanceof SHA512)) return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils2.inherits(SHA512, BlockHash);
    _512 = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W3 = this.W;
      for (var i3 = 0; i3 < 32; i3++) W3[i3] = msg[start + i3];
      for (; i3 < W3.length; i3 += 2) {
        var c0_hi = g1_512_hi(W3[i3 - 4], W3[i3 - 3]);
        var c0_lo = g1_512_lo(W3[i3 - 4], W3[i3 - 3]);
        var c1_hi = W3[i3 - 14];
        var c1_lo = W3[i3 - 13];
        var c2_hi = g0_512_hi(W3[i3 - 30], W3[i3 - 29]);
        var c2_lo = g0_512_lo(W3[i3 - 30], W3[i3 - 29]);
        var c3_hi = W3[i3 - 32];
        var c3_lo = W3[i3 - 31];
        W3[i3] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W3[i3 + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W3 = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh2 = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W3.length);
      for (var i3 = 0; i3 < W3.length; i3 += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i3];
        var c3_lo = this.k[i3 + 1];
        var c4_hi = W3[i3];
        var c4_lo = W3[i3 + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh2, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh2 = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh2, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      if (enc === "hex") return utils2.toHex32(this.h, "big");
      else return utils2.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r3 = xh & yh ^ ~xh & zh;
      if (r3 < 0) r3 += 4294967296;
      return r3;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r3 = xl & yl ^ ~xl & zl;
      if (r3 < 0) r3 += 4294967296;
      return r3;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r3 = xh & yh ^ xh & zh ^ yh & zh;
      if (r3 < 0) r3 += 4294967296;
      return r3;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r3 = xl & yl ^ xl & zl ^ yl & zl;
      if (r3 < 0) r3 += 4294967296;
      return r3;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r3 = c0_hi ^ c1_hi ^ c2_hi;
      if (r3 < 0) r3 += 4294967296;
      return r3;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r3 = c0_lo ^ c1_lo ^ c2_lo;
      if (r3 < 0) r3 += 4294967296;
      return r3;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r3 = c0_hi ^ c1_hi ^ c2_hi;
      if (r3 < 0) r3 += 4294967296;
      return r3;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r3 = c0_lo ^ c1_lo ^ c2_lo;
      if (r3 < 0) r3 += 4294967296;
      return r3;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r3 = c0_hi ^ c1_hi ^ c2_hi;
      if (r3 < 0) r3 += 4294967296;
      return r3;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r3 = c0_lo ^ c1_lo ^ c2_lo;
      if (r3 < 0) r3 += 4294967296;
      return r3;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r3 = c0_hi ^ c1_hi ^ c2_hi;
      if (r3 < 0) r3 += 4294967296;
      return r3;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r3 = c0_lo ^ c1_lo ^ c2_lo;
      if (r3 < 0) r3 += 4294967296;
      return r3;
    }
    return _512;
  }
  var _384;
  var hasRequired_384;
  function require_384() {
    if (hasRequired_384) return _384;
    hasRequired_384 = 1;
    var utils2 = requireUtils();
    var SHA512 = require_512();
    function SHA384() {
      if (!(this instanceof SHA384)) return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
      ];
    }
    utils2.inherits(SHA384, SHA512);
    _384 = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      if (enc === "hex") return utils2.toHex32(this.h.slice(0, 12), "big");
      else return utils2.split32(this.h.slice(0, 12), "big");
    };
    return _384;
  }
  var hasRequiredSha;
  function requireSha() {
    if (hasRequiredSha) return sha;
    hasRequiredSha = 1;
    sha.sha1 = require_1();
    sha.sha224 = require_224();
    sha.sha256 = require_256();
    sha.sha384 = require_384();
    sha.sha512 = require_512();
    return sha;
  }
  var ripemd = {};
  var hasRequiredRipemd;
  function requireRipemd() {
    if (hasRequiredRipemd) return ripemd;
    hasRequiredRipemd = 1;
    var utils2 = requireUtils();
    var common2 = requireCommon$1();
    var rotl32 = utils2.rotl32;
    var sum32 = utils2.sum32;
    var sum32_3 = utils2.sum32_3;
    var sum32_4 = utils2.sum32_4;
    var BlockHash = common2.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160)) return new RIPEMD160();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.endian = "little";
    }
    utils2.inherits(RIPEMD160, BlockHash);
    ripemd.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update(msg, start) {
      var A3 = this.h[0];
      var B3 = this.h[1];
      var C3 = this.h[2];
      var D3 = this.h[3];
      var E3 = this.h[4];
      var Ah = A3;
      var Bh = B3;
      var Ch = C3;
      var Dh = D3;
      var Eh = E3;
      for (var j3 = 0; j3 < 80; j3++) {
        var T3 = sum32(rotl32(sum32_4(A3, f3(j3, B3, C3, D3), msg[r3[j3] + start], K3(j3)), s3[j3]), E3);
        A3 = E3;
        E3 = D3;
        D3 = rotl32(C3, 10);
        C3 = B3;
        B3 = T3;
        T3 = sum32(rotl32(sum32_4(Ah, f3(79 - j3, Bh, Ch, Dh), msg[rh[j3] + start], Kh(j3)), sh[j3]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T3;
      }
      T3 = sum32_3(this.h[1], C3, Dh);
      this.h[1] = sum32_3(this.h[2], D3, Eh);
      this.h[2] = sum32_3(this.h[3], E3, Ah);
      this.h[3] = sum32_3(this.h[4], A3, Bh);
      this.h[4] = sum32_3(this.h[0], B3, Ch);
      this.h[0] = T3;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === "hex") return utils2.toHex32(this.h, "little");
      else return utils2.split32(this.h, "little");
    };
    function f3(j3, x3, y3, z3) {
      if (j3 <= 15) return x3 ^ y3 ^ z3;
      else if (j3 <= 31) return x3 & y3 | ~x3 & z3;
      else if (j3 <= 47) return (x3 | ~y3) ^ z3;
      else if (j3 <= 63) return x3 & z3 | y3 & ~z3;
      else return x3 ^ (y3 | ~z3);
    }
    function K3(j3) {
      if (j3 <= 15) return 0;
      else if (j3 <= 31) return 1518500249;
      else if (j3 <= 47) return 1859775393;
      else if (j3 <= 63) return 2400959708;
      else return 2840853838;
    }
    function Kh(j3) {
      if (j3 <= 15) return 1352829926;
      else if (j3 <= 31) return 1548603684;
      else if (j3 <= 47) return 1836072691;
      else if (j3 <= 63) return 2053994217;
      else return 0;
    }
    var r3 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var s3 = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
    return ripemd;
  }
  var hmac;
  var hasRequiredHmac;
  function requireHmac() {
    if (hasRequiredHmac) return hmac;
    hasRequiredHmac = 1;
    var utils2 = requireUtils();
    var assert = requireMinimalisticAssert();
    function Hmac(hash2, key2, enc) {
      if (!(this instanceof Hmac)) return new Hmac(hash2, key2, enc);
      this.Hash = hash2;
      this.blockSize = hash2.blockSize / 8;
      this.outSize = hash2.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils2.toArray(key2, enc));
    }
    hmac = Hmac;
    Hmac.prototype._init = function init(key2) {
      if (key2.length > this.blockSize) key2 = new this.Hash().update(key2).digest();
      assert(key2.length <= this.blockSize);
      for (var i3 = key2.length; i3 < this.blockSize; i3++) key2.push(0);
      for (i3 = 0; i3 < key2.length; i3++) key2[i3] ^= 54;
      this.inner = new this.Hash().update(key2);
      for (i3 = 0; i3 < key2.length; i3++) key2[i3] ^= 106;
      this.outer = new this.Hash().update(key2);
    };
    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
    return hmac;
  }
  var hasRequiredHash;
  function requireHash() {
    if (hasRequiredHash) return hash;
    hasRequiredHash = 1;
    (function(exports2) {
      var hash2 = exports2;
      hash2.utils = requireUtils();
      hash2.common = requireCommon$1();
      hash2.sha = requireSha();
      hash2.ripemd = requireRipemd();
      hash2.hmac = requireHmac();
      hash2.sha1 = hash2.sha.sha1;
      hash2.sha256 = hash2.sha.sha256;
      hash2.sha224 = hash2.sha.sha224;
      hash2.sha384 = hash2.sha.sha384;
      hash2.sha512 = hash2.sha.sha512;
      hash2.ripemd160 = hash2.ripemd.ripemd160;
    })(hash);
    return hash;
  }
  var secp256k1;
  var hasRequiredSecp256k1;
  function requireSecp256k1() {
    if (hasRequiredSecp256k1) return secp256k1;
    hasRequiredSecp256k1 = 1;
    secp256k1 = {
      doubles: {
        step: 4,
        points: [
          [
            "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
            "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
          ],
          [
            "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
            "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
          ],
          [
            "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
            "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
          ],
          [
            "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
            "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
          ],
          [
            "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
            "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
          ],
          [
            "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
            "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
          ],
          [
            "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
            "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
          ],
          [
            "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
            "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
          ],
          [
            "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
            "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
          ],
          [
            "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
            "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
          ],
          [
            "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
            "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
          ],
          [
            "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
            "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
          ],
          [
            "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
            "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
          ],
          [
            "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
            "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
          ],
          [
            "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
            "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
          ],
          [
            "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
            "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
          ],
          [
            "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
            "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
          ],
          [
            "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
            "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
          ],
          [
            "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
            "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
          ],
          [
            "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
            "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
          ],
          [
            "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
            "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
          ],
          [
            "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
            "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
          ],
          [
            "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
            "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
          ],
          [
            "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
            "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
          ],
          [
            "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
            "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
          ],
          [
            "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
            "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
          ],
          [
            "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
            "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
          ],
          [
            "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
            "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
          ],
          [
            "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
            "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
          ],
          [
            "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
            "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
          ],
          [
            "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
            "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
          ],
          [
            "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
            "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
          ],
          [
            "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
            "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
          ],
          [
            "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
            "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
          ],
          [
            "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
            "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
          ],
          [
            "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
            "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
          ],
          [
            "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
            "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
          ],
          [
            "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
            "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
          ],
          [
            "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
            "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
          ],
          [
            "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
            "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
          ],
          [
            "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
            "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
          ],
          [
            "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
            "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
          ],
          [
            "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
            "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
          ],
          [
            "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
            "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
          ],
          [
            "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
            "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
          ],
          [
            "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
            "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
          ],
          [
            "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
            "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
          ],
          [
            "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
            "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
          ],
          [
            "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
            "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
          ],
          [
            "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
            "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
          ],
          [
            "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
            "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
          ],
          [
            "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
            "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
          ],
          [
            "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
            "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
          ],
          [
            "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
            "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
          ],
          [
            "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
            "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
          ],
          [
            "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
            "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
          ],
          [
            "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
            "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
          ],
          [
            "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
            "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
          ],
          [
            "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
            "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
          ],
          [
            "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
            "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
          ],
          [
            "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
            "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
          ],
          [
            "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
            "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
          ],
          [
            "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
            "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
          ],
          [
            "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
            "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
          ],
          [
            "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
            "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
          ],
          [
            "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
          ],
          [
            "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
          ],
          [
            "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
          ],
          [
            "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
          ],
          [
            "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
          ],
          [
            "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
          ],
          [
            "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
            "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
          ],
          [
            "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
            "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
          ],
          [
            "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
            "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
          ],
          [
            "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
            "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
          ],
          [
            "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
            "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
          ],
          [
            "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
            "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
          ],
          [
            "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
            "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
          ],
          [
            "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
            "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
          ],
          [
            "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
            "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
          ],
          [
            "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
            "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
          ],
          [
            "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
            "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
          ],
          [
            "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
            "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
          ],
          [
            "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
            "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
          ],
          [
            "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
            "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
          ],
          [
            "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
            "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
          ],
          [
            "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
            "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
          ],
          [
            "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
            "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
          ],
          [
            "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
            "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
          ],
          [
            "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
            "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
          ],
          [
            "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
            "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
          ],
          [
            "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
            "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
          ],
          [
            "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
            "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
          ],
          [
            "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
            "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
          ],
          [
            "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
            "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
          ],
          [
            "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
            "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
          ],
          [
            "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
            "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
          ],
          [
            "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
            "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
          ],
          [
            "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
            "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
          ],
          [
            "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
            "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
          ],
          [
            "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
            "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
          ],
          [
            "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
            "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
          ],
          [
            "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
            "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
          ],
          [
            "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
            "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
          ],
          [
            "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
            "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
          ],
          [
            "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
            "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
          ],
          [
            "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
            "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
          ],
          [
            "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
            "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
          ],
          [
            "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
            "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
          ],
          [
            "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
            "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
          ],
          [
            "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
            "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
          ],
          [
            "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
            "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
          ],
          [
            "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
            "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
          ],
          [
            "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
            "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
          ],
          [
            "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
            "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
          ],
          [
            "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
            "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
          ],
          [
            "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
            "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
          ],
          [
            "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
            "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
          ],
          [
            "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
            "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
          ],
          [
            "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
            "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
          ],
          [
            "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
            "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
          ],
          [
            "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
            "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
          ],
          [
            "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
            "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
          ],
          [
            "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
            "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
          ],
          [
            "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
            "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
          ],
          [
            "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
            "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
          ],
          [
            "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
            "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
          ],
          [
            "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
            "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
          ],
          [
            "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
            "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
          ],
          [
            "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
            "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
          ],
          [
            "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
            "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
          ],
          [
            "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
            "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
          ],
          [
            "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
            "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
          ],
          [
            "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
            "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
          ],
          [
            "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
            "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
          ],
          [
            "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
            "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
          ],
          [
            "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
            "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
          ],
          [
            "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
            "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
          ],
          [
            "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
            "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
          ],
          [
            "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
            "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
          ],
          [
            "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
            "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
          ],
          [
            "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
            "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
          ],
          [
            "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
            "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
          ],
          [
            "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
            "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
          ],
          [
            "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
            "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
          ],
          [
            "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
            "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
          ],
          [
            "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
            "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
          ],
          [
            "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
            "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
          ],
          [
            "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
            "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
          ],
          [
            "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
            "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
          ],
          [
            "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
            "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
          ],
          [
            "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
            "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
          ],
          [
            "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
            "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
          ],
          [
            "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
            "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
          ],
          [
            "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
            "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
          ],
          [
            "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
            "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
          ],
          [
            "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
            "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
          ],
          [
            "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
            "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
          ],
          [
            "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
            "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
          ],
          [
            "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
            "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
          ],
          [
            "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
            "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
          ],
          [
            "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
            "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
          ],
          [
            "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
            "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
          ],
          [
            "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
            "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
          ],
          [
            "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
            "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
          ],
          [
            "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
            "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
          ],
          [
            "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
            "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
          ],
          [
            "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
            "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
          ],
          [
            "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
            "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
          ],
          [
            "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
            "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
          ],
          [
            "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
            "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
          ],
          [
            "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
            "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
          ],
          [
            "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
            "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
          ],
          [
            "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
            "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
          ],
          [
            "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
            "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
          ],
          [
            "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
            "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
          ],
          [
            "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
            "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
          ],
          [
            "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
            "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
          ],
          [
            "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
            "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
          ],
          [
            "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
            "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
          ],
          [
            "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
            "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
          ],
          [
            "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
            "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
          ],
          [
            "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
            "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
          ],
          [
            "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
            "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
          ],
          [
            "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
            "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
          ],
          [
            "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
            "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
          ],
          [
            "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
            "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
          ],
          [
            "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
            "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
          ],
          [
            "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
            "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
          ],
          [
            "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
            "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
          ],
          [
            "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
            "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
          ]
        ]
      }
    };
    return secp256k1;
  }
  var hasRequiredCurves;
  function requireCurves() {
    if (hasRequiredCurves) return curves;
    hasRequiredCurves = 1;
    (function(exports2) {
      var curves2 = exports2;
      var hash2 = requireHash();
      var curve2 = requireCurve();
      var utils2 = requireUtils$1();
      var assert = utils2.assert;
      function PresetCurve(options) {
        if (options.type === "short") this.curve = new curve2.short(options);
        else if (options.type === "edwards") this.curve = new curve2.edwards(options);
        else this.curve = new curve2.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;
        assert(this.g.validate(), "Invalid curve");
        assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
      }
      curves2.PresetCurve = PresetCurve;
      function defineCurve(name, options) {
        Object.defineProperty(curves2, name, {
          configurable: true,
          enumerable: true,
          get: function() {
            var curve3 = new PresetCurve(options);
            Object.defineProperty(curves2, name, {
              configurable: true,
              enumerable: true,
              value: curve3
            });
            return curve3;
          }
        });
      }
      defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: hash2.sha256,
        gRed: false,
        g: [
          "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
          "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
        ]
      });
      defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: hash2.sha256,
        gRed: false,
        g: [
          "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
          "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
        ]
      });
      defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: hash2.sha256,
        gRed: false,
        g: [
          "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
          "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
        ]
      });
      defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: hash2.sha384,
        gRed: false,
        g: [
          "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
          "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
        ]
      });
      defineCurve("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: hash2.sha512,
        gRed: false,
        g: [
          "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
          "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
        ]
      });
      defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash2.sha256,
        gRed: false,
        g: [
          "9"
        ]
      });
      defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash2.sha256,
        gRed: false,
        g: [
          "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
          "6666666666666666666666666666666666666666666666666666666666666658"
        ]
      });
      var pre;
      try {
        pre = requireSecp256k1();
      } catch (e3) {
        pre = void 0;
      }
      defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: hash2.sha256,
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
          {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
          },
          {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
          }
        ],
        gRed: false,
        g: [
          "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
          "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
          pre
        ]
      });
    })(curves);
    return curves;
  }
  var hmacDrbg;
  var hasRequiredHmacDrbg;
  function requireHmacDrbg() {
    if (hasRequiredHmacDrbg) return hmacDrbg;
    hasRequiredHmacDrbg = 1;
    var hash2 = requireHash();
    var utils2 = requireUtils$2();
    var assert = requireMinimalisticAssert();
    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils2.toArray(options.entropy, options.entropyEnc || "hex");
      var nonce = utils2.toArray(options.nonce, options.nonceEnc || "hex");
      var pers = utils2.toArray(options.pers, options.persEnc || "hex");
      assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
      this._init(entropy, nonce, pers);
    }
    hmacDrbg = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i3 = 0; i3 < this.V.length; i3++) {
        this.K[i3] = 0;
        this.V[i3] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac2() {
      return new hash2.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([
        0
      ]);
      if (seed) kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed) return;
      this.K = this._hmac().update(this.V).update([
        1
      ]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils2.toArray(entropy, entropyEnc);
      add = utils2.toArray(add, addEnc);
      assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate2(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
      }
      if (add) {
        add = utils2.toArray(add, addEnc || "hex");
        this._update(add);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils2.encode(res, enc);
    };
    return hmacDrbg;
  }
  var key$1;
  var hasRequiredKey$1;
  function requireKey$1() {
    if (hasRequiredKey$1) return key$1;
    hasRequiredKey$1 = 1;
    var BN = requireBn$1();
    var utils2 = requireUtils$1();
    var assert = utils2.assert;
    function KeyPair(ec2, options) {
      this.ec = ec2;
      this.priv = null;
      this.pub = null;
      if (options.priv) this._importPrivate(options.priv, options.privEnc);
      if (options.pub) this._importPublic(options.pub, options.pubEnc);
    }
    key$1 = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
      if (pub instanceof KeyPair) return pub;
      return new KeyPair(ec2, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
      if (priv instanceof KeyPair) return priv;
      return new KeyPair(ec2, {
        priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();
      if (pub.isInfinity()) return {
        result: false,
        reason: "Invalid public key"
      };
      if (!pub.validate()) return {
        result: false,
        reason: "Public key is not a point"
      };
      if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: "Public key * N != O"
      };
      return {
        result: true,
        reason: null
      };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub) this.pub = this.ec.g.mul(this.priv);
      if (!enc) return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex") return this.priv.toString(16, 2);
      else return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
      this.priv = new BN(key2, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
      if (key2.x || key2.y) {
        if (this.ec.curve.type === "mont") {
          assert(key2.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert(key2.x && key2.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key2.x, key2.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key2, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign2(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify(msg, signature2, options) {
      return this.ec.verify(msg, signature2, this, void 0, options);
    };
    KeyPair.prototype.inspect = function inspect() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
    return key$1;
  }
  var signature$1;
  var hasRequiredSignature$1;
  function requireSignature$1() {
    if (hasRequiredSignature$1) return signature$1;
    hasRequiredSignature$1 = 1;
    var BN = requireBn$1();
    var utils2 = requireUtils$1();
    var assert = utils2.assert;
    function Signature(options, enc) {
      if (options instanceof Signature) return options;
      if (this._importDER(options, enc)) return;
      assert(options.r && options.s, "Signature without r or s");
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === void 0) this.recoveryParam = null;
      else this.recoveryParam = options.recoveryParam;
    }
    signature$1 = Signature;
    function Position() {
      this.place = 0;
    }
    function getLength(buf, p3) {
      var initial = buf[p3.place++];
      if (!(initial & 128)) {
        return initial;
      }
      var octetLen = initial & 15;
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
      if (buf[p3.place] === 0) {
        return false;
      }
      var val = 0;
      for (var i3 = 0, off = p3.place; i3 < octetLen; i3++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
      if (val <= 127) {
        return false;
      }
      p3.place = off;
      return val;
    }
    function rmPadding(buf) {
      var i3 = 0;
      var len = buf.length - 1;
      while (!buf[i3] && !(buf[i3 + 1] & 128) && i3 < len) {
        i3++;
      }
      if (i3 === 0) {
        return buf;
      }
      return buf.slice(i3);
    }
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils2.toArray(data, enc);
      var p3 = new Position();
      if (data[p3.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p3);
      if (len === false) {
        return false;
      }
      if (len + p3.place !== data.length) {
        return false;
      }
      if (data[p3.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p3);
      if (rlen === false) {
        return false;
      }
      if ((data[p3.place] & 128) !== 0) {
        return false;
      }
      var r3 = data.slice(p3.place, rlen + p3.place);
      p3.place += rlen;
      if (data[p3.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p3);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p3.place) {
        return false;
      }
      if ((data[p3.place] & 128) !== 0) {
        return false;
      }
      var s3 = data.slice(p3.place, slen + p3.place);
      if (r3[0] === 0) {
        if (r3[1] & 128) {
          r3 = r3.slice(1);
        } else {
          return false;
        }
      }
      if (s3[0] === 0) {
        if (s3[1] & 128) {
          s3 = s3.slice(1);
        } else {
          return false;
        }
      }
      this.r = new BN(r3);
      this.s = new BN(s3);
      this.recoveryParam = null;
      return true;
    };
    function constructLength(arr, len) {
      if (len < 128) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 128);
      while (--octets) {
        arr.push(len >>> (octets << 3) & 255);
      }
      arr.push(len);
    }
    Signature.prototype.toDER = function toDER(enc) {
      var r3 = this.r.toArray();
      var s3 = this.s.toArray();
      if (r3[0] & 128) r3 = [
        0
      ].concat(r3);
      if (s3[0] & 128) s3 = [
        0
      ].concat(s3);
      r3 = rmPadding(r3);
      s3 = rmPadding(s3);
      while (!s3[0] && !(s3[1] & 128)) {
        s3 = s3.slice(1);
      }
      var arr = [
        2
      ];
      constructLength(arr, r3.length);
      arr = arr.concat(r3);
      arr.push(2);
      constructLength(arr, s3.length);
      var backHalf = arr.concat(s3);
      var res = [
        48
      ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils2.encode(res, enc);
    };
    return signature$1;
  }
  var ec;
  var hasRequiredEc;
  function requireEc() {
    if (hasRequiredEc) return ec;
    hasRequiredEc = 1;
    var BN = requireBn$1();
    var HmacDRBG = requireHmacDrbg();
    var utils2 = requireUtils$1();
    var curves2 = requireCurves();
    var rand = requireBrorand();
    var assert = utils2.assert;
    var KeyPair = requireKey$1();
    var Signature = requireSignature$1();
    function EC(options) {
      if (!(this instanceof EC)) return new EC(options);
      if (typeof options === "string") {
        assert(Object.prototype.hasOwnProperty.call(curves2, options), "Unknown curve " + options);
        options = curves2[options];
      }
      if (options instanceof curves2.PresetCurve) options = {
        curve: options
      };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    ec = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options) options = {};
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      for (; ; ) {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {
      var byteLength;
      if (BN.isBN(msg) || typeof msg === "number") {
        msg = new BN(msg, 16);
        byteLength = msg.byteLength();
      } else if (typeof msg === "object") {
        byteLength = msg.length;
        msg = new BN(msg, 16);
      } else {
        var str = msg.toString();
        byteLength = str.length + 1 >>> 1;
        msg = new BN(str, 16);
      }
      if (typeof bitLength !== "number") {
        bitLength = byteLength * 8;
      }
      var delta = bitLength - this.n.bitLength();
      if (delta > 0) msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
      else return msg;
    };
    EC.prototype.sign = function sign2(msg, key2, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options) options = {};
      if (typeof msg !== "string" && typeof msg !== "number" && !BN.isBN(msg)) {
        assert(typeof msg === "object" && msg && typeof msg.length === "number", "Expected message to be an array-like, a hex string, or a BN instance");
        assert(msg.length >>> 0 === msg.length);
        for (var i3 = 0; i3 < msg.length; i3++) assert((msg[i3] & 255) === msg[i3]);
      }
      key2 = this.keyFromPrivate(key2, enc);
      msg = this._truncateToN(msg, false, options.msgBitLength);
      assert(!msg.isNeg(), "Can not sign a negative message");
      var bytes = this.n.byteLength();
      var bkey = key2.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      assert(new BN(nonce).eq(msg), "Can not sign message");
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new BN(1));
      for (var iter = 0; ; iter++) {
        var k3 = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k3 = this._truncateToN(k3, true);
        if (k3.cmpn(1) <= 0 || k3.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k3);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r3 = kpX.umod(this.n);
        if (r3.cmpn(0) === 0) continue;
        var s3 = k3.invm(this.n).mul(r3.mul(key2.getPrivate()).iadd(msg));
        s3 = s3.umod(this.n);
        if (s3.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r3) !== 0 ? 2 : 0);
        if (options.canonical && s3.cmp(this.nh) > 0) {
          s3 = this.n.sub(s3);
          recoveryParam ^= 1;
        }
        return new Signature({
          r: r3,
          s: s3,
          recoveryParam
        });
      }
    };
    EC.prototype.verify = function verify(msg, signature2, key2, enc, options) {
      if (!options) options = {};
      msg = this._truncateToN(msg, false, options.msgBitLength);
      key2 = this.keyFromPublic(key2, enc);
      signature2 = new Signature(signature2, "hex");
      var r3 = signature2.r;
      var s3 = signature2.s;
      if (r3.cmpn(1) < 0 || r3.cmp(this.n) >= 0) return false;
      if (s3.cmpn(1) < 0 || s3.cmp(this.n) >= 0) return false;
      var sinv = s3.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u22 = sinv.mul(r3).umod(this.n);
      var p3;
      if (!this.curve._maxwellTrick) {
        p3 = this.g.mulAdd(u1, key2.getPublic(), u22);
        if (p3.isInfinity()) return false;
        return p3.getX().umod(this.n).cmp(r3) === 0;
      }
      p3 = this.g.jmulAdd(u1, key2.getPublic(), u22);
      if (p3.isInfinity()) return false;
      return p3.eqXToP(r3);
    };
    EC.prototype.recoverPubKey = function(msg, signature2, j3, enc) {
      assert((3 & j3) === j3, "The recovery param is more than two bits");
      signature2 = new Signature(signature2, enc);
      var n3 = this.n;
      var e3 = new BN(msg);
      var r3 = signature2.r;
      var s3 = signature2.s;
      var isYOdd = j3 & 1;
      var isSecondKey = j3 >> 1;
      if (r3.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");
      if (isSecondKey) r3 = this.curve.pointFromX(r3.add(this.curve.n), isYOdd);
      else r3 = this.curve.pointFromX(r3, isYOdd);
      var rInv = signature2.r.invm(n3);
      var s1 = n3.sub(e3).mul(rInv).umod(n3);
      var s22 = s3.mul(rInv).umod(n3);
      return this.g.mulAdd(s1, r3, s22);
    };
    EC.prototype.getKeyRecoveryParam = function(e3, signature2, Q3, enc) {
      signature2 = new Signature(signature2, enc);
      if (signature2.recoveryParam !== null) return signature2.recoveryParam;
      for (var i3 = 0; i3 < 4; i3++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e3, signature2, i3);
        } catch (e4) {
          continue;
        }
        if (Qprime.eq(Q3)) return i3;
      }
      throw new Error("Unable to find valid recovery factor");
    };
    return ec;
  }
  var key;
  var hasRequiredKey;
  function requireKey() {
    if (hasRequiredKey) return key;
    hasRequiredKey = 1;
    var utils2 = requireUtils$1();
    var assert = utils2.assert;
    var parseBytes = utils2.parseBytes;
    var cachedProperty = utils2.cachedProperty;
    function KeyPair(eddsa2, params) {
      this.eddsa = eddsa2;
      this._secret = parseBytes(params.secret);
      if (eddsa2.isPoint(params.pub)) this._pub = params.pub;
      else this._pubBytes = parseBytes(params.pub);
    }
    KeyPair.fromPublic = function fromPublic(eddsa2, pub) {
      if (pub instanceof KeyPair) return pub;
      return new KeyPair(eddsa2, {
        pub
      });
    };
    KeyPair.fromSecret = function fromSecret(eddsa2, secret) {
      if (secret instanceof KeyPair) return secret;
      return new KeyPair(eddsa2, {
        secret
      });
    };
    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair, "pubBytes", function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair, "pub", function pub() {
      if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair, "privBytes", function privBytes() {
      var eddsa2 = this.eddsa;
      var hash2 = this.hash();
      var lastIx = eddsa2.encodingLength - 1;
      var a3 = hash2.slice(0, eddsa2.encodingLength);
      a3[0] &= 248;
      a3[lastIx] &= 127;
      a3[lastIx] |= 64;
      return a3;
    });
    cachedProperty(KeyPair, "priv", function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair, "hash", function hash2() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair.prototype.sign = function sign2(message) {
      assert(this._secret, "KeyPair can only verify");
      return this.eddsa.sign(message, this);
    };
    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, "KeyPair is public only");
      return utils2.encode(this.secret(), enc);
    };
    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils2.encode(this.pubBytes(), enc);
    };
    key = KeyPair;
    return key;
  }
  var signature;
  var hasRequiredSignature;
  function requireSignature() {
    if (hasRequiredSignature) return signature;
    hasRequiredSignature = 1;
    var BN = requireBn$1();
    var utils2 = requireUtils$1();
    var assert = utils2.assert;
    var cachedProperty = utils2.cachedProperty;
    var parseBytes = utils2.parseBytes;
    function Signature(eddsa2, sig) {
      this.eddsa = eddsa2;
      if (typeof sig !== "object") sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        assert(sig.length === eddsa2.encodingLength * 2, "Signature has invalid size");
        sig = {
          R: sig.slice(0, eddsa2.encodingLength),
          S: sig.slice(eddsa2.encodingLength)
        };
      }
      assert(sig.R && sig.S, "Signature without R or S");
      if (eddsa2.isPoint(sig.R)) this._R = sig.R;
      if (sig.S instanceof BN) this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature, "S", function S3() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature, "R", function R3() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature, "Rencoded", function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature, "Sencoded", function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature.prototype.toHex = function toHex() {
      return utils2.encode(this.toBytes(), "hex").toUpperCase();
    };
    signature = Signature;
    return signature;
  }
  var eddsa;
  var hasRequiredEddsa;
  function requireEddsa() {
    if (hasRequiredEddsa) return eddsa;
    hasRequiredEddsa = 1;
    var hash2 = requireHash();
    var curves2 = requireCurves();
    var utils2 = requireUtils$1();
    var assert = utils2.assert;
    var parseBytes = utils2.parseBytes;
    var KeyPair = requireKey();
    var Signature = requireSignature();
    function EDDSA(curve2) {
      assert(curve2 === "ed25519", "only tested with ed25519 so far");
      if (!(this instanceof EDDSA)) return new EDDSA(curve2);
      curve2 = curves2[curve2].curve;
      this.curve = curve2;
      this.g = curve2.g;
      this.g.precompute(curve2.n.bitLength() + 1);
      this.pointClass = curve2.point().constructor;
      this.encodingLength = Math.ceil(curve2.n.bitLength() / 8);
      this.hash = hash2.sha512;
    }
    eddsa = EDDSA;
    EDDSA.prototype.sign = function sign2(message, secret) {
      message = parseBytes(message);
      var key2 = this.keyFromSecret(secret);
      var r3 = this.hashInt(key2.messagePrefix(), message);
      var R3 = this.g.mul(r3);
      var Rencoded = this.encodePoint(R3);
      var s_ = this.hashInt(Rencoded, key2.pubBytes(), message).mul(key2.priv());
      var S3 = r3.add(s_).umod(this.curve.n);
      return this.makeSignature({
        R: R3,
        S: S3,
        Rencoded
      });
    };
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
        return false;
      }
      var key2 = this.keyFromPublic(pub);
      var h3 = this.hashInt(sig.Rencoded(), key2.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key2.pub().mul(h3));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash3 = this.hash();
      for (var i3 = 0; i3 < arguments.length; i3++) hash3.update(arguments[i3]);
      return utils2.intFromLE(hash3.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature) return sig;
      return new Signature(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray("le", this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils2.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
      var xIsOdd = (bytes[lastIx] & 128) !== 0;
      var y3 = utils2.intFromLE(normed);
      return this.curve.pointFromY(y3, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray("le", this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils2.intFromLE(bytes);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
    return eddsa;
  }
  var hasRequiredElliptic;
  function requireElliptic() {
    if (hasRequiredElliptic) return elliptic;
    hasRequiredElliptic = 1;
    (function(exports2) {
      var elliptic2 = exports2;
      elliptic2.version = require$$0.version;
      elliptic2.utils = requireUtils$1();
      elliptic2.rand = requireBrorand();
      elliptic2.curve = requireCurve();
      elliptic2.curves = requireCurves();
      elliptic2.ec = requireEc();
      elliptic2.eddsa = requireEddsa();
    })(elliptic);
    return elliptic;
  }
  var asn1$1 = {};
  var asn1 = {};
  var api = {};
  var vmBrowserify = {};
  var hasRequiredVmBrowserify;
  function requireVmBrowserify() {
    if (hasRequiredVmBrowserify) return vmBrowserify;
    hasRequiredVmBrowserify = 1;
    (function(exports) {
      var indexOf = function(xs2, item) {
        if (xs2.indexOf) return xs2.indexOf(item);
        else for (var i3 = 0; i3 < xs2.length; i3++) {
          if (xs2[i3] === item) return i3;
        }
        return -1;
      };
      var Object_keys = function(obj) {
        if (Object.keys) return Object.keys(obj);
        else {
          var res = [];
          for (var key2 in obj) res.push(key2);
          return res;
        }
      };
      var forEach = function(xs2, fn2) {
        if (xs2.forEach) return xs2.forEach(fn2);
        else for (var i3 = 0; i3 < xs2.length; i3++) {
          fn2(xs2[i3], i3, xs2);
        }
      };
      var defineProp = function() {
        try {
          Object.defineProperty({}, "_", {});
          return function(obj, name, value) {
            Object.defineProperty(obj, name, {
              writable: true,
              enumerable: false,
              configurable: true,
              value
            });
          };
        } catch (e3) {
          return function(obj, name, value) {
            obj[name] = value;
          };
        }
      }();
      var globals = [
        "Array",
        "Boolean",
        "Date",
        "Error",
        "EvalError",
        "Function",
        "Infinity",
        "JSON",
        "Math",
        "NaN",
        "Number",
        "Object",
        "RangeError",
        "ReferenceError",
        "RegExp",
        "String",
        "SyntaxError",
        "TypeError",
        "URIError",
        "decodeURI",
        "decodeURIComponent",
        "encodeURI",
        "encodeURIComponent",
        "escape",
        "eval",
        "isFinite",
        "isNaN",
        "parseFloat",
        "parseInt",
        "undefined",
        "unescape"
      ];
      function Context() {
      }
      Context.prototype = {};
      var Script = exports.Script = function NodeScript(code) {
        if (!(this instanceof Script)) return new Script(code);
        this.code = code;
      };
      Script.prototype.runInContext = function(context) {
        if (!(context instanceof Context)) {
          throw new TypeError("needs a 'context' argument.");
        }
        var iframe = document.createElement("iframe");
        if (!iframe.style) iframe.style = {};
        iframe.style.display = "none";
        document.body.appendChild(iframe);
        var win = iframe.contentWindow;
        var wEval = win.eval, wExecScript = win.execScript;
        if (!wEval && wExecScript) {
          wExecScript.call(win, "null");
          wEval = win.eval;
        }
        forEach(Object_keys(context), function(key2) {
          win[key2] = context[key2];
        });
        forEach(globals, function(key2) {
          if (context[key2]) {
            win[key2] = context[key2];
          }
        });
        var winKeys = Object_keys(win);
        var res = wEval.call(win, this.code);
        forEach(Object_keys(win), function(key2) {
          if (key2 in context || indexOf(winKeys, key2) === -1) {
            context[key2] = win[key2];
          }
        });
        forEach(globals, function(key2) {
          if (!(key2 in context)) {
            defineProp(context, key2, win[key2]);
          }
        });
        document.body.removeChild(iframe);
        return res;
      };
      Script.prototype.runInThisContext = function() {
        return eval(this.code);
      };
      Script.prototype.runInNewContext = function(context) {
        var ctx = Script.createContext(context);
        var res = this.runInContext(ctx);
        if (context) {
          forEach(Object_keys(ctx), function(key2) {
            context[key2] = ctx[key2];
          });
        }
        return res;
      };
      forEach(Object_keys(Script.prototype), function(name) {
        exports[name] = Script[name] = function(code) {
          var s3 = Script(code);
          return s3[name].apply(s3, [].slice.call(arguments, 1));
        };
      });
      exports.isContext = function(context) {
        return context instanceof Context;
      };
      exports.createScript = function(code) {
        return exports.Script(code);
      };
      exports.createContext = Script.createContext = function(context) {
        var copy = new Context();
        if (typeof context === "object") {
          forEach(Object_keys(context), function(key2) {
            copy[key2] = context[key2];
          });
        }
        return copy;
      };
    })(vmBrowserify);
    return vmBrowserify;
  }
  var hasRequiredApi;
  function requireApi() {
    if (hasRequiredApi) return api;
    hasRequiredApi = 1;
    (function(exports2) {
      var asn12 = requireAsn1$1();
      var inherits = requireInherits_browser();
      var api2 = exports2;
      api2.define = function define2(name, body) {
        return new Entity(name, body);
      };
      function Entity(name, body) {
        this.name = name;
        this.body = body;
        this.decoders = {};
        this.encoders = {};
      }
      Entity.prototype._createNamed = function createNamed(base2) {
        var named;
        try {
          named = requireVmBrowserify().runInThisContext("(function " + this.name + "(entity) {\n  this._initNamed(entity);\n})");
        } catch (e3) {
          named = function(entity) {
            this._initNamed(entity);
          };
        }
        inherits(named, base2);
        named.prototype._initNamed = function initnamed(entity) {
          base2.call(this, entity);
        };
        return new named(this);
      };
      Entity.prototype._getDecoder = function _getDecoder(enc) {
        enc = enc || "der";
        if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(asn12.decoders[enc]);
        return this.decoders[enc];
      };
      Entity.prototype.decode = function decode(data, enc, options) {
        return this._getDecoder(enc).decode(data, options);
      };
      Entity.prototype._getEncoder = function _getEncoder(enc) {
        enc = enc || "der";
        if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(asn12.encoders[enc]);
        return this.encoders[enc];
      };
      Entity.prototype.encode = function encode(data, enc, reporter2) {
        return this._getEncoder(enc).encode(data, reporter2);
      };
    })(api);
    return api;
  }
  var base = {};
  var reporter = {};
  var hasRequiredReporter;
  function requireReporter() {
    if (hasRequiredReporter) return reporter;
    hasRequiredReporter = 1;
    var inherits = requireInherits_browser();
    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
      };
    }
    reporter.Reporter = Reporter;
    Reporter.prototype.isError = function isError(obj) {
      return obj instanceof ReporterError;
    };
    Reporter.prototype.save = function save() {
      var state = this._reporterState;
      return {
        obj: state.obj,
        pathLen: state.path.length
      };
    };
    Reporter.prototype.restore = function restore(data) {
      var state = this._reporterState;
      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
    };
    Reporter.prototype.enterKey = function enterKey(key2) {
      return this._reporterState.path.push(key2);
    };
    Reporter.prototype.exitKey = function exitKey(index2) {
      var state = this._reporterState;
      state.path = state.path.slice(0, index2 - 1);
    };
    Reporter.prototype.leaveKey = function leaveKey(index2, key2, value) {
      var state = this._reporterState;
      this.exitKey(index2);
      if (state.obj !== null) state.obj[key2] = value;
    };
    Reporter.prototype.path = function path() {
      return this._reporterState.path.join("/");
    };
    Reporter.prototype.enterObject = function enterObject() {
      var state = this._reporterState;
      var prev = state.obj;
      state.obj = {};
      return prev;
    };
    Reporter.prototype.leaveObject = function leaveObject(prev) {
      var state = this._reporterState;
      var now = state.obj;
      state.obj = prev;
      return now;
    };
    Reporter.prototype.error = function error(msg) {
      var err;
      var state = this._reporterState;
      var inherited = msg instanceof ReporterError;
      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(state.path.map(function(elem) {
          return "[" + JSON.stringify(elem) + "]";
        }).join(""), msg.message || msg, msg.stack);
      }
      if (!state.options.partial) throw err;
      if (!inherited) state.errors.push(err);
      return err;
    };
    Reporter.prototype.wrapResult = function wrapResult(result) {
      var state = this._reporterState;
      if (!state.options.partial) return result;
      return {
        result: this.isError(result) ? null : result,
        errors: state.errors
      };
    };
    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    }
    inherits(ReporterError, Error);
    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + " at: " + (this.path || "(shallow)");
      if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);
      if (!this.stack) {
        try {
          throw new Error(this.message);
        } catch (e3) {
          this.stack = e3.stack;
        }
      }
      return this;
    };
    return reporter;
  }
  var buffer = {};
  var hasRequiredBuffer;
  function requireBuffer() {
    if (hasRequiredBuffer) return buffer;
    hasRequiredBuffer = 1;
    var inherits = requireInherits_browser();
    var Reporter = requireBase().Reporter;
    var Buffer2 = requireDist$2().Buffer;
    function DecoderBuffer(base2, options) {
      Reporter.call(this, options);
      if (!Buffer2.isBuffer(base2)) {
        this.error("Input not Buffer");
        return;
      }
      this.base = base2;
      this.offset = 0;
      this.length = base2.length;
    }
    inherits(DecoderBuffer, Reporter);
    buffer.DecoderBuffer = DecoderBuffer;
    DecoderBuffer.prototype.save = function save() {
      return {
        offset: this.offset,
        reporter: Reporter.prototype.save.call(this)
      };
    };
    DecoderBuffer.prototype.restore = function restore(save) {
      var res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;
      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);
      return res;
    };
    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };
    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
      else return this.error(fail || "DecoderBuffer overrun");
    };
    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length)) return this.error(fail || "DecoderBuffer overrun");
      var res = new DecoderBuffer(this.base);
      res._reporterState = this._reporterState;
      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    };
    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };
    function EncoderBuffer(value, reporter2) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
          if (!(item instanceof EncoderBuffer)) item = new EncoderBuffer(item, reporter2);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === "number") {
        if (!(0 <= value && value <= 255)) return reporter2.error("non-byte EncoderBuffer value");
        this.value = value;
        this.length = 1;
      } else if (typeof value === "string") {
        this.value = value;
        this.length = Buffer2.byteLength(value);
      } else if (Buffer2.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter2.error("Unsupported type: " + typeof value);
      }
    }
    buffer.EncoderBuffer = EncoderBuffer;
    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out) out = new Buffer2(this.length);
      if (!offset) offset = 0;
      if (this.length === 0) return out;
      if (Array.isArray(this.value)) {
        this.value.forEach(function(item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === "number") out[offset] = this.value;
        else if (typeof this.value === "string") out.write(this.value, offset);
        else if (Buffer2.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
      }
      return out;
    };
    return buffer;
  }
  var node;
  var hasRequiredNode;
  function requireNode() {
    if (hasRequiredNode) return node;
    hasRequiredNode = 1;
    var Reporter = requireBase().Reporter;
    var EncoderBuffer = requireBase().EncoderBuffer;
    var DecoderBuffer = requireBase().DecoderBuffer;
    var assert = requireMinimalisticAssert();
    var tags = [
      "seq",
      "seqof",
      "set",
      "setof",
      "objid",
      "bool",
      "gentime",
      "utctime",
      "null_",
      "enum",
      "int",
      "objDesc",
      "bitstr",
      "bmpstr",
      "charstr",
      "genstr",
      "graphstr",
      "ia5str",
      "iso646str",
      "numstr",
      "octstr",
      "printstr",
      "t61str",
      "unistr",
      "utf8str",
      "videostr"
    ];
    var methods = [
      "key",
      "obj",
      "use",
      "optional",
      "explicit",
      "implicit",
      "def",
      "choice",
      "any",
      "contains"
    ].concat(tags);
    var overrided = [
      "_peekTag",
      "_decodeTag",
      "_use",
      "_decodeStr",
      "_decodeObjid",
      "_decodeTime",
      "_decodeNull",
      "_decodeInt",
      "_decodeBool",
      "_decodeList",
      "_encodeComposite",
      "_encodeStr",
      "_encodeObjid",
      "_encodeTime",
      "_encodeNull",
      "_encodeInt",
      "_encodeBool"
    ];
    function Node(enc, parent) {
      var state = {};
      this._baseState = state;
      state.enc = enc;
      state.parent = parent || null;
      state.children = null;
      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state["default"] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null;
      if (!state.parent) {
        state.children = [];
        this._wrap();
      }
    }
    node = Node;
    var stateProps = [
      "enc",
      "parent",
      "children",
      "tag",
      "args",
      "reverseArgs",
      "choice",
      "optional",
      "any",
      "obj",
      "use",
      "alteredUse",
      "key",
      "default",
      "explicit",
      "implicit",
      "contains"
    ];
    Node.prototype.clone = function clone() {
      var state = this._baseState;
      var cstate = {};
      stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
      });
      var res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };
    Node.prototype._wrap = function wrap() {
      var state = this._baseState;
      methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
          var clone = new this.constructor(this);
          state.children.push(clone);
          return clone[method].apply(clone, arguments);
        };
      }, this);
    };
    Node.prototype._init = function init(body) {
      var state = this._baseState;
      assert(state.parent === null);
      body.call(this);
      state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
      }, this);
      assert.equal(state.children.length, 1, "Root node can have only one child");
    };
    Node.prototype._useArgs = function useArgs(args) {
      var state = this._baseState;
      var children = args.filter(function(arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
      }, this);
      if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
        children.forEach(function(child) {
          child._baseState.parent = this;
        }, this);
      }
      if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
          if (typeof arg !== "object" || arg.constructor !== Object) return arg;
          var res = {};
          Object.keys(arg).forEach(function(key2) {
            if (key2 == (key2 | 0)) key2 |= 0;
            var value = arg[key2];
            res[value] = key2;
          });
          return res;
        });
      }
    };
    overrided.forEach(function(method) {
      Node.prototype[method] = function _overrided() {
        var state = this._baseState;
        throw new Error(method + " not implemented for encoding: " + state.enc);
      };
    });
    tags.forEach(function(tag) {
      Node.prototype[tag] = function _tagMethod() {
        var state = this._baseState;
        var args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
      };
    });
    Node.prototype.use = function use(item) {
      assert(item);
      var state = this._baseState;
      assert(state.use === null);
      state.use = item;
      return this;
    };
    Node.prototype.optional = function optional() {
      var state = this._baseState;
      state.optional = true;
      return this;
    };
    Node.prototype.def = function def(val) {
      var state = this._baseState;
      assert(state["default"] === null);
      state["default"] = val;
      state.optional = true;
      return this;
    };
    Node.prototype.explicit = function explicit(num) {
      var state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.explicit = num;
      return this;
    };
    Node.prototype.implicit = function implicit(num) {
      var state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.implicit = num;
      return this;
    };
    Node.prototype.obj = function obj() {
      var state = this._baseState;
      var args = Array.prototype.slice.call(arguments);
      state.obj = true;
      if (args.length !== 0) this._useArgs(args);
      return this;
    };
    Node.prototype.key = function key2(newKey) {
      var state = this._baseState;
      assert(state.key === null);
      state.key = newKey;
      return this;
    };
    Node.prototype.any = function any() {
      var state = this._baseState;
      state.any = true;
      return this;
    };
    Node.prototype.choice = function choice(obj) {
      var state = this._baseState;
      assert(state.choice === null);
      state.choice = obj;
      this._useArgs(Object.keys(obj).map(function(key2) {
        return obj[key2];
      }));
      return this;
    };
    Node.prototype.contains = function contains(item) {
      var state = this._baseState;
      assert(state.use === null);
      state.contains = item;
      return this;
    };
    Node.prototype._decode = function decode(input, options) {
      var state = this._baseState;
      if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
      var result = state["default"];
      var present = true;
      var prevKey = null;
      if (state.key !== null) prevKey = input.enterKey(state.key);
      if (state.optional) {
        var tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
          var save = input.save();
          try {
            if (state.choice === null) this._decodeGeneric(state.tag, input, options);
            else this._decodeChoice(input, options);
            present = true;
          } catch (e3) {
            present = false;
          }
          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state.any);
          if (input.isError(present)) return present;
        }
      }
      var prevObj;
      if (state.obj && present) prevObj = input.enterObject();
      if (present) {
        if (state.explicit !== null) {
          var explicit = this._decodeTag(input, state.explicit);
          if (input.isError(explicit)) return explicit;
          input = explicit;
        }
        var start = input.offset;
        if (state.use === null && state.choice === null) {
          if (state.any) var save = input.save();
          var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
          if (input.isError(body)) return body;
          if (state.any) result = input.raw(save);
          else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, "tagged");
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, "content");
        if (state.any) result = result;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        if (!state.any && state.choice === null && state.children !== null) {
          state.children.forEach(function decodeChildren(child) {
            child._decode(input, options);
          });
        }
        if (state.contains && (state.tag === "octstr" || state.tag === "bitstr")) {
          var data = new DecoderBuffer(result);
          result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
      }
      if (state.obj && present) result = input.leaveObject(prevObj);
      if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
      else if (prevKey !== null) input.exitKey(prevKey);
      return result;
    };
    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
      var state = this._baseState;
      if (tag === "seq" || tag === "set") return null;
      if (tag === "seqof" || tag === "setof") return this._decodeList(input, tag, state.args[0], options);
      else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
      else if (tag === "objid" && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
      else if (tag === "objid") return this._decodeObjid(input, null, null, options);
      else if (tag === "gentime" || tag === "utctime") return this._decodeTime(input, tag, options);
      else if (tag === "null_") return this._decodeNull(input, options);
      else if (tag === "bool") return this._decodeBool(input, options);
      else if (tag === "objDesc") return this._decodeStr(input, tag, options);
      else if (tag === "int" || tag === "enum") return this._decodeInt(input, state.args && state.args[0], options);
      if (state.use !== null) {
        return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
      } else {
        return input.error("unknown tag: " + tag);
      }
    };
    Node.prototype._getUse = function _getUse(entity, obj) {
      var state = this._baseState;
      state.useDecoder = this._use(entity, obj);
      assert(state.useDecoder._baseState.parent === null);
      state.useDecoder = state.useDecoder._baseState.children[0];
      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }
      return state.useDecoder;
    };
    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      var state = this._baseState;
      var result = null;
      var match = false;
      Object.keys(state.choice).some(function(key2) {
        var save = input.save();
        var node2 = state.choice[key2];
        try {
          var value = node2._decode(input, options);
          if (input.isError(value)) return false;
          result = {
            type: key2,
            value
          };
          match = true;
        } catch (e3) {
          input.restore(save);
          return false;
        }
        return true;
      }, this);
      if (!match) return input.error("Choice not matched");
      return result;
    };
    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer(data, this.reporter);
    };
    Node.prototype._encode = function encode(data, reporter2, parent) {
      var state = this._baseState;
      if (state["default"] !== null && state["default"] === data) return;
      var result = this._encodeValue(data, reporter2, parent);
      if (result === void 0) return;
      if (this._skipDefault(result, reporter2, parent)) return;
      return result;
    };
    Node.prototype._encodeValue = function encode(data, reporter2, parent) {
      var state = this._baseState;
      if (state.parent === null) return state.children[0]._encode(data, reporter2 || new Reporter());
      var result = null;
      this.reporter = reporter2;
      if (state.optional && data === void 0) {
        if (state["default"] !== null) data = state["default"];
        else return;
      }
      var content = null;
      var primitive = false;
      if (state.any) {
        result = this._createEncoderBuffer(data);
      } else if (state.choice) {
        result = this._encodeChoice(data, reporter2);
      } else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter2);
        primitive = true;
      } else if (state.children) {
        content = state.children.map(function(child2) {
          if (child2._baseState.tag === "null_") return child2._encode(null, reporter2, data);
          if (child2._baseState.key === null) return reporter2.error("Child should have a key");
          var prevKey = reporter2.enterKey(child2._baseState.key);
          if (typeof data !== "object") return reporter2.error("Child expected, but input is not object");
          var res = child2._encode(data[child2._baseState.key], reporter2, data);
          reporter2.leaveKey(prevKey);
          return res;
        }, this).filter(function(child2) {
          return child2;
        });
        content = this._createEncoderBuffer(content);
      } else {
        if (state.tag === "seqof" || state.tag === "setof") {
          if (!(state.args && state.args.length === 1)) return reporter2.error("Too many args for : " + state.tag);
          if (!Array.isArray(data)) return reporter2.error("seqof/setof, but data is not Array");
          var child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(data.map(function(item) {
            var state2 = this._baseState;
            return this._getUse(state2.args[0], data)._encode(item, reporter2);
          }, child));
        } else if (state.use !== null) {
          result = this._getUse(state.use, parent)._encode(data, reporter2);
        } else {
          content = this._encodePrimitive(state.tag, data);
          primitive = true;
        }
      }
      var result;
      if (!state.any && state.choice === null) {
        var tag = state.implicit !== null ? state.implicit : state.tag;
        var cls = state.implicit === null ? "universal" : "context";
        if (tag === null) {
          if (state.use === null) reporter2.error("Tag could be omitted only for .use()");
        } else {
          if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
        }
      }
      if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, "context", result);
      return result;
    };
    Node.prototype._encodeChoice = function encodeChoice(data, reporter2) {
      var state = this._baseState;
      var node2 = state.choice[data.type];
      if (!node2) {
        assert(false, data.type + " not found in " + JSON.stringify(Object.keys(state.choice)));
      }
      return node2._encode(data.value, reporter2);
    };
    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      var state = this._baseState;
      if (/str$/.test(tag)) return this._encodeStr(data, tag);
      else if (tag === "objid" && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
      else if (tag === "objid") return this._encodeObjid(data, null, null);
      else if (tag === "gentime" || tag === "utctime") return this._encodeTime(data, tag);
      else if (tag === "null_") return this._encodeNull();
      else if (tag === "int" || tag === "enum") return this._encodeInt(data, state.args && state.reverseArgs[0]);
      else if (tag === "bool") return this._encodeBool(data);
      else if (tag === "objDesc") return this._encodeStr(data, tag);
      else throw new Error("Unsupported tag: " + tag);
    };
    Node.prototype._isNumstr = function isNumstr(str) {
      return /^[0-9 ]*$/.test(str);
    };
    Node.prototype._isPrintstr = function isPrintstr(str) {
      return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
    };
    return node;
  }
  var hasRequiredBase;
  function requireBase() {
    if (hasRequiredBase) return base;
    hasRequiredBase = 1;
    (function(exports2) {
      var base2 = exports2;
      base2.Reporter = requireReporter().Reporter;
      base2.DecoderBuffer = requireBuffer().DecoderBuffer;
      base2.EncoderBuffer = requireBuffer().EncoderBuffer;
      base2.Node = requireNode();
    })(base);
    return base;
  }
  var constants = {};
  var der = {};
  var hasRequiredDer$2;
  function requireDer$2() {
    if (hasRequiredDer$2) return der;
    hasRequiredDer$2 = 1;
    (function(exports2) {
      var constants2 = requireConstants();
      exports2.tagClass = {
        0: "universal",
        1: "application",
        2: "context",
        3: "private"
      };
      exports2.tagClassByName = constants2._reverse(exports2.tagClass);
      exports2.tag = {
        0: "end",
        1: "bool",
        2: "int",
        3: "bitstr",
        4: "octstr",
        5: "null_",
        6: "objid",
        7: "objDesc",
        8: "external",
        9: "real",
        10: "enum",
        11: "embed",
        12: "utf8str",
        13: "relativeOid",
        16: "seq",
        17: "set",
        18: "numstr",
        19: "printstr",
        20: "t61str",
        21: "videostr",
        22: "ia5str",
        23: "utctime",
        24: "gentime",
        25: "graphstr",
        26: "iso646str",
        27: "genstr",
        28: "unistr",
        29: "charstr",
        30: "bmpstr"
      };
      exports2.tagByName = constants2._reverse(exports2.tag);
    })(der);
    return der;
  }
  var hasRequiredConstants;
  function requireConstants() {
    if (hasRequiredConstants) return constants;
    hasRequiredConstants = 1;
    (function(exports2) {
      var constants2 = exports2;
      constants2._reverse = function reverse(map) {
        var res = {};
        Object.keys(map).forEach(function(key2) {
          if ((key2 | 0) == key2) key2 = key2 | 0;
          var value = map[key2];
          res[value] = key2;
        });
        return res;
      };
      constants2.der = requireDer$2();
    })(constants);
    return constants;
  }
  var decoders = {};
  var der_1$1;
  var hasRequiredDer$1;
  function requireDer$1() {
    if (hasRequiredDer$1) return der_1$1;
    hasRequiredDer$1 = 1;
    var inherits = requireInherits_browser();
    var asn12 = requireAsn1$1();
    var base2 = asn12.base;
    var bignum = asn12.bignum;
    var der2 = asn12.constants.der;
    function DERDecoder(entity) {
      this.enc = "der";
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    der_1$1 = DERDecoder;
    DERDecoder.prototype.decode = function decode(data, options) {
      if (!(data instanceof base2.DecoderBuffer)) data = new base2.DecoderBuffer(data, options);
      return this.tree._decode(data, options);
    };
    function DERNode(parent) {
      base2.Node.call(this, "der", parent);
    }
    inherits(DERNode, base2.Node);
    DERNode.prototype._peekTag = function peekTag(buffer2, tag, any) {
      if (buffer2.isEmpty()) return false;
      var state = buffer2.save();
      var decodedTag = derDecodeTag(buffer2, 'Failed to peek tag: "' + tag + '"');
      if (buffer2.isError(decodedTag)) return decodedTag;
      buffer2.restore(state);
      return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
    };
    DERNode.prototype._decodeTag = function decodeTag(buffer2, tag, any) {
      var decodedTag = derDecodeTag(buffer2, 'Failed to decode tag of "' + tag + '"');
      if (buffer2.isError(decodedTag)) return decodedTag;
      var len = derDecodeLen(buffer2, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
      if (buffer2.isError(len)) return len;
      if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) {
        return buffer2.error('Failed to match tag: "' + tag + '"');
      }
      if (decodedTag.primitive || len !== null) return buffer2.skip(len, 'Failed to match body of: "' + tag + '"');
      var state = buffer2.save();
      var res = this._skipUntilEnd(buffer2, 'Failed to skip indefinite length body: "' + this.tag + '"');
      if (buffer2.isError(res)) return res;
      len = buffer2.offset - state.offset;
      buffer2.restore(state);
      return buffer2.skip(len, 'Failed to match body of: "' + tag + '"');
    };
    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer2, fail) {
      while (true) {
        var tag = derDecodeTag(buffer2, fail);
        if (buffer2.isError(tag)) return tag;
        var len = derDecodeLen(buffer2, tag.primitive, fail);
        if (buffer2.isError(len)) return len;
        var res;
        if (tag.primitive || len !== null) res = buffer2.skip(len);
        else res = this._skipUntilEnd(buffer2, fail);
        if (buffer2.isError(res)) return res;
        if (tag.tagStr === "end") break;
      }
    };
    DERNode.prototype._decodeList = function decodeList(buffer2, tag, decoder, options) {
      var result = [];
      while (!buffer2.isEmpty()) {
        var possibleEnd = this._peekTag(buffer2, "end");
        if (buffer2.isError(possibleEnd)) return possibleEnd;
        var res = decoder.decode(buffer2, "der", options);
        if (buffer2.isError(res) && possibleEnd) break;
        result.push(res);
      }
      return result;
    };
    DERNode.prototype._decodeStr = function decodeStr(buffer2, tag) {
      if (tag === "bitstr") {
        var unused = buffer2.readUInt8();
        if (buffer2.isError(unused)) return unused;
        return {
          unused,
          data: buffer2.raw()
        };
      } else if (tag === "bmpstr") {
        var raw = buffer2.raw();
        if (raw.length % 2 === 1) return buffer2.error("Decoding of string type: bmpstr length mismatch");
        var str = "";
        for (var i3 = 0; i3 < raw.length / 2; i3++) {
          str += String.fromCharCode(raw.readUInt16BE(i3 * 2));
        }
        return str;
      } else if (tag === "numstr") {
        var numstr = buffer2.raw().toString("ascii");
        if (!this._isNumstr(numstr)) {
          return buffer2.error("Decoding of string type: numstr unsupported characters");
        }
        return numstr;
      } else if (tag === "octstr") {
        return buffer2.raw();
      } else if (tag === "objDesc") {
        return buffer2.raw();
      } else if (tag === "printstr") {
        var printstr = buffer2.raw().toString("ascii");
        if (!this._isPrintstr(printstr)) {
          return buffer2.error("Decoding of string type: printstr unsupported characters");
        }
        return printstr;
      } else if (/str$/.test(tag)) {
        return buffer2.raw().toString();
      } else {
        return buffer2.error("Decoding of string type: " + tag + " unsupported");
      }
    };
    DERNode.prototype._decodeObjid = function decodeObjid(buffer2, values, relative) {
      var result;
      var identifiers = [];
      var ident = 0;
      while (!buffer2.isEmpty()) {
        var subident = buffer2.readUInt8();
        ident <<= 7;
        ident |= subident & 127;
        if ((subident & 128) === 0) {
          identifiers.push(ident);
          ident = 0;
        }
      }
      if (subident & 128) identifiers.push(ident);
      var first = identifiers[0] / 40 | 0;
      var second = identifiers[0] % 40;
      if (relative) result = identifiers;
      else result = [
        first,
        second
      ].concat(identifiers.slice(1));
      if (values) {
        var tmp = values[result.join(" ")];
        if (tmp === void 0) tmp = values[result.join(".")];
        if (tmp !== void 0) result = tmp;
      }
      return result;
    };
    DERNode.prototype._decodeTime = function decodeTime(buffer2, tag) {
      var str = buffer2.raw().toString();
      if (tag === "gentime") {
        var year = str.slice(0, 4) | 0;
        var mon = str.slice(4, 6) | 0;
        var day = str.slice(6, 8) | 0;
        var hour = str.slice(8, 10) | 0;
        var min = str.slice(10, 12) | 0;
        var sec = str.slice(12, 14) | 0;
      } else if (tag === "utctime") {
        var year = str.slice(0, 2) | 0;
        var mon = str.slice(2, 4) | 0;
        var day = str.slice(4, 6) | 0;
        var hour = str.slice(6, 8) | 0;
        var min = str.slice(8, 10) | 0;
        var sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2e3 + year;
        else year = 1900 + year;
      } else {
        return buffer2.error("Decoding " + tag + " time is not supported yet");
      }
      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
    };
    DERNode.prototype._decodeNull = function decodeNull(buffer2) {
      return null;
    };
    DERNode.prototype._decodeBool = function decodeBool(buffer2) {
      var res = buffer2.readUInt8();
      if (buffer2.isError(res)) return res;
      else return res !== 0;
    };
    DERNode.prototype._decodeInt = function decodeInt(buffer2, values) {
      var raw = buffer2.raw();
      var res = new bignum(raw);
      if (values) res = values[res.toString(10)] || res;
      return res;
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === "function") entity = entity(obj);
      return entity._getDecoder("der").tree;
    };
    function derDecodeTag(buf, fail) {
      var tag = buf.readUInt8(fail);
      if (buf.isError(tag)) return tag;
      var cls = der2.tagClass[tag >> 6];
      var primitive = (tag & 32) === 0;
      if ((tag & 31) === 31) {
        var oct = tag;
        tag = 0;
        while ((oct & 128) === 128) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct)) return oct;
          tag <<= 7;
          tag |= oct & 127;
        }
      } else {
        tag &= 31;
      }
      var tagStr = der2.tag[tag];
      return {
        cls,
        primitive,
        tag,
        tagStr
      };
    }
    function derDecodeLen(buf, primitive, fail) {
      var len = buf.readUInt8(fail);
      if (buf.isError(len)) return len;
      if (!primitive && len === 128) return null;
      if ((len & 128) === 0) {
        return len;
      }
      var num = len & 127;
      if (num > 4) return buf.error("length octect is too long");
      len = 0;
      for (var i3 = 0; i3 < num; i3++) {
        len <<= 8;
        var j3 = buf.readUInt8(fail);
        if (buf.isError(j3)) return j3;
        len |= j3;
      }
      return len;
    }
    return der_1$1;
  }
  var pem$1;
  var hasRequiredPem$1;
  function requirePem$1() {
    if (hasRequiredPem$1) return pem$1;
    hasRequiredPem$1 = 1;
    var inherits = requireInherits_browser();
    var Buffer2 = requireDist$2().Buffer;
    var DERDecoder = requireDer$1();
    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = "pem";
    }
    inherits(PEMDecoder, DERDecoder);
    pem$1 = PEMDecoder;
    PEMDecoder.prototype.decode = function decode(data, options) {
      var lines = data.toString().split(/[\r\n]+/g);
      var label = options.label.toUpperCase();
      var re2 = /^-----(BEGIN|END) ([^-]+)-----$/;
      var start = -1;
      var end = -1;
      for (var i3 = 0; i3 < lines.length; i3++) {
        var match = lines[i3].match(re2);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
          if (match[1] !== "BEGIN") break;
          start = i3;
        } else {
          if (match[1] !== "END") break;
          end = i3;
          break;
        }
      }
      if (start === -1 || end === -1) throw new Error("PEM section not found for: " + label);
      var base64 = lines.slice(start + 1, end).join("");
      base64.replace(/[^a-z0-9\+\/=]+/gi, "");
      var input = new Buffer2(base64, "base64");
      return DERDecoder.prototype.decode.call(this, input, options);
    };
    return pem$1;
  }
  var hasRequiredDecoders;
  function requireDecoders() {
    if (hasRequiredDecoders) return decoders;
    hasRequiredDecoders = 1;
    (function(exports2) {
      var decoders2 = exports2;
      decoders2.der = requireDer$1();
      decoders2.pem = requirePem$1();
    })(decoders);
    return decoders;
  }
  var encoders = {};
  var der_1;
  var hasRequiredDer;
  function requireDer() {
    if (hasRequiredDer) return der_1;
    hasRequiredDer = 1;
    var inherits = requireInherits_browser();
    var Buffer2 = requireDist$2().Buffer;
    var asn12 = requireAsn1$1();
    var base2 = asn12.base;
    var der2 = asn12.constants.der;
    function DEREncoder(entity) {
      this.enc = "der";
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    der_1 = DEREncoder;
    DEREncoder.prototype.encode = function encode(data, reporter2) {
      return this.tree._encode(data, reporter2).join();
    };
    function DERNode(parent) {
      base2.Node.call(this, "der", parent);
    }
    inherits(DERNode, base2.Node);
    DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
      var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
      if (content.length < 128) {
        var header = new Buffer2(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
          header,
          content
        ]);
      }
      var lenOctets = 1;
      for (var i3 = content.length; i3 >= 256; i3 >>= 8) lenOctets++;
      var header = new Buffer2(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 128 | lenOctets;
      for (var i3 = 1 + lenOctets, j3 = content.length; j3 > 0; i3--, j3 >>= 8) header[i3] = j3 & 255;
      return this._createEncoderBuffer([
        header,
        content
      ]);
    };
    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === "bitstr") {
        return this._createEncoderBuffer([
          str.unused | 0,
          str.data
        ]);
      } else if (tag === "bmpstr") {
        var buf = new Buffer2(str.length * 2);
        for (var i3 = 0; i3 < str.length; i3++) {
          buf.writeUInt16BE(str.charCodeAt(i3), i3 * 2);
        }
        return this._createEncoderBuffer(buf);
      } else if (tag === "numstr") {
        if (!this._isNumstr(str)) {
          return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        }
        return this._createEncoderBuffer(str);
      } else if (tag === "printstr") {
        if (!this._isPrintstr(str)) {
          return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        }
        return this._createEncoderBuffer(str);
      } else if (/str$/.test(tag)) {
        return this._createEncoderBuffer(str);
      } else if (tag === "objDesc") {
        return this._createEncoderBuffer(str);
      } else {
        return this.reporter.error("Encoding of string type: " + tag + " unsupported");
      }
    };
    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
      if (typeof id === "string") {
        if (!values) return this.reporter.error("string objid given, but no values map found");
        if (!values.hasOwnProperty(id)) return this.reporter.error("objid not found in values map");
        id = values[id].split(/[\s\.]+/g);
        for (var i3 = 0; i3 < id.length; i3++) id[i3] |= 0;
      } else if (Array.isArray(id)) {
        id = id.slice();
        for (var i3 = 0; i3 < id.length; i3++) id[i3] |= 0;
      }
      if (!Array.isArray(id)) {
        return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
      }
      if (!relative) {
        if (id[1] >= 40) return this.reporter.error("Second objid identifier OOB");
        id.splice(0, 2, id[0] * 40 + id[1]);
      }
      var size = 0;
      for (var i3 = 0; i3 < id.length; i3++) {
        var ident = id[i3];
        for (size++; ident >= 128; ident >>= 7) size++;
      }
      var objid = new Buffer2(size);
      var offset = objid.length - 1;
      for (var i3 = id.length - 1; i3 >= 0; i3--) {
        var ident = id[i3];
        objid[offset--] = ident & 127;
        while ((ident >>= 7) > 0) objid[offset--] = 128 | ident & 127;
      }
      return this._createEncoderBuffer(objid);
    };
    function two(num) {
      if (num < 10) return "0" + num;
      else return num;
    }
    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      var str;
      var date = new Date(time);
      if (tag === "gentime") {
        str = [
          two(date.getFullYear()),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          "Z"
        ].join("");
      } else if (tag === "utctime") {
        str = [
          two(date.getFullYear() % 100),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          "Z"
        ].join("");
      } else {
        this.reporter.error("Encoding " + tag + " time is not supported yet");
      }
      return this._encodeStr(str, "octstr");
    };
    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer("");
    };
    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === "string") {
        if (!values) return this.reporter.error("String int or enum given, but no values map");
        if (!values.hasOwnProperty(num)) {
          return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
        }
        num = values[num];
      }
      if (typeof num !== "number" && !Buffer2.isBuffer(num)) {
        var numArray = num.toArray();
        if (!num.sign && numArray[0] & 128) {
          numArray.unshift(0);
        }
        num = new Buffer2(numArray);
      }
      if (Buffer2.isBuffer(num)) {
        var size = num.length;
        if (num.length === 0) size++;
        var out = new Buffer2(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
      }
      if (num < 128) return this._createEncoderBuffer(num);
      if (num < 256) return this._createEncoderBuffer([
        0,
        num
      ]);
      var size = 1;
      for (var i3 = num; i3 >= 256; i3 >>= 8) size++;
      var out = new Array(size);
      for (var i3 = out.length - 1; i3 >= 0; i3--) {
        out[i3] = num & 255;
        num >>= 8;
      }
      if (out[0] & 128) {
        out.unshift(0);
      }
      return this._createEncoderBuffer(new Buffer2(out));
    };
    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 255 : 0);
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === "function") entity = entity(obj);
      return entity._getEncoder("der").tree;
    };
    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter2, parent) {
      var state = this._baseState;
      var i3;
      if (state["default"] === null) return false;
      var data = dataBuffer.join();
      if (state.defaultBuffer === void 0) state.defaultBuffer = this._encodeValue(state["default"], reporter2, parent).join();
      if (data.length !== state.defaultBuffer.length) return false;
      for (i3 = 0; i3 < data.length; i3++) if (data[i3] !== state.defaultBuffer[i3]) return false;
      return true;
    };
    function encodeTag(tag, primitive, cls, reporter2) {
      var res;
      if (tag === "seqof") tag = "seq";
      else if (tag === "setof") tag = "set";
      if (der2.tagByName.hasOwnProperty(tag)) res = der2.tagByName[tag];
      else if (typeof tag === "number" && (tag | 0) === tag) res = tag;
      else return reporter2.error("Unknown tag: " + tag);
      if (res >= 31) return reporter2.error("Multi-octet tag encoding unsupported");
      if (!primitive) res |= 32;
      res |= der2.tagClassByName[cls || "universal"] << 6;
      return res;
    }
    return der_1;
  }
  var pem;
  var hasRequiredPem;
  function requirePem() {
    if (hasRequiredPem) return pem;
    hasRequiredPem = 1;
    var inherits = requireInherits_browser();
    var DEREncoder = requireDer();
    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = "pem";
    }
    inherits(PEMEncoder, DEREncoder);
    pem = PEMEncoder;
    PEMEncoder.prototype.encode = function encode(data, options) {
      var buf = DEREncoder.prototype.encode.call(this, data);
      var p3 = buf.toString("base64");
      var out = [
        "-----BEGIN " + options.label + "-----"
      ];
      for (var i3 = 0; i3 < p3.length; i3 += 64) out.push(p3.slice(i3, i3 + 64));
      out.push("-----END " + options.label + "-----");
      return out.join("\n");
    };
    return pem;
  }
  var hasRequiredEncoders;
  function requireEncoders() {
    if (hasRequiredEncoders) return encoders;
    hasRequiredEncoders = 1;
    (function(exports2) {
      var encoders2 = exports2;
      encoders2.der = requireDer();
      encoders2.pem = requirePem();
    })(encoders);
    return encoders;
  }
  var hasRequiredAsn1$1;
  function requireAsn1$1() {
    if (hasRequiredAsn1$1) return asn1;
    hasRequiredAsn1$1 = 1;
    (function(exports2) {
      var asn12 = exports2;
      asn12.bignum = requireBn$1();
      asn12.define = requireApi().define;
      asn12.base = requireBase();
      asn12.constants = requireConstants();
      asn12.decoders = requireDecoders();
      asn12.encoders = requireEncoders();
    })(asn1);
    return asn1;
  }
  var certificate;
  var hasRequiredCertificate;
  function requireCertificate() {
    if (hasRequiredCertificate) return certificate;
    hasRequiredCertificate = 1;
    var asn = requireAsn1$1();
    var Time = asn.define("Time", function() {
      this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
      });
    });
    var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
      this.seq().obj(this.key("type").objid(), this.key("value").any());
    });
    var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
    });
    var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
    });
    var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
      this.setof(AttributeTypeValue);
    });
    var RDNSequence = asn.define("RDNSequence", function() {
      this.seqof(RelativeDistinguishedName);
    });
    var Name = asn.define("Name", function() {
      this.choice({
        rdnSequence: this.use(RDNSequence)
      });
    });
    var Validity = asn.define("Validity", function() {
      this.seq().obj(this.key("notBefore").use(Time), this.key("notAfter").use(Time));
    });
    var Extension = asn.define("Extension", function() {
      this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
    });
    var TBSCertificate = asn.define("TBSCertificate", function() {
      this.seq().obj(this.key("version").explicit(0)["int"]().optional(), this.key("serialNumber")["int"](), this.key("signature").use(AlgorithmIdentifier), this.key("issuer").use(Name), this.key("validity").use(Validity), this.key("subject").use(Name), this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(Extension).optional());
    });
    var X509Certificate = asn.define("X509Certificate", function() {
      this.seq().obj(this.key("tbsCertificate").use(TBSCertificate), this.key("signatureAlgorithm").use(AlgorithmIdentifier), this.key("signatureValue").bitstr());
    });
    certificate = X509Certificate;
    return certificate;
  }
  var hasRequiredAsn1;
  function requireAsn1() {
    if (hasRequiredAsn1) return asn1$1;
    hasRequiredAsn1 = 1;
    var asn12 = requireAsn1$1();
    asn1$1.certificate = requireCertificate();
    var RSAPrivateKey = asn12.define("RSAPrivateKey", function() {
      this.seq().obj(this.key("version")["int"](), this.key("modulus")["int"](), this.key("publicExponent")["int"](), this.key("privateExponent")["int"](), this.key("prime1")["int"](), this.key("prime2")["int"](), this.key("exponent1")["int"](), this.key("exponent2")["int"](), this.key("coefficient")["int"]());
    });
    asn1$1.RSAPrivateKey = RSAPrivateKey;
    var RSAPublicKey = asn12.define("RSAPublicKey", function() {
      this.seq().obj(this.key("modulus")["int"](), this.key("publicExponent")["int"]());
    });
    asn1$1.RSAPublicKey = RSAPublicKey;
    var AlgorithmIdentifier = asn12.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p")["int"](), this.key("q")["int"](), this.key("g")["int"]()).optional());
    });
    var PublicKey = asn12.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
    });
    asn1$1.PublicKey = PublicKey;
    var PrivateKeyInfo = asn12.define("PrivateKeyInfo", function() {
      this.seq().obj(this.key("version")["int"](), this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPrivateKey").octstr());
    });
    asn1$1.PrivateKey = PrivateKeyInfo;
    var EncryptedPrivateKeyInfo = asn12.define("EncryptedPrivateKeyInfo", function() {
      this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters")["int"]())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
    });
    asn1$1.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
    var DSAPrivateKey = asn12.define("DSAPrivateKey", function() {
      this.seq().obj(this.key("version")["int"](), this.key("p")["int"](), this.key("q")["int"](), this.key("g")["int"](), this.key("pub_key")["int"](), this.key("priv_key")["int"]());
    });
    asn1$1.DSAPrivateKey = DSAPrivateKey;
    asn1$1.DSAparam = asn12.define("DSAparam", function() {
      this["int"]();
    });
    var ECParameters = asn12.define("ECParameters", function() {
      this.choice({
        namedCurve: this.objid()
      });
    });
    var ECPrivateKey = asn12.define("ECPrivateKey", function() {
      this.seq().obj(this.key("version")["int"](), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(ECParameters), this.key("publicKey").optional().explicit(1).bitstr());
    });
    asn1$1.ECPrivateKey = ECPrivateKey;
    asn1$1.signature = asn12.define("signature", function() {
      this.seq().obj(this.key("r")["int"](), this.key("s")["int"]());
    });
    return asn1$1;
  }
  const require$$1 = {
    "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
    "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
    "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
    "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
    "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
    "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
    "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
    "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
    "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
    "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
    "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
    "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
  };
  var fixProc;
  var hasRequiredFixProc;
  function requireFixProc() {
    if (hasRequiredFixProc) return fixProc;
    hasRequiredFixProc = 1;
    var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
    var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
    var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
    var evp = requireEvp_bytestokey();
    var ciphers = requireBrowser$6();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    fixProc = function(okey, password) {
      var key2 = okey.toString();
      var match = key2.match(findProc);
      var decrypted;
      if (!match) {
        var match2 = key2.match(fullRegex);
        decrypted = Buffer2.from(match2[2].replace(/[\r\n]/g, ""), "base64");
      } else {
        var suite = "aes" + match[1];
        var iv = Buffer2.from(match[2], "hex");
        var cipherText = Buffer2.from(match[3].replace(/[\r\n]/g, ""), "base64");
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher2 = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher2.update(cipherText));
        out.push(cipher2["final"]());
        decrypted = Buffer2.concat(out);
      }
      var tag = key2.match(startRegex)[1];
      return {
        tag,
        data: decrypted
      };
    };
    return fixProc;
  }
  var parseAsn1;
  var hasRequiredParseAsn1;
  function requireParseAsn1() {
    if (hasRequiredParseAsn1) return parseAsn1;
    hasRequiredParseAsn1 = 1;
    var asn12 = requireAsn1();
    var aesid = require$$1;
    var fixProc2 = requireFixProc();
    var ciphers = requireBrowser$6();
    var compat = requireBrowser$7();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function decrypt(data, password) {
      var salt = data.algorithm.decrypt.kde.kdeparams.salt;
      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
      var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
      var iv = data.algorithm.decrypt.cipher.iv;
      var cipherText = data.subjectPrivateKey;
      var keylen = parseInt(algo.split("-")[1], 10) / 8;
      var key2 = compat.pbkdf2Sync(password, salt, iters, keylen, "sha1");
      var cipher2 = ciphers.createDecipheriv(algo, key2, iv);
      var out = [];
      out.push(cipher2.update(cipherText));
      out.push(cipher2["final"]());
      return Buffer2.concat(out);
    }
    function parseKeys(buffer2) {
      var password;
      if (typeof buffer2 === "object" && !Buffer2.isBuffer(buffer2)) {
        password = buffer2.passphrase;
        buffer2 = buffer2.key;
      }
      if (typeof buffer2 === "string") {
        buffer2 = Buffer2.from(buffer2);
      }
      var stripped = fixProc2(buffer2, password);
      var type = stripped.tag;
      var data = stripped.data;
      var subtype, ndata;
      switch (type) {
        case "CERTIFICATE":
          ndata = asn12.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
        case "PUBLIC KEY":
          if (!ndata) {
            ndata = asn12.PublicKey.decode(data, "der");
          }
          subtype = ndata.algorithm.algorithm.join(".");
          switch (subtype) {
            case "1.2.840.113549.1.1.1":
              return asn12.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
            case "1.2.840.10045.2.1":
              ndata.subjectPrivateKey = ndata.subjectPublicKey;
              return {
                type: "ec",
                data: ndata
              };
            case "1.2.840.10040.4.1":
              ndata.algorithm.params.pub_key = asn12.DSAparam.decode(ndata.subjectPublicKey.data, "der");
              return {
                type: "dsa",
                data: ndata.algorithm.params
              };
            default:
              throw new Error("unknown key id " + subtype);
          }
        case "ENCRYPTED PRIVATE KEY":
          data = asn12.EncryptedPrivateKey.decode(data, "der");
          data = decrypt(data, password);
        case "PRIVATE KEY":
          ndata = asn12.PrivateKey.decode(data, "der");
          subtype = ndata.algorithm.algorithm.join(".");
          switch (subtype) {
            case "1.2.840.113549.1.1.1":
              return asn12.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
            case "1.2.840.10045.2.1":
              return {
                curve: ndata.algorithm.curve,
                privateKey: asn12.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
              };
            case "1.2.840.10040.4.1":
              ndata.algorithm.params.priv_key = asn12.DSAparam.decode(ndata.subjectPrivateKey, "der");
              return {
                type: "dsa",
                params: ndata.algorithm.params
              };
            default:
              throw new Error("unknown key id " + subtype);
          }
        case "RSA PUBLIC KEY":
          return asn12.RSAPublicKey.decode(data, "der");
        case "RSA PRIVATE KEY":
          return asn12.RSAPrivateKey.decode(data, "der");
        case "DSA PRIVATE KEY":
          return {
            type: "dsa",
            params: asn12.DSAPrivateKey.decode(data, "der")
          };
        case "EC PRIVATE KEY":
          data = asn12.ECPrivateKey.decode(data, "der");
          return {
            curve: data.parameters.value,
            privateKey: data.privateKey
          };
        default:
          throw new Error("unknown key type " + type);
      }
    }
    parseKeys.signature = asn12.signature;
    parseAsn1 = parseKeys;
    return parseAsn1;
  }
  const require$$4 = {
    "1.3.132.0.10": "secp256k1",
    "1.3.132.0.33": "p224",
    "1.2.840.10045.3.1.1": "p192",
    "1.2.840.10045.3.1.7": "p256",
    "1.3.132.0.34": "p384",
    "1.3.132.0.35": "p521"
  };
  var hasRequiredSign;
  function requireSign() {
    if (hasRequiredSign) return sign.exports;
    hasRequiredSign = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var createHmac = requireBrowser$8();
    var crt = requireBrowserifyRsa();
    var EC = requireElliptic().ec;
    var BN = requireBn();
    var parseKeys = requireParseAsn1();
    var curves2 = require$$4;
    var RSA_PKCS1_PADDING = 1;
    function sign$1(hash2, key2, hashType, signType, tag) {
      var priv = parseKeys(key2);
      if (priv.curve) {
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") {
          throw new Error("wrong private key type");
        }
        return ecSign(hash2, priv);
      } else if (priv.type === "dsa") {
        if (signType !== "dsa") {
          throw new Error("wrong private key type");
        }
        return dsaSign(hash2, priv, hashType);
      }
      if (signType !== "rsa" && signType !== "ecdsa/rsa") {
        throw new Error("wrong private key type");
      }
      if (key2.padding !== void 0 && key2.padding !== RSA_PKCS1_PADDING) {
        throw new Error("illegal or unsupported padding mode");
      }
      hash2 = Buffer2.concat([
        tag,
        hash2
      ]);
      var len = priv.modulus.byteLength();
      var pad = [
        0,
        1
      ];
      while (hash2.length + pad.length + 1 < len) {
        pad.push(255);
      }
      pad.push(0);
      var i3 = -1;
      while (++i3 < hash2.length) {
        pad.push(hash2[i3]);
      }
      var out = crt(pad, priv);
      return out;
    }
    function ecSign(hash2, priv) {
      var curveId = curves2[priv.curve.join(".")];
      if (!curveId) {
        throw new Error("unknown curve " + priv.curve.join("."));
      }
      var curve2 = new EC(curveId);
      var key2 = curve2.keyFromPrivate(priv.privateKey);
      var out = key2.sign(hash2);
      return Buffer2.from(out.toDER());
    }
    function dsaSign(hash2, priv, algo) {
      var x3 = priv.params.priv_key;
      var p3 = priv.params.p;
      var q3 = priv.params.q;
      var g3 = priv.params.g;
      var r3 = new BN(0);
      var k3;
      var H3 = bits2int(hash2, q3).mod(q3);
      var s3 = false;
      var kv = getKey(x3, q3, hash2, algo);
      while (s3 === false) {
        k3 = makeKey(q3, kv, algo);
        r3 = makeR(g3, k3, p3, q3);
        s3 = k3.invm(q3).imul(H3.add(x3.mul(r3))).mod(q3);
        if (s3.cmpn(0) === 0) {
          s3 = false;
          r3 = new BN(0);
        }
      }
      return toDER(r3, s3);
    }
    function toDER(r3, s3) {
      r3 = r3.toArray();
      s3 = s3.toArray();
      if (r3[0] & 128) {
        r3 = [
          0
        ].concat(r3);
      }
      if (s3[0] & 128) {
        s3 = [
          0
        ].concat(s3);
      }
      var total = r3.length + s3.length + 4;
      var res = [
        48,
        total,
        2,
        r3.length
      ];
      res = res.concat(r3, [
        2,
        s3.length
      ], s3);
      return Buffer2.from(res);
    }
    function getKey(x3, q3, hash2, algo) {
      x3 = Buffer2.from(x3.toArray());
      if (x3.length < q3.byteLength()) {
        var zeros = Buffer2.alloc(q3.byteLength() - x3.length);
        x3 = Buffer2.concat([
          zeros,
          x3
        ]);
      }
      var hlen = hash2.length;
      var hbits = bits2octets(hash2, q3);
      var v3 = Buffer2.alloc(hlen);
      v3.fill(1);
      var k3 = Buffer2.alloc(hlen);
      k3 = createHmac(algo, k3).update(v3).update(Buffer2.from([
        0
      ])).update(x3).update(hbits).digest();
      v3 = createHmac(algo, k3).update(v3).digest();
      k3 = createHmac(algo, k3).update(v3).update(Buffer2.from([
        1
      ])).update(x3).update(hbits).digest();
      v3 = createHmac(algo, k3).update(v3).digest();
      return {
        k: k3,
        v: v3
      };
    }
    function bits2int(obits, q3) {
      var bits = new BN(obits);
      var shift = (obits.length << 3) - q3.bitLength();
      if (shift > 0) {
        bits.ishrn(shift);
      }
      return bits;
    }
    function bits2octets(bits, q3) {
      bits = bits2int(bits, q3);
      bits = bits.mod(q3);
      var out = Buffer2.from(bits.toArray());
      if (out.length < q3.byteLength()) {
        var zeros = Buffer2.alloc(q3.byteLength() - out.length);
        out = Buffer2.concat([
          zeros,
          out
        ]);
      }
      return out;
    }
    function makeKey(q3, kv, algo) {
      var t3;
      var k3;
      do {
        t3 = Buffer2.alloc(0);
        while (t3.length * 8 < q3.bitLength()) {
          kv.v = createHmac(algo, kv.k).update(kv.v).digest();
          t3 = Buffer2.concat([
            t3,
            kv.v
          ]);
        }
        k3 = bits2int(t3, q3);
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer2.from([
          0
        ])).digest();
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      } while (k3.cmp(q3) !== -1);
      return k3;
    }
    function makeR(g3, k3, p3, q3) {
      return g3.toRed(BN.mont(p3)).redPow(k3).fromRed().mod(q3);
    }
    sign.exports = sign$1;
    sign.exports.getKey = getKey;
    sign.exports.makeKey = makeKey;
    return sign.exports;
  }
  var verify_1;
  var hasRequiredVerify;
  function requireVerify() {
    if (hasRequiredVerify) return verify_1;
    hasRequiredVerify = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var BN = requireBn();
    var EC = requireElliptic().ec;
    var parseKeys = requireParseAsn1();
    var curves2 = require$$4;
    function verify(sig, hash2, key2, signType, tag) {
      var pub = parseKeys(key2);
      if (pub.type === "ec") {
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") {
          throw new Error("wrong public key type");
        }
        return ecVerify(sig, hash2, pub);
      } else if (pub.type === "dsa") {
        if (signType !== "dsa") {
          throw new Error("wrong public key type");
        }
        return dsaVerify(sig, hash2, pub);
      }
      if (signType !== "rsa" && signType !== "ecdsa/rsa") {
        throw new Error("wrong public key type");
      }
      hash2 = Buffer2.concat([
        tag,
        hash2
      ]);
      var len = pub.modulus.byteLength();
      var pad = [
        1
      ];
      var padNum = 0;
      while (hash2.length + pad.length + 2 < len) {
        pad.push(255);
        padNum += 1;
      }
      pad.push(0);
      var i3 = -1;
      while (++i3 < hash2.length) {
        pad.push(hash2[i3]);
      }
      pad = Buffer2.from(pad);
      var red = BN.mont(pub.modulus);
      sig = new BN(sig).toRed(red);
      sig = sig.redPow(new BN(pub.publicExponent));
      sig = Buffer2.from(sig.fromRed().toArray());
      var out = padNum < 8 ? 1 : 0;
      len = Math.min(sig.length, pad.length);
      if (sig.length !== pad.length) {
        out = 1;
      }
      i3 = -1;
      while (++i3 < len) {
        out |= sig[i3] ^ pad[i3];
      }
      return out === 0;
    }
    function ecVerify(sig, hash2, pub) {
      var curveId = curves2[pub.data.algorithm.curve.join(".")];
      if (!curveId) {
        throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
      }
      var curve2 = new EC(curveId);
      var pubkey = pub.data.subjectPrivateKey.data;
      return curve2.verify(hash2, sig, pubkey);
    }
    function dsaVerify(sig, hash2, pub) {
      var p3 = pub.data.p;
      var q3 = pub.data.q;
      var g3 = pub.data.g;
      var y3 = pub.data.pub_key;
      var unpacked = parseKeys.signature.decode(sig, "der");
      var s3 = unpacked.s;
      var r3 = unpacked.r;
      checkValue(s3, q3);
      checkValue(r3, q3);
      var montp = BN.mont(p3);
      var w3 = s3.invm(q3);
      var v3 = g3.toRed(montp).redPow(new BN(hash2).mul(w3).mod(q3)).fromRed().mul(y3.toRed(montp).redPow(r3.mul(w3).mod(q3)).fromRed()).mod(p3).mod(q3);
      return v3.cmp(r3) === 0;
    }
    function checkValue(b3, q3) {
      if (b3.cmpn(0) <= 0) {
        throw new Error("invalid sig");
      }
      if (b3.cmp(q3) >= 0) {
        throw new Error("invalid sig");
      }
    }
    verify_1 = verify;
    return verify_1;
  }
  var browser$3;
  var hasRequiredBrowser$3;
  function requireBrowser$3() {
    if (hasRequiredBrowser$3) return browser$3;
    hasRequiredBrowser$3 = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var createHash = requireBrowser$9();
    var stream = requireReadableBrowser();
    var inherits = requireInherits_browser();
    var sign2 = requireSign();
    var verify = requireVerify();
    var algorithms = require$$6;
    Object.keys(algorithms).forEach(function(key2) {
      algorithms[key2].id = Buffer2.from(algorithms[key2].id, "hex");
      algorithms[key2.toLowerCase()] = algorithms[key2];
    });
    function Sign(algorithm) {
      stream.Writable.call(this);
      var data = algorithms[algorithm];
      if (!data) {
        throw new Error("Unknown message digest");
      }
      this._hashType = data.hash;
      this._hash = createHash(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }
    inherits(Sign, stream.Writable);
    Sign.prototype._write = function _write(data, _3, done) {
      this._hash.update(data);
      done();
    };
    Sign.prototype.update = function update(data, enc) {
      this._hash.update(typeof data === "string" ? Buffer2.from(data, enc) : data);
      return this;
    };
    Sign.prototype.sign = function signMethod(key2, enc) {
      this.end();
      var hash2 = this._hash.digest();
      var sig = sign2(hash2, key2, this._hashType, this._signType, this._tag);
      return enc ? sig.toString(enc) : sig;
    };
    function Verify(algorithm) {
      stream.Writable.call(this);
      var data = algorithms[algorithm];
      if (!data) {
        throw new Error("Unknown message digest");
      }
      this._hash = createHash(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }
    inherits(Verify, stream.Writable);
    Verify.prototype._write = function _write(data, _3, done) {
      this._hash.update(data);
      done();
    };
    Verify.prototype.update = function update(data, enc) {
      this._hash.update(typeof data === "string" ? Buffer2.from(data, enc) : data);
      return this;
    };
    Verify.prototype.verify = function verifyMethod(key2, sig, enc) {
      var sigBuffer = typeof sig === "string" ? Buffer2.from(sig, enc) : sig;
      this.end();
      var hash2 = this._hash.digest();
      return verify(sigBuffer, hash2, key2, this._signType, this._tag);
    };
    function createSign(algorithm) {
      return new Sign(algorithm);
    }
    function createVerify(algorithm) {
      return new Verify(algorithm);
    }
    browser$3 = {
      Sign: createSign,
      Verify: createVerify,
      createSign,
      createVerify
    };
    return browser$3;
  }
  var browser$2;
  var hasRequiredBrowser$2;
  function requireBrowser$2() {
    if (hasRequiredBrowser$2) return browser$2;
    hasRequiredBrowser$2 = 1;
    var elliptic2 = requireElliptic();
    var BN = requireBn$1();
    browser$2 = function createECDH(curve2) {
      return new ECDH(curve2);
    };
    var aliases = {
      secp256k1: {
        name: "secp256k1",
        byteLength: 32
      },
      secp224r1: {
        name: "p224",
        byteLength: 28
      },
      prime256v1: {
        name: "p256",
        byteLength: 32
      },
      prime192v1: {
        name: "p192",
        byteLength: 24
      },
      ed25519: {
        name: "ed25519",
        byteLength: 32
      },
      secp384r1: {
        name: "p384",
        byteLength: 48
      },
      secp521r1: {
        name: "p521",
        byteLength: 66
      }
    };
    aliases.p224 = aliases.secp224r1;
    aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
    aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
    aliases.p384 = aliases.secp384r1;
    aliases.p521 = aliases.secp521r1;
    function ECDH(curve2) {
      this.curveType = aliases[curve2];
      if (!this.curveType) {
        this.curveType = {
          name: curve2
        };
      }
      this.curve = new elliptic2.ec(this.curveType.name);
      this.keys = void 0;
    }
    ECDH.prototype.generateKeys = function(enc, format) {
      this.keys = this.curve.genKeyPair();
      return this.getPublicKey(enc, format);
    };
    ECDH.prototype.computeSecret = function(other, inenc, enc) {
      inenc = inenc || "utf8";
      if (!Buffer.isBuffer(other)) {
        other = new Buffer(other, inenc);
      }
      var otherPub = this.curve.keyFromPublic(other).getPublic();
      var out = otherPub.mul(this.keys.getPrivate()).getX();
      return formatReturnValue(out, enc, this.curveType.byteLength);
    };
    ECDH.prototype.getPublicKey = function(enc, format) {
      var key2 = this.keys.getPublic(format === "compressed", true);
      if (format === "hybrid") {
        if (key2[key2.length - 1] % 2) {
          key2[0] = 7;
        } else {
          key2[0] = 6;
        }
      }
      return formatReturnValue(key2, enc);
    };
    ECDH.prototype.getPrivateKey = function(enc) {
      return formatReturnValue(this.keys.getPrivate(), enc);
    };
    ECDH.prototype.setPublicKey = function(pub, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(pub)) {
        pub = new Buffer(pub, enc);
      }
      this.keys._importPublic(pub);
      return this;
    };
    ECDH.prototype.setPrivateKey = function(priv, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(priv)) {
        priv = new Buffer(priv, enc);
      }
      var _priv = new BN(priv);
      _priv = _priv.toString(16);
      this.keys = this.curve.genKeyPair();
      this.keys._importPrivate(_priv);
      return this;
    };
    function formatReturnValue(bn2, enc, len) {
      if (!Array.isArray(bn2)) {
        bn2 = bn2.toArray();
      }
      var buf = new Buffer(bn2);
      if (len && buf.length < len) {
        var zeros = new Buffer(len - buf.length);
        zeros.fill(0);
        buf = Buffer.concat([
          zeros,
          buf
        ]);
      }
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }
    return browser$2;
  }
  var browser$1 = {};
  var mgf;
  var hasRequiredMgf;
  function requireMgf() {
    if (hasRequiredMgf) return mgf;
    hasRequiredMgf = 1;
    var createHash = requireBrowser$9();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    mgf = function(seed, len) {
      var t3 = Buffer2.alloc(0);
      var i3 = 0;
      var c3;
      while (t3.length < len) {
        c3 = i2ops(i3++);
        t3 = Buffer2.concat([
          t3,
          createHash("sha1").update(seed).update(c3).digest()
        ]);
      }
      return t3.slice(0, len);
    };
    function i2ops(c3) {
      var out = Buffer2.allocUnsafe(4);
      out.writeUInt32BE(c3, 0);
      return out;
    }
    return mgf;
  }
  var xor;
  var hasRequiredXor;
  function requireXor() {
    if (hasRequiredXor) return xor;
    hasRequiredXor = 1;
    xor = function xor2(a3, b3) {
      var len = a3.length;
      var i3 = -1;
      while (++i3 < len) {
        a3[i3] ^= b3[i3];
      }
      return a3;
    };
    return xor;
  }
  var withPublic_1;
  var hasRequiredWithPublic;
  function requireWithPublic() {
    if (hasRequiredWithPublic) return withPublic_1;
    hasRequiredWithPublic = 1;
    var BN = requireBn$1();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function withPublic(paddedMsg, key2) {
      return Buffer2.from(paddedMsg.toRed(BN.mont(key2.modulus)).redPow(new BN(key2.publicExponent)).fromRed().toArray());
    }
    withPublic_1 = withPublic;
    return withPublic_1;
  }
  var publicEncrypt;
  var hasRequiredPublicEncrypt;
  function requirePublicEncrypt() {
    if (hasRequiredPublicEncrypt) return publicEncrypt;
    hasRequiredPublicEncrypt = 1;
    var parseKeys = requireParseAsn1();
    var randomBytes = requireBrowser$a();
    var createHash = requireBrowser$9();
    var mgf2 = requireMgf();
    var xor2 = requireXor();
    var BN = requireBn$1();
    var withPublic = requireWithPublic();
    var crt = requireBrowserifyRsa();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    publicEncrypt = function publicEncrypt2(publicKey, msg, reverse) {
      var padding;
      if (publicKey.padding) {
        padding = publicKey.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }
      var key2 = parseKeys(publicKey);
      var paddedMsg;
      if (padding === 4) {
        paddedMsg = oaep(key2, msg);
      } else if (padding === 1) {
        paddedMsg = pkcs1(key2, msg, reverse);
      } else if (padding === 3) {
        paddedMsg = new BN(msg);
        if (paddedMsg.cmp(key2.modulus) >= 0) {
          throw new Error("data too long for modulus");
        }
      } else {
        throw new Error("unknown padding");
      }
      if (reverse) {
        return crt(paddedMsg, key2);
      } else {
        return withPublic(paddedMsg, key2);
      }
    };
    function oaep(key2, msg) {
      var k3 = key2.modulus.byteLength();
      var mLen = msg.length;
      var iHash = createHash("sha1").update(Buffer2.alloc(0)).digest();
      var hLen = iHash.length;
      var hLen2 = 2 * hLen;
      if (mLen > k3 - hLen2 - 2) {
        throw new Error("message too long");
      }
      var ps = Buffer2.alloc(k3 - mLen - hLen2 - 2);
      var dblen = k3 - hLen - 1;
      var seed = randomBytes(hLen);
      var maskedDb = xor2(Buffer2.concat([
        iHash,
        ps,
        Buffer2.alloc(1, 1),
        msg
      ], dblen), mgf2(seed, dblen));
      var maskedSeed = xor2(seed, mgf2(maskedDb, hLen));
      return new BN(Buffer2.concat([
        Buffer2.alloc(1),
        maskedSeed,
        maskedDb
      ], k3));
    }
    function pkcs1(key2, msg, reverse) {
      var mLen = msg.length;
      var k3 = key2.modulus.byteLength();
      if (mLen > k3 - 11) {
        throw new Error("message too long");
      }
      var ps;
      if (reverse) {
        ps = Buffer2.alloc(k3 - mLen - 3, 255);
      } else {
        ps = nonZero(k3 - mLen - 3);
      }
      return new BN(Buffer2.concat([
        Buffer2.from([
          0,
          reverse ? 1 : 2
        ]),
        ps,
        Buffer2.alloc(1),
        msg
      ], k3));
    }
    function nonZero(len) {
      var out = Buffer2.allocUnsafe(len);
      var i3 = 0;
      var cache = randomBytes(len * 2);
      var cur = 0;
      var num;
      while (i3 < len) {
        if (cur === cache.length) {
          cache = randomBytes(len * 2);
          cur = 0;
        }
        num = cache[cur++];
        if (num) {
          out[i3++] = num;
        }
      }
      return out;
    }
    return publicEncrypt;
  }
  var privateDecrypt;
  var hasRequiredPrivateDecrypt;
  function requirePrivateDecrypt() {
    if (hasRequiredPrivateDecrypt) return privateDecrypt;
    hasRequiredPrivateDecrypt = 1;
    var parseKeys = requireParseAsn1();
    var mgf2 = requireMgf();
    var xor2 = requireXor();
    var BN = requireBn$1();
    var crt = requireBrowserifyRsa();
    var createHash = requireBrowser$9();
    var withPublic = requireWithPublic();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    privateDecrypt = function privateDecrypt2(privateKey, enc, reverse) {
      var padding;
      if (privateKey.padding) {
        padding = privateKey.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }
      var key2 = parseKeys(privateKey);
      var k3 = key2.modulus.byteLength();
      if (enc.length > k3 || new BN(enc).cmp(key2.modulus) >= 0) {
        throw new Error("decryption error");
      }
      var msg;
      if (reverse) {
        msg = withPublic(new BN(enc), key2);
      } else {
        msg = crt(enc, key2);
      }
      var zBuffer = Buffer2.alloc(k3 - msg.length);
      msg = Buffer2.concat([
        zBuffer,
        msg
      ], k3);
      if (padding === 4) {
        return oaep(key2, msg);
      } else if (padding === 1) {
        return pkcs1(key2, msg, reverse);
      } else if (padding === 3) {
        return msg;
      } else {
        throw new Error("unknown padding");
      }
    };
    function oaep(key2, msg) {
      var k3 = key2.modulus.byteLength();
      var iHash = createHash("sha1").update(Buffer2.alloc(0)).digest();
      var hLen = iHash.length;
      if (msg[0] !== 0) {
        throw new Error("decryption error");
      }
      var maskedSeed = msg.slice(1, hLen + 1);
      var maskedDb = msg.slice(hLen + 1);
      var seed = xor2(maskedSeed, mgf2(maskedDb, hLen));
      var db = xor2(maskedDb, mgf2(seed, k3 - hLen - 1));
      if (compare(iHash, db.slice(0, hLen))) {
        throw new Error("decryption error");
      }
      var i3 = hLen;
      while (db[i3] === 0) {
        i3++;
      }
      if (db[i3++] !== 1) {
        throw new Error("decryption error");
      }
      return db.slice(i3);
    }
    function pkcs1(key2, msg, reverse) {
      var p1 = msg.slice(0, 2);
      var i3 = 2;
      var status = 0;
      while (msg[i3++] !== 0) {
        if (i3 >= msg.length) {
          status++;
          break;
        }
      }
      var ps = msg.slice(2, i3 - 1);
      if (p1.toString("hex") !== "0002" && !reverse || p1.toString("hex") !== "0001" && reverse) {
        status++;
      }
      if (ps.length < 8) {
        status++;
      }
      if (status) {
        throw new Error("decryption error");
      }
      return msg.slice(i3);
    }
    function compare(a3, b3) {
      a3 = Buffer2.from(a3);
      b3 = Buffer2.from(b3);
      var dif = 0;
      var len = a3.length;
      if (a3.length !== b3.length) {
        dif++;
        len = Math.min(a3.length, b3.length);
      }
      var i3 = -1;
      while (++i3 < len) {
        dif += a3[i3] ^ b3[i3];
      }
      return dif;
    }
    return privateDecrypt;
  }
  var hasRequiredBrowser$1;
  function requireBrowser$1() {
    if (hasRequiredBrowser$1) return browser$1;
    hasRequiredBrowser$1 = 1;
    (function(exports2) {
      exports2.publicEncrypt = requirePublicEncrypt();
      exports2.privateDecrypt = requirePrivateDecrypt();
      exports2.privateEncrypt = function privateEncrypt(key2, buf) {
        return exports2.publicEncrypt(key2, buf, true);
      };
      exports2.publicDecrypt = function publicDecrypt(key2, buf) {
        return exports2.privateDecrypt(key2, buf, true);
      };
    })(browser$1);
    return browser$1;
  }
  var browser = {};
  var hasRequiredBrowser;
  function requireBrowser() {
    if (hasRequiredBrowser) return browser;
    hasRequiredBrowser = 1;
    function oldBrowser() {
      throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
    }
    var safeBuffer2 = requireSafeBuffer$1();
    var randombytes = requireBrowser$a();
    var Buffer2 = safeBuffer2.Buffer;
    var kBufferMaxLength = safeBuffer2.kMaxLength;
    var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
    var kMaxUint32 = Math.pow(2, 32) - 1;
    function assertOffset(offset, length2) {
      if (typeof offset !== "number" || offset !== offset) {
        throw new TypeError("offset must be a number");
      }
      if (offset > kMaxUint32 || offset < 0) {
        throw new TypeError("offset must be a uint32");
      }
      if (offset > kBufferMaxLength || offset > length2) {
        throw new RangeError("offset out of range");
      }
    }
    function assertSize(size, offset, length2) {
      if (typeof size !== "number" || size !== size) {
        throw new TypeError("size must be a number");
      }
      if (size > kMaxUint32 || size < 0) {
        throw new TypeError("size must be a uint32");
      }
      if (size + offset > length2 || size > kBufferMaxLength) {
        throw new RangeError("buffer too small");
      }
    }
    if (crypto && crypto.getRandomValues || !process$1.browser) {
      browser.randomFill = randomFill;
      browser.randomFillSync = randomFillSync;
    } else {
      browser.randomFill = oldBrowser;
      browser.randomFillSync = oldBrowser;
    }
    function randomFill(buf, offset, size, cb) {
      if (!Buffer2.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      }
      if (typeof offset === "function") {
        cb = offset;
        offset = 0;
        size = buf.length;
      } else if (typeof size === "function") {
        cb = size;
        size = buf.length - offset;
      } else if (typeof cb !== "function") {
        throw new TypeError('"cb" argument must be a function');
      }
      assertOffset(offset, buf.length);
      assertSize(size, offset, buf.length);
      return actualFill(buf, offset, size, cb);
    }
    function actualFill(buf, offset, size, cb) {
      if (process$1.browser) {
        var ourBuf = buf.buffer;
        var uint = new Uint8Array(ourBuf, offset, size);
        crypto.getRandomValues(uint);
        if (cb) {
          process$1.nextTick(function() {
            cb(null, buf);
          });
          return;
        }
        return buf;
      }
      if (cb) {
        randombytes(size, function(err, bytes2) {
          if (err) {
            return cb(err);
          }
          bytes2.copy(buf, offset);
          cb(null, buf);
        });
        return;
      }
      var bytes = randombytes(size);
      bytes.copy(buf, offset);
      return buf;
    }
    function randomFillSync(buf, offset, size) {
      if (typeof offset === "undefined") {
        offset = 0;
      }
      if (!Buffer2.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      }
      assertOffset(offset, buf.length);
      if (size === void 0) size = buf.length - offset;
      assertSize(size, offset, buf.length);
      return actualFill(buf, offset, size);
    }
    return browser;
  }
  var hasRequiredCryptoBrowserify;
  function requireCryptoBrowserify() {
    if (hasRequiredCryptoBrowserify) return cryptoBrowserify;
    hasRequiredCryptoBrowserify = 1;
    cryptoBrowserify.randomBytes = cryptoBrowserify.rng = cryptoBrowserify.pseudoRandomBytes = cryptoBrowserify.prng = requireBrowser$a();
    cryptoBrowserify.createHash = cryptoBrowserify.Hash = requireBrowser$9();
    cryptoBrowserify.createHmac = cryptoBrowserify.Hmac = requireBrowser$8();
    var algos2 = requireAlgos();
    var algoKeys = Object.keys(algos2);
    var hashes = [
      "sha1",
      "sha224",
      "sha256",
      "sha384",
      "sha512",
      "md5",
      "rmd160"
    ].concat(algoKeys);
    cryptoBrowserify.getHashes = function() {
      return hashes;
    };
    var p3 = requireBrowser$7();
    cryptoBrowserify.pbkdf2 = p3.pbkdf2;
    cryptoBrowserify.pbkdf2Sync = p3.pbkdf2Sync;
    var aes2 = requireBrowser$5();
    cryptoBrowserify.Cipher = aes2.Cipher;
    cryptoBrowserify.createCipher = aes2.createCipher;
    cryptoBrowserify.Cipheriv = aes2.Cipheriv;
    cryptoBrowserify.createCipheriv = aes2.createCipheriv;
    cryptoBrowserify.Decipher = aes2.Decipher;
    cryptoBrowserify.createDecipher = aes2.createDecipher;
    cryptoBrowserify.Decipheriv = aes2.Decipheriv;
    cryptoBrowserify.createDecipheriv = aes2.createDecipheriv;
    cryptoBrowserify.getCiphers = aes2.getCiphers;
    cryptoBrowserify.listCiphers = aes2.listCiphers;
    var dh2 = requireBrowser$4();
    cryptoBrowserify.DiffieHellmanGroup = dh2.DiffieHellmanGroup;
    cryptoBrowserify.createDiffieHellmanGroup = dh2.createDiffieHellmanGroup;
    cryptoBrowserify.getDiffieHellman = dh2.getDiffieHellman;
    cryptoBrowserify.createDiffieHellman = dh2.createDiffieHellman;
    cryptoBrowserify.DiffieHellman = dh2.DiffieHellman;
    var sign2 = requireBrowser$3();
    cryptoBrowserify.createSign = sign2.createSign;
    cryptoBrowserify.Sign = sign2.Sign;
    cryptoBrowserify.createVerify = sign2.createVerify;
    cryptoBrowserify.Verify = sign2.Verify;
    cryptoBrowserify.createECDH = requireBrowser$2();
    var publicEncrypt2 = requireBrowser$1();
    cryptoBrowserify.publicEncrypt = publicEncrypt2.publicEncrypt;
    cryptoBrowserify.privateEncrypt = publicEncrypt2.privateEncrypt;
    cryptoBrowserify.publicDecrypt = publicEncrypt2.publicDecrypt;
    cryptoBrowserify.privateDecrypt = publicEncrypt2.privateDecrypt;
    var rf = requireBrowser();
    cryptoBrowserify.randomFill = rf.randomFill;
    cryptoBrowserify.randomFillSync = rf.randomFillSync;
    cryptoBrowserify.createCredentials = function() {
      throw new Error("sorry, createCredentials is not implemented yet\nwe accept pull requests\nhttps://github.com/browserify/crypto-browserify");
    };
    cryptoBrowserify.constants = {
      DH_CHECK_P_NOT_SAFE_PRIME: 2,
      DH_CHECK_P_NOT_PRIME: 1,
      DH_UNABLE_TO_CHECK_GENERATOR: 4,
      DH_NOT_SUITABLE_GENERATOR: 8,
      NPN_ENABLED: 1,
      ALPN_ENABLED: 1,
      RSA_PKCS1_PADDING: 1,
      RSA_SSLV23_PADDING: 2,
      RSA_NO_PADDING: 3,
      RSA_PKCS1_OAEP_PADDING: 4,
      RSA_X931_PADDING: 5,
      RSA_PKCS1_PSS_PADDING: 6,
      POINT_CONVERSION_COMPRESSED: 2,
      POINT_CONVERSION_UNCOMPRESSED: 4,
      POINT_CONVERSION_HYBRID: 6
    };
    return cryptoBrowserify;
  }
  requireCryptoBrowserify();
  const INTERNAL_FEATURES = Symbol();
  function parseVariantFormatString(input) {
    let parts = [];
    let current = "";
    let depth = 0;
    for (let idx = 0; idx < input.length; idx++) {
      let char = input[idx];
      if (char === "\\") {
        current += "\\" + input[++idx];
      } else if (char === "{") {
        ++depth;
        parts.push(current.trim());
        current = "";
      } else if (char === "}") {
        if (--depth < 0) {
          throw new Error(`Your { and } are unbalanced.`);
        }
        parts.push(current.trim());
        current = "";
      } else {
        current += char;
      }
    }
    if (current.length > 0) {
      parts.push(current.trim());
    }
    parts = parts.filter((part) => part !== "");
    return parts;
  }
  function isValidVariantFormatString(format) {
    return format.startsWith("@") || format.includes("&");
  }
  function parseVariant(variant) {
    variant = variant.replace(/\n+/g, "").replace(/\s{1,}/g, " ").trim();
    let fns = parseVariantFormatString(variant).map((str) => {
      if (!str.startsWith("@")) {
        return ({ format }) => format(str);
      }
      let [, name, params] = /@(\S*)( .+|[({].*)?/g.exec(str);
      return ({ wrap }) => wrap(postcss.atRule({
        name,
        params: (params == null ? void 0 : params.trim()) ?? ""
      }));
    }).reverse();
    return (api2) => {
      for (let fn2 of fns) {
        fn2(api2);
      }
    };
  }
  function applyImportantSelector(selector, important) {
    let sel = parser$1().astSync(selector);
    sel.each((sel2) => {
      let shouldWrap = sel2.nodes.some((node2) => node2.type === "combinator");
      if (shouldWrap) {
        sel2.nodes = [
          parser$1.pseudo({
            value: ":is",
            nodes: [
              sel2.clone()
            ]
          })
        ];
      }
      movePseudos(sel2);
    });
    return `${important} ${sel.toString()}`;
  }
  let classNameParser = parser$1((selectors) => {
    return selectors.first.filter(({ type }) => type === "class").pop().value;
  });
  function getClassNameFromSelector(selector) {
    return classNameParser.transformSync(selector);
  }
  function* candidatePermutations(candidate) {
    let lastIndex = Infinity;
    while (lastIndex >= 0) {
      let dashIdx;
      let wasSlash = false;
      if (lastIndex === Infinity && candidate.endsWith("]")) {
        let bracketIdx = candidate.indexOf("[");
        if (candidate[bracketIdx - 1] === "-") {
          dashIdx = bracketIdx - 1;
        } else if (candidate[bracketIdx - 1] === "/") {
          dashIdx = bracketIdx - 1;
          wasSlash = true;
        } else {
          dashIdx = -1;
        }
      } else if (lastIndex === Infinity && candidate.includes("/")) {
        dashIdx = candidate.lastIndexOf("/");
        wasSlash = true;
      } else {
        dashIdx = candidate.lastIndexOf("-", lastIndex);
      }
      if (dashIdx < 0) {
        break;
      }
      let prefix2 = candidate.slice(0, dashIdx);
      let modifier = candidate.slice(wasSlash ? dashIdx : dashIdx + 1);
      lastIndex = dashIdx - 1;
      if (prefix2 === "" || modifier === "/") {
        continue;
      }
      yield [
        prefix2,
        modifier
      ];
    }
  }
  function applyPrefix(matches, context) {
    if (matches.length === 0 || context.tailwindConfig.prefix === "") {
      return matches;
    }
    for (let match of matches) {
      let [meta] = match;
      if (meta.options.respectPrefix) {
        let container = postcss.root({
          nodes: [
            match[1].clone()
          ]
        });
        let classCandidate = match[1].raws.tailwind.classCandidate;
        container.walkRules((r3) => {
          let shouldPrependNegative = classCandidate.startsWith("-");
          r3.selector = prefixSelector(context.tailwindConfig.prefix, r3.selector, shouldPrependNegative);
        });
        match[1] = container.nodes[0];
      }
    }
    return matches;
  }
  function applyImportant(matches, classCandidate) {
    if (matches.length === 0) {
      return matches;
    }
    let result = [];
    function isInKeyframes(rule) {
      return rule.parent && rule.parent.type === "atrule" && rule.parent.name === "keyframes";
    }
    for (let [meta, rule] of matches) {
      let container = postcss.root({
        nodes: [
          rule.clone()
        ]
      });
      container.walkRules((r3) => {
        if (isInKeyframes(r3)) {
          return;
        }
        let ast = parser$1().astSync(r3.selector);
        ast.each((sel) => eliminateIrrelevantSelectors(sel, classCandidate));
        updateAllClasses(ast, (className) => className === classCandidate ? `!${className}` : className);
        r3.selector = ast.toString();
        r3.walkDecls((d3) => d3.important = true);
      });
      result.push([
        {
          ...meta,
          important: true
        },
        container.nodes[0]
      ]);
    }
    return result;
  }
  function applyVariant(variant, matches, context) {
    var _a;
    if (matches.length === 0) {
      return matches;
    }
    let args = {
      modifier: null,
      value: NONE
    };
    {
      let [baseVariant, ...modifiers] = splitAtTopLevelOnly(variant, "/");
      if (modifiers.length > 1) {
        baseVariant = baseVariant + "/" + modifiers.slice(0, -1).join("/");
        modifiers = modifiers.slice(-1);
      }
      if (modifiers.length && !context.variantMap.has(variant)) {
        variant = baseVariant;
        args.modifier = modifiers[0];
        if (!flagEnabled(context.tailwindConfig, "generalizedModifiers")) {
          return [];
        }
      }
    }
    if (variant.endsWith("]") && !variant.startsWith("[")) {
      let match = /(.)(-?)\[(.*)\]/g.exec(variant);
      if (match) {
        let [, char, separator, value] = match;
        if (char === "@" && separator === "-") return [];
        if (char !== "@" && separator === "") return [];
        variant = variant.replace(`${separator}[${value}]`, "");
        args.value = value;
      }
    }
    if (isArbitraryValue(variant) && !context.variantMap.has(variant)) {
      let sort = context.offsets.recordVariant(variant);
      let selector = normalize(variant.slice(1, -1));
      let selectors = splitAtTopLevelOnly(selector, ",");
      if (selectors.length > 1) {
        return [];
      }
      if (!selectors.every(isValidVariantFormatString)) {
        return [];
      }
      let records = selectors.map((sel, idx) => [
        context.offsets.applyParallelOffset(sort, idx),
        parseVariant(sel.trim())
      ]);
      context.variantMap.set(variant, records);
    }
    if (context.variantMap.has(variant)) {
      let isArbitraryVariant = isArbitraryValue(variant);
      let internalFeatures = ((_a = context.variantOptions.get(variant)) == null ? void 0 : _a[INTERNAL_FEATURES]) ?? {};
      let variantFunctionTuples = context.variantMap.get(variant).slice();
      let result = [];
      let respectPrefix = (() => {
        if (isArbitraryVariant) return false;
        if (internalFeatures.respectPrefix === false) return false;
        return true;
      })();
      for (let [meta, rule] of matches) {
        if (meta.layer === "user") {
          continue;
        }
        let container = postcss.root({
          nodes: [
            rule.clone()
          ]
        });
        for (let [variantSort, variantFunction, containerFromArray] of variantFunctionTuples) {
          let prepareBackup = function() {
            if (clone.raws.neededBackup) {
              return;
            }
            clone.raws.neededBackup = true;
            clone.walkRules((rule2) => rule2.raws.originalSelector = rule2.selector);
          }, modifySelectors = function(modifierFunction) {
            prepareBackup();
            clone.each((rule2) => {
              if (rule2.type !== "rule") {
                return;
              }
              rule2.selectors = rule2.selectors.map((selector) => {
                return modifierFunction({
                  get className() {
                    return getClassNameFromSelector(selector);
                  },
                  selector
                });
              });
            });
            return clone;
          };
          let clone = (containerFromArray ?? container).clone();
          let collectedFormats = [];
          let ruleWithVariant = variantFunction({
            get container() {
              prepareBackup();
              return clone;
            },
            separator: context.tailwindConfig.separator,
            modifySelectors,
            wrap(wrapper) {
              let nodes = clone.nodes;
              clone.removeAll();
              wrapper.append(nodes);
              clone.append(wrapper);
            },
            format(selectorFormat) {
              collectedFormats.push({
                format: selectorFormat,
                respectPrefix
              });
            },
            args
          });
          if (Array.isArray(ruleWithVariant)) {
            for (let [idx, variantFunction2] of ruleWithVariant.entries()) {
              variantFunctionTuples.push([
                context.offsets.applyParallelOffset(variantSort, idx),
                variantFunction2,
                clone.clone()
              ]);
            }
            continue;
          }
          if (typeof ruleWithVariant === "string") {
            collectedFormats.push({
              format: ruleWithVariant,
              respectPrefix
            });
          }
          if (ruleWithVariant === null) {
            continue;
          }
          if (clone.raws.neededBackup) {
            delete clone.raws.neededBackup;
            clone.walkRules((rule2) => {
              let before = rule2.raws.originalSelector;
              if (!before) return;
              delete rule2.raws.originalSelector;
              if (before === rule2.selector) return;
              let modified = rule2.selector;
              let rebuiltBase = parser$1((selectors) => {
                selectors.walkClasses((classNode) => {
                  classNode.value = `${variant}${context.tailwindConfig.separator}${classNode.value}`;
                });
              }).processSync(before);
              collectedFormats.push({
                format: modified.replace(rebuiltBase, "&"),
                respectPrefix
              });
              rule2.selector = before;
            });
          }
          clone.nodes[0].raws.tailwind = {
            ...clone.nodes[0].raws.tailwind,
            parentLayer: meta.layer
          };
          let withOffset = [
            {
              ...meta,
              sort: context.offsets.applyVariantOffset(meta.sort, variantSort, Object.assign(args, context.variantOptions.get(variant))),
              collectedFormats: (meta.collectedFormats ?? []).concat(collectedFormats)
            },
            clone.nodes[0]
          ];
          result.push(withOffset);
        }
      }
      return result;
    }
    return [];
  }
  function parseRules(rule, cache, options = {}) {
    if (!isPlainObject(rule) && !Array.isArray(rule)) {
      return [
        [
          rule
        ],
        options
      ];
    }
    if (Array.isArray(rule)) {
      return parseRules(rule[0], cache, rule[1]);
    }
    if (!cache.has(rule)) {
      cache.set(rule, parseObjectStyles(rule));
    }
    return [
      cache.get(rule),
      options
    ];
  }
  const IS_VALID_PROPERTY_NAME = /^[a-z_-]/;
  function isValidPropName(name) {
    return IS_VALID_PROPERTY_NAME.test(name);
  }
  function looksLikeUri(declaration) {
    if (!declaration.includes("://")) {
      return false;
    }
    try {
      const url2 = new URL(declaration);
      return url2.scheme !== "" && url2.host !== "";
    } catch (err) {
      return false;
    }
  }
  function isParsableNode(node2) {
    let isParsable = true;
    node2.walkDecls((decl) => {
      if (!isParsableCssValue(decl.prop, decl.value)) {
        isParsable = false;
        return false;
      }
    });
    return isParsable;
  }
  function isParsableCssValue(property, value) {
    if (looksLikeUri(`${property}:${value}`)) {
      return false;
    }
    try {
      postcss.parse(`a{${property}:${value}}`).toResult();
      return true;
    } catch (err) {
      return false;
    }
  }
  function extractArbitraryProperty(classCandidate, context) {
    let [, property, value] = classCandidate.match(/^\[([a-zA-Z0-9-_]+):(\S+)\]$/) ?? [];
    if (value === void 0) {
      return null;
    }
    if (!isValidPropName(property)) {
      return null;
    }
    if (!isSyntacticallyValidPropertyValue(value)) {
      return null;
    }
    let normalized = normalize(value, {
      property
    });
    if (!isParsableCssValue(property, normalized)) {
      return null;
    }
    let sort = context.offsets.arbitraryProperty(classCandidate);
    return [
      [
        {
          sort,
          layer: "utilities",
          options: {
            respectImportant: true
          }
        },
        () => ({
          [asClass(classCandidate)]: {
            [property]: normalized
          }
        })
      ]
    ];
  }
  function* resolveMatchedPlugins(classCandidate, context) {
    if (context.candidateRuleMap.has(classCandidate)) {
      yield [
        context.candidateRuleMap.get(classCandidate),
        "DEFAULT"
      ];
    }
    yield* function* (arbitraryPropertyRule) {
      if (arbitraryPropertyRule !== null) {
        yield [
          arbitraryPropertyRule,
          "DEFAULT"
        ];
      }
    }(extractArbitraryProperty(classCandidate, context));
    let candidatePrefix = classCandidate;
    let negative = false;
    const twConfigPrefix = context.tailwindConfig.prefix;
    const twConfigPrefixLen = twConfigPrefix.length;
    const hasMatchingPrefix = candidatePrefix.startsWith(twConfigPrefix) || candidatePrefix.startsWith(`-${twConfigPrefix}`);
    if (candidatePrefix[twConfigPrefixLen] === "-" && hasMatchingPrefix) {
      negative = true;
      candidatePrefix = twConfigPrefix + candidatePrefix.slice(twConfigPrefixLen + 1);
    }
    if (negative && context.candidateRuleMap.has(candidatePrefix)) {
      yield [
        context.candidateRuleMap.get(candidatePrefix),
        "-DEFAULT"
      ];
    }
    for (let [prefix2, modifier] of candidatePermutations(candidatePrefix)) {
      if (context.candidateRuleMap.has(prefix2)) {
        yield [
          context.candidateRuleMap.get(prefix2),
          negative ? `-${modifier}` : modifier
        ];
      }
    }
  }
  function splitWithSeparator(input, separator) {
    if (input === NOT_ON_DEMAND) {
      return [
        NOT_ON_DEMAND
      ];
    }
    return splitAtTopLevelOnly(input, separator);
  }
  function* recordCandidates(matches, classCandidate) {
    var _a;
    for (const match of matches) {
      match[1].raws.tailwind = {
        ...match[1].raws.tailwind,
        classCandidate,
        preserveSource: ((_a = match[0].options) == null ? void 0 : _a.preserveSource) ?? false
      };
      yield match;
    }
  }
  function* resolveMatches(candidate, context) {
    var _a;
    let separator = context.tailwindConfig.separator;
    let [classCandidate, ...variants] = splitWithSeparator(candidate, separator).reverse();
    let important = false;
    if (classCandidate.startsWith("!")) {
      important = true;
      classCandidate = classCandidate.slice(1);
    }
    for (let matchedPlugins of resolveMatchedPlugins(classCandidate, context)) {
      let matches = [];
      let typesByMatches = /* @__PURE__ */ new Map();
      let [plugins, modifier] = matchedPlugins;
      let isOnlyPlugin = plugins.length === 1;
      for (let [sort, plugin] of plugins) {
        let matchesPerPlugin = [];
        if (typeof plugin === "function") {
          for (let ruleSet of [].concat(plugin(modifier, {
            isOnlyPlugin
          }))) {
            let [rules, options] = parseRules(ruleSet, context.postCssNodeCache);
            for (let rule of rules) {
              matchesPerPlugin.push([
                {
                  ...sort,
                  options: {
                    ...sort.options,
                    ...options
                  }
                },
                rule
              ]);
            }
          }
        } else if (modifier === "DEFAULT" || modifier === "-DEFAULT") {
          let ruleSet = plugin;
          let [rules, options] = parseRules(ruleSet, context.postCssNodeCache);
          for (let rule of rules) {
            matchesPerPlugin.push([
              {
                ...sort,
                options: {
                  ...sort.options,
                  ...options
                }
              },
              rule
            ]);
          }
        }
        if (matchesPerPlugin.length > 0) {
          let matchingTypes = Array.from(getMatchingTypes(((_a = sort.options) == null ? void 0 : _a.types) ?? [], modifier, sort.options ?? {}, context.tailwindConfig)).map(([_3, type]) => type);
          if (matchingTypes.length > 0) {
            typesByMatches.set(matchesPerPlugin, matchingTypes);
          }
          matches.push(matchesPerPlugin);
        }
      }
      if (isArbitraryValue(modifier)) {
        if (matches.length > 1) {
          let findFallback = function(matches2) {
            if (matches2.length === 1) {
              return matches2[0];
            }
            return matches2.find((rules) => {
              let matchingTypes = typesByMatches.get(rules);
              return rules.some(([{ options }, rule]) => {
                if (!isParsableNode(rule)) {
                  return false;
                }
                return options.types.some(({ type, preferOnConflict }) => matchingTypes.includes(type) && preferOnConflict);
              });
            });
          };
          let [withAny, withoutAny] = matches.reduce((group, plugin) => {
            let hasAnyType = plugin.some(([{ options }]) => options.types.some(({ type }) => type === "any"));
            if (hasAnyType) {
              group[0].push(plugin);
            } else {
              group[1].push(plugin);
            }
            return group;
          }, [
            [],
            []
          ]);
          let fallback = findFallback(withoutAny) ?? findFallback(withAny);
          if (fallback) {
            matches = [
              fallback
            ];
          } else {
            let typesPerPlugin = matches.map((match) => /* @__PURE__ */ new Set([
              ...typesByMatches.get(match) ?? []
            ]));
            for (let pluginTypes of typesPerPlugin) {
              for (let type of pluginTypes) {
                let removeFromOwnGroup = false;
                for (let otherGroup of typesPerPlugin) {
                  if (pluginTypes === otherGroup) continue;
                  if (otherGroup.has(type)) {
                    otherGroup.delete(type);
                    removeFromOwnGroup = true;
                  }
                }
                if (removeFromOwnGroup) pluginTypes.delete(type);
              }
            }
            let messages = [];
            for (let [idx, group] of typesPerPlugin.entries()) {
              for (let type of group) {
                let rules = matches[idx].map(([, rule]) => rule).flat().map((rule) => rule.toString().split("\n").slice(1, -1).map((line) => line.trim()).map((x3) => `      ${x3}`).join("\n")).join("\n\n");
                messages.push(`  Use \`${candidate.replace("[", `[${type}:`)}\` for \`${rules.trim()}\``);
                break;
              }
            }
            log$1.warn([
              `The class \`${candidate}\` is ambiguous and matches multiple utilities.`,
              ...messages,
              `If this is content and not a class, replace it with \`${candidate.replace("[", "&lsqb;").replace("]", "&rsqb;")}\` to silence this warning.`
            ]);
            continue;
          }
        }
        matches = matches.map((list) => list.filter((match) => isParsableNode(match[1])));
      }
      matches = matches.flat();
      matches = Array.from(recordCandidates(matches, classCandidate));
      matches = applyPrefix(matches, context);
      if (important) {
        matches = applyImportant(matches, classCandidate);
      }
      for (let variant of variants) {
        matches = applyVariant(variant, matches, context);
      }
      for (let match of matches) {
        match[1].raws.tailwind = {
          ...match[1].raws.tailwind,
          candidate
        };
        match = applyFinalFormat(match, {
          context,
          candidate
        });
        if (match === null) {
          continue;
        }
        yield match;
      }
    }
  }
  function applyFinalFormat(match, { context, candidate }) {
    if (!match[0].collectedFormats) {
      return match;
    }
    let isValid = true;
    let finalFormat;
    try {
      finalFormat = formatVariantSelector(match[0].collectedFormats, {
        context,
        candidate
      });
    } catch {
      return null;
    }
    let container = postcss.root({
      nodes: [
        match[1].clone()
      ]
    });
    container.walkRules((rule) => {
      if (inKeyframes(rule)) {
        return;
      }
      try {
        let selector = finalizeSelector(rule.selector, finalFormat, {
          candidate,
          context
        });
        if (selector === null) {
          rule.remove();
          return;
        }
        rule.selector = selector;
      } catch {
        isValid = false;
        return false;
      }
    });
    if (!isValid) {
      return null;
    }
    if (container.nodes.length === 0) {
      return null;
    }
    match[1] = container.nodes[0];
    return match;
  }
  function inKeyframes(rule) {
    return rule.parent && rule.parent.type === "atrule" && rule.parent.name === "keyframes";
  }
  function getImportantStrategy(important) {
    if (important === true) {
      return (rule) => {
        if (inKeyframes(rule)) {
          return;
        }
        rule.walkDecls((d3) => {
          if (d3.parent.type === "rule" && !inKeyframes(d3.parent)) {
            d3.important = true;
          }
        });
      };
    }
    if (typeof important === "string") {
      return (rule) => {
        if (inKeyframes(rule)) {
          return;
        }
        rule.selectors = rule.selectors.map((selector) => {
          return applyImportantSelector(selector, important);
        });
      };
    }
  }
  function generateRules$1(candidates, context, isSorting = false) {
    let allRules = [];
    let strategy = getImportantStrategy(context.tailwindConfig.important);
    for (let candidate of candidates) {
      if (context.notClassCache.has(candidate)) {
        continue;
      }
      if (context.candidateRuleCache.has(candidate)) {
        allRules = allRules.concat(Array.from(context.candidateRuleCache.get(candidate)));
        continue;
      }
      let matches = Array.from(resolveMatches(candidate, context));
      if (matches.length === 0) {
        context.notClassCache.add(candidate);
        continue;
      }
      context.classCache.set(candidate, matches);
      let rules = context.candidateRuleCache.get(candidate) ?? /* @__PURE__ */ new Set();
      context.candidateRuleCache.set(candidate, rules);
      for (const match of matches) {
        let [{ sort, options }, rule] = match;
        if (options.respectImportant && strategy) {
          let container = postcss.root({
            nodes: [
              rule.clone()
            ]
          });
          container.walkRules(strategy);
          rule = container.nodes[0];
        }
        let newEntry = [
          sort,
          isSorting ? rule.clone() : rule
        ];
        rules.add(newEntry);
        context.ruleCache.add(newEntry);
        allRules.push(newEntry);
      }
    }
    return allRules;
  }
  function isArbitraryValue(input) {
    return input.startsWith("[") && input.endsWith("]");
  }
  function extractClasses(node2) {
    let groups = /* @__PURE__ */ new Map();
    let container = postcss.root({
      nodes: [
        node2.clone()
      ]
    });
    container.walkRules((rule) => {
      parser$1((selectors) => {
        selectors.walkClasses((classSelector) => {
          let parentSelector = classSelector.parent.toString();
          let classes2 = groups.get(parentSelector);
          if (!classes2) {
            groups.set(parentSelector, classes2 = /* @__PURE__ */ new Set());
          }
          classes2.add(classSelector.value);
        });
      }).processSync(rule.selector);
    });
    let normalizedGroups = Array.from(groups.values(), (classes2) => Array.from(classes2));
    let classes = normalizedGroups.flat();
    return Object.assign(classes, {
      groups: normalizedGroups
    });
  }
  let selectorExtractor = parser$1();
  function extractSelectors(ruleSelectors) {
    return selectorExtractor.astSync(ruleSelectors);
  }
  function extractBaseCandidates(candidates, separator) {
    let baseClasses = /* @__PURE__ */ new Set();
    for (let candidate of candidates) {
      baseClasses.add(candidate.split(separator).pop());
    }
    return Array.from(baseClasses);
  }
  function prefix(context, selector) {
    let prefix2 = context.tailwindConfig.prefix;
    return typeof prefix2 === "function" ? prefix2(selector) : prefix2 + selector;
  }
  function* pathToRoot(node2) {
    yield node2;
    while (node2.parent) {
      yield node2.parent;
      node2 = node2.parent;
    }
  }
  function shallowClone(node2, overrides = {}) {
    let children = node2.nodes;
    node2.nodes = [];
    let tmp = node2.clone(overrides);
    node2.nodes = children;
    return tmp;
  }
  function nestedClone(node2) {
    for (let parent of pathToRoot(node2)) {
      if (node2 === parent) {
        continue;
      }
      if (parent.type === "root") {
        break;
      }
      node2 = shallowClone(parent, {
        nodes: [
          node2
        ]
      });
    }
    return node2;
  }
  function buildLocalApplyCache(root, context) {
    let cache = /* @__PURE__ */ new Map();
    root.walkRules((rule) => {
      var _a;
      for (let node2 of pathToRoot(rule)) {
        if (((_a = node2.raws.tailwind) == null ? void 0 : _a.layer) !== void 0) {
          return;
        }
      }
      let container = nestedClone(rule);
      let sort = context.offsets.create("user");
      for (let className of extractClasses(rule)) {
        let list = cache.get(className) || [];
        cache.set(className, list);
        list.push([
          {
            layer: "user",
            sort,
            important: false
          },
          container
        ]);
      }
    });
    return cache;
  }
  function buildApplyCache(applyCandidates, context) {
    for (let candidate of applyCandidates) {
      if (context.notClassCache.has(candidate) || context.applyClassCache.has(candidate)) {
        continue;
      }
      if (context.classCache.has(candidate)) {
        context.applyClassCache.set(candidate, context.classCache.get(candidate).map(([meta, rule]) => [
          meta,
          rule.clone()
        ]));
        continue;
      }
      let matches = Array.from(resolveMatches(candidate, context));
      if (matches.length === 0) {
        context.notClassCache.add(candidate);
        continue;
      }
      context.applyClassCache.set(candidate, matches);
    }
    return context.applyClassCache;
  }
  function lazyCache(buildCacheFn) {
    let cache = null;
    return {
      get: (name) => {
        cache = cache || buildCacheFn();
        return cache.get(name);
      },
      has: (name) => {
        cache = cache || buildCacheFn();
        return cache.has(name);
      }
    };
  }
  function combineCaches(caches) {
    return {
      get: (name) => caches.flatMap((cache) => cache.get(name) || []),
      has: (name) => caches.some((cache) => cache.has(name))
    };
  }
  function extractApplyCandidates(params) {
    let candidates = params.split(/[\s\t\n]+/g);
    if (candidates[candidates.length - 1] === "!important") {
      return [
        candidates.slice(0, -1),
        true
      ];
    }
    return [
      candidates,
      false
    ];
  }
  function processApply(root, context, localCache) {
    let applyCandidates = /* @__PURE__ */ new Set();
    let applies = [];
    root.walkAtRules("apply", (rule) => {
      let [candidates] = extractApplyCandidates(rule.params);
      for (let util2 of candidates) {
        applyCandidates.add(util2);
      }
      applies.push(rule);
    });
    if (applies.length === 0) {
      return;
    }
    let applyClassCache = combineCaches([
      localCache,
      buildApplyCache(applyCandidates, context)
    ]);
    function replaceSelector(selector, utilitySelectors, candidate) {
      let selectorList = extractSelectors(selector);
      let utilitySelectorsList = extractSelectors(utilitySelectors);
      let candidateList = extractSelectors(`.${escapeClassName(candidate)}`);
      let candidateClass = candidateList.nodes[0].nodes[0];
      selectorList.each((sel) => {
        let replaced = /* @__PURE__ */ new Set();
        utilitySelectorsList.each((utilitySelector) => {
          let hasReplaced = false;
          utilitySelector = utilitySelector.clone();
          utilitySelector.walkClasses((node2) => {
            if (node2.value !== candidateClass.value) {
              return;
            }
            if (hasReplaced) {
              return;
            }
            node2.replaceWith(...sel.nodes.map((node3) => node3.clone()));
            replaced.add(utilitySelector);
            hasReplaced = true;
          });
        });
        for (let sel2 of replaced) {
          let groups = [
            []
          ];
          for (let node2 of sel2.nodes) {
            if (node2.type === "combinator") {
              groups.push(node2);
              groups.push([]);
            } else {
              let last = groups[groups.length - 1];
              last.push(node2);
            }
          }
          sel2.nodes = [];
          for (let group of groups) {
            if (Array.isArray(group)) {
              group.sort((a3, b3) => {
                if (a3.type === "tag" && b3.type === "class") {
                  return -1;
                } else if (a3.type === "class" && b3.type === "tag") {
                  return 1;
                } else if (a3.type === "class" && b3.type === "pseudo" && b3.value.startsWith("::")) {
                  return -1;
                } else if (a3.type === "pseudo" && a3.value.startsWith("::") && b3.type === "class") {
                  return 1;
                }
                return 0;
              });
            }
            sel2.nodes = sel2.nodes.concat(group);
          }
        }
        sel.replaceWith(...replaced);
      });
      return selectorList.toString();
    }
    let perParentApplies = /* @__PURE__ */ new Map();
    for (let apply of applies) {
      let [candidates] = perParentApplies.get(apply.parent) || [
        [],
        apply.source
      ];
      perParentApplies.set(apply.parent, [
        candidates,
        apply.source
      ]);
      let [applyCandidates2, important] = extractApplyCandidates(apply.params);
      if (apply.parent.type === "atrule") {
        if (apply.parent.name === "screen") {
          let screenType = apply.parent.params;
          throw apply.error(`@apply is not supported within nested at-rules like @screen. We suggest you write this as @apply ${applyCandidates2.map((c3) => `${screenType}:${c3}`).join(" ")} instead.`);
        }
        throw apply.error(`@apply is not supported within nested at-rules like @${apply.parent.name}. You can fix this by un-nesting @${apply.parent.name}.`);
      }
      for (let applyCandidate of applyCandidates2) {
        if ([
          prefix(context, "group"),
          prefix(context, "peer")
        ].includes(applyCandidate)) {
          throw apply.error(`@apply should not be used with the '${applyCandidate}' utility`);
        }
        if (!applyClassCache.has(applyCandidate)) {
          throw apply.error(`The \`${applyCandidate}\` class does not exist. If \`${applyCandidate}\` is a custom class, make sure it is defined within a \`@layer\` directive.`);
        }
        let rules = applyClassCache.get(applyCandidate);
        for (let [, rule] of rules) {
          if (rule.type === "atrule") {
            continue;
          }
          rule.walkRules(() => {
            throw apply.error([
              `The \`${applyCandidate}\` class cannot be used with \`@apply\` because \`@apply\` does not currently support nested CSS.`,
              "Rewrite the selector without nesting or configure the `tailwindcss/nesting` plugin:",
              "https://tailwindcss.com/docs/using-with-preprocessors#nesting"
            ].join("\n"));
          });
        }
        candidates.push([
          applyCandidate,
          important,
          rules
        ]);
      }
    }
    for (let [parent, [candidates, atApplySource]] of perParentApplies) {
      let siblings = [];
      for (let [applyCandidate, important, rules] of candidates) {
        let potentialApplyCandidates = [
          applyCandidate,
          ...extractBaseCandidates([
            applyCandidate
          ], context.tailwindConfig.separator)
        ];
        for (let [meta, node2] of rules) {
          let parentClasses = extractClasses(parent);
          let nodeClasses = extractClasses(node2);
          nodeClasses = nodeClasses.groups.filter((classList) => classList.some((className) => potentialApplyCandidates.includes(className))).flat();
          nodeClasses = nodeClasses.concat(extractBaseCandidates(nodeClasses, context.tailwindConfig.separator));
          let intersects = parentClasses.some((selector) => nodeClasses.includes(selector));
          if (intersects) {
            throw node2.error(`You cannot \`@apply\` the \`${applyCandidate}\` utility here because it creates a circular dependency.`);
          }
          let root2 = postcss.root({
            nodes: [
              node2.clone()
            ]
          });
          root2.walk((node3) => {
            node3.source = atApplySource;
          });
          let canRewriteSelector = node2.type !== "atrule" || node2.type === "atrule" && node2.name !== "keyframes";
          if (canRewriteSelector) {
            root2.walkRules((rule) => {
              if (!extractClasses(rule).some((candidate) => candidate === applyCandidate)) {
                rule.remove();
                return;
              }
              let importantSelector = typeof context.tailwindConfig.important === "string" ? context.tailwindConfig.important : null;
              let isGenerated = parent.raws.tailwind !== void 0;
              let parentSelector = isGenerated && importantSelector && parent.selector.indexOf(importantSelector) === 0 ? parent.selector.slice(importantSelector.length) : parent.selector;
              if (parentSelector === "") {
                parentSelector = parent.selector;
              }
              rule.selector = replaceSelector(parentSelector, rule.selector, applyCandidate);
              if (importantSelector && parentSelector !== parent.selector) {
                rule.selector = applyImportantSelector(rule.selector, importantSelector);
              }
              rule.walkDecls((d3) => {
                d3.important = meta.important || important;
              });
              let selector = parser$1().astSync(rule.selector);
              selector.each((sel) => movePseudos(sel));
              rule.selector = selector.toString();
            });
          }
          if (!root2.nodes[0]) {
            continue;
          }
          siblings.push([
            meta.sort,
            root2.nodes[0]
          ]);
        }
      }
      let nodes = context.offsets.sort(siblings).map((s3) => s3[1]);
      parent.after(nodes);
    }
    for (let apply of applies) {
      if (apply.parent.nodes.length > 1) {
        apply.remove();
      } else {
        apply.parent.remove();
      }
    }
    processApply(root, context, localCache);
  }
  function expandApplyAtRules(context) {
    return (root) => {
      let localCache = lazyCache(() => buildLocalApplyCache(root, context));
      processApply(root, context, localCache);
    };
  }
  class FullTextDocument {
    constructor(uri, languageId, version2, content) {
      this._uri = uri;
      this._languageId = languageId;
      this._version = version2;
      this._content = content;
      this._lineOffsets = void 0;
    }
    get uri() {
      return this._uri;
    }
    get languageId() {
      return this._languageId;
    }
    get version() {
      return this._version;
    }
    getText(range) {
      if (range) {
        const start = this.offsetAt(range.start);
        const end = this.offsetAt(range.end);
        return this._content.substring(start, end);
      }
      return this._content;
    }
    update(changes, version2) {
      for (const change of changes) {
        if (FullTextDocument.isIncremental(change)) {
          const range = getWellformedRange(change.range);
          const startOffset = this.offsetAt(range.start);
          const endOffset = this.offsetAt(range.end);
          this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
          const startLine = Math.max(range.start.line, 0);
          const endLine = Math.max(range.end.line, 0);
          let lineOffsets = this._lineOffsets;
          const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
          if (endLine - startLine === addedLineOffsets.length) {
            for (let i3 = 0, len = addedLineOffsets.length; i3 < len; i3++) {
              lineOffsets[i3 + startLine + 1] = addedLineOffsets[i3];
            }
          } else {
            if (addedLineOffsets.length < 1e4) {
              lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);
            } else {
              this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
            }
          }
          const diff = change.text.length - (endOffset - startOffset);
          if (diff !== 0) {
            for (let i3 = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i3 < len; i3++) {
              lineOffsets[i3] = lineOffsets[i3] + diff;
            }
          }
        } else if (FullTextDocument.isFull(change)) {
          this._content = change.text;
          this._lineOffsets = void 0;
        } else {
          throw new Error("Unknown change event received");
        }
      }
      this._version = version2;
    }
    getLineOffsets() {
      if (this._lineOffsets === void 0) {
        this._lineOffsets = computeLineOffsets(this._content, true);
      }
      return this._lineOffsets;
    }
    positionAt(offset) {
      offset = Math.max(Math.min(offset, this._content.length), 0);
      const lineOffsets = this.getLineOffsets();
      let low = 0, high = lineOffsets.length;
      if (high === 0) {
        return {
          line: 0,
          character: offset
        };
      }
      while (low < high) {
        const mid = Math.floor((low + high) / 2);
        if (lineOffsets[mid] > offset) {
          high = mid;
        } else {
          low = mid + 1;
        }
      }
      const line = low - 1;
      offset = this.ensureBeforeEOL(offset, lineOffsets[line]);
      return {
        line,
        character: offset - lineOffsets[line]
      };
    }
    offsetAt(position2) {
      const lineOffsets = this.getLineOffsets();
      if (position2.line >= lineOffsets.length) {
        return this._content.length;
      } else if (position2.line < 0) {
        return 0;
      }
      const lineOffset = lineOffsets[position2.line];
      if (position2.character <= 0) {
        return lineOffset;
      }
      const nextLineOffset = position2.line + 1 < lineOffsets.length ? lineOffsets[position2.line + 1] : this._content.length;
      const offset = Math.min(lineOffset + position2.character, nextLineOffset);
      return this.ensureBeforeEOL(offset, lineOffset);
    }
    ensureBeforeEOL(offset, lineOffset) {
      while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {
        offset--;
      }
      return offset;
    }
    get lineCount() {
      return this.getLineOffsets().length;
    }
    static isIncremental(event) {
      const candidate = event;
      return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
    }
    static isFull(event) {
      const candidate = event;
      return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
    }
  }
  var TextDocument;
  (function(TextDocument2) {
    function create(uri, languageId, version2, content) {
      return new FullTextDocument(uri, languageId, version2, content);
    }
    TextDocument2.create = create;
    function update(document2, changes, version2) {
      if (document2 instanceof FullTextDocument) {
        document2.update(changes, version2);
        return document2;
      } else {
        throw new Error("TextDocument.update: document must be created by TextDocument.create");
      }
    }
    TextDocument2.update = update;
    function applyEdits(document2, edits) {
      const text = document2.getText();
      const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a3, b3) => {
        const diff = a3.range.start.line - b3.range.start.line;
        if (diff === 0) {
          return a3.range.start.character - b3.range.start.character;
        }
        return diff;
      });
      let lastModifiedOffset = 0;
      const spans = [];
      for (const e3 of sortedEdits) {
        const startOffset = document2.offsetAt(e3.range.start);
        if (startOffset < lastModifiedOffset) {
          throw new Error("Overlapping edit");
        } else if (startOffset > lastModifiedOffset) {
          spans.push(text.substring(lastModifiedOffset, startOffset));
        }
        if (e3.newText.length) {
          spans.push(e3.newText);
        }
        lastModifiedOffset = document2.offsetAt(e3.range.end);
      }
      spans.push(text.substr(lastModifiedOffset));
      return spans.join("");
    }
    TextDocument2.applyEdits = applyEdits;
  })(TextDocument || (TextDocument = {}));
  function mergeSort(data, compare) {
    if (data.length <= 1) {
      return data;
    }
    const p3 = data.length / 2 | 0;
    const left = data.slice(0, p3);
    const right = data.slice(p3);
    mergeSort(left, compare);
    mergeSort(right, compare);
    let leftIdx = 0;
    let rightIdx = 0;
    let i3 = 0;
    while (leftIdx < left.length && rightIdx < right.length) {
      const ret = compare(left[leftIdx], right[rightIdx]);
      if (ret <= 0) {
        data[i3++] = left[leftIdx++];
      } else {
        data[i3++] = right[rightIdx++];
      }
    }
    while (leftIdx < left.length) {
      data[i3++] = left[leftIdx++];
    }
    while (rightIdx < right.length) {
      data[i3++] = right[rightIdx++];
    }
    return data;
  }
  function computeLineOffsets(text, isAtLineStart, textOffset = 0) {
    const result = isAtLineStart ? [
      textOffset
    ] : [];
    for (let i3 = 0; i3 < text.length; i3++) {
      const ch = text.charCodeAt(i3);
      if (isEOL(ch)) {
        if (ch === 13 && i3 + 1 < text.length && text.charCodeAt(i3 + 1) === 10) {
          i3++;
        }
        result.push(textOffset + i3 + 1);
      }
    }
    return result;
  }
  function isEOL(char) {
    return char === 13 || char === 10;
  }
  function getWellformedRange(range) {
    const start = range.start;
    const end = range.end;
    if (start.line > end.line || start.line === end.line && start.character > end.character) {
      return {
        start: end,
        end: start
      };
    }
    return range;
  }
  function getWellformedEdit(textEdit) {
    const range = getWellformedRange(textEdit.range);
    if (range !== textEdit.range) {
      return {
        newText: textEdit.newText,
        range
      };
    }
    return textEdit;
  }
  const DEFAULT_URI = "";
  const DEFAULT_LANGUAGE_ID = "html";
  const getTextDocument = (textData, uri = DEFAULT_URI, languageId = DEFAULT_LANGUAGE_ID) => TextDocument.create(uri, languageId, 1, textData);
  function stateFromConfig(resolvedConfig, version2 = "3.0.0") {
    var _a;
    const jitContext = Rn(resolvedConfig);
    const state = {
      version: version2,
      resolvedConfig,
      enabled: true,
      modules: {
        postcss: {
          module: postcss,
          version: ""
        },
        postcssSelectorParser: {
          module: postcssSelectorParser
        },
        jit: {
          createContext: {
            module: Rn
          },
          expandApplyAtRules: {
            module: expandApplyAtRules
          },
          generateRules: {
            module: generateRules$1
          }
        }
      },
      classNames: {
        classNames: {},
        context: {}
      },
      jit: true,
      jitContext,
      separator: resolvedConfig.separator,
      screens: ((_a = resolvedConfig.theme) == null ? void 0 : _a.screens) ? Object.keys(resolvedConfig.theme.screens) : [],
      variants: jitContext.getVariants(),
      editor: {
        userLanguages: {},
        capabilities: {
          configuration: true,
          diagnosticRelatedInformation: true,
          itemDefaults: []
        },
        async getConfiguration() {
          return {
            editor: {
              tabSize: 2
            },
            tailwindCSS: {
              emmetCompletions: false,
              classAttributes: [
                "class",
                "className",
                "ngClass"
              ],
              codeActions: true,
              hovers: true,
              suggestions: true,
              validate: true,
              colorDecorators: true,
              rootFontSize: 16,
              lint: {
                cssConflict: "warning",
                invalidApply: "error",
                invalidScreen: "error",
                invalidVariant: "error",
                invalidConfigPath: "error",
                invalidTailwindDirective: "error",
                recommendedVariantOrder: "warning"
              },
              showPixelEquivalents: true,
              includeLanguages: {},
              files: {
                exclude: []
              },
              experimental: {
                classRegex: [],
                configFile: {}
              }
            }
          };
        }
      }
    };
    state.classList = jitContext.getClassList().map((className) => [
      className,
      {
        color: Bn(state, className)
      }
    ]);
    return state;
  }
  var Ke$1 = Object.create;
  var de$1 = Object.defineProperty;
  var Ye$1 = Object.getOwnPropertyDescriptor;
  var He$1 = Object.getOwnPropertyNames;
  var Xe$1 = Object.getPrototypeOf, Qe$1 = Object.prototype.hasOwnProperty;
  var O$1 = (e3, r3) => () => (r3 || e3((r3 = {
    exports: {}
  }).exports, r3), r3.exports);
  var Je$1 = (e3, r3, n3, t3) => {
    if (r3 && typeof r3 == "object" || typeof r3 == "function") for (let i3 of He$1(r3)) !Qe$1.call(e3, i3) && i3 !== n3 && de$1(e3, i3, {
      get: () => r3[i3],
      enumerable: !(t3 = Ye$1(r3, i3)) || t3.enumerable
    });
    return e3;
  };
  var Ge$1 = (e3, r3, n3) => (n3 = e3 != null ? Ke$1(Xe$1(e3)) : {}, Je$1(!e3 || !e3.__esModule ? de$1(n3, "default", {
    value: e3,
    enumerable: true
  }) : n3, e3));
  var pe$1 = O$1((Nr2, ce2) => {
    var L3 = 40, K3 = 41, z3 = 39, Y3 = 34, H3 = 92, $3 = 47, X3 = 44, Q3 = 58, F3 = 42, er2 = 117, rr2 = 85, tr2 = 43, nr = /^[a-f0-9?-]+$/i;
    ce2.exports = function(e3) {
      for (var r3 = [], n3 = e3, t3, i3, o3, a3, u3, d3, f3, c3, l3 = 0, s3 = n3.charCodeAt(l3), x3 = n3.length, p3 = [
        {
          nodes: r3
        }
      ], A3 = 0, h3, S3 = "", E3 = "", T3 = ""; l3 < x3; ) if (s3 <= 32) {
        t3 = l3;
        do
          t3 += 1, s3 = n3.charCodeAt(t3);
        while (s3 <= 32);
        a3 = n3.slice(l3, t3), o3 = r3[r3.length - 1], s3 === K3 && A3 ? T3 = a3 : o3 && o3.type === "div" ? (o3.after = a3, o3.sourceEndIndex += a3.length) : s3 === X3 || s3 === Q3 || s3 === $3 && n3.charCodeAt(t3 + 1) !== F3 && (!h3 || h3 && h3.type === "function" && false) ? E3 = a3 : r3.push({
          type: "space",
          sourceIndex: l3,
          sourceEndIndex: t3,
          value: a3
        }), l3 = t3;
      } else if (s3 === z3 || s3 === Y3) {
        t3 = l3, i3 = s3 === z3 ? "'" : '"', a3 = {
          type: "string",
          sourceIndex: l3,
          quote: i3
        };
        do
          if (u3 = false, t3 = n3.indexOf(i3, t3 + 1), ~t3) for (d3 = t3; n3.charCodeAt(d3 - 1) === H3; ) d3 -= 1, u3 = !u3;
          else n3 += i3, t3 = n3.length - 1, a3.unclosed = true;
        while (u3);
        a3.value = n3.slice(l3 + 1, t3), a3.sourceEndIndex = a3.unclosed ? t3 : t3 + 1, r3.push(a3), l3 = t3 + 1, s3 = n3.charCodeAt(l3);
      } else if (s3 === $3 && n3.charCodeAt(l3 + 1) === F3) t3 = n3.indexOf("*/", l3), a3 = {
        type: "comment",
        sourceIndex: l3,
        sourceEndIndex: t3 + 2
      }, t3 === -1 && (a3.unclosed = true, t3 = n3.length, a3.sourceEndIndex = t3), a3.value = n3.slice(l3 + 2, t3), r3.push(a3), l3 = t3 + 2, s3 = n3.charCodeAt(l3);
      else if ((s3 === $3 || s3 === F3) && h3 && h3.type === "function") a3 = n3[l3], r3.push({
        type: "word",
        sourceIndex: l3 - E3.length,
        sourceEndIndex: l3 + a3.length,
        value: a3
      }), l3 += 1, s3 = n3.charCodeAt(l3);
      else if (s3 === $3 || s3 === X3 || s3 === Q3) a3 = n3[l3], r3.push({
        type: "div",
        sourceIndex: l3 - E3.length,
        sourceEndIndex: l3 + a3.length,
        value: a3,
        before: E3,
        after: ""
      }), E3 = "", l3 += 1, s3 = n3.charCodeAt(l3);
      else if (L3 === s3) {
        t3 = l3;
        do
          t3 += 1, s3 = n3.charCodeAt(t3);
        while (s3 <= 32);
        if (c3 = l3, a3 = {
          type: "function",
          sourceIndex: l3 - S3.length,
          value: S3,
          before: n3.slice(c3 + 1, t3)
        }, l3 = t3, S3 === "url" && s3 !== z3 && s3 !== Y3) {
          t3 -= 1;
          do
            if (u3 = false, t3 = n3.indexOf(")", t3 + 1), ~t3) for (d3 = t3; n3.charCodeAt(d3 - 1) === H3; ) d3 -= 1, u3 = !u3;
            else n3 += ")", t3 = n3.length - 1, a3.unclosed = true;
          while (u3);
          f3 = t3;
          do
            f3 -= 1, s3 = n3.charCodeAt(f3);
          while (s3 <= 32);
          c3 < f3 ? (l3 !== f3 + 1 ? a3.nodes = [
            {
              type: "word",
              sourceIndex: l3,
              sourceEndIndex: f3 + 1,
              value: n3.slice(l3, f3 + 1)
            }
          ] : a3.nodes = [], a3.unclosed && f3 + 1 !== t3 ? (a3.after = "", a3.nodes.push({
            type: "space",
            sourceIndex: f3 + 1,
            sourceEndIndex: t3,
            value: n3.slice(f3 + 1, t3)
          })) : (a3.after = n3.slice(f3 + 1, t3), a3.sourceEndIndex = t3)) : (a3.after = "", a3.nodes = []), l3 = t3 + 1, a3.sourceEndIndex = a3.unclosed ? t3 : l3, s3 = n3.charCodeAt(l3), r3.push(a3);
        } else A3 += 1, a3.after = "", a3.sourceEndIndex = l3 + 1, r3.push(a3), p3.push(a3), r3 = a3.nodes = [], h3 = a3;
        S3 = "";
      } else if (K3 === s3 && A3) l3 += 1, s3 = n3.charCodeAt(l3), h3.after = T3, h3.sourceEndIndex += T3.length, T3 = "", A3 -= 1, p3[p3.length - 1].sourceEndIndex = l3, p3.pop(), h3 = p3[A3], r3 = h3.nodes;
      else {
        t3 = l3;
        do
          s3 === H3 && (t3 += 1), t3 += 1, s3 = n3.charCodeAt(t3);
        while (t3 < x3 && !(s3 <= 32 || s3 === z3 || s3 === Y3 || s3 === X3 || s3 === Q3 || s3 === $3 || s3 === L3 || s3 === F3 && h3 && h3.type === "function" || s3 === $3 && h3.type === "function" || s3 === K3 && A3));
        a3 = n3.slice(l3, t3), L3 === s3 ? S3 = a3 : (er2 === a3.charCodeAt(0) || rr2 === a3.charCodeAt(0)) && tr2 === a3.charCodeAt(1) && nr.test(a3.slice(2)) ? r3.push({
          type: "unicode-range",
          sourceIndex: l3,
          sourceEndIndex: t3,
          value: a3
        }) : r3.push({
          type: "word",
          sourceIndex: l3,
          sourceEndIndex: t3,
          value: a3
        }), l3 = t3;
      }
      for (l3 = p3.length - 1; l3; l3 -= 1) p3[l3].unclosed = true, p3[l3].sourceEndIndex = n3.length;
      return p3[0].nodes;
    };
  });
  var me = O$1((Lr2, he2) => {
    he2.exports = function e3(r3, n3, t3) {
      var i3, o3, a3, u3;
      for (i3 = 0, o3 = r3.length; i3 < o3; i3 += 1) a3 = r3[i3], t3 || (u3 = n3(a3, i3, r3)), u3 !== false && a3.type === "function" && Array.isArray(a3.nodes) && e3(a3.nodes, n3, t3), t3 && n3(a3, i3, r3);
    };
  });
  var we$1 = O$1((Kr, xe2) => {
    function ge2(e3, r3) {
      var n3 = e3.type, t3 = e3.value, i3, o3;
      return r3 && (o3 = r3(e3)) !== void 0 ? o3 : n3 === "word" || n3 === "space" ? t3 : n3 === "string" ? (i3 = e3.quote || "", i3 + t3 + (e3.unclosed ? "" : i3)) : n3 === "comment" ? "/*" + t3 + (e3.unclosed ? "" : "*/") : n3 === "div" ? (e3.before || "") + t3 + (e3.after || "") : Array.isArray(e3.nodes) ? (i3 = ye2(e3.nodes, r3), n3 !== "function" ? i3 : t3 + "(" + (e3.before || "") + i3 + (e3.after || "") + (e3.unclosed ? "" : ")")) : t3;
    }
    function ye2(e3, r3) {
      var n3, t3;
      if (Array.isArray(e3)) {
        for (n3 = "", t3 = e3.length - 1; ~t3; t3 -= 1) n3 = ge2(e3[t3], r3) + n3;
        return n3;
      }
      return ge2(e3, r3);
    }
    xe2.exports = ye2;
  });
  var ve = O$1((Yr2, be2) => {
    var R3 = 45, q3 = 43, J3 = 46, ir2 = 101, ar2 = 69;
    function lr2(e3) {
      var r3 = e3.charCodeAt(0), n3;
      if (r3 === q3 || r3 === R3) {
        if (n3 = e3.charCodeAt(1), n3 >= 48 && n3 <= 57) return true;
        var t3 = e3.charCodeAt(2);
        return n3 === J3 && t3 >= 48 && t3 <= 57;
      }
      return r3 === J3 ? (n3 = e3.charCodeAt(1), n3 >= 48 && n3 <= 57) : r3 >= 48 && r3 <= 57;
    }
    be2.exports = function(e3) {
      var r3 = 0, n3 = e3.length, t3, i3, o3;
      if (n3 === 0 || !lr2(e3)) return false;
      for (t3 = e3.charCodeAt(r3), (t3 === q3 || t3 === R3) && r3++; r3 < n3 && (t3 = e3.charCodeAt(r3), !(t3 < 48 || t3 > 57)); ) r3 += 1;
      if (t3 = e3.charCodeAt(r3), i3 = e3.charCodeAt(r3 + 1), t3 === J3 && i3 >= 48 && i3 <= 57) for (r3 += 2; r3 < n3 && (t3 = e3.charCodeAt(r3), !(t3 < 48 || t3 > 57)); ) r3 += 1;
      if (t3 = e3.charCodeAt(r3), i3 = e3.charCodeAt(r3 + 1), o3 = e3.charCodeAt(r3 + 2), (t3 === ir2 || t3 === ar2) && (i3 >= 48 && i3 <= 57 || (i3 === q3 || i3 === R3) && o3 >= 48 && o3 <= 57)) for (r3 += i3 === q3 || i3 === R3 ? 3 : 2; r3 < n3 && (t3 = e3.charCodeAt(r3), !(t3 < 48 || t3 > 57)); ) r3 += 1;
      return {
        number: e3.slice(0, r3),
        unit: e3.slice(r3)
      };
    };
  });
  var Ce$1 = O$1((Hr2, ke2) => {
    var or2 = pe$1(), Ae2 = me(), $e2 = we$1();
    function w3(e3) {
      return this instanceof w3 ? (this.nodes = or2(e3), this) : new w3(e3);
    }
    w3.prototype.toString = function() {
      return Array.isArray(this.nodes) ? $e2(this.nodes) : "";
    };
    w3.prototype.walk = function(e3, r3) {
      return Ae2(this.nodes, e3, r3), this;
    };
    w3.unit = ve();
    w3.walk = Ae2;
    w3.stringify = $e2;
    ke2.exports = w3;
  });
  function B$1(e3) {
    if (Object.prototype.toString.call(e3) !== "[object Object]") return false;
    let r3 = Object.getPrototypeOf(e3);
    return r3 === null || Object.getPrototypeOf(r3) === null;
  }
  function N$1(e3) {
    return [
      "fontSize",
      "outline"
    ].includes(e3) ? (r3) => (typeof r3 == "function" && (r3 = r3({})), Array.isArray(r3) && (r3 = r3[0]), r3) : e3 === "fontFamily" ? (r3) => {
      typeof r3 == "function" && (r3 = r3({}));
      let n3 = Array.isArray(r3) && B$1(r3[1]) ? r3[0] : r3;
      return Array.isArray(n3) ? n3.join(", ") : n3;
    } : [
      "boxShadow",
      "transitionProperty",
      "transitionDuration",
      "transitionDelay",
      "transitionTimingFunction",
      "backgroundImage",
      "backgroundSize",
      "backgroundColor",
      "cursor",
      "animation"
    ].includes(e3) ? (r3) => (typeof r3 == "function" && (r3 = r3({})), Array.isArray(r3) && (r3 = r3.join(", ")), r3) : [
      "gridTemplateColumns",
      "gridTemplateRows",
      "objectPosition"
    ].includes(e3) ? (r3) => (typeof r3 == "function" && (r3 = r3({})), typeof r3 == "string" && (r3 = F$8.list.comma(r3).join(" ")), r3) : (r3, n3 = {}) => (typeof r3 == "function" && (r3 = r3(n3)), r3);
  }
  var fe$1 = Ge$1(Ce$1());
  function G$1(e3, r3 = true) {
    return Array.isArray(e3) ? e3.map((n3) => {
      if (r3 && Array.isArray(n3)) throw new Error("The tuple syntax is not supported for `screens`.");
      if (typeof n3 == "string") return {
        name: n3.toString(),
        not: false,
        values: [
          {
            min: n3,
            max: void 0
          }
        ]
      };
      let [t3, i3] = n3;
      return t3 = t3.toString(), typeof i3 == "string" ? {
        name: t3,
        not: false,
        values: [
          {
            min: i3,
            max: void 0
          }
        ]
      } : Array.isArray(i3) ? {
        name: t3,
        not: false,
        values: i3.map((o3) => Se$1(o3))
      } : {
        name: t3,
        not: false,
        values: [
          Se$1(i3)
        ]
      };
    }) : G$1(Object.entries(e3 ?? {}), false);
  }
  function Se$1({ "min-width": e3, min: r3 = e3, max: n3, raw: t3 } = {}) {
    return {
      min: r3,
      max: n3,
      raw: t3
    };
  }
  function Z$1(e3) {
    return e3 = Array.isArray(e3) ? e3 : [
      e3
    ], e3.map((r3) => {
      let n3 = r3.values.map((t3) => t3.raw !== void 0 ? t3.raw : [
        t3.min && `(min-width: ${t3.min})`,
        t3.max && `(max-width: ${t3.max})`
      ].filter(Boolean).join(" and "));
      return r3.not ? `not all and ${n3}` : n3;
    }).join(", ");
  }
  function ee$1(e3) {
    if (Array.isArray(e3)) return e3;
    let r3 = e3.split("[").length - 1, n3 = e3.split("]").length - 1;
    if (r3 !== n3) throw new Error(`Path is invalid. Has unbalanced brackets: ${e3}`);
    return e3.split(/\.(?![^\[]*\])|[\[\]]/g).filter(Boolean);
  }
  var re$1 = {
    aliceblue: [
      240,
      248,
      255
    ],
    antiquewhite: [
      250,
      235,
      215
    ],
    aqua: [
      0,
      255,
      255
    ],
    aquamarine: [
      127,
      255,
      212
    ],
    azure: [
      240,
      255,
      255
    ],
    beige: [
      245,
      245,
      220
    ],
    bisque: [
      255,
      228,
      196
    ],
    black: [
      0,
      0,
      0
    ],
    blanchedalmond: [
      255,
      235,
      205
    ],
    blue: [
      0,
      0,
      255
    ],
    blueviolet: [
      138,
      43,
      226
    ],
    brown: [
      165,
      42,
      42
    ],
    burlywood: [
      222,
      184,
      135
    ],
    cadetblue: [
      95,
      158,
      160
    ],
    chartreuse: [
      127,
      255,
      0
    ],
    chocolate: [
      210,
      105,
      30
    ],
    coral: [
      255,
      127,
      80
    ],
    cornflowerblue: [
      100,
      149,
      237
    ],
    cornsilk: [
      255,
      248,
      220
    ],
    crimson: [
      220,
      20,
      60
    ],
    cyan: [
      0,
      255,
      255
    ],
    darkblue: [
      0,
      0,
      139
    ],
    darkcyan: [
      0,
      139,
      139
    ],
    darkgoldenrod: [
      184,
      134,
      11
    ],
    darkgray: [
      169,
      169,
      169
    ],
    darkgreen: [
      0,
      100,
      0
    ],
    darkgrey: [
      169,
      169,
      169
    ],
    darkkhaki: [
      189,
      183,
      107
    ],
    darkmagenta: [
      139,
      0,
      139
    ],
    darkolivegreen: [
      85,
      107,
      47
    ],
    darkorange: [
      255,
      140,
      0
    ],
    darkorchid: [
      153,
      50,
      204
    ],
    darkred: [
      139,
      0,
      0
    ],
    darksalmon: [
      233,
      150,
      122
    ],
    darkseagreen: [
      143,
      188,
      143
    ],
    darkslateblue: [
      72,
      61,
      139
    ],
    darkslategray: [
      47,
      79,
      79
    ],
    darkslategrey: [
      47,
      79,
      79
    ],
    darkturquoise: [
      0,
      206,
      209
    ],
    darkviolet: [
      148,
      0,
      211
    ],
    deeppink: [
      255,
      20,
      147
    ],
    deepskyblue: [
      0,
      191,
      255
    ],
    dimgray: [
      105,
      105,
      105
    ],
    dimgrey: [
      105,
      105,
      105
    ],
    dodgerblue: [
      30,
      144,
      255
    ],
    firebrick: [
      178,
      34,
      34
    ],
    floralwhite: [
      255,
      250,
      240
    ],
    forestgreen: [
      34,
      139,
      34
    ],
    fuchsia: [
      255,
      0,
      255
    ],
    gainsboro: [
      220,
      220,
      220
    ],
    ghostwhite: [
      248,
      248,
      255
    ],
    gold: [
      255,
      215,
      0
    ],
    goldenrod: [
      218,
      165,
      32
    ],
    gray: [
      128,
      128,
      128
    ],
    green: [
      0,
      128,
      0
    ],
    greenyellow: [
      173,
      255,
      47
    ],
    grey: [
      128,
      128,
      128
    ],
    honeydew: [
      240,
      255,
      240
    ],
    hotpink: [
      255,
      105,
      180
    ],
    indianred: [
      205,
      92,
      92
    ],
    indigo: [
      75,
      0,
      130
    ],
    ivory: [
      255,
      255,
      240
    ],
    khaki: [
      240,
      230,
      140
    ],
    lavender: [
      230,
      230,
      250
    ],
    lavenderblush: [
      255,
      240,
      245
    ],
    lawngreen: [
      124,
      252,
      0
    ],
    lemonchiffon: [
      255,
      250,
      205
    ],
    lightblue: [
      173,
      216,
      230
    ],
    lightcoral: [
      240,
      128,
      128
    ],
    lightcyan: [
      224,
      255,
      255
    ],
    lightgoldenrodyellow: [
      250,
      250,
      210
    ],
    lightgray: [
      211,
      211,
      211
    ],
    lightgreen: [
      144,
      238,
      144
    ],
    lightgrey: [
      211,
      211,
      211
    ],
    lightpink: [
      255,
      182,
      193
    ],
    lightsalmon: [
      255,
      160,
      122
    ],
    lightseagreen: [
      32,
      178,
      170
    ],
    lightskyblue: [
      135,
      206,
      250
    ],
    lightslategray: [
      119,
      136,
      153
    ],
    lightslategrey: [
      119,
      136,
      153
    ],
    lightsteelblue: [
      176,
      196,
      222
    ],
    lightyellow: [
      255,
      255,
      224
    ],
    lime: [
      0,
      255,
      0
    ],
    limegreen: [
      50,
      205,
      50
    ],
    linen: [
      250,
      240,
      230
    ],
    magenta: [
      255,
      0,
      255
    ],
    maroon: [
      128,
      0,
      0
    ],
    mediumaquamarine: [
      102,
      205,
      170
    ],
    mediumblue: [
      0,
      0,
      205
    ],
    mediumorchid: [
      186,
      85,
      211
    ],
    mediumpurple: [
      147,
      112,
      219
    ],
    mediumseagreen: [
      60,
      179,
      113
    ],
    mediumslateblue: [
      123,
      104,
      238
    ],
    mediumspringgreen: [
      0,
      250,
      154
    ],
    mediumturquoise: [
      72,
      209,
      204
    ],
    mediumvioletred: [
      199,
      21,
      133
    ],
    midnightblue: [
      25,
      25,
      112
    ],
    mintcream: [
      245,
      255,
      250
    ],
    mistyrose: [
      255,
      228,
      225
    ],
    moccasin: [
      255,
      228,
      181
    ],
    navajowhite: [
      255,
      222,
      173
    ],
    navy: [
      0,
      0,
      128
    ],
    oldlace: [
      253,
      245,
      230
    ],
    olive: [
      128,
      128,
      0
    ],
    olivedrab: [
      107,
      142,
      35
    ],
    orange: [
      255,
      165,
      0
    ],
    orangered: [
      255,
      69,
      0
    ],
    orchid: [
      218,
      112,
      214
    ],
    palegoldenrod: [
      238,
      232,
      170
    ],
    palegreen: [
      152,
      251,
      152
    ],
    paleturquoise: [
      175,
      238,
      238
    ],
    palevioletred: [
      219,
      112,
      147
    ],
    papayawhip: [
      255,
      239,
      213
    ],
    peachpuff: [
      255,
      218,
      185
    ],
    peru: [
      205,
      133,
      63
    ],
    pink: [
      255,
      192,
      203
    ],
    plum: [
      221,
      160,
      221
    ],
    powderblue: [
      176,
      224,
      230
    ],
    purple: [
      128,
      0,
      128
    ],
    rebeccapurple: [
      102,
      51,
      153
    ],
    red: [
      255,
      0,
      0
    ],
    rosybrown: [
      188,
      143,
      143
    ],
    royalblue: [
      65,
      105,
      225
    ],
    saddlebrown: [
      139,
      69,
      19
    ],
    salmon: [
      250,
      128,
      114
    ],
    sandybrown: [
      244,
      164,
      96
    ],
    seagreen: [
      46,
      139,
      87
    ],
    seashell: [
      255,
      245,
      238
    ],
    sienna: [
      160,
      82,
      45
    ],
    silver: [
      192,
      192,
      192
    ],
    skyblue: [
      135,
      206,
      235
    ],
    slateblue: [
      106,
      90,
      205
    ],
    slategray: [
      112,
      128,
      144
    ],
    slategrey: [
      112,
      128,
      144
    ],
    snow: [
      255,
      250,
      250
    ],
    springgreen: [
      0,
      255,
      127
    ],
    steelblue: [
      70,
      130,
      180
    ],
    tan: [
      210,
      180,
      140
    ],
    teal: [
      0,
      128,
      128
    ],
    thistle: [
      216,
      191,
      216
    ],
    tomato: [
      255,
      99,
      71
    ],
    turquoise: [
      64,
      224,
      208
    ],
    violet: [
      238,
      130,
      238
    ],
    wheat: [
      245,
      222,
      179
    ],
    white: [
      255,
      255,
      255
    ],
    whitesmoke: [
      245,
      245,
      245
    ],
    yellow: [
      255,
      255,
      0
    ],
    yellowgreen: [
      154,
      205,
      50
    ]
  };
  var sr = /^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i, ur = /^#([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i, b = /(?:\d+|\d*\.\d+)%?/, U = /(?:\s*,\s*|\s+)/, Ee$1 = /\s*[,/]\s*/, v = /var\(--(?:[^ )]*?)(?:,(?:[^ )]*?|var\(--[^ )]*?\)))?\)/, fr$1 = new RegExp(`^(rgba?)\\(\\s*(${b.source}|${v.source})(?:${U.source}(${b.source}|${v.source}))?(?:${U.source}(${b.source}|${v.source}))?(?:${Ee$1.source}(${b.source}|${v.source}))?\\s*\\)$`), dr$1 = new RegExp(`^(hsla?)\\(\\s*((?:${b.source})(?:deg|rad|grad|turn)?|${v.source})(?:${U.source}(${b.source}|${v.source}))?(?:${U.source}(${b.source}|${v.source}))?(?:${Ee$1.source}(${b.source}|${v.source}))?\\s*\\)$`);
  function W$1(e3, { loose: r3 = false } = {}) {
    var _a, _b;
    if (typeof e3 != "string") return null;
    if (e3 = e3.trim(), e3 === "transparent") return {
      mode: "rgb",
      color: [
        "0",
        "0",
        "0"
      ],
      alpha: "0"
    };
    if (e3 in re$1) return {
      mode: "rgb",
      color: re$1[e3].map((o3) => o3.toString())
    };
    let n3 = e3.replace(ur, (o3, a3, u3, d3, f3) => [
      "#",
      a3,
      a3,
      u3,
      u3,
      d3,
      d3,
      f3 ? f3 + f3 : ""
    ].join("")).match(sr);
    if (n3 !== null) return {
      mode: "rgb",
      color: [
        parseInt(n3[1], 16),
        parseInt(n3[2], 16),
        parseInt(n3[3], 16)
      ].map((o3) => o3.toString()),
      alpha: n3[4] ? (parseInt(n3[4], 16) / 255).toString() : void 0
    };
    let t3 = e3.match(fr$1) ?? e3.match(dr$1);
    if (t3 === null) return null;
    let i3 = [
      t3[2],
      t3[3],
      t3[4]
    ].filter(Boolean).map((o3) => o3.toString());
    return i3.length === 2 && i3[0].startsWith("var(") ? {
      mode: t3[1],
      color: [
        i3[0]
      ],
      alpha: i3[1]
    } : !r3 && i3.length !== 3 || i3.length < 3 && !i3.some((o3) => /^var\(.*?\)$/.test(o3)) ? null : {
      mode: t3[1],
      color: i3,
      alpha: (_b = (_a = t3[5]) == null ? void 0 : _a.toString) == null ? void 0 : _b.call(_a)
    };
  }
  function Oe({ mode: e3, color: r3, alpha: n3 }) {
    let t3 = n3 !== void 0;
    return e3 === "rgba" || e3 === "hsla" ? `${e3}(${r3.join(", ")}${t3 ? `, ${n3}` : ""})` : `${e3}(${r3.join(" ")}${t3 ? ` / ${n3}` : ""})`;
  }
  function I$1(e3, r3, n3) {
    if (typeof e3 == "function") return e3({
      opacityValue: r3
    });
    let t3 = W$1(e3, {
      loose: true
    });
    return t3 === null ? n3 : Oe({
      ...t3,
      alpha: r3
    });
  }
  var Me = /* @__PURE__ */ new Set();
  function ae$1(e3, r3, n3) {
    typeof xs < "u" && xs.env.JEST_WORKER_ID || n3 && Me.has(n3) || (n3 && Me.add(n3), console.warn(""), r3.forEach((t3) => console.warn(e3, "-", t3)));
  }
  var le$1 = {
    info(e3, r3) {
      ae$1(ne$5.bold(ne$5.cyan("info")), ...Array.isArray(e3) ? [
        e3
      ] : [
        r3,
        e3
      ]);
    },
    warn(e3, r3) {
      ae$1(ne$5.bold(ne$5.yellow("warn")), ...Array.isArray(e3) ? [
        e3
      ] : [
        r3,
        e3
      ]);
    },
    risk(e3, r3) {
      ae$1(ne$5.bold(ne$5.magenta("risk")), ...Array.isArray(e3) ? [
        e3
      ] : [
        r3,
        e3
      ]);
    }
  };
  function M$1(e3) {
    if (typeof e3 == "string" && e3.includes("<alpha-value>")) {
      let r3 = e3;
      return ({ opacityValue: n3 = 1 }) => r3.replace(/<alpha-value>/g, n3);
    }
    return e3;
  }
  function se$1(e3) {
    return typeof e3 == "object" && e3 !== null;
  }
  function Tr(e3, r3) {
    let n3 = ee$1(r3);
    do
      if (n3.pop(), x$h(e3, n3) !== void 0) break;
    while (n3.length);
    return n3.length ? n3 : void 0;
  }
  function C(e3) {
    return typeof e3 == "string" ? e3 : e3.reduce((r3, n3, t3) => n3.includes(".") ? `${r3}[${n3}]` : t3 === 0 ? n3 : `${r3}.${n3}`, "");
  }
  function Ne$1(e3) {
    return e3.map((r3) => `'${r3}'`).join(", ");
  }
  function Be$1(e3) {
    return Ne$1(Object.keys(e3));
  }
  function ue$1(e3, r3, n3, t3 = {}) {
    let i3 = Array.isArray(r3) ? C(r3) : r3.replace(/^['"]+|['"]+$/g, ""), o3 = Array.isArray(r3) ? r3 : ee$1(i3), a3 = x$h(e3.theme, o3, n3);
    if (a3 === void 0) {
      let d3 = `'${i3}' does not exist in your theme config.`, f3 = o3.slice(0, -1), c3 = x$h(e3.theme, f3);
      if (se$1(c3)) {
        let l3 = Object.keys(c3).filter((x3) => ue$1(e3, [
          ...f3,
          x3
        ]).isValid), s3 = N$a(o3[o3.length - 1], l3);
        s3 ? d3 += ` Did you mean '${C([
          ...f3,
          s3
        ])}'?` : l3.length > 0 && (d3 += ` '${C(f3)}' has the following valid keys: ${Ne$1(l3)}`);
      } else {
        let l3 = Tr(e3.theme, i3);
        if (l3) {
          let s3 = x$h(e3.theme, l3);
          se$1(s3) ? d3 += ` '${C(l3)}' has the following keys: ${Be$1(s3)}` : d3 += ` '${C(l3)}' is not an object.`;
        } else d3 += ` Your theme has the following top-level keys: ${Be$1(e3.theme)}`;
      }
      return {
        isValid: false,
        error: d3
      };
    }
    if (!(typeof a3 == "string" || typeof a3 == "number" || typeof a3 == "function" || a3 instanceof String || a3 instanceof Number || Array.isArray(a3))) {
      let d3 = `'${i3}' was found but does not resolve to a string.`;
      if (se$1(a3)) {
        let f3 = Object.keys(a3).filter((c3) => ue$1(e3, [
          ...o3,
          c3
        ]).isValid);
        f3.length && (d3 += ` Did you mean something like '${C([
          ...o3,
          f3[0]
        ])}'?`);
      }
      return {
        isValid: false,
        error: d3
      };
    }
    let [u3] = o3;
    return {
      isValid: true,
      value: N$1(u3)(a3, t3)
    };
  }
  function zr(e3, r3, n3) {
    r3 = r3.map((i3) => Le$1(e3, i3, n3));
    let t3 = [
      ""
    ];
    for (let i3 of r3) i3.type === "div" && i3.value === "," ? t3.push("") : t3[t3.length - 1] += fe$1.default.stringify(i3);
    return t3;
  }
  function Le$1(e3, r3, n3) {
    if (r3.type === "function" && n3[r3.value] !== void 0) {
      let t3 = zr(e3, r3.nodes, n3);
      r3.type = "word", r3.value = n3[r3.value](e3, ...t3);
    }
    return r3;
  }
  function Fr(e3, r3, n3) {
    return Object.keys(n3).some((i3) => r3.includes(`${i3}(`)) ? (0, fe$1.default)(r3).walk((i3) => {
      Le$1(e3, i3, n3);
    }).toString() : r3;
  }
  var Rr = {
    atrule: "params",
    decl: "value"
  };
  function* qr(e3) {
    e3 = e3.replace(/^['"]+|['"]+$/g, "");
    let r3 = e3.match(/^([^\s]+)(?![^\[]*\])(?:\s*\/\s*([^\/\s]+))$/), n3;
    yield [
      e3,
      void 0
    ], r3 && (e3 = r3[1], n3 = r3[2], yield [
      e3,
      n3
    ]);
  }
  function Ur(e3, r3, n3) {
    let t3 = Array.from(qr(r3)).map(([i3, o3]) => Object.assign(ue$1(e3, i3, n3, {
      opacityValue: o3
    }), {
      resolvedPath: i3,
      alpha: o3
    }));
    return t3.find((i3) => i3.isValid) ?? t3[0];
  }
  function Dt$1(e3) {
    let r3 = e3.tailwindConfig, n3 = {
      theme: (t3, i3, ...o3) => {
        var _a;
        let { isValid: a3, value: u3, error: d3, alpha: f3 } = Ur(r3, i3, o3.length ? o3 : void 0);
        if (!a3) {
          let s3 = t3.parent, x3 = (_a = s3 == null ? void 0 : s3.raws.tailwind) == null ? void 0 : _a.candidate;
          if (s3 && x3 !== void 0) {
            e3.markInvalidUtilityNode(s3), s3.remove(), le$1.warn("invalid-theme-key-in-class", [
              `The utility \`${x3}\` contains an invalid theme value and was not generated.`
            ]);
            return;
          }
          throw t3.error(d3);
        }
        let c3 = M$1(u3);
        return (f3 !== void 0 || c3 !== void 0 && typeof c3 == "function") && (f3 === void 0 && (f3 = 1), u3 = I$1(c3, f3, c3)), u3;
      },
      screen: (t3, i3) => {
        i3 = i3.replace(/^['"]+/g, "").replace(/['"]+$/g, "");
        let a3 = G$1(r3.theme.screens).find(({ name: u3 }) => u3 === i3);
        if (!a3) throw t3.error(`The '${i3}' screen does not exist in your theme.`);
        return Z$1(a3);
      }
    };
    return (t3) => {
      t3.walk((i3) => {
        let o3 = Rr[i3.type];
        o3 !== void 0 && (i3[o3] = Fr(i3, i3[o3], n3));
      });
    };
  }
  function G(e3) {
    return Array.isArray(e3) ? e3.flatMap((t3) => F$8([
      V$9({
        bubble: [
          "screen"
        ]
      })
    ]).process(t3, {
      parser: w$6
    }).root.nodes) : G([
      e3
    ]);
  }
  function I(e3) {
    if (Object.prototype.toString.call(e3) !== "[object Object]") return false;
    let t3 = Object.getPrototypeOf(e3);
    return t3 === null || Object.getPrototypeOf(t3) === null;
  }
  function Y(e3, t3, r3 = false) {
    if (e3 === "") return t3;
    let n3 = typeof t3 == "string" ? Pu().astSync(t3) : t3;
    return n3.walkClasses((a3) => {
      let o3 = a3.value, i3 = r3 && o3.startsWith("-");
      a3.value = i3 ? `-${e3}${o3.slice(1)}` : `${e3}${o3}`;
    }), typeof t3 == "string" ? n3.toString() : n3;
  }
  function _(e3) {
    return e3.replace(/\\,/g, "\\2c ");
  }
  var oe = {
    aliceblue: [
      240,
      248,
      255
    ],
    antiquewhite: [
      250,
      235,
      215
    ],
    aqua: [
      0,
      255,
      255
    ],
    aquamarine: [
      127,
      255,
      212
    ],
    azure: [
      240,
      255,
      255
    ],
    beige: [
      245,
      245,
      220
    ],
    bisque: [
      255,
      228,
      196
    ],
    black: [
      0,
      0,
      0
    ],
    blanchedalmond: [
      255,
      235,
      205
    ],
    blue: [
      0,
      0,
      255
    ],
    blueviolet: [
      138,
      43,
      226
    ],
    brown: [
      165,
      42,
      42
    ],
    burlywood: [
      222,
      184,
      135
    ],
    cadetblue: [
      95,
      158,
      160
    ],
    chartreuse: [
      127,
      255,
      0
    ],
    chocolate: [
      210,
      105,
      30
    ],
    coral: [
      255,
      127,
      80
    ],
    cornflowerblue: [
      100,
      149,
      237
    ],
    cornsilk: [
      255,
      248,
      220
    ],
    crimson: [
      220,
      20,
      60
    ],
    cyan: [
      0,
      255,
      255
    ],
    darkblue: [
      0,
      0,
      139
    ],
    darkcyan: [
      0,
      139,
      139
    ],
    darkgoldenrod: [
      184,
      134,
      11
    ],
    darkgray: [
      169,
      169,
      169
    ],
    darkgreen: [
      0,
      100,
      0
    ],
    darkgrey: [
      169,
      169,
      169
    ],
    darkkhaki: [
      189,
      183,
      107
    ],
    darkmagenta: [
      139,
      0,
      139
    ],
    darkolivegreen: [
      85,
      107,
      47
    ],
    darkorange: [
      255,
      140,
      0
    ],
    darkorchid: [
      153,
      50,
      204
    ],
    darkred: [
      139,
      0,
      0
    ],
    darksalmon: [
      233,
      150,
      122
    ],
    darkseagreen: [
      143,
      188,
      143
    ],
    darkslateblue: [
      72,
      61,
      139
    ],
    darkslategray: [
      47,
      79,
      79
    ],
    darkslategrey: [
      47,
      79,
      79
    ],
    darkturquoise: [
      0,
      206,
      209
    ],
    darkviolet: [
      148,
      0,
      211
    ],
    deeppink: [
      255,
      20,
      147
    ],
    deepskyblue: [
      0,
      191,
      255
    ],
    dimgray: [
      105,
      105,
      105
    ],
    dimgrey: [
      105,
      105,
      105
    ],
    dodgerblue: [
      30,
      144,
      255
    ],
    firebrick: [
      178,
      34,
      34
    ],
    floralwhite: [
      255,
      250,
      240
    ],
    forestgreen: [
      34,
      139,
      34
    ],
    fuchsia: [
      255,
      0,
      255
    ],
    gainsboro: [
      220,
      220,
      220
    ],
    ghostwhite: [
      248,
      248,
      255
    ],
    gold: [
      255,
      215,
      0
    ],
    goldenrod: [
      218,
      165,
      32
    ],
    gray: [
      128,
      128,
      128
    ],
    green: [
      0,
      128,
      0
    ],
    greenyellow: [
      173,
      255,
      47
    ],
    grey: [
      128,
      128,
      128
    ],
    honeydew: [
      240,
      255,
      240
    ],
    hotpink: [
      255,
      105,
      180
    ],
    indianred: [
      205,
      92,
      92
    ],
    indigo: [
      75,
      0,
      130
    ],
    ivory: [
      255,
      255,
      240
    ],
    khaki: [
      240,
      230,
      140
    ],
    lavender: [
      230,
      230,
      250
    ],
    lavenderblush: [
      255,
      240,
      245
    ],
    lawngreen: [
      124,
      252,
      0
    ],
    lemonchiffon: [
      255,
      250,
      205
    ],
    lightblue: [
      173,
      216,
      230
    ],
    lightcoral: [
      240,
      128,
      128
    ],
    lightcyan: [
      224,
      255,
      255
    ],
    lightgoldenrodyellow: [
      250,
      250,
      210
    ],
    lightgray: [
      211,
      211,
      211
    ],
    lightgreen: [
      144,
      238,
      144
    ],
    lightgrey: [
      211,
      211,
      211
    ],
    lightpink: [
      255,
      182,
      193
    ],
    lightsalmon: [
      255,
      160,
      122
    ],
    lightseagreen: [
      32,
      178,
      170
    ],
    lightskyblue: [
      135,
      206,
      250
    ],
    lightslategray: [
      119,
      136,
      153
    ],
    lightslategrey: [
      119,
      136,
      153
    ],
    lightsteelblue: [
      176,
      196,
      222
    ],
    lightyellow: [
      255,
      255,
      224
    ],
    lime: [
      0,
      255,
      0
    ],
    limegreen: [
      50,
      205,
      50
    ],
    linen: [
      250,
      240,
      230
    ],
    magenta: [
      255,
      0,
      255
    ],
    maroon: [
      128,
      0,
      0
    ],
    mediumaquamarine: [
      102,
      205,
      170
    ],
    mediumblue: [
      0,
      0,
      205
    ],
    mediumorchid: [
      186,
      85,
      211
    ],
    mediumpurple: [
      147,
      112,
      219
    ],
    mediumseagreen: [
      60,
      179,
      113
    ],
    mediumslateblue: [
      123,
      104,
      238
    ],
    mediumspringgreen: [
      0,
      250,
      154
    ],
    mediumturquoise: [
      72,
      209,
      204
    ],
    mediumvioletred: [
      199,
      21,
      133
    ],
    midnightblue: [
      25,
      25,
      112
    ],
    mintcream: [
      245,
      255,
      250
    ],
    mistyrose: [
      255,
      228,
      225
    ],
    moccasin: [
      255,
      228,
      181
    ],
    navajowhite: [
      255,
      222,
      173
    ],
    navy: [
      0,
      0,
      128
    ],
    oldlace: [
      253,
      245,
      230
    ],
    olive: [
      128,
      128,
      0
    ],
    olivedrab: [
      107,
      142,
      35
    ],
    orange: [
      255,
      165,
      0
    ],
    orangered: [
      255,
      69,
      0
    ],
    orchid: [
      218,
      112,
      214
    ],
    palegoldenrod: [
      238,
      232,
      170
    ],
    palegreen: [
      152,
      251,
      152
    ],
    paleturquoise: [
      175,
      238,
      238
    ],
    palevioletred: [
      219,
      112,
      147
    ],
    papayawhip: [
      255,
      239,
      213
    ],
    peachpuff: [
      255,
      218,
      185
    ],
    peru: [
      205,
      133,
      63
    ],
    pink: [
      255,
      192,
      203
    ],
    plum: [
      221,
      160,
      221
    ],
    powderblue: [
      176,
      224,
      230
    ],
    purple: [
      128,
      0,
      128
    ],
    rebeccapurple: [
      102,
      51,
      153
    ],
    red: [
      255,
      0,
      0
    ],
    rosybrown: [
      188,
      143,
      143
    ],
    royalblue: [
      65,
      105,
      225
    ],
    saddlebrown: [
      139,
      69,
      19
    ],
    salmon: [
      250,
      128,
      114
    ],
    sandybrown: [
      244,
      164,
      96
    ],
    seagreen: [
      46,
      139,
      87
    ],
    seashell: [
      255,
      245,
      238
    ],
    sienna: [
      160,
      82,
      45
    ],
    silver: [
      192,
      192,
      192
    ],
    skyblue: [
      135,
      206,
      235
    ],
    slateblue: [
      106,
      90,
      205
    ],
    slategray: [
      112,
      128,
      144
    ],
    slategrey: [
      112,
      128,
      144
    ],
    snow: [
      255,
      250,
      250
    ],
    springgreen: [
      0,
      255,
      127
    ],
    steelblue: [
      70,
      130,
      180
    ],
    tan: [
      210,
      180,
      140
    ],
    teal: [
      0,
      128,
      128
    ],
    thistle: [
      216,
      191,
      216
    ],
    tomato: [
      255,
      99,
      71
    ],
    turquoise: [
      64,
      224,
      208
    ],
    violet: [
      238,
      130,
      238
    ],
    wheat: [
      245,
      222,
      179
    ],
    white: [
      255,
      255,
      255
    ],
    whitesmoke: [
      245,
      245,
      245
    ],
    yellow: [
      255,
      255,
      0
    ],
    yellowgreen: [
      154,
      205,
      50
    ]
  };
  var xt = /^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i, kt = /^#([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i, R = /(?:\d+|\d*\.\d+)%?/, Z = /(?:\s*,\s*|\s+)/, $e = /\s*[,/]\s*/, F = /var\(--(?:[^ )]*?)(?:,(?:[^ )]*?|var\(--[^ )]*?\)))?\)/, St = new RegExp(`^(rgba?)\\(\\s*(${R.source}|${F.source})(?:${Z.source}(${R.source}|${F.source}))?(?:${Z.source}(${R.source}|${F.source}))?(?:${$e.source}(${R.source}|${F.source}))?\\s*\\)$`), Ct = new RegExp(`^(hsla?)\\(\\s*((?:${R.source})(?:deg|rad|grad|turn)?|${F.source})(?:${Z.source}(${R.source}|${F.source}))?(?:${Z.source}(${R.source}|${F.source}))?(?:${$e.source}(${R.source}|${F.source}))?\\s*\\)$`);
  function q(e3, { loose: t3 = false } = {}) {
    var _a, _b;
    if (typeof e3 != "string") return null;
    if (e3 = e3.trim(), e3 === "transparent") return {
      mode: "rgb",
      color: [
        "0",
        "0",
        "0"
      ],
      alpha: "0"
    };
    if (e3 in oe) return {
      mode: "rgb",
      color: oe[e3].map((o3) => o3.toString())
    };
    let r3 = e3.replace(kt, (o3, i3, l3, d3, u3) => [
      "#",
      i3,
      i3,
      l3,
      l3,
      d3,
      d3,
      u3 ? u3 + u3 : ""
    ].join("")).match(xt);
    if (r3 !== null) return {
      mode: "rgb",
      color: [
        parseInt(r3[1], 16),
        parseInt(r3[2], 16),
        parseInt(r3[3], 16)
      ].map((o3) => o3.toString()),
      alpha: r3[4] ? (parseInt(r3[4], 16) / 255).toString() : void 0
    };
    let n3 = e3.match(St) ?? e3.match(Ct);
    if (n3 === null) return null;
    let a3 = [
      n3[2],
      n3[3],
      n3[4]
    ].filter(Boolean).map((o3) => o3.toString());
    return a3.length === 2 && a3[0].startsWith("var(") ? {
      mode: n3[1],
      color: [
        a3[0]
      ],
      alpha: a3[1]
    } : !t3 && a3.length !== 3 || a3.length < 3 && !a3.some((o3) => /^var\(.*?\)$/.test(o3)) ? null : {
      mode: n3[1],
      color: a3,
      alpha: (_b = (_a = n3[5]) == null ? void 0 : _a.toString) == null ? void 0 : _b.call(_a)
    };
  }
  function le({ mode: e3, color: t3, alpha: r3 }) {
    let n3 = r3 !== void 0;
    return e3 === "rgba" || e3 === "hsla" ? `${e3}(${t3.join(", ")}${n3 ? `, ${r3}` : ""})` : `${e3}(${t3.join(" ")}${n3 ? ` / ${r3}` : ""})`;
  }
  function L(e3, t3, r3) {
    if (typeof e3 == "function") return e3({
      opacityValue: t3
    });
    let n3 = q(e3, {
      loose: true
    });
    return n3 === null ? r3 : le({
      ...n3,
      alpha: t3
    });
  }
  function O(e3, t3) {
    let r3 = [], n3 = [], a3 = 0, o3 = false;
    for (let i3 = 0; i3 < e3.length; i3++) {
      let l3 = e3[i3];
      r3.length === 0 && l3 === t3[0] && !o3 && (t3.length === 1 || e3.slice(i3, i3 + t3.length) === t3) && (n3.push(e3.slice(a3, i3)), a3 = i3 + t3.length), o3 = o3 ? false : l3 === "\\", l3 === "(" || l3 === "[" || l3 === "{" ? r3.push(l3) : (l3 === ")" && r3[r3.length - 1] === "(" || l3 === "]" && r3[r3.length - 1] === "[" || l3 === "}" && r3[r3.length - 1] === "{") && r3.pop();
    }
    return n3.push(e3.slice(a3)), n3;
  }
  var At = /* @__PURE__ */ new Set([
    "inset",
    "inherit",
    "initial",
    "revert",
    "unset"
  ]), Ot = /\ +(?![^(]*\))/g, je = /^-?(\d+|\.\d+)(.*?)$/g;
  function ee(e3) {
    return O(e3, ",").map((r3) => {
      let n3 = r3.trim(), a3 = {
        raw: n3
      }, o3 = n3.split(Ot), i3 = /* @__PURE__ */ new Set();
      for (let l3 of o3) je.lastIndex = 0, !i3.has("KEYWORD") && At.has(l3) ? (a3.keyword = l3, i3.add("KEYWORD")) : je.test(l3) ? i3.has("X") ? i3.has("Y") ? i3.has("BLUR") ? i3.has("SPREAD") || (a3.spread = l3, i3.add("SPREAD")) : (a3.blur = l3, i3.add("BLUR")) : (a3.y = l3, i3.add("Y")) : (a3.x = l3, i3.add("X")) : a3.color ? (a3.unknown || (a3.unknown = []), a3.unknown.push(l3)) : a3.color = l3;
      return a3.valid = a3.x !== void 0 && a3.y !== void 0, a3;
    });
  }
  var $t = [
    "min",
    "max",
    "clamp",
    "calc"
  ];
  function se(e3) {
    return $t.some((t3) => new RegExp(`^${t3}\\(.*\\)`).test(e3));
  }
  var jt = /* @__PURE__ */ new Set([
    "scroll-timeline-name",
    "timeline-scope",
    "view-timeline-name",
    "font-palette",
    "anchor-name",
    "anchor-scope",
    "position-anchor",
    "position-try-options",
    "scroll-timeline",
    "animation-timeline",
    "view-timeline",
    "position-try"
  ]);
  function j(e3, t3 = null, r3 = true) {
    let n3 = t3 && jt.has(t3.property);
    return e3.startsWith("--") && !n3 ? `var(${e3})` : e3.includes("url(") ? e3.split(/(url\(.*?\))/g).filter(Boolean).map((a3) => /^url\(.*?\)$/.test(a3) ? a3 : j(a3, t3, false)).join("") : (e3 = e3.replace(/([^\\])_+/g, (a3, o3) => o3 + " ".repeat(a3.length - 1)).replace(/^_/g, " ").replace(/\\_/g, "_"), r3 && (e3 = e3.trim()), e3 = Mt(e3), e3);
  }
  function Mt(e3) {
    let t3 = [
      "theme"
    ], r3 = [
      "min-content",
      "max-content",
      "fit-content",
      "safe-area-inset-top",
      "safe-area-inset-right",
      "safe-area-inset-bottom",
      "safe-area-inset-left",
      "titlebar-area-x",
      "titlebar-area-y",
      "titlebar-area-width",
      "titlebar-area-height",
      "keyboard-inset-top",
      "keyboard-inset-right",
      "keyboard-inset-bottom",
      "keyboard-inset-left",
      "keyboard-inset-width",
      "keyboard-inset-height",
      "radial-gradient",
      "linear-gradient",
      "conic-gradient",
      "repeating-radial-gradient",
      "repeating-linear-gradient",
      "repeating-conic-gradient",
      "anchor-size"
    ];
    return e3.replace(/(calc|min|max|clamp)\(.+\)/g, (n3) => {
      let a3 = "";
      function o3() {
        let i3 = a3.trimEnd();
        return i3[i3.length - 1];
      }
      for (let i3 = 0; i3 < n3.length; i3++) {
        let l3 = function(f3) {
          return f3.split("").every((g3, c3) => n3[i3 + c3] === g3);
        }, d3 = function(f3) {
          let g3 = 1 / 0;
          for (let h3 of f3) {
            let y3 = n3.indexOf(h3, i3);
            y3 !== -1 && y3 < g3 && (g3 = y3);
          }
          let c3 = n3.slice(i3, g3);
          return i3 += c3.length - 1, c3;
        }, u3 = n3[i3];
        if (l3("var")) a3 += d3([
          ")",
          ","
        ]);
        else if (r3.some((f3) => l3(f3))) {
          let f3 = r3.find((g3) => l3(g3));
          a3 += f3, i3 += f3.length - 1;
        } else t3.some((f3) => l3(f3)) ? a3 += d3([
          ")"
        ]) : l3("[") ? a3 += d3([
          "]"
        ]) : [
          "+",
          "-",
          "*",
          "/"
        ].includes(u3) && ![
          "(",
          "+",
          "-",
          "*",
          "/",
          ","
        ].includes(o3()) ? a3 += ` ${u3} ` : a3 += u3;
      }
      return a3.replace(/\s+/g, " ");
    });
  }
  function de(e3) {
    return e3.startsWith("url(");
  }
  function ue(e3) {
    return !isNaN(Number(e3)) || se(e3);
  }
  function X(e3) {
    return e3.endsWith("%") && ue(e3.slice(0, -1)) || se(e3);
  }
  var Vt = [
    "cm",
    "mm",
    "Q",
    "in",
    "pc",
    "pt",
    "px",
    "em",
    "ex",
    "ch",
    "rem",
    "lh",
    "rlh",
    "vw",
    "vh",
    "vmin",
    "vmax",
    "vb",
    "vi",
    "svw",
    "svh",
    "lvw",
    "lvh",
    "dvw",
    "dvh",
    "cqw",
    "cqh",
    "cqi",
    "cqb",
    "cqmin",
    "cqmax"
  ], Et = `(?:${Vt.join("|")})`;
  function J(e3) {
    return e3 === "0" || new RegExp(`^[+-]?[0-9]*.?[0-9]+(?:[eE][+-]?[0-9]+)?${Et}$`).test(e3) || se(e3);
  }
  var Tt = /* @__PURE__ */ new Set([
    "thin",
    "medium",
    "thick"
  ]);
  function Ve(e3) {
    return Tt.has(e3);
  }
  function Ee(e3) {
    let t3 = ee(j(e3));
    for (let r3 of t3) if (!r3.valid) return false;
    return true;
  }
  function Te(e3) {
    let t3 = 0;
    return O(e3, "_").every((n3) => (n3 = j(n3), n3.startsWith("var(") ? true : q(n3, {
      loose: true
    }) !== null ? (t3++, true) : false)) ? t3 > 0 : false;
  }
  function Ie(e3) {
    let t3 = 0;
    return O(e3, ",").every((n3) => (n3 = j(n3), n3.startsWith("var(") ? true : de(n3) || Nt(n3) || [
      "element(",
      "image(",
      "cross-fade(",
      "image-set("
    ].some((a3) => n3.startsWith(a3)) ? (t3++, true) : false)) ? t3 > 0 : false;
  }
  var It = /* @__PURE__ */ new Set([
    "conic-gradient",
    "linear-gradient",
    "radial-gradient",
    "repeating-conic-gradient",
    "repeating-linear-gradient",
    "repeating-radial-gradient"
  ]);
  function Nt(e3) {
    e3 = j(e3);
    for (let t3 of It) if (e3.startsWith(`${t3}(`)) return true;
    return false;
  }
  var Pt = /* @__PURE__ */ new Set([
    "center",
    "top",
    "right",
    "bottom",
    "left"
  ]);
  function Ne(e3) {
    let t3 = 0;
    return O(e3, "_").every((n3) => (n3 = j(n3), n3.startsWith("var(") ? true : Pt.has(n3) || J(n3) || X(n3) ? (t3++, true) : false)) ? t3 > 0 : false;
  }
  function Pe(e3) {
    let t3 = 0;
    return O(e3, ",").every((n3) => (n3 = j(n3), n3.startsWith("var(") ? true : n3.includes(" ") && !/(['"])([^"']+)\1/g.test(n3) || /^\d/g.test(n3) ? false : (t3++, true))) ? t3 > 0 : false;
  }
  var Dt = /* @__PURE__ */ new Set([
    "serif",
    "sans-serif",
    "monospace",
    "cursive",
    "fantasy",
    "system-ui",
    "ui-serif",
    "ui-sans-serif",
    "ui-monospace",
    "ui-rounded",
    "math",
    "emoji",
    "fangsong"
  ]);
  function De(e3) {
    return Dt.has(e3);
  }
  var Rt = /* @__PURE__ */ new Set([
    "xx-small",
    "x-small",
    "small",
    "medium",
    "large",
    "x-large",
    "xx-large",
    "xxx-large"
  ]);
  function Re(e3) {
    return Rt.has(e3);
  }
  var Ft = /* @__PURE__ */ new Set([
    "larger",
    "smaller"
  ]);
  function Fe(e3) {
    return Ft.has(e3);
  }
  function K(e3) {
    if (e3 = `${e3}`, e3 === "0") return "0";
    if (/^[+-]?(\d+|\d*\.\d+)(e[+-]?\d+)?(%|\w+)?$/.test(e3)) return e3.replace(/^[+-]?/, (r3) => r3 === "-" ? "" : "-");
    let t3 = [
      "var",
      "calc",
      "min",
      "max",
      "clamp"
    ];
    for (let r3 of t3) if (e3.includes(`${r3}(`)) return `calc(${e3} * -1)`;
  }
  function ze(e3) {
    let t3 = [
      "cover",
      "contain"
    ];
    return O(e3, ",").every((r3) => {
      let n3 = O(r3, "_").filter(Boolean);
      return n3.length === 1 && t3.includes(n3[0]) ? true : n3.length !== 1 && n3.length !== 2 ? false : n3.every((a3) => J(a3) || X(a3) || a3 === "auto");
    });
  }
  var _e = /* @__PURE__ */ new Set();
  function fe(e3, t3, r3) {
    typeof xs < "u" && xs.env.JEST_WORKER_ID || r3 && _e.has(r3) || (r3 && _e.add(r3), console.warn(""), t3.forEach((n3) => console.warn(e3, "-", n3)));
  }
  var Q = {
    info(e3, t3) {
      fe(ne$5.bold(ne$5.cyan("info")), ...Array.isArray(e3) ? [
        e3
      ] : [
        t3,
        e3
      ]);
    },
    warn(e3, t3) {
      fe(ne$5.bold(ne$5.yellow("warn")), ...Array.isArray(e3) ? [
        e3
      ] : [
        t3,
        e3
      ]);
    },
    risk(e3, t3) {
      fe(ne$5.bold(ne$5.magenta("risk")), ...Array.isArray(e3) ? [
        e3
      ] : [
        t3,
        e3
      ]);
    }
  };
  var We = {
    optimizeUniversalDefaults: false,
    generalizedModifiers: true,
    disableColorOpacityUtilitiesByDefault: false,
    relativeContentPathsByDefault: false
  }, Le = {
    future: [
      "hoverOnlyWhenSupported",
      "respectDefaultRingColorOpacity",
      "disableColorOpacityUtilitiesByDefault",
      "relativeContentPathsByDefault"
    ],
    experimental: [
      "optimizeUniversalDefaults",
      "generalizedModifiers"
    ]
  };
  function z(e3, t3) {
    var _a, _b;
    return Le.future.includes(t3) ? e3.future === "all" || (((_a = e3 == null ? void 0 : e3.future) == null ? void 0 : _a[t3]) ?? We[t3] ?? false) : Le.experimental.includes(t3) ? e3.experimental === "all" || (((_b = e3 == null ? void 0 : e3.experimental) == null ? void 0 : _b[t3]) ?? We[t3] ?? false) : false;
  }
  function Be(e3, t3) {
    e3.walkClasses((r3) => {
      r3.value = t3(r3.value), r3.raws && r3.raws.value && (r3.raws.value = _(r3.raws.value));
    });
  }
  function He(e3, t3) {
    if (!W(e3)) return;
    let r3 = e3.slice(1, -1);
    if (t3(r3)) return j(r3);
  }
  function zt(e3, t3 = {}, r3) {
    let n3 = t3[e3];
    if (n3 !== void 0) return K(n3);
    if (W(e3)) {
      let a3 = He(e3, r3);
      return a3 === void 0 ? void 0 : K(a3);
    }
  }
  function ce(e3, t3 = {}, { validate: r3 = () => true } = {}) {
    var _a;
    let n3 = (_a = t3.values) == null ? void 0 : _a[e3];
    return n3 !== void 0 ? n3 : t3.supportsNegativeValues && e3.startsWith("-") ? zt(e3.slice(1), t3.values, r3) : He(e3, r3);
  }
  function W(e3) {
    return e3.startsWith("[") && e3.endsWith("]");
  }
  function Ge(e3) {
    let t3 = e3.lastIndexOf("/"), r3 = e3.lastIndexOf("[", t3), n3 = e3.indexOf("]", t3);
    return e3[t3 - 1] === "]" || e3[t3 + 1] === "[" || r3 !== -1 && n3 !== -1 && r3 < t3 && t3 < n3 && (t3 = e3.lastIndexOf("/", r3)), t3 === -1 || t3 === e3.length - 1 ? [
      e3,
      void 0
    ] : W(e3) && !e3.includes("]/[") ? [
      e3,
      void 0
    ] : [
      e3.slice(0, t3),
      e3.slice(t3 + 1)
    ];
  }
  function Ue(e3) {
    if (typeof e3 == "string" && e3.includes("<alpha-value>")) {
      let t3 = e3;
      return ({ opacityValue: r3 = 1 }) => t3.replace(/<alpha-value>/g, r3);
    }
    return e3;
  }
  function Ye(e3) {
    return j(e3.slice(1, -1));
  }
  function _t(e3, t3 = {}, { tailwindConfig: r3 = {} } = {}) {
    var _a, _b, _c, _d, _e2;
    if (((_a = t3.values) == null ? void 0 : _a[e3]) !== void 0) return Ue((_b = t3.values) == null ? void 0 : _b[e3]);
    let [n3, a3] = Ge(e3);
    if (a3 !== void 0) {
      let o3 = ((_c = t3.values) == null ? void 0 : _c[n3]) ?? (W(n3) ? n3.slice(1, -1) : void 0);
      return o3 === void 0 ? void 0 : (o3 = Ue(o3), W(a3) ? L(o3, Ye(a3)) : ((_e2 = (_d = r3.theme) == null ? void 0 : _d.opacity) == null ? void 0 : _e2[a3]) === void 0 ? void 0 : L(o3, r3.theme.opacity[a3]));
    }
    return ce(e3, t3, {
      validate: Te
    });
  }
  function Wt(e3, t3 = {}) {
    var _a;
    return (_a = t3.values) == null ? void 0 : _a[e3];
  }
  function M(e3) {
    return (t3, r3) => ce(t3, r3, {
      validate: e3
    });
  }
  var qe = {
    any: ce,
    color: _t,
    url: M(de),
    image: M(Ie),
    length: M(J),
    percentage: M(X),
    position: M(Ne),
    lookup: Wt,
    "generic-name": M(De),
    "family-name": M(Pe),
    number: M(ue),
    "line-width": M(Ve),
    "absolute-size": M(Re),
    "relative-size": M(Fe),
    shadow: M(Ee),
    size: M(ze)
  };
  function* Xe(e3, t3, r3, n3) {
    var _a;
    let a3 = z(n3, "generalizedModifiers"), [o3, i3] = Ge(t3);
    if (a3 && r3.modifiers != null && (r3.modifiers === "any" || typeof r3.modifiers == "object" && (i3 && W(i3) || i3 in r3.modifiers)) || (o3 = t3, i3 = void 0), i3 !== void 0 && o3 === "" && (o3 = "DEFAULT"), i3 !== void 0 && typeof r3.modifiers == "object") {
      let d3 = ((_a = r3.modifiers) == null ? void 0 : _a[i3]) ?? null;
      d3 !== null ? i3 = d3 : W(i3) && (i3 = Ye(i3));
    }
    for (let { type: d3 } of e3 ?? []) {
      let u3 = qe[d3](o3, r3, {
        tailwindConfig: n3
      });
      u3 !== void 0 && (yield [
        u3,
        d3,
        i3 ?? null
      ]);
    }
  }
  typeof xs < "u" ? {
    DEBUG: Ut(xs.env.DEBUG)
  } : {};
  var te = new String("*"), pe = Symbol("__NONE__");
  function Ut(e3) {
    if (e3 === void 0) return false;
    if (e3 === "true" || e3 === "1") return true;
    if (e3 === "false" || e3 === "0") return false;
    if (e3 === "*") return true;
    let t3 = e3.split(",").map((r3) => r3.split(":")[0]);
    return t3.includes("-tailwindcss") ? false : !!t3.includes("tailwindcss");
  }
  function N(e3) {
    var _a;
    let t3 = Pu.className();
    return t3.value = e3, _(((_a = t3 == null ? void 0 : t3.raws) == null ? void 0 : _a.value) ?? t3.value);
  }
  var ge = {
    "::after": [
      "terminal",
      "jumpable"
    ],
    "::backdrop": [
      "terminal",
      "jumpable"
    ],
    "::before": [
      "terminal",
      "jumpable"
    ],
    "::cue": [
      "terminal"
    ],
    "::cue-region": [
      "terminal"
    ],
    "::first-letter": [
      "terminal",
      "jumpable"
    ],
    "::first-line": [
      "terminal",
      "jumpable"
    ],
    "::grammar-error": [
      "terminal"
    ],
    "::marker": [
      "terminal",
      "jumpable"
    ],
    "::part": [
      "terminal",
      "actionable"
    ],
    "::placeholder": [
      "terminal",
      "jumpable"
    ],
    "::selection": [
      "terminal",
      "jumpable"
    ],
    "::slotted": [
      "terminal"
    ],
    "::spelling-error": [
      "terminal"
    ],
    "::target-text": [
      "terminal"
    ],
    "::file-selector-button": [
      "terminal",
      "actionable"
    ],
    "::deep": [
      "actionable"
    ],
    "::v-deep": [
      "actionable"
    ],
    "::ng-deep": [
      "actionable"
    ],
    ":after": [
      "terminal",
      "jumpable"
    ],
    ":before": [
      "terminal",
      "jumpable"
    ],
    ":first-letter": [
      "terminal",
      "jumpable"
    ],
    ":first-line": [
      "terminal",
      "jumpable"
    ],
    ":where": [],
    ":is": [],
    ":has": [],
    __default__: [
      "terminal",
      "actionable"
    ]
  };
  function re(e3) {
    let [t3] = Je(e3);
    return t3.forEach(([r3, n3]) => r3.removeChild(n3)), e3.nodes.push(...t3.map(([, r3]) => r3)), e3;
  }
  function Je(e3) {
    let t3 = [], r3 = null;
    for (let n3 of e3.nodes) if (n3.type === "combinator") t3 = t3.filter(([, a3]) => he(a3).includes("jumpable")), r3 = null;
    else if (n3.type === "pseudo") {
      Ht(n3) ? (r3 = n3, t3.push([
        e3,
        n3,
        null
      ])) : r3 && Gt(n3, r3) ? t3.push([
        e3,
        n3,
        r3
      ]) : r3 = null;
      for (let a3 of n3.nodes ?? []) {
        let [o3, i3] = Je(a3);
        r3 = i3 || r3, t3.push(...o3);
      }
    }
    return [
      t3,
      r3
    ];
  }
  function Ke(e3) {
    return e3.value.startsWith("::") || ge[e3.value] !== void 0;
  }
  function Ht(e3) {
    return Ke(e3) && he(e3).includes("terminal");
  }
  function Gt(e3, t3) {
    return e3.type !== "pseudo" || Ke(e3) ? false : he(t3).includes("actionable");
  }
  function he(e3) {
    return ge[e3.value] ?? ge.__default__;
  }
  var be = ":merge";
  function ne(e3, { context: t3, candidate: r3 }) {
    let n3 = (t3 == null ? void 0 : t3.tailwindConfig.prefix) ?? "", a3 = e3.map((i3) => {
      let l3 = Pu().astSync(i3.format);
      return {
        ...i3,
        ast: i3.respectPrefix ? Y(n3, l3) : l3
      };
    }), o3 = Pu.root({
      nodes: [
        Pu.selector({
          nodes: [
            Pu.className({
              value: N(r3)
            })
          ]
        })
      ]
    });
    for (let { ast: i3 } of a3) [o3, i3] = Xt(o3, i3), i3.walkNesting((l3) => l3.replaceWith(...o3.nodes[0].nodes)), o3 = i3;
    return o3;
  }
  function Qe(e3) {
    let t3 = [];
    for (; e3.prev() && e3.prev().type !== "combinator"; ) e3 = e3.prev();
    for (; e3 && e3.type !== "combinator"; ) t3.push(e3), e3 = e3.next();
    return t3;
  }
  function qt(e3) {
    return e3.sort((t3, r3) => t3.type === "tag" && r3.type === "class" ? -1 : t3.type === "class" && r3.type === "tag" ? 1 : t3.type === "class" && r3.type === "pseudo" && r3.value.startsWith("::") ? -1 : t3.type === "pseudo" && t3.value.startsWith("::") && r3.type === "class" ? 1 : e3.index(t3) - e3.index(r3)), e3;
  }
  function ye(e3, t3) {
    let r3 = false;
    e3.walk((n3) => {
      if (n3.type === "class" && n3.value === t3) return r3 = true, false;
    }), r3 || e3.remove();
  }
  function we(e3, t3, { context: r3, candidate: n3, base: a3 }) {
    var _a;
    let o3 = ((_a = r3 == null ? void 0 : r3.tailwindConfig) == null ? void 0 : _a.separator) ?? ":";
    a3 = a3 ?? O(n3, o3).pop();
    let i3 = Pu().astSync(e3);
    if (i3.walkClasses((f3) => {
      f3.raws && f3.value.includes(a3) && (f3.raws.value = N(_$c(f3.raws.value)));
    }), i3.each((f3) => ye(f3, a3)), i3.length === 0) return null;
    let l3 = Array.isArray(t3) ? ne(t3, {
      context: r3,
      candidate: n3
    }) : t3;
    if (l3 === null) return i3.toString();
    let d3 = Pu.comment({
      value: "/*__simple__*/"
    }), u3 = Pu.comment({
      value: "/*__simple__*/"
    });
    return i3.walkClasses((f3) => {
      if (f3.value !== a3) return;
      let g3 = f3.parent, c3 = l3.nodes[0].nodes;
      if (g3.nodes.length === 1) {
        f3.replaceWith(...c3);
        return;
      }
      let h3 = Qe(f3);
      g3.insertBefore(h3[0], d3), g3.insertAfter(h3[h3.length - 1], u3);
      for (let m3 of c3) g3.insertBefore(h3[0], m3.clone());
      f3.remove(), h3 = Qe(d3);
      let y3 = g3.index(d3);
      g3.nodes.splice(y3, h3.length, ...qt(Pu.selector({
        nodes: h3
      })).nodes), d3.remove(), u3.remove();
    }), i3.walkPseudos((f3) => {
      f3.value === be && f3.replaceWith(f3.nodes);
    }), i3.each((f3) => re(f3)), i3.toString();
  }
  function Xt(e3, t3) {
    let r3 = [];
    return e3.walkPseudos((n3) => {
      n3.value === be && r3.push({
        pseudo: n3,
        value: n3.nodes[0].toString()
      });
    }), t3.walkPseudos((n3) => {
      if (n3.value !== be) return;
      let a3 = n3.nodes[0].toString(), o3 = r3.find((u3) => u3.value === a3);
      if (!o3) return;
      let i3 = [], l3 = n3.next();
      for (; l3 && l3.type !== "combinator"; ) i3.push(l3), l3 = l3.next();
      let d3 = l3;
      o3.pseudo.parent.insertAfter(o3.pseudo, Pu.selector({
        nodes: i3.map((u3) => u3.clone())
      })), n3.remove(), i3.forEach((u3) => u3.remove()), d3 && d3.type === "combinator" && d3.remove();
    }), [
      e3,
      t3
    ];
  }
  function Ze(e3) {
    return _(`.${N(e3)}`);
  }
  function B(e3) {
    return [
      "fontSize",
      "outline"
    ].includes(e3) ? (t3) => (typeof t3 == "function" && (t3 = t3({})), Array.isArray(t3) && (t3 = t3[0]), t3) : e3 === "fontFamily" ? (t3) => {
      typeof t3 == "function" && (t3 = t3({}));
      let r3 = Array.isArray(t3) && I(t3[1]) ? t3[0] : t3;
      return Array.isArray(r3) ? r3.join(", ") : r3;
    } : [
      "boxShadow",
      "transitionProperty",
      "transitionDuration",
      "transitionDelay",
      "transitionTimingFunction",
      "backgroundImage",
      "backgroundSize",
      "backgroundColor",
      "cursor",
      "animation"
    ].includes(e3) ? (t3) => (typeof t3 == "function" && (t3 = t3({})), Array.isArray(t3) && (t3 = t3.join(", ")), t3) : [
      "gridTemplateColumns",
      "gridTemplateRows",
      "objectPosition"
    ].includes(e3) ? (t3) => (typeof t3 == "function" && (t3 = t3({})), typeof t3 == "string" && (t3 = F$8.list.comma(t3).join(" ")), t3) : (t3, r3 = {}) => (typeof t3 == "function" && (t3 = t3(r3)), t3);
  }
  function s(e3, t3 = [
    [
      e3,
      [
        e3
      ]
    ]
  ], { filterDefault: r3 = false, ...n3 } = {}) {
    let a3 = B(e3);
    return function({ matchUtilities: o3, theme: i3 }) {
      for (let l3 of t3) {
        let d3 = Array.isArray(l3[0]) ? l3 : [
          l3
        ];
        o3(d3.reduce((u3, [f3, g3]) => Object.assign(u3, {
          [f3]: (c3) => g3.reduce((h3, y3) => Array.isArray(y3) ? Object.assign(h3, {
            [y3[0]]: y3[1]
          }) : Object.assign(h3, {
            [y3]: a3(c3)
          }), {})
        }), {}), {
          ...n3,
          values: r3 ? Object.fromEntries(Object.entries(i3(e3) ?? {}).filter(([u3]) => u3 !== "DEFAULT")) : i3(e3)
        });
      }
    };
  }
  var V = [
    "translate(var(--tw-translate-x), var(--tw-translate-y))",
    "rotate(var(--tw-rotate))",
    "skewX(var(--tw-skew-x))",
    "skewY(var(--tw-skew-y))",
    "scaleX(var(--tw-scale-x))",
    "scaleY(var(--tw-scale-y))"
  ].join(" ");
  ({
    inset: s("inset", [
      [
        "inset",
        [
          "inset"
        ]
      ],
      [
        [
          "inset-x",
          [
            "left",
            "right"
          ]
        ],
        [
          "inset-y",
          [
            "top",
            "bottom"
          ]
        ]
      ],
      [
        [
          "start",
          [
            "inset-inline-start"
          ]
        ],
        [
          "end",
          [
            "inset-inline-end"
          ]
        ],
        [
          "top",
          [
            "top"
          ]
        ],
        [
          "right",
          [
            "right"
          ]
        ],
        [
          "bottom",
          [
            "bottom"
          ]
        ],
        [
          "left",
          [
            "left"
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    zIndex: s("zIndex", [
      [
        "z",
        [
          "zIndex"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    order: s("order", void 0, {
      supportsNegativeValues: true
    }),
    gridColumn: s("gridColumn", [
      [
        "col",
        [
          "gridColumn"
        ]
      ]
    ]),
    gridColumnStart: s("gridColumnStart", [
      [
        "col-start",
        [
          "gridColumnStart"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    gridColumnEnd: s("gridColumnEnd", [
      [
        "col-end",
        [
          "gridColumnEnd"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    gridRow: s("gridRow", [
      [
        "row",
        [
          "gridRow"
        ]
      ]
    ]),
    gridRowStart: s("gridRowStart", [
      [
        "row-start",
        [
          "gridRowStart"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    gridRowEnd: s("gridRowEnd", [
      [
        "row-end",
        [
          "gridRowEnd"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    margin: s("margin", [
      [
        "m",
        [
          "margin"
        ]
      ],
      [
        [
          "mx",
          [
            "margin-left",
            "margin-right"
          ]
        ],
        [
          "my",
          [
            "margin-top",
            "margin-bottom"
          ]
        ]
      ],
      [
        [
          "ms",
          [
            "margin-inline-start"
          ]
        ],
        [
          "me",
          [
            "margin-inline-end"
          ]
        ],
        [
          "mt",
          [
            "margin-top"
          ]
        ],
        [
          "mr",
          [
            "margin-right"
          ]
        ],
        [
          "mb",
          [
            "margin-bottom"
          ]
        ],
        [
          "ml",
          [
            "margin-left"
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    aspectRatio: s("aspectRatio", [
      [
        "aspect",
        [
          "aspect-ratio"
        ]
      ]
    ]),
    size: s("size", [
      [
        "size",
        [
          "width",
          "height"
        ]
      ]
    ]),
    height: s("height", [
      [
        "h",
        [
          "height"
        ]
      ]
    ]),
    maxHeight: s("maxHeight", [
      [
        "max-h",
        [
          "maxHeight"
        ]
      ]
    ]),
    minHeight: s("minHeight", [
      [
        "min-h",
        [
          "minHeight"
        ]
      ]
    ]),
    width: s("width", [
      [
        "w",
        [
          "width"
        ]
      ]
    ]),
    minWidth: s("minWidth", [
      [
        "min-w",
        [
          "minWidth"
        ]
      ]
    ]),
    maxWidth: s("maxWidth", [
      [
        "max-w",
        [
          "maxWidth"
        ]
      ]
    ]),
    flex: s("flex"),
    flexShrink: s("flexShrink", [
      [
        "flex-shrink",
        [
          "flex-shrink"
        ]
      ],
      [
        "shrink",
        [
          "flex-shrink"
        ]
      ]
    ]),
    flexGrow: s("flexGrow", [
      [
        "flex-grow",
        [
          "flex-grow"
        ]
      ],
      [
        "grow",
        [
          "flex-grow"
        ]
      ]
    ]),
    flexBasis: s("flexBasis", [
      [
        "basis",
        [
          "flex-basis"
        ]
      ]
    ]),
    transformOrigin: s("transformOrigin", [
      [
        "origin",
        [
          "transformOrigin"
        ]
      ]
    ]),
    translate: s("translate", [
      [
        [
          "translate-x",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-translate-x",
            [
              "transform",
              V
            ]
          ]
        ],
        [
          "translate-y",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-translate-y",
            [
              "transform",
              V
            ]
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    rotate: s("rotate", [
      [
        "rotate",
        [
          [
            "@defaults transform",
            {}
          ],
          "--tw-rotate",
          [
            "transform",
            V
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    skew: s("skew", [
      [
        [
          "skew-x",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-skew-x",
            [
              "transform",
              V
            ]
          ]
        ],
        [
          "skew-y",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-skew-y",
            [
              "transform",
              V
            ]
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    scale: s("scale", [
      [
        "scale",
        [
          [
            "@defaults transform",
            {}
          ],
          "--tw-scale-x",
          "--tw-scale-y",
          [
            "transform",
            V
          ]
        ]
      ],
      [
        [
          "scale-x",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-scale-x",
            [
              "transform",
              V
            ]
          ]
        ],
        [
          "scale-y",
          [
            [
              "@defaults transform",
              {}
            ],
            "--tw-scale-y",
            [
              "transform",
              V
            ]
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    cursor: s("cursor"),
    scrollMargin: s("scrollMargin", [
      [
        "scroll-m",
        [
          "scroll-margin"
        ]
      ],
      [
        [
          "scroll-mx",
          [
            "scroll-margin-left",
            "scroll-margin-right"
          ]
        ],
        [
          "scroll-my",
          [
            "scroll-margin-top",
            "scroll-margin-bottom"
          ]
        ]
      ],
      [
        [
          "scroll-ms",
          [
            "scroll-margin-inline-start"
          ]
        ],
        [
          "scroll-me",
          [
            "scroll-margin-inline-end"
          ]
        ],
        [
          "scroll-mt",
          [
            "scroll-margin-top"
          ]
        ],
        [
          "scroll-mr",
          [
            "scroll-margin-right"
          ]
        ],
        [
          "scroll-mb",
          [
            "scroll-margin-bottom"
          ]
        ],
        [
          "scroll-ml",
          [
            "scroll-margin-left"
          ]
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    scrollPadding: s("scrollPadding", [
      [
        "scroll-p",
        [
          "scroll-padding"
        ]
      ],
      [
        [
          "scroll-px",
          [
            "scroll-padding-left",
            "scroll-padding-right"
          ]
        ],
        [
          "scroll-py",
          [
            "scroll-padding-top",
            "scroll-padding-bottom"
          ]
        ]
      ],
      [
        [
          "scroll-ps",
          [
            "scroll-padding-inline-start"
          ]
        ],
        [
          "scroll-pe",
          [
            "scroll-padding-inline-end"
          ]
        ],
        [
          "scroll-pt",
          [
            "scroll-padding-top"
          ]
        ],
        [
          "scroll-pr",
          [
            "scroll-padding-right"
          ]
        ],
        [
          "scroll-pb",
          [
            "scroll-padding-bottom"
          ]
        ],
        [
          "scroll-pl",
          [
            "scroll-padding-left"
          ]
        ]
      ]
    ]),
    listStyleType: s("listStyleType", [
      [
        "list",
        [
          "listStyleType"
        ]
      ]
    ]),
    listStyleImage: s("listStyleImage", [
      [
        "list-image",
        [
          "listStyleImage"
        ]
      ]
    ]),
    columns: s("columns", [
      [
        "columns",
        [
          "columns"
        ]
      ]
    ]),
    gridAutoColumns: s("gridAutoColumns", [
      [
        "auto-cols",
        [
          "gridAutoColumns"
        ]
      ]
    ]),
    gridAutoRows: s("gridAutoRows", [
      [
        "auto-rows",
        [
          "gridAutoRows"
        ]
      ]
    ]),
    gridTemplateColumns: s("gridTemplateColumns", [
      [
        "grid-cols",
        [
          "gridTemplateColumns"
        ]
      ]
    ]),
    gridTemplateRows: s("gridTemplateRows", [
      [
        "grid-rows",
        [
          "gridTemplateRows"
        ]
      ]
    ]),
    gap: s("gap", [
      [
        "gap",
        [
          "gap"
        ]
      ],
      [
        [
          "gap-x",
          [
            "columnGap"
          ]
        ],
        [
          "gap-y",
          [
            "rowGap"
          ]
        ]
      ]
    ]),
    borderRadius: s("borderRadius", [
      [
        "rounded",
        [
          "border-radius"
        ]
      ],
      [
        [
          "rounded-s",
          [
            "border-start-start-radius",
            "border-end-start-radius"
          ]
        ],
        [
          "rounded-e",
          [
            "border-start-end-radius",
            "border-end-end-radius"
          ]
        ],
        [
          "rounded-t",
          [
            "border-top-left-radius",
            "border-top-right-radius"
          ]
        ],
        [
          "rounded-r",
          [
            "border-top-right-radius",
            "border-bottom-right-radius"
          ]
        ],
        [
          "rounded-b",
          [
            "border-bottom-right-radius",
            "border-bottom-left-radius"
          ]
        ],
        [
          "rounded-l",
          [
            "border-top-left-radius",
            "border-bottom-left-radius"
          ]
        ]
      ],
      [
        [
          "rounded-ss",
          [
            "border-start-start-radius"
          ]
        ],
        [
          "rounded-se",
          [
            "border-start-end-radius"
          ]
        ],
        [
          "rounded-ee",
          [
            "border-end-end-radius"
          ]
        ],
        [
          "rounded-es",
          [
            "border-end-start-radius"
          ]
        ],
        [
          "rounded-tl",
          [
            "border-top-left-radius"
          ]
        ],
        [
          "rounded-tr",
          [
            "border-top-right-radius"
          ]
        ],
        [
          "rounded-br",
          [
            "border-bottom-right-radius"
          ]
        ],
        [
          "rounded-bl",
          [
            "border-bottom-left-radius"
          ]
        ]
      ]
    ]),
    borderWidth: s("borderWidth", [
      [
        "border",
        [
          [
            "@defaults border-width",
            {}
          ],
          "border-width"
        ]
      ],
      [
        [
          "border-x",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-left-width",
            "border-right-width"
          ]
        ],
        [
          "border-y",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-top-width",
            "border-bottom-width"
          ]
        ]
      ],
      [
        [
          "border-s",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-inline-start-width"
          ]
        ],
        [
          "border-e",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-inline-end-width"
          ]
        ],
        [
          "border-t",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-top-width"
          ]
        ],
        [
          "border-r",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-right-width"
          ]
        ],
        [
          "border-b",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-bottom-width"
          ]
        ],
        [
          "border-l",
          [
            [
              "@defaults border-width",
              {}
            ],
            "border-left-width"
          ]
        ]
      ]
    ], {
      type: [
        "line-width",
        "length"
      ]
    }),
    borderOpacity: s("borderOpacity", [
      [
        "border-opacity",
        [
          "--tw-border-opacity"
        ]
      ]
    ]),
    backgroundOpacity: s("backgroundOpacity", [
      [
        "bg-opacity",
        [
          "--tw-bg-opacity"
        ]
      ]
    ]),
    backgroundImage: s("backgroundImage", [
      [
        "bg",
        [
          "background-image"
        ]
      ]
    ], {
      type: [
        "lookup",
        "image",
        "url"
      ]
    }),
    backgroundSize: s("backgroundSize", [
      [
        "bg",
        [
          "background-size"
        ]
      ]
    ], {
      type: [
        "lookup",
        "length",
        "percentage",
        "size"
      ]
    }),
    backgroundPosition: s("backgroundPosition", [
      [
        "bg",
        [
          "background-position"
        ]
      ]
    ], {
      type: [
        "lookup",
        [
          "position",
          {
            preferOnConflict: true
          }
        ]
      ]
    }),
    strokeWidth: s("strokeWidth", [
      [
        "stroke",
        [
          "stroke-width"
        ]
      ]
    ], {
      type: [
        "length",
        "number",
        "percentage"
      ]
    }),
    objectPosition: s("objectPosition", [
      [
        "object",
        [
          "object-position"
        ]
      ]
    ]),
    padding: s("padding", [
      [
        "p",
        [
          "padding"
        ]
      ],
      [
        [
          "px",
          [
            "padding-left",
            "padding-right"
          ]
        ],
        [
          "py",
          [
            "padding-top",
            "padding-bottom"
          ]
        ]
      ],
      [
        [
          "ps",
          [
            "padding-inline-start"
          ]
        ],
        [
          "pe",
          [
            "padding-inline-end"
          ]
        ],
        [
          "pt",
          [
            "padding-top"
          ]
        ],
        [
          "pr",
          [
            "padding-right"
          ]
        ],
        [
          "pb",
          [
            "padding-bottom"
          ]
        ],
        [
          "pl",
          [
            "padding-left"
          ]
        ]
      ]
    ]),
    textIndent: s("textIndent", [
      [
        "indent",
        [
          "text-indent"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    fontWeight: s("fontWeight", [
      [
        "font",
        [
          "fontWeight"
        ]
      ]
    ], {
      type: [
        "lookup",
        "number",
        "any"
      ]
    }),
    lineHeight: s("lineHeight", [
      [
        "leading",
        [
          "lineHeight"
        ]
      ]
    ]),
    letterSpacing: s("letterSpacing", [
      [
        "tracking",
        [
          "letterSpacing"
        ]
      ]
    ], {
      supportsNegativeValues: true
    }),
    textOpacity: s("textOpacity", [
      [
        "text-opacity",
        [
          "--tw-text-opacity"
        ]
      ]
    ]),
    textDecorationThickness: s("textDecorationThickness", [
      [
        "decoration",
        [
          "text-decoration-thickness"
        ]
      ]
    ], {
      type: [
        "length",
        "percentage"
      ]
    }),
    textUnderlineOffset: s("textUnderlineOffset", [
      [
        "underline-offset",
        [
          "text-underline-offset"
        ]
      ]
    ], {
      type: [
        "length",
        "percentage",
        "any"
      ]
    }),
    opacity: s("opacity", [
      [
        "opacity",
        [
          "opacity"
        ]
      ]
    ]),
    outlineWidth: s("outlineWidth", [
      [
        "outline",
        [
          "outline-width"
        ]
      ]
    ], {
      type: [
        "length",
        "number",
        "percentage"
      ]
    }),
    outlineOffset: s("outlineOffset", [
      [
        "outline-offset",
        [
          "outline-offset"
        ]
      ]
    ], {
      type: [
        "length",
        "number",
        "percentage",
        "any"
      ],
      supportsNegativeValues: true
    }),
    ringOffsetWidth: s("ringOffsetWidth", [
      [
        "ring-offset",
        [
          "--tw-ring-offset-width"
        ]
      ]
    ], {
      type: "length"
    }),
    transitionDelay: s("transitionDelay", [
      [
        "delay",
        [
          "transitionDelay"
        ]
      ]
    ]),
    transitionDuration: s("transitionDuration", [
      [
        "duration",
        [
          "transitionDuration"
        ]
      ]
    ], {
      filterDefault: true
    }),
    transitionTimingFunction: s("transitionTimingFunction", [
      [
        "ease",
        [
          "transitionTimingFunction"
        ]
      ]
    ], {
      filterDefault: true
    }),
    willChange: s("willChange", [
      [
        "will-change",
        [
          "will-change"
        ]
      ]
    ]),
    content: s("content", [
      [
        "content",
        [
          "--tw-content",
          [
            "content",
            "var(--tw-content)"
          ]
        ]
      ]
    ])
  });
  var lt = /* @__PURE__ */ new Map([
    [
      "{",
      "}"
    ],
    [
      "[",
      "]"
    ],
    [
      "(",
      ")"
    ]
  ]), ot = new Map(Array.from(lt.entries()).map(([e3, t3]) => [
    t3,
    e3
  ])), dr = /* @__PURE__ */ new Set([
    '"',
    "'",
    "`"
  ]);
  function ae(e3) {
    let t3 = [], r3 = false;
    for (let n3 = 0; n3 < e3.length; n3++) {
      let a3 = e3[n3];
      if (a3 === ":" && !r3 && t3.length === 0) return false;
      if (dr.has(a3) && e3[n3 - 1] !== "\\" && (r3 = !r3), !r3 && e3[n3 - 1] !== "\\") {
        if (lt.has(a3)) t3.push(a3);
        else if (ot.has(a3)) {
          let o3 = ot.get(a3);
          if (t3.length <= 0 || t3.pop() !== o3) return false;
        }
      }
    }
    return !(t3.length > 0);
  }
  var ke = Symbol();
  function fr(e3) {
    let t3 = [], r3 = "", n3 = 0;
    for (let a3 = 0; a3 < e3.length; a3++) {
      let o3 = e3[a3];
      if (o3 === "\\") r3 += "\\" + e3[++a3];
      else if (o3 === "{") ++n3, t3.push(r3.trim()), r3 = "";
      else if (o3 === "}") {
        if (--n3 < 0) throw new Error("Your { and } are unbalanced.");
        t3.push(r3.trim()), r3 = "";
      } else r3 += o3;
    }
    return r3.length > 0 && t3.push(r3.trim()), t3 = t3.filter((a3) => a3 !== ""), t3;
  }
  function st(e3) {
    return e3.startsWith("@") || e3.includes("&");
  }
  function dt(e3) {
    e3 = e3.replace(/\n+/g, "").replace(/\s{1,}/g, " ").trim();
    let t3 = fr(e3).map((r3) => {
      if (!r3.startsWith("@")) return ({ format: o3 }) => o3(r3);
      let [, n3, a3] = /@(\S*)( .+|[({].*)?/g.exec(r3);
      return ({ wrap: o3 }) => o3(F$8.atRule({
        name: n3,
        params: (a3 == null ? void 0 : a3.trim()) ?? ""
      }));
    }).reverse();
    return (r3) => {
      for (let n3 of t3) n3(r3);
    };
  }
  function ct(e3, t3) {
    let r3 = Pu().astSync(e3);
    return r3.each((n3) => {
      n3.nodes.some((o3) => o3.type === "combinator") && (n3.nodes = [
        Pu.pseudo({
          value: ":is",
          nodes: [
            n3.clone()
          ]
        })
      ]), re(n3);
    }), `${t3} ${r3.toString()}`;
  }
  var pr = Pu((e3) => e3.first.filter(({ type: t3 }) => t3 === "class").pop().value);
  function ut(e3) {
    return pr.transformSync(e3);
  }
  function* mr(e3) {
    let t3 = 1 / 0;
    for (; t3 >= 0; ) {
      let r3, n3 = false;
      if (t3 === 1 / 0 && e3.endsWith("]")) {
        let i3 = e3.indexOf("[");
        e3[i3 - 1] === "-" ? r3 = i3 - 1 : e3[i3 - 1] === "/" ? (r3 = i3 - 1, n3 = true) : r3 = -1;
      } else t3 === 1 / 0 && e3.includes("/") ? (r3 = e3.lastIndexOf("/"), n3 = true) : r3 = e3.lastIndexOf("-", t3);
      if (r3 < 0) break;
      let a3 = e3.slice(0, r3), o3 = e3.slice(n3 ? r3 : r3 + 1);
      t3 = r3 - 1, !(a3 === "" || o3 === "/") && (yield [
        a3,
        o3
      ]);
    }
  }
  function gr(e3, t3) {
    if (e3.length === 0 || t3.tailwindConfig.prefix === "") return e3;
    for (let r3 of e3) {
      let [n3] = r3;
      if (n3.options.respectPrefix) {
        let a3 = F$8.root({
          nodes: [
            r3[1].clone()
          ]
        }), o3 = r3[1].raws.tailwind.classCandidate;
        a3.walkRules((i3) => {
          let l3 = o3.startsWith("-");
          i3.selector = Y(t3.tailwindConfig.prefix, i3.selector, l3);
        }), r3[1] = a3.nodes[0];
      }
    }
    return e3;
  }
  function hr(e3, t3) {
    if (e3.length === 0) return e3;
    let r3 = [];
    function n3(a3) {
      return a3.parent && a3.parent.type === "atrule" && a3.parent.name === "keyframes";
    }
    for (let [a3, o3] of e3) {
      let i3 = F$8.root({
        nodes: [
          o3.clone()
        ]
      });
      i3.walkRules((l3) => {
        if (n3(l3)) return;
        let d3 = Pu().astSync(l3.selector);
        d3.each((u3) => ye(u3, t3)), Be(d3, (u3) => u3 === t3 ? `!${u3}` : u3), l3.selector = d3.toString(), l3.walkDecls((u3) => u3.important = true);
      }), r3.push([
        {
          ...a3,
          important: true
        },
        i3.nodes[0]
      ]);
    }
    return r3;
  }
  function br(e3, t3, r3) {
    var _a;
    if (t3.length === 0) return t3;
    let n3 = {
      modifier: null,
      value: pe
    };
    {
      let [a3, ...o3] = O(e3, "/");
      if (o3.length > 1 && (a3 = a3 + "/" + o3.slice(0, -1).join("/"), o3 = o3.slice(-1)), o3.length && !r3.variantMap.has(e3) && (e3 = a3, n3.modifier = o3[0], !z(r3.tailwindConfig, "generalizedModifiers"))) return [];
    }
    if (e3.endsWith("]") && !e3.startsWith("[")) {
      let a3 = /(.)(-?)\[(.*)\]/g.exec(e3);
      if (a3) {
        let [, o3, i3, l3] = a3;
        if (o3 === "@" && i3 === "-") return [];
        if (o3 !== "@" && i3 === "") return [];
        e3 = e3.replace(`${i3}[${l3}]`, ""), n3.value = l3;
      }
    }
    if (Ce(e3) && !r3.variantMap.has(e3)) {
      let a3 = r3.offsets.recordVariant(e3), o3 = j(e3.slice(1, -1)), i3 = O(o3, ",");
      if (i3.length > 1) return [];
      if (!i3.every(st)) return [];
      let l3 = i3.map((d3, u3) => [
        r3.offsets.applyParallelOffset(a3, u3),
        dt(d3.trim())
      ]);
      r3.variantMap.set(e3, l3);
    }
    if (r3.variantMap.has(e3)) {
      let a3 = Ce(e3), o3 = ((_a = r3.variantOptions.get(e3)) == null ? void 0 : _a[ke]) ?? {}, i3 = r3.variantMap.get(e3).slice(), l3 = [], d3 = !(a3 || o3.respectPrefix === false);
      for (let [u3, f3] of t3) {
        if (u3.layer === "user") continue;
        let g3 = F$8.root({
          nodes: [
            f3.clone()
          ]
        });
        for (let [c3, h3, y3] of i3) {
          let x3 = function() {
            m3.raws.neededBackup || (m3.raws.neededBackup = true, m3.walkRules((b3) => b3.raws.originalSelector = b3.selector));
          }, C3 = function(b3) {
            return x3(), m3.each((k3) => {
              k3.type === "rule" && (k3.selectors = k3.selectors.map((D3) => b3({
                get className() {
                  return ut(D3);
                },
                selector: D3
              })));
            }), m3;
          }, m3 = (y3 ?? g3).clone(), w3 = [], $3 = h3({
            get container() {
              return x3(), m3;
            },
            separator: r3.tailwindConfig.separator,
            modifySelectors: C3,
            wrap(b3) {
              let k3 = m3.nodes;
              m3.removeAll(), b3.append(k3), m3.append(b3);
            },
            format(b3) {
              w3.push({
                format: b3,
                respectPrefix: d3
              });
            },
            args: n3
          });
          if (Array.isArray($3)) {
            for (let [b3, k3] of $3.entries()) i3.push([
              r3.offsets.applyParallelOffset(c3, b3),
              k3,
              m3.clone()
            ]);
            continue;
          }
          if (typeof $3 == "string" && w3.push({
            format: $3,
            respectPrefix: d3
          }), $3 === null) continue;
          m3.raws.neededBackup && (delete m3.raws.neededBackup, m3.walkRules((b3) => {
            let k3 = b3.raws.originalSelector;
            if (!k3 || (delete b3.raws.originalSelector, k3 === b3.selector)) return;
            let D3 = b3.selector, gt2 = Pu((ht2) => {
              ht2.walkClasses((Oe2) => {
                Oe2.value = `${e3}${r3.tailwindConfig.separator}${Oe2.value}`;
              });
            }).processSync(k3);
            w3.push({
              format: D3.replace(gt2, "&"),
              respectPrefix: d3
            }), b3.selector = k3;
          })), m3.nodes[0].raws.tailwind = {
            ...m3.nodes[0].raws.tailwind,
            parentLayer: u3.layer
          };
          let E3 = [
            {
              ...u3,
              sort: r3.offsets.applyVariantOffset(u3.sort, c3, Object.assign(n3, r3.variantOptions.get(e3))),
              collectedFormats: (u3.collectedFormats ?? []).concat(w3)
            },
            m3.nodes[0]
          ];
          l3.push(E3);
        }
      }
      return l3;
    }
    return [];
  }
  function Se(e3, t3, r3 = {}) {
    return !I(e3) && !Array.isArray(e3) ? [
      [
        e3
      ],
      r3
    ] : Array.isArray(e3) ? Se(e3[0], t3, e3[1]) : (t3.has(e3) || t3.set(e3, G(e3)), [
      t3.get(e3),
      r3
    ]);
  }
  var yr = /^[a-z_-]/;
  function wr(e3) {
    return yr.test(e3);
  }
  function vr(e3) {
    if (!e3.includes("://")) return false;
    try {
      let t3 = new URL(e3);
      return t3.scheme !== "" && t3.host !== "";
    } catch {
      return false;
    }
  }
  function pt(e3) {
    let t3 = true;
    return e3.walkDecls((r3) => {
      if (!mt(r3.prop, r3.value)) return t3 = false, false;
    }), t3;
  }
  function mt(e3, t3) {
    if (vr(`${e3}:${t3}`)) return false;
    try {
      return F$8.parse(`a{${e3}:${t3}}`).toResult(), true;
    } catch {
      return false;
    }
  }
  function xr(e3, t3) {
    let [, r3, n3] = e3.match(/^\[([a-zA-Z0-9-_]+):(\S+)\]$/) ?? [];
    if (n3 === void 0 || !wr(r3) || !ae(n3)) return null;
    let a3 = j(n3, {
      property: r3
    });
    return mt(r3, a3) ? [
      [
        {
          sort: t3.offsets.arbitraryProperty(e3),
          layer: "utilities",
          options: {
            respectImportant: true
          }
        },
        () => ({
          [Ze(e3)]: {
            [r3]: a3
          }
        })
      ]
    ] : null;
  }
  function* kr(e3, t3) {
    t3.candidateRuleMap.has(e3) && (yield [
      t3.candidateRuleMap.get(e3),
      "DEFAULT"
    ]), yield* function* (l3) {
      l3 !== null && (yield [
        l3,
        "DEFAULT"
      ]);
    }(xr(e3, t3));
    let r3 = e3, n3 = false, a3 = t3.tailwindConfig.prefix, o3 = a3.length, i3 = r3.startsWith(a3) || r3.startsWith(`-${a3}`);
    r3[o3] === "-" && i3 && (n3 = true, r3 = a3 + r3.slice(o3 + 1)), n3 && t3.candidateRuleMap.has(r3) && (yield [
      t3.candidateRuleMap.get(r3),
      "-DEFAULT"
    ]);
    for (let [l3, d3] of mr(r3)) t3.candidateRuleMap.has(l3) && (yield [
      t3.candidateRuleMap.get(l3),
      n3 ? `-${d3}` : d3
    ]);
  }
  function Sr(e3, t3) {
    return e3 === te ? [
      te
    ] : O(e3, t3);
  }
  function* Cr(e3, t3) {
    var _a;
    for (let r3 of e3) r3[1].raws.tailwind = {
      ...r3[1].raws.tailwind,
      classCandidate: t3,
      preserveSource: ((_a = r3[0].options) == null ? void 0 : _a.preserveSource) ?? false
    }, yield r3;
  }
  function* Ar(e3, t3) {
    var _a;
    let r3 = t3.tailwindConfig.separator, [n3, ...a3] = Sr(e3, r3).reverse(), o3 = false;
    n3.startsWith("!") && (o3 = true, n3 = n3.slice(1));
    for (let i3 of kr(n3, t3)) {
      let l3 = [], d3 = /* @__PURE__ */ new Map(), [u3, f3] = i3, g3 = u3.length === 1;
      for (let [c3, h3] of u3) {
        let y3 = [];
        if (typeof h3 == "function") for (let m3 of [].concat(h3(f3, {
          isOnlyPlugin: g3
        }))) {
          let [w3, x3] = Se(m3, t3.postCssNodeCache);
          for (let C3 of w3) y3.push([
            {
              ...c3,
              options: {
                ...c3.options,
                ...x3
              }
            },
            C3
          ]);
        }
        else if (f3 === "DEFAULT" || f3 === "-DEFAULT") {
          let m3 = h3, [w3, x3] = Se(m3, t3.postCssNodeCache);
          for (let C3 of w3) y3.push([
            {
              ...c3,
              options: {
                ...c3.options,
                ...x3
              }
            },
            C3
          ]);
        }
        if (y3.length > 0) {
          let m3 = Array.from(Xe(((_a = c3.options) == null ? void 0 : _a.types) ?? [], f3, c3.options ?? {}, t3.tailwindConfig)).map(([w3, x3]) => x3);
          m3.length > 0 && d3.set(y3, m3), l3.push(y3);
        }
      }
      if (Ce(f3)) {
        if (l3.length > 1) {
          let y3 = function(w3) {
            return w3.length === 1 ? w3[0] : w3.find((x3) => {
              let C3 = d3.get(x3);
              return x3.some(([{ options: $3 }, E3]) => pt(E3) ? $3.types.some(({ type: b3, preferOnConflict: k3 }) => C3.includes(b3) && k3) : false);
            });
          }, [c3, h3] = l3.reduce((w3, x3) => (x3.some(([{ options: $3 }]) => $3.types.some(({ type: E3 }) => E3 === "any")) ? w3[0].push(x3) : w3[1].push(x3), w3), [
            [],
            []
          ]), m3 = y3(h3) ?? y3(c3);
          if (m3) l3 = [
            m3
          ];
          else {
            let w3 = l3.map((C3) => /* @__PURE__ */ new Set([
              ...d3.get(C3) ?? []
            ]));
            for (let C3 of w3) for (let $3 of C3) {
              let E3 = false;
              for (let b3 of w3) C3 !== b3 && b3.has($3) && (b3.delete($3), E3 = true);
              E3 && C3.delete($3);
            }
            let x3 = [];
            for (let [C3, $3] of w3.entries()) for (let E3 of $3) {
              let b3 = l3[C3].map(([, k3]) => k3).flat().map((k3) => k3.toString().split(`
`).slice(1, -1).map((D3) => D3.trim()).map((D3) => `      ${D3}`).join(`
`)).join(`

`);
              x3.push(`  Use \`${e3.replace("[", `[${E3}:`)}\` for \`${b3.trim()}\``);
              break;
            }
            Q.warn([
              `The class \`${e3}\` is ambiguous and matches multiple utilities.`,
              ...x3,
              `If this is content and not a class, replace it with \`${e3.replace("[", "&lsqb;").replace("]", "&rsqb;")}\` to silence this warning.`
            ]);
            continue;
          }
        }
        l3 = l3.map((c3) => c3.filter((h3) => pt(h3[1])));
      }
      l3 = l3.flat(), l3 = Array.from(Cr(l3, n3)), l3 = gr(l3, t3), o3 && (l3 = hr(l3, n3));
      for (let c3 of a3) l3 = br(c3, l3, t3);
      for (let c3 of l3) c3[1].raws.tailwind = {
        ...c3[1].raws.tailwind,
        candidate: e3
      }, c3 = Or(c3, {
        context: t3,
        candidate: e3
      }), c3 !== null && (yield c3);
    }
  }
  function Or(e3, { context: t3, candidate: r3 }) {
    if (!e3[0].collectedFormats) return e3;
    let n3 = true, a3;
    try {
      a3 = ne(e3[0].collectedFormats, {
        context: t3,
        candidate: r3
      });
    } catch {
      return null;
    }
    let o3 = F$8.root({
      nodes: [
        e3[1].clone()
      ]
    });
    return o3.walkRules((i3) => {
      if (!ie(i3)) try {
        let l3 = we(i3.selector, a3, {
          candidate: r3,
          context: t3
        });
        if (l3 === null) {
          i3.remove();
          return;
        }
        i3.selector = l3;
      } catch {
        return n3 = false, false;
      }
    }), !n3 || o3.nodes.length === 0 ? null : (e3[1] = o3.nodes[0], e3);
  }
  function ie(e3) {
    return e3.parent && e3.parent.type === "atrule" && e3.parent.name === "keyframes";
  }
  function $r(e3) {
    if (e3 === true) return (t3) => {
      ie(t3) || t3.walkDecls((r3) => {
        r3.parent.type === "rule" && !ie(r3.parent) && (r3.important = true);
      });
    };
    if (typeof e3 == "string") return (t3) => {
      ie(t3) || (t3.selectors = t3.selectors.map((r3) => ct(r3, e3)));
    };
  }
  function cr(e3, t3, r3 = false) {
    let n3 = [], a3 = $r(t3.tailwindConfig.important);
    for (let o3 of e3) {
      if (t3.notClassCache.has(o3)) continue;
      if (t3.candidateRuleCache.has(o3)) {
        n3 = n3.concat(Array.from(t3.candidateRuleCache.get(o3)));
        continue;
      }
      let i3 = Array.from(Ar(o3, t3));
      if (i3.length === 0) {
        t3.notClassCache.add(o3);
        continue;
      }
      t3.classCache.set(o3, i3);
      let l3 = t3.candidateRuleCache.get(o3) ?? /* @__PURE__ */ new Set();
      t3.candidateRuleCache.set(o3, l3);
      for (let d3 of i3) {
        let [{ sort: u3, options: f3 }, g3] = d3;
        if (f3.respectImportant && a3) {
          let h3 = F$8.root({
            nodes: [
              g3.clone()
            ]
          });
          h3.walkRules(a3), g3 = h3.nodes[0];
        }
        let c3 = [
          u3,
          r3 ? g3.clone() : g3
        ];
        l3.add(c3), t3.ruleCache.add(c3), n3.push(c3);
      }
    }
    return n3;
  }
  function Ce(e3) {
    return e3.startsWith("[") && e3.endsWith("]");
  }
  let classLists = [];
  const channel = new BroadcastChannel("windpress");
  const vfsContainer = document.querySelector('script#windpress\\:vfs[type="text/plain"]');
  if (vfsContainer) {
    initListener();
    const vfsObserver = new MutationObserver(async () => {
      await preloadItems();
    });
    vfsObserver.observe(vfsContainer, {
      characterData: true,
      subtree: true
    });
  }
  async function preloadItems() {
    const volume = decodeVFSContainer(vfsContainer.textContent);
    const resolvedConfig = await resolveConfig(volume);
    const textDocument = getTextDocument(`<div class=""></div>`);
    const state = stateFromConfig(resolvedConfig);
    const position2 = {
      character: 12,
      line: 0
    };
    const results = (await In$1(state, textDocument, position2)).items.map((item) => {
      return {
        value: item.label,
        color: typeof item.documentation === "string" ? item.documentation : null,
        isVariant: item.data._type === "variant"
      };
    });
    classLists = results;
    channel.postMessage({
      source: "windpress/autocomplete",
      target: "any",
      task: `windpress.code-editor.saved.done`
    });
  }
  await preloadItems();
  function initListener() {
    channel.addEventListener("message", async (e3) => {
      const data = e3.data;
      const source = "windpress/dashboard";
      const target = "windpress/observer";
      const task = "windpress.code-editor.saved";
      if (data.source === source && data.target === target && data.task === task) {
        await preloadItems();
      }
    });
  }
  async function searchClassList(query) {
    if (query === "") {
      return classLists;
    }
    let segment = query.split(":");
    let prefix2 = segment.slice(0, -1).join(":");
    let q3 = segment.pop();
    let importantModifier = "";
    if (q3.startsWith("!")) {
      q3 = q3.slice(1);
      importantModifier = "!";
    }
    let opacityModifier = false;
    if (q3.includes("/")) {
      let [_q, opacity] = q3.split("/");
      if (opacity === "") {
        q3 = _q;
        opacityModifier = opacity;
      } else if (isNaN(opacity) || opacity < 0 || opacity > 100) {
        q3 = [
          _q,
          opacity
        ].join("/");
      } else {
        q3 = _q;
        opacityModifier = parseInt(opacity);
      }
    }
    let filteredClassList = classLists.filter((classList) => classList.value.includes(q3));
    if (opacityModifier !== false) {
      let tempFilteredClassList = [];
      const loopIncrement = opacityModifier === "" ? 5 : 1;
      const loopStart = opacityModifier === "" || opacityModifier > 9 ? 0 : Math.floor((opacityModifier * 10 + 1) / 10) * 10;
      const loopEnd = opacityModifier === "" || opacityModifier > 9 ? 100 : Math.ceil((opacityModifier * 10 + 1) / 10) * 10;
      filteredClassList.forEach((classList) => {
        for (let i3 = loopStart; i3 <= loopEnd; i3 += loopIncrement) {
          tempFilteredClassList.push({
            ...classList,
            value: classList.value + "/" + i3
          });
        }
      });
      filteredClassList = tempFilteredClassList;
    }
    const fuse = new Fuse(filteredClassList, {
      keys: [
        "value"
      ],
      threshold: 0.4
    });
    return fuse.search(q3).map(({ item }) => {
      return {
        value: [
          prefix2,
          (importantModifier ? "!" : "") + item.value
        ].filter(Boolean).join(":"),
        color: item.color
      };
    });
  }
  async function classnameToCss(input) {
    let classes = input.split(/\s+/).filter((x3) => x3 !== "" && x3 !== "|");
    const volume = decodeVFSContainer(vfsContainer.textContent);
    const resolvedConfig = await resolveConfig(volume);
    const context = Rn(resolvedConfig);
    let css = classes.map((className) => generate(className, context)).filter((x3) => x3 !== null).map((value) => addPixelEquivalentsToValue(value, 16));
    return Array.isArray(css) ? css.join(" ") : css;
  }
  function generate(className, context) {
    if (className === null) return null;
    let { root, rules } = generateRules([
      className
    ], context);
    if (rules.length === 0) {
      return null;
    }
    return stringifyRoot(root);
  }
  function generateRules(classNames, context, filter = () => true) {
    let rules = cr(new Set(classNames), context).sort(([a3], [z3]) => bigSign(a3 - z3));
    let root = postcss.root({
      nodes: rules.map(([, rule]) => rule)
    });
    Dt$1(context)(root);
    let actualRules = [];
    root.walkRules((subRule) => {
      if (filter(subRule)) {
        actualRules.push(subRule);
      }
    });
    return {
      root,
      rules: actualRules
    };
  }
  function stringifyRoot(root) {
    let clone = root.clone();
    clone.walkAtRules("defaults", (node2) => {
      node2.remove();
    });
    return clone.toString().replace(/([^;{}\s])(\n\s*})/g, (_match, before, after) => `${before};${after}`);
  }
  function prefixCandidate(context, selector) {
    const prefix2 = context.tailwindConfig.prefix;
    return typeof prefix2 === "function" ? prefix2(selector) : prefix2 + selector;
  }
  function getClassOrderPolyfill(classes, context) {
    var _a;
    const parasiteUtilities = /* @__PURE__ */ new Set([
      prefixCandidate(context, "group"),
      prefixCandidate(context, "peer")
    ]);
    const classNamesWithOrder = [];
    for (const className of classes) {
      let order = ((_a = cr(/* @__PURE__ */ new Set([
        className
      ]), context).sort(([a3], [z3]) => bigSign(z3 - a3))[0]) == null ? void 0 : _a[0]) ?? null;
      if (order === null && parasiteUtilities.has(className)) {
        order = context.layerOrder.components;
      }
      classNamesWithOrder.push([
        className,
        order
      ]);
    }
    return classNamesWithOrder;
  }
  async function classSorter(classes) {
    const volume = decodeVFSContainer(vfsContainer.textContent);
    const parts = classes.split(/\s+/).filter((x3) => x3 !== "" && x3 !== "|");
    const unknownClassNames = [];
    const resolvedConfig = await resolveConfig(volume);
    const context = Rn(resolvedConfig);
    const knownClassNamesWithOrder = context.getClassOrder ? context.getClassOrder(parts) : getClassOrderPolyfill(parts, context);
    const knownClassNames = knownClassNamesWithOrder.sort(([, a3], [, z3]) => {
      if (a3 === z3) return 0;
      if (a3 === null) return -1;
      if (z3 === null) return 1;
      return bigSign(a3 - z3);
    }).map(([className]) => className);
    return [
      ...unknownClassNames,
      ...knownClassNames
    ].join(" ");
  }
  set(window, "windpress.module.classSorter.sort", async (input) => classSorter(input));
  set(window, "windpress.module.classnameToCss.generate", async (input) => classnameToCss(input));
  set(window, "windpress.module.autocomplete.query", (q3) => searchClassList(q3));
});
