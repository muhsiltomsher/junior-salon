import { P as Primitive, O as useForwardProps, t as tv, v as _sfc_main$3, W as _sfc_main$4, r as _appConfig, __tla as __tla_0 } from "../assets/dashboard-B6ltDXPX.js";
import { d as defineComponent, f as computed, D as createBlock, E as openBlock, G as withCtx, H as renderSlot, A as mergeProps, u as unref, _ as normalizeProps, $ as guardReactiveProps, a4 as useSlots, a5 as createBaseVNode, U as createElementBlock, O as createCommentVNode, a2 as normalizeClass, F as Fragment, a1 as toDisplayString } from "./runtime-core.esm-bundler-LUlud-H8.min.js";
import { r as reactivePick } from "./index-B5VrHBO0.min.js";
let _sfc_main;
let __tla = Promise.all([
  (() => {
    try {
      return __tla_0;
    } catch {
    }
  })()
]).then(async () => {
  var _a;
  const _sfc_main$2 = defineComponent({
    __name: "BaseSeparator",
    props: {
      orientation: {
        default: "horizontal"
      },
      decorative: {
        type: Boolean
      },
      asChild: {
        type: Boolean
      },
      as: {}
    },
    setup(__props) {
      const props = __props;
      const ORIENTATIONS = [
        "horizontal",
        "vertical"
      ];
      function isValidOrientation(orientation) {
        return ORIENTATIONS.includes(orientation);
      }
      const computedOrientation = computed(() => isValidOrientation(props.orientation) ? props.orientation : "horizontal");
      const ariaOrientation = computed(() => computedOrientation.value === "vertical" ? props.orientation : void 0);
      const semanticProps = computed(() => props.decorative ? {
        role: "none"
      } : {
        "aria-orientation": ariaOrientation.value,
        "role": "separator"
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(unref(Primitive), mergeProps({
          as: _ctx.as,
          "as-child": _ctx.asChild,
          "data-orientation": computedOrientation.value
        }, semanticProps.value), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, [
          "as",
          "as-child",
          "data-orientation"
        ]);
      };
    }
  });
  const _sfc_main$1 = defineComponent({
    __name: "Separator",
    props: {
      orientation: {
        default: "horizontal"
      },
      decorative: {
        type: Boolean
      },
      asChild: {
        type: Boolean
      },
      as: {}
    },
    setup(__props) {
      const props = __props;
      return (_ctx, _cache) => {
        return openBlock(), createBlock(_sfc_main$2, normalizeProps(guardReactiveProps(props)), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16);
      };
    }
  });
  const theme = {
    "slots": {
      "root": "flex items-center align-center text-center",
      "border": "",
      "container": "font-medium text-(--ui-text) flex",
      "icon": "shrink-0 size-5",
      "avatar": "shrink-0",
      "avatarSize": "2xs",
      "label": "text-sm"
    },
    "variants": {
      "color": {
        "primary": {
          "border": "border-(--ui-primary)"
        },
        "secondary": {
          "border": "border-(--ui-secondary)"
        },
        "success": {
          "border": "border-(--ui-success)"
        },
        "info": {
          "border": "border-(--ui-info)"
        },
        "warning": {
          "border": "border-(--ui-warning)"
        },
        "error": {
          "border": "border-(--ui-error)"
        },
        "neutral": {
          "border": "border-(--ui-border)"
        }
      },
      "orientation": {
        "horizontal": {
          "root": "w-full flex-row",
          "border": "w-full",
          "container": "mx-3 whitespace-nowrap"
        },
        "vertical": {
          "root": "h-full flex-col",
          "border": "h-full",
          "container": "my-2"
        }
      },
      "size": {
        "xs": "",
        "sm": "",
        "md": "",
        "lg": "",
        "xl": ""
      },
      "type": {
        "solid": {
          "border": "border-solid"
        },
        "dashed": {
          "border": "border-dashed"
        },
        "dotted": {
          "border": "border-dotted"
        }
      }
    },
    "compoundVariants": [
      {
        "orientation": "horizontal",
        "size": "xs",
        "class": {
          "border": "border-t"
        }
      },
      {
        "orientation": "horizontal",
        "size": "sm",
        "class": {
          "border": "border-t-[2px]"
        }
      },
      {
        "orientation": "horizontal",
        "size": "md",
        "class": {
          "border": "border-t-[3px]"
        }
      },
      {
        "orientation": "horizontal",
        "size": "lg",
        "class": {
          "border": "border-t-[4px]"
        }
      },
      {
        "orientation": "horizontal",
        "size": "xl",
        "class": {
          "border": "border-t-[5px]"
        }
      },
      {
        "orientation": "vertical",
        "size": "xs",
        "class": {
          "border": "border-s"
        }
      },
      {
        "orientation": "vertical",
        "size": "sm",
        "class": {
          "border": "border-s-[2px]"
        }
      },
      {
        "orientation": "vertical",
        "size": "md",
        "class": {
          "border": "border-s-[3px]"
        }
      },
      {
        "orientation": "vertical",
        "size": "lg",
        "class": {
          "border": "border-s-[4px]"
        }
      },
      {
        "orientation": "vertical",
        "size": "xl",
        "class": {
          "border": "border-s-[5px]"
        }
      }
    ],
    "defaultVariants": {
      "color": "neutral",
      "size": "xs",
      "type": "solid"
    }
  };
  const appConfigSeparator = _appConfig;
  const separator = tv({
    extend: tv(theme),
    ...((_a = appConfigSeparator.ui) == null ? void 0 : _a.separator) || {}
  });
  _sfc_main = defineComponent({
    __name: "Separator",
    props: {
      as: {},
      label: {},
      icon: {},
      avatar: {},
      color: {},
      size: {},
      type: {},
      orientation: {
        default: "horizontal"
      },
      class: {},
      ui: {},
      decorative: {
        type: Boolean
      }
    },
    setup(__props) {
      const props = __props;
      const slots = useSlots();
      const rootProps = useForwardProps(reactivePick(props, "as", "decorative", "orientation"));
      const ui = computed(() => separator({
        color: props.color,
        orientation: props.orientation,
        size: props.size,
        type: props.type
      }));
      return (_ctx, _cache) => {
        var _a2;
        return openBlock(), createBlock(unref(_sfc_main$1), mergeProps(unref(rootProps), {
          class: ui.value.root({
            class: [
              props.class,
              (_a2 = props.ui) == null ? void 0 : _a2.root
            ]
          })
        }), {
          default: withCtx(() => {
            var _a3, _b, _c;
            return [
              createBaseVNode("div", {
                class: normalizeClass(ui.value.border({
                  class: (_a3 = props.ui) == null ? void 0 : _a3.border
                }))
              }, null, 2),
              _ctx.label || _ctx.icon || _ctx.avatar || !!slots.default ? (openBlock(), createElementBlock(Fragment, {
                key: 0
              }, [
                createBaseVNode("div", {
                  class: normalizeClass(ui.value.container({
                    class: (_b = props.ui) == null ? void 0 : _b.container
                  }))
                }, [
                  renderSlot(_ctx.$slots, "default", {}, () => {
                    var _a4, _b2, _c2, _d;
                    return [
                      _ctx.label ? (openBlock(), createElementBlock("span", {
                        key: 0,
                        class: normalizeClass(ui.value.label({
                          class: (_a4 = props.ui) == null ? void 0 : _a4.label
                        }))
                      }, toDisplayString(_ctx.label), 3)) : _ctx.icon ? (openBlock(), createBlock(_sfc_main$3, {
                        key: 1,
                        name: _ctx.icon,
                        class: normalizeClass(ui.value.icon({
                          class: (_b2 = props.ui) == null ? void 0 : _b2.icon
                        }))
                      }, null, 8, [
                        "name",
                        "class"
                      ])) : _ctx.avatar ? (openBlock(), createBlock(_sfc_main$4, mergeProps({
                        key: 2,
                        size: ((_c2 = props.ui) == null ? void 0 : _c2.avatarSize) || ui.value.avatarSize()
                      }, _ctx.avatar, {
                        class: ui.value.avatar({
                          class: (_d = props.ui) == null ? void 0 : _d.avatar
                        })
                      }), null, 16, [
                        "size",
                        "class"
                      ])) : createCommentVNode("", true)
                    ];
                  })
                ], 2),
                createBaseVNode("div", {
                  class: normalizeClass(ui.value.border({
                    class: (_c = props.ui) == null ? void 0 : _c.border
                  }))
                }, null, 2)
              ], 64)) : createCommentVNode("", true)
            ];
          }),
          _: 3
        }, 16, [
          "class"
        ]);
      };
    }
  });
});
export {
  _sfc_main as _,
  __tla
};
