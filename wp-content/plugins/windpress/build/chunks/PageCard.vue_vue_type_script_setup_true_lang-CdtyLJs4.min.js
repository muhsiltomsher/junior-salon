var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
import { h as useVModel, Y as useForwardExpose, ab as useFormControl, c as createContext, ac as _sfc_main$5, P as Primitive, O as useForwardProps, ad as useFormField, t as tv, v as _sfc_main$6, R as useAppConfig, r as _appConfig, ae as formLoadingInjectionKey, af as formOptionsInjectionKey, ag as formBusInjectionKey, ah as formInputsInjectionKey, G as tv$1, ai as getSlotChildrenText, U as _sfc_main$8, __tla as __tla_0 } from "../assets/dashboard-B6ltDXPX.js";
import { w as withKeys, a as withModifiers } from "./runtime-dom.esm-bundler-5tPCrDgD.min.js";
import { d as defineComponent, L as toRefs, f as computed, D as createBlock, E as openBlock, G as withCtx, H as renderSlot, O as createCommentVNode, u as unref, A as mergeProps, a7 as mergeModels, a4 as useSlots, a8 as useModel, M as useId, a5 as createBaseVNode, U as createElementBlock, N as createVNode, a2 as normalizeClass, F as Fragment, a0 as createTextVNode, a1 as toDisplayString, r as ref, x as onMounted, v as onUnmounted, n as nextTick, a as inject, p as provide, I as readonly, a3 as resolveDynamicComponent, j as watch, R as normalizeStyle } from "./runtime-core.esm-bundler-LUlud-H8.min.js";
import { a as _sfc_main$7, __tla as __tla_1 } from "./FormField.vue_vue_type_script_setup_true_lang-DehRuCbs.min.js";
import { r as reactivePick, l as useEventBus, p as pausableFilter, m as useMouseInElement } from "./index-B5VrHBO0.min.js";
let _sfc_main$1, _sfc_main, _sfc_main$2;
let __tla = Promise.all([
  (() => {
    try {
      return __tla_0;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_1;
    } catch {
    }
  })()
]).then(async () => {
  var _a, _b, _c;
  const [injectSwitchRootContext, provideSwitchRootContext] = createContext("SwitchRoot");
  const _sfc_main$4 = defineComponent({
    __name: "SwitchRoot",
    props: {
      defaultValue: {
        type: Boolean
      },
      modelValue: {
        type: [
          Boolean,
          null
        ],
        default: void 0
      },
      disabled: {
        type: Boolean
      },
      id: {},
      value: {
        default: "on"
      },
      asChild: {
        type: Boolean
      },
      as: {
        default: "button"
      },
      name: {},
      required: {
        type: Boolean
      }
    },
    emits: [
      "update:modelValue"
    ],
    setup(__props, { emit: __emit }) {
      const props = __props;
      const emit = __emit;
      const { disabled } = toRefs(props);
      const modelValue = useVModel(props, "modelValue", emit, {
        defaultValue: props.defaultValue,
        passive: props.modelValue === void 0
      });
      function toggleCheck() {
        if (disabled.value) return;
        modelValue.value = !modelValue.value;
      }
      const { forwardRef, currentElement } = useForwardExpose();
      const isFormControl = useFormControl(currentElement);
      const ariaLabel = computed(() => {
        var _a2;
        return props.id && currentElement.value ? (_a2 = document.querySelector(`[for="${props.id}"]`)) == null ? void 0 : _a2.innerText : void 0;
      });
      provideSwitchRootContext({
        modelValue,
        toggleCheck,
        disabled
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(unref(Primitive), mergeProps(_ctx.$attrs, {
          id: _ctx.id,
          ref: unref(forwardRef),
          role: "switch",
          type: _ctx.as === "button" ? "button" : void 0,
          value: _ctx.value,
          "aria-label": _ctx.$attrs["aria-label"] || ariaLabel.value,
          "aria-checked": unref(modelValue),
          "aria-required": _ctx.required,
          "data-state": unref(modelValue) ? "checked" : "unchecked",
          "data-disabled": unref(disabled) ? "" : void 0,
          "as-child": _ctx.asChild,
          as: _ctx.as,
          disabled: unref(disabled),
          onClick: toggleCheck,
          onKeydown: withKeys(withModifiers(toggleCheck, [
            "prevent"
          ]), [
            "enter"
          ])
        }), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default", {
              modelValue: unref(modelValue)
            }),
            unref(isFormControl) && _ctx.name ? (openBlock(), createBlock(unref(_sfc_main$5), {
              key: 0,
              type: "checkbox",
              name: _ctx.name,
              disabled: unref(disabled),
              required: _ctx.required,
              value: _ctx.value,
              checked: !!unref(modelValue)
            }, null, 8, [
              "name",
              "disabled",
              "required",
              "value",
              "checked"
            ])) : createCommentVNode("", true)
          ]),
          _: 3
        }, 16, [
          "id",
          "type",
          "value",
          "aria-label",
          "aria-checked",
          "aria-required",
          "data-state",
          "data-disabled",
          "as-child",
          "as",
          "disabled",
          "onKeydown"
        ]);
      };
    }
  });
  const _sfc_main$3 = defineComponent({
    __name: "SwitchThumb",
    props: {
      asChild: {
        type: Boolean
      },
      as: {
        default: "span"
      }
    },
    setup(__props) {
      const rootContext = injectSwitchRootContext();
      useForwardExpose();
      return (_ctx, _cache) => {
        var _a2;
        return openBlock(), createBlock(unref(Primitive), {
          "data-state": ((_a2 = unref(rootContext).modelValue) == null ? void 0 : _a2.value) ? "checked" : "unchecked",
          "data-disabled": unref(rootContext).disabled.value ? "" : void 0,
          "as-child": _ctx.asChild,
          as: _ctx.as
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, [
          "data-state",
          "data-disabled",
          "as-child",
          "as"
        ]);
      };
    }
  });
  const theme$2 = {
    "slots": {
      "root": "relative flex items-start",
      "base": [
        "inline-flex items-center shrink-0 rounded-full border-2 border-transparent focus-visible:outline-2 focus-visible:outline-offset-2 data-[state=unchecked]:bg-(--ui-bg-accented)",
        "transition-[background] duration-200"
      ],
      "container": "flex items-center",
      "thumb": "group pointer-events-none rounded-full bg-(--ui-bg) shadow-lg ring-0 transition-transform duration-200 data-[state=unchecked]:translate-x-0 data-[state=unchecked]:rtl:-translate-x-0 flex items-center justify-center",
      "icon": [
        "absolute shrink-0 group-data-[state=unchecked]:text-(--ui-text-dimmed) opacity-0 size-10/12",
        "transition-[color,opacity] duration-200"
      ],
      "wrapper": "ms-2",
      "label": "block font-medium text-(--ui-text)",
      "description": "text-(--ui-text-muted)"
    },
    "variants": {
      "color": {
        "primary": {
          "base": "data-[state=checked]:bg-(--ui-primary) focus-visible:outline-(--ui-primary)",
          "icon": "group-data-[state=checked]:text-(--ui-primary)"
        },
        "secondary": {
          "base": "data-[state=checked]:bg-(--ui-secondary) focus-visible:outline-(--ui-secondary)",
          "icon": "group-data-[state=checked]:text-(--ui-secondary)"
        },
        "success": {
          "base": "data-[state=checked]:bg-(--ui-success) focus-visible:outline-(--ui-success)",
          "icon": "group-data-[state=checked]:text-(--ui-success)"
        },
        "info": {
          "base": "data-[state=checked]:bg-(--ui-info) focus-visible:outline-(--ui-info)",
          "icon": "group-data-[state=checked]:text-(--ui-info)"
        },
        "warning": {
          "base": "data-[state=checked]:bg-(--ui-warning) focus-visible:outline-(--ui-warning)",
          "icon": "group-data-[state=checked]:text-(--ui-warning)"
        },
        "error": {
          "base": "data-[state=checked]:bg-(--ui-error) focus-visible:outline-(--ui-error)",
          "icon": "group-data-[state=checked]:text-(--ui-error)"
        },
        "neutral": {
          "base": "data-[state=checked]:bg-(--ui-bg-inverted) focus-visible:outline-(--ui-border-inverted)",
          "icon": "group-data-[state=checked]:text-(--ui-text-highlighted)"
        }
      },
      "size": {
        "xs": {
          "base": "w-7",
          "container": "h-4",
          "thumb": "size-3 data-[state=checked]:translate-x-3 data-[state=checked]:rtl:-translate-x-3",
          "wrapper": "text-xs"
        },
        "sm": {
          "base": "w-8",
          "container": "h-4",
          "thumb": "size-3.5 data-[state=checked]:translate-x-3.5 data-[state=checked]:rtl:-translate-x-3.5",
          "wrapper": "text-xs"
        },
        "md": {
          "base": "w-9",
          "container": "h-5",
          "thumb": "size-4 data-[state=checked]:translate-x-4 data-[state=checked]:rtl:-translate-x-4",
          "wrapper": "text-sm"
        },
        "lg": {
          "base": "w-10",
          "container": "h-5",
          "thumb": "size-4.5 data-[state=checked]:translate-x-4.5 data-[state=checked]:rtl:-translate-x-4.5",
          "wrapper": "text-sm"
        },
        "xl": {
          "base": "w-11",
          "container": "h-6",
          "thumb": "size-5 data-[state=checked]:translate-x-5 data-[state=checked]:rtl:-translate-x-5",
          "wrapper": "text-base"
        }
      },
      "checked": {
        "true": {
          "icon": "group-data-[state=checked]:opacity-100"
        }
      },
      "unchecked": {
        "true": {
          "icon": "group-data-[state=unchecked]:opacity-100"
        }
      },
      "loading": {
        "true": {
          "icon": "animate-spin"
        }
      },
      "required": {
        "true": {
          "label": "after:content-['*'] after:ms-0.5 after:text-(--ui-error)"
        }
      },
      "disabled": {
        "true": {
          "base": "cursor-not-allowed opacity-75",
          "label": "cursor-not-allowed opacity-75",
          "description": "cursor-not-allowed opacity-75"
        }
      }
    },
    "defaultVariants": {
      "color": "primary",
      "size": "md"
    }
  };
  const appConfigSwitch = _appConfig;
  const switchTv = tv({
    extend: tv(theme$2),
    ...((_a = appConfigSwitch.ui) == null ? void 0 : _a.switch) || {}
  });
  _sfc_main$2 = defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "Switch",
    props: mergeModels({
      as: {},
      color: {},
      size: {},
      loading: {
        type: Boolean
      },
      loadingIcon: {},
      checkedIcon: {},
      uncheckedIcon: {},
      label: {},
      description: {},
      class: {},
      ui: {},
      disabled: {
        type: Boolean
      },
      id: {},
      name: {},
      required: {
        type: Boolean
      },
      value: {},
      defaultValue: {
        type: Boolean
      }
    }, {
      "modelValue": {
        type: Boolean,
        ...{
          default: void 0
        }
      },
      "modelModifiers": {}
    }),
    emits: mergeModels([
      "change"
    ], [
      "update:modelValue"
    ]),
    setup(__props, { emit: __emit }) {
      const props = __props;
      const slots = useSlots();
      const emits = __emit;
      const modelValue = useModel(__props, "modelValue");
      const appConfig = useAppConfig();
      const rootProps = useForwardProps(reactivePick(props, "required", "value", "defaultValue"));
      const { id: _id, emitFormChange, emitFormInput, size, color, name, disabled, ariaAttrs } = useFormField(props);
      const id = _id.value ?? useId();
      const ui = computed(() => switchTv({
        size: size.value,
        color: color.value,
        required: props.required,
        loading: props.loading,
        disabled: disabled.value || props.loading
      }));
      function onUpdate(value) {
        const event = new Event("change", {
          target: {
            value
          }
        });
        emits("change", event);
        emitFormChange();
        emitFormInput();
      }
      return (_ctx, _cache) => {
        var _a2;
        return openBlock(), createBlock(unref(Primitive), {
          as: _ctx.as,
          class: normalizeClass(ui.value.root({
            class: [
              props.class,
              (_a2 = props.ui) == null ? void 0 : _a2.root
            ]
          }))
        }, {
          default: withCtx(() => {
            var _a3, _b2, _c2, _d, _e;
            return [
              createBaseVNode("div", {
                class: normalizeClass(ui.value.container({
                  class: (_a3 = props.ui) == null ? void 0 : _a3.container
                }))
              }, [
                createVNode(unref(_sfc_main$4), mergeProps({
                  id: unref(id)
                }, {
                  ...unref(rootProps),
                  ..._ctx.$attrs,
                  ...unref(ariaAttrs)
                }, {
                  modelValue: modelValue.value,
                  "onUpdate:modelValue": [
                    _cache[0] || (_cache[0] = ($event) => modelValue.value = $event),
                    onUpdate
                  ],
                  name: unref(name),
                  disabled: unref(disabled) || _ctx.loading,
                  class: ui.value.base({
                    class: (_b2 = props.ui) == null ? void 0 : _b2.base
                  })
                }), {
                  default: withCtx(() => {
                    var _a4;
                    return [
                      createVNode(unref(_sfc_main$3), {
                        class: normalizeClass(ui.value.thumb({
                          class: (_a4 = props.ui) == null ? void 0 : _a4.thumb
                        }))
                      }, {
                        default: withCtx(() => {
                          var _a5, _b3, _c3;
                          return [
                            _ctx.loading ? (openBlock(), createBlock(_sfc_main$6, {
                              key: 0,
                              name: _ctx.loadingIcon || unref(appConfig).ui.icons.loading,
                              class: normalizeClass(ui.value.icon({
                                class: (_a5 = props.ui) == null ? void 0 : _a5.icon,
                                checked: true,
                                unchecked: true
                              }))
                            }, null, 8, [
                              "name",
                              "class"
                            ])) : (openBlock(), createElementBlock(Fragment, {
                              key: 1
                            }, [
                              _ctx.checkedIcon ? (openBlock(), createBlock(_sfc_main$6, {
                                key: 0,
                                name: _ctx.checkedIcon,
                                class: normalizeClass(ui.value.icon({
                                  class: (_b3 = props.ui) == null ? void 0 : _b3.icon,
                                  checked: true
                                }))
                              }, null, 8, [
                                "name",
                                "class"
                              ])) : createCommentVNode("", true),
                              _ctx.uncheckedIcon ? (openBlock(), createBlock(_sfc_main$6, {
                                key: 1,
                                name: _ctx.uncheckedIcon,
                                class: normalizeClass(ui.value.icon({
                                  class: (_c3 = props.ui) == null ? void 0 : _c3.icon,
                                  unchecked: true
                                }))
                              }, null, 8, [
                                "name",
                                "class"
                              ])) : createCommentVNode("", true)
                            ], 64))
                          ];
                        }),
                        _: 1
                      }, 8, [
                        "class"
                      ])
                    ];
                  }),
                  _: 1
                }, 16, [
                  "id",
                  "modelValue",
                  "name",
                  "disabled",
                  "class"
                ])
              ], 2),
              _ctx.label || !!slots.label || (_ctx.description || !!slots.description) ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(ui.value.wrapper({
                  class: (_c2 = props.ui) == null ? void 0 : _c2.wrapper
                }))
              }, [
                _ctx.label || !!slots.label ? (openBlock(), createBlock(unref(_sfc_main$7), {
                  key: 0,
                  for: unref(id),
                  class: normalizeClass(ui.value.label({
                    class: (_d = props.ui) == null ? void 0 : _d.label
                  }))
                }, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "label", {
                      label: _ctx.label
                    }, () => [
                      createTextVNode(toDisplayString(_ctx.label), 1)
                    ])
                  ]),
                  _: 3
                }, 8, [
                  "for",
                  "class"
                ])) : createCommentVNode("", true),
                _ctx.description || !!slots.description ? (openBlock(), createElementBlock("p", {
                  key: 1,
                  class: normalizeClass(ui.value.description({
                    class: (_e = props.ui) == null ? void 0 : _e.description
                  }))
                }, [
                  renderSlot(_ctx.$slots, "description", {
                    description: _ctx.description
                  }, () => [
                    createTextVNode(toDisplayString(_ctx.description), 1)
                  ])
                ], 2)) : createCommentVNode("", true)
              ], 2)) : createCommentVNode("", true)
            ];
          }),
          _: 3
        }, 8, [
          "as",
          "class"
        ]);
      };
    }
  });
  function isYupSchema(schema) {
    return schema.validate && schema.__isYupSchema__;
  }
  function isYupError(error) {
    return error.inner !== void 0;
  }
  function isSuperStructSchema(schema) {
    return "schema" in schema && typeof schema.coercer === "function" && typeof schema.validator === "function" && typeof schema.refiner === "function";
  }
  function isJoiSchema(schema) {
    return schema.validateAsync !== void 0 && schema.id !== void 0;
  }
  function isJoiError(error) {
    return error.isJoi === true;
  }
  function isStandardSchema(schema) {
    return "~standard" in schema;
  }
  async function validateStandardSchema(state, schema) {
    var _a2;
    const result = await schema["~standard"].validate(state);
    if (result.issues) {
      return {
        errors: ((_a2 = result.issues) == null ? void 0 : _a2.map((issue) => {
          var _a3;
          return {
            name: ((_a3 = issue.path) == null ? void 0 : _a3.map((item) => typeof item === "object" ? item.key : item).join(".")) || "",
            message: issue.message
          };
        })) || [],
        result: null
      };
    }
    return {
      errors: null,
      result: result.value
    };
  }
  async function validateYupSchema(state, schema) {
    try {
      const result = await schema.validate(state, {
        abortEarly: false
      });
      return {
        errors: null,
        result
      };
    } catch (error) {
      if (isYupError(error)) {
        const errors = error.inner.map((issue) => ({
          name: issue.path ?? "",
          message: issue.message
        }));
        return {
          errors,
          result: null
        };
      } else {
        throw error;
      }
    }
  }
  async function validateSuperstructSchema(state, schema) {
    const [err, result] = schema.validate(state);
    if (err) {
      const errors = err.failures().map((error) => ({
        message: error.message,
        name: error.path.join(".")
      }));
      return {
        errors,
        result: null
      };
    }
    return {
      errors: null,
      result
    };
  }
  async function validateJoiSchema(state, schema) {
    try {
      const result = await schema.validateAsync(state, {
        abortEarly: false
      });
      return {
        errors: null,
        result
      };
    } catch (error) {
      if (isJoiError(error)) {
        const errors = error.details.map((issue) => ({
          name: issue.path.join("."),
          message: issue.message
        }));
        return {
          errors,
          result: null
        };
      } else {
        throw error;
      }
    }
  }
  function validateSchema(state, schema) {
    if (isStandardSchema(schema)) {
      return validateStandardSchema(state, schema);
    } else if (isJoiSchema(schema)) {
      return validateJoiSchema(state, schema);
    } else if (isYupSchema(schema)) {
      return validateYupSchema(state, schema);
    } else if (isSuperStructSchema(schema)) {
      return validateSuperstructSchema(state, schema);
    } else {
      throw new Error("Form validation failed: Unsupported form schema");
    }
  }
  class FormValidationException extends Error {
    constructor(formId, errors, childErrors) {
      super("Form validation exception");
      __publicField(this, "formId");
      __publicField(this, "errors");
      __publicField(this, "children");
      this.formId = formId;
      this.errors = errors;
      this.children = childErrors;
      Object.setPrototypeOf(this, FormValidationException.prototype);
    }
  }
  const theme$1 = {
    "base": ""
  };
  const appConfigForm = _appConfig;
  const form = tv({
    extend: tv(theme$1),
    ...((_b = appConfigForm.ui) == null ? void 0 : _b.form) || {}
  });
  _sfc_main$1 = defineComponent({
    __name: "Form",
    props: {
      id: {},
      schema: {},
      state: {},
      validate: {},
      validateOn: {
        default() {
          return [
            "input",
            "blur",
            "change"
          ];
        }
      },
      disabled: {
        type: Boolean
      },
      validateOnInputDelay: {
        default: 300
      },
      transform: {
        type: Boolean,
        default: true
      },
      class: {},
      onSubmit: {}
    },
    emits: [
      "submit",
      "error"
    ],
    setup(__props, { expose: __expose, emit: __emit }) {
      const props = __props;
      const emits = __emit;
      const formId = props.id ?? useId();
      const bus = useEventBus(`form-${formId}`);
      const parentBus = inject(formBusInjectionKey, void 0);
      provide(formBusInjectionKey, bus);
      const nestedForms = ref(/* @__PURE__ */ new Map());
      onMounted(async () => {
        bus.on(async (event) => {
          var _a2;
          if (event.type === "attach") {
            nestedForms.value.set(event.formId, {
              validate: event.validate
            });
          } else if (event.type === "detach") {
            nestedForms.value.delete(event.formId);
          } else if (((_a2 = props.validateOn) == null ? void 0 : _a2.includes(event.type)) && !loading.value) {
            if (event.type !== "input") {
              await _validate({
                name: event.name,
                silent: true,
                nested: false
              });
            } else if (event.eager || blurredFields.has(event.name)) {
              await _validate({
                name: event.name,
                silent: true,
                nested: false
              });
            }
          }
          if (event.type === "blur") {
            blurredFields.add(event.name);
          }
          if (event.type === "change" || event.type === "input" || event.type === "blur" || event.type === "focus") {
            touchedFields.add(event.name);
          }
          if (event.type === "change" || event.type === "input") {
            dirtyFields.add(event.name);
          }
        });
      });
      onUnmounted(() => {
        bus.reset();
      });
      onMounted(async () => {
        if (parentBus) {
          await nextTick();
          parentBus.emit({
            type: "attach",
            validate: _validate,
            formId
          });
        }
      });
      onUnmounted(() => {
        if (parentBus) {
          parentBus.emit({
            type: "detach",
            formId
          });
        }
      });
      const errors = ref([]);
      provide("form-errors", errors);
      const inputs = ref({});
      provide(formInputsInjectionKey, inputs);
      const dirtyFields = /* @__PURE__ */ new Set();
      const touchedFields = /* @__PURE__ */ new Set();
      const blurredFields = /* @__PURE__ */ new Set();
      function resolveErrorIds(errs) {
        return errs.map((err) => {
          var _a2;
          return {
            ...err,
            id: (err == null ? void 0 : err.name) ? (_a2 = inputs.value[err.name]) == null ? void 0 : _a2.id : void 0
          };
        });
      }
      const transformedState = ref(null);
      async function getErrors() {
        let errs = props.validate ? await props.validate(props.state) ?? [] : [];
        if (props.schema) {
          const { errors: errors2, result } = await validateSchema(props.state, props.schema);
          if (errors2) {
            errs = errs.concat(errors2);
          } else {
            transformedState.value = result;
          }
        }
        return resolveErrorIds(errs);
      }
      async function _validate(opts = {
        silent: false,
        nested: true,
        transform: false
      }) {
        const names = opts.name && !Array.isArray(opts.name) ? [
          opts.name
        ] : opts.name;
        const nestedValidatePromises = !names && opts.nested ? Array.from(nestedForms.value.values()).map(({ validate }) => validate(opts).then(() => void 0).catch((error) => {
          if (!(error instanceof FormValidationException)) {
            throw error;
          }
          return error;
        })) : [];
        if (names) {
          const otherErrors = errors.value.filter((error) => !names.some((name) => {
            var _a2, _b2, _c2;
            const pattern = (_b2 = (_a2 = inputs.value) == null ? void 0 : _a2[name]) == null ? void 0 : _b2.pattern;
            return name === error.name || pattern && ((_c2 = error.name) == null ? void 0 : _c2.match(pattern));
          }));
          const pathErrors = (await getErrors()).filter((error) => names.some((name) => {
            var _a2, _b2, _c2;
            const pattern = (_b2 = (_a2 = inputs.value) == null ? void 0 : _a2[name]) == null ? void 0 : _b2.pattern;
            return name === error.name || pattern && ((_c2 = error.name) == null ? void 0 : _c2.match(pattern));
          }));
          errors.value = otherErrors.concat(pathErrors);
        } else {
          errors.value = await getErrors();
        }
        const childErrors = (await Promise.all(nestedValidatePromises)).filter((val) => val !== void 0);
        if (errors.value.length + childErrors.length > 0) {
          if (opts.silent) return false;
          throw new FormValidationException(formId, errors.value, childErrors);
        }
        if (opts.transform) {
          Object.assign(props.state, transformedState.value);
        }
        return props.state;
      }
      const loading = ref(false);
      provide(formLoadingInjectionKey, readonly(loading));
      async function onSubmitWrapper(payload) {
        var _a2;
        loading.value = true;
        const event = payload;
        try {
          event.data = await _validate({
            nested: true,
            transform: props.transform
          });
          await ((_a2 = props.onSubmit) == null ? void 0 : _a2.call(props, event));
          dirtyFields.clear();
        } catch (error) {
          if (!(error instanceof FormValidationException)) {
            throw error;
          }
          const errorEvent = {
            ...event,
            errors: error.errors,
            children: error.children
          };
          emits("error", errorEvent);
        } finally {
          loading.value = false;
        }
      }
      const disabled = computed(() => props.disabled || loading.value);
      provide(formOptionsInjectionKey, computed(() => ({
        disabled: disabled.value,
        validateOnInputDelay: props.validateOnInputDelay
      })));
      __expose({
        validate: _validate,
        errors,
        setErrors(errs, name) {
          if (name) {
            errors.value = errors.value.filter((error) => error.name !== name).concat(resolveErrorIds(errs));
          } else {
            errors.value = resolveErrorIds(errs);
          }
        },
        async submit() {
          await onSubmitWrapper(new Event("submit"));
        },
        getErrors(name) {
          if (name) {
            return errors.value.filter((err) => err.name === name);
          }
          return errors.value;
        },
        clear(name) {
          if (name) {
            errors.value = errors.value.filter((err) => err.name !== name);
          } else {
            errors.value = [];
          }
        },
        disabled,
        dirty: computed(() => !!dirtyFields.size),
        dirtyFields: readonly(dirtyFields),
        blurredFields: readonly(blurredFields),
        touchedFields: readonly(touchedFields)
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(resolveDynamicComponent(unref(parentBus) ? "div" : "form"), {
          id: unref(formId),
          class: normalizeClass(unref(form)({
            class: props.class
          })),
          onSubmit: withModifiers(onSubmitWrapper, [
            "prevent"
          ])
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default", {
              errors: errors.value
            })
          ]),
          _: 3
        }, 40, [
          "id",
          "class"
        ]);
      };
    }
  });
  const theme = {
    "slots": {
      "root": "relative flex rounded-[calc(var(--ui-radius)*2)]",
      "spotlight": "absolute inset-0 rounded-[inherit] pointer-events-none bg-(--ui-bg)/90",
      "container": "relative flex flex-col flex-1 lg:grid gap-x-8 gap-y-4 p-4 sm:p-6",
      "wrapper": "",
      "header": "mb-4",
      "body": "",
      "footer": "mt-4",
      "leading": "inline-flex items-center justify-center mb-2.5",
      "leadingIcon": "size-5 shrink-0 text-(--ui-primary)",
      "title": "text-base text-pretty font-semibold text-(--ui-text-highlighted)",
      "description": "text-[15px] text-pretty"
    },
    "variants": {
      "orientation": {
        "horizontal": {
          "container": "lg:grid-cols-2 lg:items-center"
        },
        "vertical": {
          "container": ""
        }
      },
      "reverse": {
        "true": {
          "wrapper": "lg:order-last"
        }
      },
      "variant": {
        "solid": {
          "root": "bg-(--ui-bg-inverted) text-(--ui-bg)",
          "title": "text-(--ui-bg)",
          "description": "text-(--ui-text-dimmed)"
        },
        "outline": {
          "root": "bg-(--ui-bg) ring ring-(--ui-border)",
          "description": "text-(--ui-text-muted)"
        },
        "soft": {
          "root": "bg-(--ui-bg-elevated)/50",
          "description": "text-(--ui-text-toned)"
        },
        "subtle": {
          "root": "bg-(--ui-bg-elevated)/50 ring ring-(--ui-border)",
          "description": "text-(--ui-text-toned)"
        },
        "ghost": {
          "description": "text-(--ui-text-muted)"
        },
        "naked": {
          "container": "p-0 sm:p-0",
          "description": "text-(--ui-text-muted)"
        }
      },
      "to": {
        "true": {
          "root": [
            "transition"
          ]
        }
      },
      "title": {
        "true": {
          "description": "mt-1"
        }
      },
      "highlight": {
        "true": {
          "root": "ring-2"
        }
      },
      "highlightColor": {
        "primary": "",
        "secondary": "",
        "success": "",
        "info": "",
        "warning": "",
        "error": "",
        "neutral": ""
      },
      "spotlight": {
        "true": {
          "root": "[--spotlight-size:400px] before:absolute before:-inset-px before:pointer-events-none before:rounded-[inherit] before:bg-[radial-gradient(var(--spotlight-size)_var(--spotlight-size)_at_calc(var(--spotlight-x,0px))_calc(var(--spotlight-y,0px)),var(--spotlight-color),transparent_70%)]"
        }
      },
      "spotlightColor": {
        "primary": "",
        "secondary": "",
        "success": "",
        "info": "",
        "warning": "",
        "error": "",
        "neutral": ""
      }
    },
    "compoundVariants": [
      {
        "variant": "solid",
        "to": true,
        "class": {
          "root": "hover:bg-(--ui-bg-inverted)/90"
        }
      },
      {
        "variant": "outline",
        "to": true,
        "class": {
          "root": "hover:bg-(--ui-bg-elevated)/50"
        }
      },
      {
        "variant": "soft",
        "to": true,
        "class": {
          "root": "hover:bg-(--ui-bg-elevated)"
        }
      },
      {
        "variant": "subtle",
        "to": true,
        "class": {
          "root": "hover:bg-(--ui-bg-elevated)"
        }
      },
      {
        "variant": "subtle",
        "to": true,
        "highlight": false,
        "class": {
          "root": "hover:ring-(--ui-border-accented)"
        }
      },
      {
        "variant": "ghost",
        "to": true,
        "class": {
          "root": "hover:bg-(--ui-bg-elevated)/50"
        }
      },
      {
        "highlightColor": "primary",
        "highlight": true,
        "class": {
          "root": "ring-(--ui-primary)"
        }
      },
      {
        "highlightColor": "secondary",
        "highlight": true,
        "class": {
          "root": "ring-(--ui-secondary)"
        }
      },
      {
        "highlightColor": "success",
        "highlight": true,
        "class": {
          "root": "ring-(--ui-success)"
        }
      },
      {
        "highlightColor": "info",
        "highlight": true,
        "class": {
          "root": "ring-(--ui-info)"
        }
      },
      {
        "highlightColor": "warning",
        "highlight": true,
        "class": {
          "root": "ring-(--ui-warning)"
        }
      },
      {
        "highlightColor": "error",
        "highlight": true,
        "class": {
          "root": "ring-(--ui-error)"
        }
      },
      {
        "highlightColor": "neutral",
        "highlight": true,
        "class": {
          "root": "ring-(--ui-border-inverted)"
        }
      },
      {
        "spotlightColor": "primary",
        "spotlight": true,
        "class": {
          "root": "[--spotlight-color:var(--ui-primary)]"
        }
      },
      {
        "spotlightColor": "secondary",
        "spotlight": true,
        "class": {
          "root": "[--spotlight-color:var(--ui-secondary)]"
        }
      },
      {
        "spotlightColor": "success",
        "spotlight": true,
        "class": {
          "root": "[--spotlight-color:var(--ui-success)]"
        }
      },
      {
        "spotlightColor": "info",
        "spotlight": true,
        "class": {
          "root": "[--spotlight-color:var(--ui-info)]"
        }
      },
      {
        "spotlightColor": "warning",
        "spotlight": true,
        "class": {
          "root": "[--spotlight-color:var(--ui-warning)]"
        }
      },
      {
        "spotlightColor": "error",
        "spotlight": true,
        "class": {
          "root": "[--spotlight-color:var(--ui-error)]"
        }
      },
      {
        "spotlightColor": "neutral",
        "spotlight": true,
        "class": {
          "root": "[--spotlight-color:var(--ui-bg-inverted)]"
        }
      }
    ],
    "defaultVariants": {
      "variant": "outline",
      "highlightColor": "primary",
      "spotlightColor": "primary"
    }
  };
  const appConfigPageCard = _appConfig;
  const pageCard = tv$1({
    extend: tv$1(theme),
    ...((_c = appConfigPageCard.uiPro) == null ? void 0 : _c.pageCard) || {}
  });
  _sfc_main = defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "PageCard",
    props: {
      as: {},
      icon: {},
      title: {},
      description: {},
      orientation: {
        default: "vertical"
      },
      reverse: {
        type: Boolean
      },
      highlight: {
        type: Boolean
      },
      highlightColor: {},
      spotlight: {
        type: Boolean
      },
      spotlightColor: {},
      variant: {},
      to: {},
      target: {},
      onClick: {},
      class: {},
      ui: {}
    },
    setup(__props) {
      const props = __props;
      const slots = useSlots();
      const cardRef = ref();
      const motionControl = pausableFilter();
      const { elementX, elementY } = useMouseInElement(cardRef, {
        eventFilter: motionControl.eventFilter
      });
      const spotlight = computed(() => props.spotlight && (elementX.value > 0 || elementY.value > 0));
      watch(() => props.spotlight, (value) => {
        if (value) {
          motionControl.resume();
        } else {
          motionControl.pause();
        }
      }, {
        immediate: true
      });
      const ui = computed(() => pageCard({
        orientation: props.orientation,
        reverse: props.reverse,
        variant: props.variant,
        to: !!props.to || !!props.onClick,
        title: !!props.title || !!slots.title,
        highlight: props.highlight,
        highlightColor: props.highlightColor,
        spotlight: spotlight.value,
        spotlightColor: props.spotlightColor
      }));
      const ariaLabel = computed(() => (props.title || slots.title && getSlotChildrenText(slots.title()) || "Card link").trim());
      return (_ctx, _cache) => {
        var _a2;
        const _component_UIcon = _sfc_main$6;
        const _component_ULink = _sfc_main$8;
        return openBlock(), createBlock(unref(Primitive), {
          ref_key: "cardRef",
          ref: cardRef,
          as: _ctx.as,
          "data-orientation": _ctx.orientation,
          class: normalizeClass(ui.value.root({
            class: [
              props.class,
              (_a2 = props.ui) == null ? void 0 : _a2.root
            ]
          })),
          style: normalizeStyle(spotlight.value && {
            "--spotlight-x": `${unref(elementX)}px`,
            "--spotlight-y": `${unref(elementY)}px`
          }),
          onClick: _ctx.onClick
        }, {
          default: withCtx(() => {
            var _a3, _b2, _c2, _d, _e, _f, _g;
            return [
              props.spotlight ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(ui.value.spotlight({
                  class: (_a3 = props.ui) == null ? void 0 : _a3.spotlight
                }))
              }, null, 2)) : createCommentVNode("", true),
              createBaseVNode("div", {
                class: normalizeClass(ui.value.container({
                  class: (_b2 = props.ui) == null ? void 0 : _b2.container
                }))
              }, [
                !!slots.header || !!slots.body || (_ctx.icon || !!slots.leading) || (_ctx.title || !!slots.title) || (_ctx.description || !!slots.description) || !!slots.footer ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(ui.value.wrapper({
                    class: (_c2 = props.ui) == null ? void 0 : _c2.wrapper
                  }))
                }, [
                  !!slots.header ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    class: normalizeClass(ui.value.header({
                      class: (_d = props.ui) == null ? void 0 : _d.header
                    }))
                  }, [
                    renderSlot(_ctx.$slots, "header")
                  ], 2)) : createCommentVNode("", true),
                  _ctx.icon || !!slots.leading ? (openBlock(), createElementBlock("div", {
                    key: 1,
                    class: normalizeClass(ui.value.leading({
                      class: (_e = props.ui) == null ? void 0 : _e.leading
                    }))
                  }, [
                    renderSlot(_ctx.$slots, "leading", {}, () => {
                      var _a4;
                      return [
                        _ctx.icon ? (openBlock(), createBlock(_component_UIcon, {
                          key: 0,
                          name: _ctx.icon,
                          class: normalizeClass(ui.value.leadingIcon({
                            class: (_a4 = props.ui) == null ? void 0 : _a4.leadingIcon
                          }))
                        }, null, 8, [
                          "name",
                          "class"
                        ])) : createCommentVNode("", true)
                      ];
                    })
                  ], 2)) : createCommentVNode("", true),
                  !!slots.body || (_ctx.title || !!slots.title) || (_ctx.description || !!slots.description) ? (openBlock(), createElementBlock("div", {
                    key: 2,
                    class: normalizeClass(ui.value.body({
                      class: (_f = props.ui) == null ? void 0 : _f.body
                    }))
                  }, [
                    renderSlot(_ctx.$slots, "body", {}, () => {
                      var _a4, _b3;
                      return [
                        _ctx.title || !!slots.title ? (openBlock(), createElementBlock("div", {
                          key: 0,
                          class: normalizeClass(ui.value.title({
                            class: (_a4 = props.ui) == null ? void 0 : _a4.title
                          }))
                        }, [
                          renderSlot(_ctx.$slots, "title", {}, () => [
                            createTextVNode(toDisplayString(_ctx.title), 1)
                          ])
                        ], 2)) : createCommentVNode("", true),
                        _ctx.description || !!slots.description ? (openBlock(), createElementBlock("div", {
                          key: 1,
                          class: normalizeClass(ui.value.description({
                            class: (_b3 = props.ui) == null ? void 0 : _b3.description
                          }))
                        }, [
                          renderSlot(_ctx.$slots, "description", {}, () => [
                            createTextVNode(toDisplayString(_ctx.description), 1)
                          ])
                        ], 2)) : createCommentVNode("", true)
                      ];
                    })
                  ], 2)) : createCommentVNode("", true),
                  !!slots.footer ? (openBlock(), createElementBlock("div", {
                    key: 3,
                    class: normalizeClass(ui.value.footer({
                      class: (_g = props.ui) == null ? void 0 : _g.footer
                    }))
                  }, [
                    renderSlot(_ctx.$slots, "footer")
                  ], 2)) : createCommentVNode("", true)
                ], 2)) : createCommentVNode("", true),
                renderSlot(_ctx.$slots, "default")
              ], 2),
              _ctx.to ? (openBlock(), createBlock(_component_ULink, mergeProps({
                key: 1,
                "aria-label": ariaLabel.value
              }, {
                to: _ctx.to,
                target: _ctx.target,
                ..._ctx.$attrs
              }, {
                class: "focus:outline-none peer",
                tabindex: "-1",
                raw: ""
              }), {
                default: withCtx(() => _cache[0] || (_cache[0] = [
                  createBaseVNode("span", {
                    class: "absolute inset-0",
                    "aria-hidden": "true"
                  }, null, -1)
                ])),
                _: 1
              }, 16, [
                "aria-label"
              ])) : createCommentVNode("", true)
            ];
          }),
          _: 3
        }, 8, [
          "as",
          "data-orientation",
          "class",
          "style",
          "onClick"
        ]);
      };
    }
  });
});
export {
  _sfc_main$1 as _,
  __tla,
  _sfc_main as a,
  _sfc_main$2 as b
};
