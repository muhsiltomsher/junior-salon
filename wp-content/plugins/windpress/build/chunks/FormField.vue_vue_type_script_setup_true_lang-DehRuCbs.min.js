import { Y as useForwardExpose, P as Primitive, t as tv, aj as formFieldInjectionKey, r as _appConfig, ak as inputIdInjectionKey, __tla as __tla_0 } from "../assets/dashboard-B6ltDXPX.js";
import { d as defineComponent, D as createBlock, E as openBlock, G as withCtx, H as renderSlot, A as mergeProps, u as unref, a4 as useSlots, f as computed, a as inject, r as ref, p as provide, a2 as normalizeClass, a5 as createBaseVNode, U as createElementBlock, O as createCommentVNode, N as createVNode, a0 as createTextVNode, a1 as toDisplayString, M as useId } from "./runtime-core.esm-bundler-LUlud-H8.min.js";
let _sfc_main, _sfc_main$1;
let __tla = Promise.all([
  (() => {
    try {
      return __tla_0;
    } catch {
    }
  })()
]).then(async () => {
  var _a;
  _sfc_main$1 = defineComponent({
    __name: "Label",
    props: {
      for: {},
      asChild: {
        type: Boolean
      },
      as: {
        default: "label"
      }
    },
    setup(__props) {
      const props = __props;
      useForwardExpose();
      return (_ctx, _cache) => {
        return openBlock(), createBlock(unref(Primitive), mergeProps(props, {
          onMousedown: _cache[0] || (_cache[0] = (event) => {
            if (!event.defaultPrevented && event.detail > 1) event.preventDefault();
          })
        }), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16);
      };
    }
  });
  const theme = {
    "slots": {
      "root": "",
      "wrapper": "",
      "labelWrapper": "flex content-center items-center justify-between",
      "label": "block font-medium text-(--ui-text)",
      "container": "mt-1 relative",
      "description": "text-(--ui-text-muted)",
      "error": "mt-2 text-(--ui-error)",
      "hint": "text-(--ui-text-muted)",
      "help": "mt-2 text-(--ui-text-muted)"
    },
    "variants": {
      "size": {
        "xs": {
          "root": "text-xs"
        },
        "sm": {
          "root": "text-xs"
        },
        "md": {
          "root": "text-sm"
        },
        "lg": {
          "root": "text-sm"
        },
        "xl": {
          "root": "text-base"
        }
      },
      "required": {
        "true": {
          "label": "after:content-['*'] after:ms-0.5 after:text-(--ui-error)"
        }
      }
    },
    "defaultVariants": {
      "size": "md"
    }
  };
  const _hoisted_1 = [
    "id"
  ];
  const _hoisted_2 = [
    "id"
  ];
  const _hoisted_3 = [
    "id"
  ];
  const appConfigFormField = _appConfig;
  const formField = tv({
    extend: tv(theme),
    ...((_a = appConfigFormField.ui) == null ? void 0 : _a.formField) || {}
  });
  _sfc_main = defineComponent({
    __name: "FormField",
    props: {
      as: {},
      name: {},
      errorPattern: {},
      label: {},
      description: {},
      help: {},
      error: {
        type: [
          String,
          Boolean
        ]
      },
      hint: {},
      size: {},
      required: {
        type: Boolean
      },
      eagerValidation: {
        type: Boolean
      },
      validateOnInputDelay: {},
      class: {},
      ui: {}
    },
    setup(__props) {
      const props = __props;
      const slots = useSlots();
      const ui = computed(() => formField({
        size: props.size,
        required: props.required
      }));
      const formErrors = inject("form-errors", null);
      const error = computed(() => {
        var _a2, _b;
        return props.error || ((_b = (_a2 = formErrors == null ? void 0 : formErrors.value) == null ? void 0 : _a2.find((error2) => error2.name && (error2.name === props.name || props.errorPattern && error2.name.match(props.errorPattern)))) == null ? void 0 : _b.message);
      });
      const id = ref(useId());
      const ariaId = id.value;
      provide(inputIdInjectionKey, id);
      provide(formFieldInjectionKey, computed(() => ({
        error: error.value,
        name: props.name,
        size: props.size,
        eagerValidation: props.eagerValidation,
        validateOnInputDelay: props.validateOnInputDelay,
        errorPattern: props.errorPattern,
        hint: props.hint,
        description: props.description,
        help: props.help,
        ariaId
      })));
      return (_ctx, _cache) => {
        var _a2;
        return openBlock(), createBlock(unref(Primitive), {
          as: _ctx.as,
          class: normalizeClass(ui.value.root({
            class: [
              props.class,
              (_a2 = props.ui) == null ? void 0 : _a2.root
            ]
          }))
        }, {
          default: withCtx(() => {
            var _a3, _b, _c, _d, _e, _f, _g, _h;
            return [
              createBaseVNode("div", {
                class: normalizeClass(ui.value.wrapper({
                  class: (_a3 = props.ui) == null ? void 0 : _a3.wrapper
                }))
              }, [
                _ctx.label || !!slots.label ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(ui.value.labelWrapper({
                    class: (_b = props.ui) == null ? void 0 : _b.labelWrapper
                  }))
                }, [
                  createVNode(unref(_sfc_main$1), {
                    for: id.value,
                    class: normalizeClass(ui.value.label({
                      class: (_c = props.ui) == null ? void 0 : _c.label
                    }))
                  }, {
                    default: withCtx(() => [
                      renderSlot(_ctx.$slots, "label", {
                        label: _ctx.label
                      }, () => [
                        createTextVNode(toDisplayString(_ctx.label), 1)
                      ])
                    ]),
                    _: 3
                  }, 8, [
                    "for",
                    "class"
                  ]),
                  _ctx.hint || !!slots.hint ? (openBlock(), createElementBlock("span", {
                    key: 0,
                    id: `${unref(ariaId)}-hint`,
                    class: normalizeClass(ui.value.hint({
                      class: (_d = props.ui) == null ? void 0 : _d.hint
                    }))
                  }, [
                    renderSlot(_ctx.$slots, "hint", {
                      hint: _ctx.hint
                    }, () => [
                      createTextVNode(toDisplayString(_ctx.hint), 1)
                    ])
                  ], 10, _hoisted_1)) : createCommentVNode("", true)
                ], 2)) : createCommentVNode("", true),
                _ctx.description || !!slots.description ? (openBlock(), createElementBlock("p", {
                  key: 1,
                  id: `${unref(ariaId)}-description`,
                  class: normalizeClass(ui.value.description({
                    class: (_e = props.ui) == null ? void 0 : _e.description
                  }))
                }, [
                  renderSlot(_ctx.$slots, "description", {
                    description: _ctx.description
                  }, () => [
                    createTextVNode(toDisplayString(_ctx.description), 1)
                  ])
                ], 10, _hoisted_2)) : createCommentVNode("", true)
              ], 2),
              createBaseVNode("div", {
                class: normalizeClass([
                  (_ctx.label || !!slots.label || _ctx.description || !!slots.description) && ui.value.container({
                    class: (_f = props.ui) == null ? void 0 : _f.container
                  })
                ])
              }, [
                renderSlot(_ctx.$slots, "default", {
                  error: error.value
                }),
                typeof error.value === "string" && error.value || !!slots.error ? (openBlock(), createElementBlock("p", {
                  key: 0,
                  id: `${unref(ariaId)}-error`,
                  class: normalizeClass(ui.value.error({
                    class: (_g = props.ui) == null ? void 0 : _g.error
                  }))
                }, [
                  renderSlot(_ctx.$slots, "error", {
                    error: error.value
                  }, () => [
                    createTextVNode(toDisplayString(error.value), 1)
                  ])
                ], 10, _hoisted_3)) : _ctx.help || !!slots.help ? (openBlock(), createElementBlock("p", {
                  key: 1,
                  class: normalizeClass(ui.value.help({
                    class: (_h = props.ui) == null ? void 0 : _h.help
                  }))
                }, [
                  renderSlot(_ctx.$slots, "help", {
                    help: _ctx.help
                  }, () => [
                    createTextVNode(toDisplayString(_ctx.help), 1)
                  ])
                ], 2)) : createCommentVNode("", true)
              ], 2)
            ];
          }),
          _: 3
        }, 8, [
          "as",
          "class"
        ]);
      };
    }
  });
});
export {
  _sfc_main as _,
  __tla,
  _sfc_main$1 as a
};
